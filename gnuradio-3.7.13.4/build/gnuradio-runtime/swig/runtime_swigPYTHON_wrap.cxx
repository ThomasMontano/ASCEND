/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_DIRECTORS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      register int i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,				    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,				    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = PyBaseObject_Type.tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Python extensions.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#ifdef __cplusplus

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>


/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swig.
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/* 
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR
#include <map>

namespace Swig {
  class Director;
  SWIGINTERN std::map<void*,Director*>& get_rtdir_map() {
    static std::map<void*,Director*> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void*,Director*>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void*>(ARG))
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void*>(ARG1), ARG2)

#else

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {  

  /* memory handler */
  struct GCItem 
  {
    virtual ~GCItem() {}

    virtual int get_own() const
    {
      return 0;
    }
  };

  struct GCItem_var
  {
    GCItem_var(GCItem *item = 0) : _item(item)
    {
    }

    GCItem_var& operator=(GCItem *item)
    {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() 
    {
      delete _item;
    }
    
    GCItem * operator->() const
    {
      return _item;
    }
    
  private:
    GCItem *_item;
  };
  
  struct GCItem_Object : GCItem
  {
    GCItem_Object(int own) : _own(own)
    {
    }
    
    virtual ~GCItem_Object() 
    {
    }

    int get_own() const
    {
      return _own;
    }
    
  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem
  {
    GCItem_T(Type *ptr) : _ptr(ptr)
    {
    }
    
    virtual ~GCItem_T() 
    {
      delete _ptr;
    }
    
  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem
  {
    GCArray_T(Type *ptr) : _ptr(ptr)
    {
    }
    
    virtual ~GCArray_T() 
    {
      delete[] _ptr;
    }
    
  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char* hdr ="", const char* msg ="") 
      : swig_msg(hdr)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
      if (strlen(msg)) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        PyErr_SetString(error, getMessage());
      }
      SWIG_PYTHON_THREAD_END_BLOCK; 
    }

    const char *getMessage() const
    { 
      return swig_msg.c_str(); 
    }

    static void raise(PyObject *error, const char *msg) 
    {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) 
    {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* unknown exception handler  */
  class UnknownExceptionHandler 
  {
#ifdef SWIG_DIRECTOR_UEH
    static void handler()  {
      try {
        throw;
      } catch (DirectorException& e) {
        std::cerr << "SWIG Director exception caught:" << std::endl
                  << e.getMessage() << std::endl;
      } catch (std::exception& e) {
        std::cerr << "std::exception caught: "<< e.what() << std::endl;
      } catch (...) {
        std::cerr << "Unknown exception caught." << std::endl;
      }
      
      std::cerr << std::endl
                << "Python interpreter traceback:" << std::endl;
      PyErr_Print();
      std::cerr << std::endl;
      
      std::cerr << "This exception was caught by the SWIG unexpected exception handler." << std::endl
                << "Try using %feature(\"director:except\") to avoid reaching this point." << std::endl
                << std::endl
                << "Exception is being re-thrown, program will likely abort/terminate." << std::endl;
      throw;
    }

  public:
    
    std::unexpected_handler old;
    UnknownExceptionHandler(std::unexpected_handler nh = handler)
    {
      old = std::set_unexpected(nh);
    }

    ~UnknownExceptionHandler()
    {
      std::set_unexpected(old);
    }
#endif
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public Swig::DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char* msg="") 
      : Swig::DirectorException(error, "SWIG director type mismatch", msg)
    {
    }

    DirectorTypeMismatchException(const char* msg="") 
      : Swig::DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg)
    {
    }

    static void raise(PyObject *error, const char *msg)
    {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg)
    {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public Swig::DirectorException {
  public:
    DirectorMethodException(const char* msg = "") 
      : DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg)
    {
    }    

    static void raise(const char *msg)
    {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public Swig::DirectorException
  {
  public:
    DirectorPureVirtualException(const char* msg = "") 
      : DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg)
    { 
    }

    static void raise(const char *msg) 
    {
      throw DirectorPureVirtualException(msg);
    }
  };


#if defined(SWIG_PYTHON_THREADS)
/*  __THREAD__ is the old macro to activate some thread support */
# if !defined(__THREAD__)
#   define __THREAD__ 1
# endif
#endif

#ifdef __THREAD__
# include "pythread.h"
  class Guard
  {
    PyThread_type_lock & mutex_;
    
  public:
    Guard(PyThread_type_lock & mutex) : mutex_(mutex)
    {
      PyThread_acquire_lock(mutex_, WAIT_LOCK);
    }
    
    ~Guard()
    {
      PyThread_release_lock(mutex_);
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex) 
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject* swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const { 
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
        Py_DECREF(swig_self); 
        SWIG_PYTHON_THREAD_END_BLOCK; 
      }
    }

  public:
    /* wrap a python object, optionally taking ownership */
    Director(PyObject* self) : swig_self(self), swig_disown_flag(false) {
      swig_incref();
    }


    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref(); 
    }


    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const { 
      return swig_self; 
    }

    /* acquire ownership of the wrapped python object (the sense of "disown"
     * is from python) */
    void swig_disown() const { 
      if (!swig_disown_flag) { 
        swig_disown_flag=true;
        swig_incref(); 
      } 
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const { 
      if (swig_disown_flag) {
        Py_INCREF(swig_self); 
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char* /* swig_protected_method_name */) const {
      return true;
    }
    
    virtual void swig_set_inner(const char* /* swig_protected_method_name */, bool /* swig_val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void*, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __THREAD__
    static PyThread_type_lock swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr)  const
    {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }
    
    template <typename Type>
    void swig_acquire_ownership(Type *vptr)  const
    {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const
    {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }
    
    int swig_release_ownership(void *vptr) const
    {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }

    template <typename Type>
    static PyObject* swig_pyobj_disown(PyObject *pyobj, PyObject *SWIGUNUSEDPARM(args))
    {
      SwigPyObject *sobj = (SwigPyObject *)pyobj;
      sobj->own = 0;
      Director *d = SWIG_DIRECTOR_CAST(reinterpret_cast<Type *>(sobj->ptr));
      if (d)
        d->swig_disown();
      return PyWeakref_NewProxy(pyobj, NULL);
    }

  };

#ifdef __THREAD__
  PyThread_type_lock Director::swig_mutex_own = PyThread_allocate_lock();
#endif
}

#endif /* __cplusplus */


#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_allocator_type swig_types[0]
#define SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t swig_types[1]
#define SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t swig_types[2]
#define SWIGTYPE_p_boost__shared_ptrT_gr__block_detail_t swig_types[3]
#define SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t swig_types[4]
#define SWIGTYPE_p_boost__shared_ptrT_gr__block_t swig_types[5]
#define SWIGTYPE_p_boost__shared_ptrT_gr__buffer_reader_t swig_types[6]
#define SWIGTYPE_p_boost__shared_ptrT_gr__buffer_t swig_types[7]
#define SWIGTYPE_p_boost__shared_ptrT_gr__flat_flowgraph_t swig_types[8]
#define SWIGTYPE_p_boost__shared_ptrT_gr__flowgraph_t swig_types[9]
#define SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t swig_types[10]
#define SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t swig_types[11]
#define SWIGTYPE_p_boost__shared_ptrT_gr__message_t swig_types[12]
#define SWIGTYPE_p_boost__shared_ptrT_gr__msg_queue_t swig_types[13]
#define SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t swig_types[14]
#define SWIGTYPE_p_char swig_types[15]
#define SWIGTYPE_p_const_reference swig_types[16]
#define SWIGTYPE_p_difference_type swig_types[17]
#define SWIGTYPE_p_ensure_py_gil_state swig_types[18]
#define SWIGTYPE_p_gr__basic_block swig_types[19]
#define SWIGTYPE_p_gr__block swig_types[20]
#define SWIGTYPE_p_gr__block_detail swig_types[21]
#define SWIGTYPE_p_gr__block_gateway swig_types[22]
#define SWIGTYPE_p_gr__block_gw_message_type swig_types[23]
#define SWIGTYPE_p_gr__buffer swig_types[24]
#define SWIGTYPE_p_gr__buffer_reader swig_types[25]
#define SWIGTYPE_p_gr__endianness_t swig_types[26]
#define SWIGTYPE_p_gr__feval swig_types[27]
#define SWIGTYPE_p_gr__feval_cc swig_types[28]
#define SWIGTYPE_p_gr__feval_dd swig_types[29]
#define SWIGTYPE_p_gr__feval_ll swig_types[30]
#define SWIGTYPE_p_gr__feval_p swig_types[31]
#define SWIGTYPE_p_gr__hier_block2 swig_types[32]
#define SWIGTYPE_p_gr__io_signature swig_types[33]
#define SWIGTYPE_p_gr__logger swig_types[34]
#define SWIGTYPE_p_gr__message swig_types[35]
#define SWIGTYPE_p_gr__msg_handler swig_types[36]
#define SWIGTYPE_p_gr__msg_queue swig_types[37]
#define SWIGTYPE_p_gr__prefs swig_types[38]
#define SWIGTYPE_p_gr__py_feval swig_types[39]
#define SWIGTYPE_p_gr__py_feval_cc swig_types[40]
#define SWIGTYPE_p_gr__py_feval_dd swig_types[41]
#define SWIGTYPE_p_gr__py_feval_ll swig_types[42]
#define SWIGTYPE_p_gr__py_feval_p swig_types[43]
#define SWIGTYPE_p_gr__random swig_types[44]
#define SWIGTYPE_p_gr__rt_status_t swig_types[45]
#define SWIGTYPE_p_gr__sync_block swig_types[46]
#define SWIGTYPE_p_gr__sync_decimator swig_types[47]
#define SWIGTYPE_p_gr__sync_interpolator swig_types[48]
#define SWIGTYPE_p_gr__tag_t swig_types[49]
#define SWIGTYPE_p_gr__tagged_stream_block swig_types[50]
#define SWIGTYPE_p_gr__top_block swig_types[51]
#define SWIGTYPE_p_int swig_types[52]
#define SWIGTYPE_p_long_long swig_types[53]
#define SWIGTYPE_p_mode_t swig_types[54]
#define SWIGTYPE_p_p_PyObject swig_types[55]
#define SWIGTYPE_p_pycallback_objectT_double_t swig_types[56]
#define SWIGTYPE_p_pycallback_objectT_float_t swig_types[57]
#define SWIGTYPE_p_pycallback_objectT_int_t swig_types[58]
#define SWIGTYPE_p_pycallback_objectT_std__complexT_double_t_t swig_types[59]
#define SWIGTYPE_p_pycallback_objectT_std__complexT_float_t_t swig_types[60]
#define SWIGTYPE_p_pycallback_objectT_std__string_t swig_types[61]
#define SWIGTYPE_p_pycallback_objectT_std__vectorT_float_std__allocatorT_float_t_t_t swig_types[62]
#define SWIGTYPE_p_pycallback_objectT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t swig_types[63]
#define SWIGTYPE_p_reference swig_types[64]
#define SWIGTYPE_p_rpcbasic_sptr swig_types[65]
#define SWIGTYPE_p_rpcmanager swig_types[66]
#define SWIGTYPE_p_rpcserver_base swig_types[67]
#define SWIGTYPE_p_rpcserver_booter_aggregator swig_types[68]
#define SWIGTYPE_p_rpcserver_booter_base swig_types[69]
#define SWIGTYPE_p_short swig_types[70]
#define SWIGTYPE_p_signed_char swig_types[71]
#define SWIGTYPE_p_size_type swig_types[72]
#define SWIGTYPE_p_sptr swig_types[73]
#define SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t swig_types[74]
#define SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_gr__block_t_t swig_types[75]
#define SWIGTYPE_p_std__allocatorT_gr__tag_t_t swig_types[76]
#define SWIGTYPE_p_std__allocatorT_size_t_t swig_types[77]
#define SWIGTYPE_p_std__allocatorT_std__complexT_double_t_t swig_types[78]
#define SWIGTYPE_p_std__allocatorT_std__complexT_float_t_t swig_types[79]
#define SWIGTYPE_p_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t swig_types[80]
#define SWIGTYPE_p_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t swig_types[81]
#define SWIGTYPE_p_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t swig_types[82]
#define SWIGTYPE_p_std__allocatorT_void_p_t swig_types[83]
#define SWIGTYPE_p_std__complexT_double_t swig_types[84]
#define SWIGTYPE_p_std__complexT_float_t swig_types[85]
#define SWIGTYPE_p_std__invalid_argument swig_types[86]
#define SWIGTYPE_p_std__string swig_types[87]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t swig_types[88]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t swig_types[89]
#define SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t swig_types[90]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[91]
#define SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t swig_types[92]
#define SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t swig_types[93]
#define SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t swig_types[94]
#define SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t swig_types[95]
#define SWIGTYPE_p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t swig_types[96]
#define SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t swig_types[97]
#define SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t swig_types[98]
#define SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t swig_types[99]
#define SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t swig_types[100]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[101]
#define SWIGTYPE_p_unsigned_char swig_types[102]
#define SWIGTYPE_p_unsigned_int swig_types[103]
#define SWIGTYPE_p_unsigned_long_long swig_types[104]
#define SWIGTYPE_p_unsigned_short swig_types[105]
#define SWIGTYPE_p_value_type swig_types[106]
#define SWIGTYPE_p_void swig_types[107]
static swig_type_info *swig_types[109];
static swig_module_info swig_module = {swig_types, 108, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif
#if (PY_VERSION_HEX <= 0x02020000)
# error "This python version requires swig to be run with the '-nomodern' option"
#endif
#if (PY_VERSION_HEX <= 0x02020000)
# error "This python version requires swig to be run with the '-nomodernargs' option"
#endif

/*-----------------------------------------------
              @(target):= _runtime_swig.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__runtime_swig

#else
#  define SWIG_init    init_runtime_swig

#endif
#define SWIG_name    "_runtime_swig"

#define SWIGVERSION 0x020011 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <string>



#define GR_PYTHON_BLOCKING_CODE(code) {                                 \
    PyThreadState *_save;                                               \
    _save = PyEval_SaveThread();                                        \
    try{code}                                                           \
    catch(...){PyEval_RestoreThread(_save); throw;}                     \
    PyEval_RestoreThread(_save);                                        \
}



#include <stdint.h>		// Use the C99 official header


#include <boost/shared_ptr.hpp>
#include <boost/any.hpp>
#include <complex>
#include <string>
#include <stddef.h>		// size_t
#include <stdint.h>
#include <gnuradio/types.h>


#include <complex> 


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>
#include <stddef.h>


  #include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
#if PY_VERSION_HEX >= 0x03000000
      {
        long v = PyLong_AsLong(obj);
        if (!PyErr_Occurred()) {
          if (v < 0) {
            return SWIG_OverflowError;
          }
        } else {
          PyErr_Clear();
        }
      }
#endif
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  #define SWIG_From_long   PyLong_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <stdexcept>


#include <algorithm>


#include <vector>


#include <utility>


#include <map>
#include <algorithm>
#include <stdexcept>


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if ( j < 0 ) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      if (ii > jj) {
        typename Sequence::const_reverse_iterator sb = self->rbegin();
        typename Sequence::const_reverse_iterator se = self->rbegin();
        std::advance(sb,size-ii-1);
        std::advance(se,size-jj-1);
        typename Sequence::const_reverse_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<-step && it!=se; ++c)
            it++;
        }
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj < ii)
        jj = ii;
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount; ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      if (jj > ii)
        jj = ii;
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount; ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj > ii) {
        typename Sequence::iterator sb = self->begin();
        std::advance(sb,ii);
        if (step == 1) {
          typename Sequence::iterator se = self->begin();
          std::advance(se,jj);
          self->erase(sb,se);
        } else {
          typename Sequence::iterator it = sb;
          size_t delcount = (jj - ii + step - 1) / step;
          while (delcount) {
            it = self->erase(it);
            for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
              it++;
            delcount--;
          }
        }
      }
    } else {
      if (ii > jj) {
        typename Sequence::reverse_iterator sb = self->rbegin();
        std::advance(sb,size-ii-1);
        typename Sequence::reverse_iterator it = sb;
        size_t delcount = (ii - jj - step - 1) / -step;
        while (delcount) {
          it = typename Sequence::reverse_iterator(self->erase((++it).base()));
          for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
            it++;
          delcount--;
        }
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyLong_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}


namespace swig {
  template <> struct traits<size_t > {
    typedef value_category category;
    static const char* type_name() { return"size_t"; }
  };  
  template <>  struct traits_asval<size_t > {   
    typedef size_t value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_size_t (obj, val);
    }
  };
  template <>  struct traits_from<size_t > {
    typedef size_t value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_size_t  (val);
    }
  };
}


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<size_t, std::allocator< size_t > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "size_t" "," "std::allocator< size_t >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_size_t_Sg__iterator(std::vector< size_t > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_size_t_Sg____nonzero__(std::vector< size_t > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_size_t_Sg____bool__(std::vector< size_t > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< size_t >::size_type std_vector_Sl_size_t_Sg____len__(std::vector< size_t > const *self){
      return self->size();
    }
SWIGINTERN std::vector< size_t >::value_type std_vector_Sl_size_t_Sg__pop(std::vector< size_t > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<size_t,std::allocator< size_t > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< size_t,std::allocator< size_t > > *std_vector_Sl_size_t_Sg____getslice__(std::vector< size_t > *self,std::vector< size_t >::difference_type i,std::vector< size_t >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_size_t_Sg____setslice__(std::vector< size_t > *self,std::vector< size_t >::difference_type i,std::vector< size_t >::difference_type j,std::vector< size_t,std::allocator< size_t > > const &v=std::vector< size_t,std::allocator< size_t > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_size_t_Sg____delslice__(std::vector< size_t > *self,std::vector< size_t >::difference_type i,std::vector< size_t >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_size_t_Sg____delitem____SWIG_0(std::vector< size_t > *self,std::vector< size_t >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< size_t,std::allocator< size_t > > *std_vector_Sl_size_t_Sg____getitem____SWIG_0(std::vector< size_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<size_t,std::allocator< size_t > >::difference_type id = i;
      std::vector<size_t,std::allocator< size_t > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_size_t_Sg____setitem____SWIG_0(std::vector< size_t > *self,PySliceObject *slice,std::vector< size_t,std::allocator< size_t > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<size_t,std::allocator< size_t > >::difference_type id = i;
      std::vector<size_t,std::allocator< size_t > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_size_t_Sg____setitem____SWIG_1(std::vector< size_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<size_t,std::allocator< size_t > >::difference_type id = i;
      std::vector<size_t,std::allocator< size_t > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_size_t_Sg____delitem____SWIG_1(std::vector< size_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<size_t,std::allocator< size_t > >::difference_type id = i;
      std::vector<size_t,std::allocator< size_t > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< size_t >::value_type const &std_vector_Sl_size_t_Sg____getitem____SWIG_1(std::vector< size_t > const *self,std::vector< size_t >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_size_t_Sg____setitem____SWIG_2(std::vector< size_t > *self,std::vector< size_t >::difference_type i,std::vector< size_t >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_size_t_Sg__append(std::vector< size_t > *self,std::vector< size_t >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > {
      typedef pointer_category category;
      static const char* type_name() { return"std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >, std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >" "," "std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg__iterator(std::vector< std::vector< std::vector< size_t > > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg____nonzero__(std::vector< std::vector< std::vector< size_t > > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg____bool__(std::vector< std::vector< std::vector< size_t > > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::vector< std::vector< size_t > > >::size_type std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg____len__(std::vector< std::vector< std::vector< size_t > > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::vector< std::vector< size_t > > >::value_type std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg__pop(std::vector< std::vector< std::vector< size_t > > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > > *std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg____getslice__(std::vector< std::vector< std::vector< size_t > > > *self,std::vector< std::vector< std::vector< size_t > > >::difference_type i,std::vector< std::vector< std::vector< size_t > > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg____setslice__(std::vector< std::vector< std::vector< size_t > > > *self,std::vector< std::vector< std::vector< size_t > > >::difference_type i,std::vector< std::vector< std::vector< size_t > > >::difference_type j,std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > > const &v=std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg____delslice__(std::vector< std::vector< std::vector< size_t > > > *self,std::vector< std::vector< std::vector< size_t > > >::difference_type i,std::vector< std::vector< std::vector< size_t > > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg____delitem____SWIG_0(std::vector< std::vector< std::vector< size_t > > > *self,std::vector< std::vector< std::vector< size_t > > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > > *std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg____getitem____SWIG_0(std::vector< std::vector< std::vector< size_t > > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > >::difference_type id = i;
      std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg____setitem____SWIG_0(std::vector< std::vector< std::vector< size_t > > > *self,PySliceObject *slice,std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > >::difference_type id = i;
      std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg____setitem____SWIG_1(std::vector< std::vector< std::vector< size_t > > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > >::difference_type id = i;
      std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg____delitem____SWIG_1(std::vector< std::vector< std::vector< size_t > > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > >::difference_type id = i;
      std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::vector< std::vector< size_t > > >::value_type const &std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg____getitem____SWIG_1(std::vector< std::vector< std::vector< size_t > > > const *self,std::vector< std::vector< std::vector< size_t > > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg____setitem____SWIG_2(std::vector< std::vector< std::vector< size_t > > > *self,std::vector< std::vector< std::vector< size_t > > >::difference_type i,std::vector< std::vector< std::vector< size_t > > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg__append(std::vector< std::vector< std::vector< size_t > > > *self,std::vector< std::vector< std::vector< size_t > > >::value_type const &x){
      self->push_back(x);
    }

/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_std_complex_Sl_float_Sg_ (PyObject *o, std::complex<float> *val)
{
  if (PyComplex_Check(o)) {
    double re = PyComplex_RealAsDouble(o);
    double im = PyComplex_ImagAsDouble(o);
    if ((-FLT_MAX <= re && re <= FLT_MAX) && (-FLT_MAX <= im && im <= FLT_MAX)) {
      if (val) *val = std::complex<float>(static_cast< float >(re),
				  static_cast< float >(im));
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }    
  } else {
    float re;
    int res = SWIG_AddCast(SWIG_AsVal_float (o, &re));
    if (SWIG_IsOK(res)) {
      if (val) *val = std::complex<float>(re, 0.0);
      return res;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE PyObject*
SWIG_From_std_complex_Sl_float_Sg_  (/*@SWIG:/usr/share/swig2.0/typemaps/swigmacros.swg,104,%ifcplusplus@*/

const std::complex<float>&



/*@SWIG@*/ c)
{
  return PyComplex_FromDoubles(std::real(c), std::imag(c));
}


namespace swig {
  template <> struct traits<std::complex<float> > {
    typedef value_category category;
    static const char* type_name() { return"std::complex<float>"; }
  };  
  template <>  struct traits_asval<std::complex<float> > {   
    typedef std::complex<float> value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_std_complex_Sl_float_Sg_ (obj, val);
    }
  };
  template <>  struct traits_from<std::complex<float> > {
    typedef std::complex<float> value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_complex_Sl_float_Sg_  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<std::complex< float >, std::allocator< std::complex< float > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::complex< float >" "," "std::allocator< std::complex< float > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_complex_Sl_float_Sg__Sg__iterator(std::vector< std::complex< float > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_complex_Sl_float_Sg__Sg____nonzero__(std::vector< std::complex< float > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_complex_Sl_float_Sg__Sg____bool__(std::vector< std::complex< float > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::complex< float > >::size_type std_vector_Sl_std_complex_Sl_float_Sg__Sg____len__(std::vector< std::complex< float > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::complex< float > >::value_type std_vector_Sl_std_complex_Sl_float_Sg__Sg__pop(std::vector< std::complex< float > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::complex< float >,std::allocator< std::complex< float > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::complex< float >,std::allocator< std::complex< float > > > *std_vector_Sl_std_complex_Sl_float_Sg__Sg____getslice__(std::vector< std::complex< float > > *self,std::vector< std::complex< float > >::difference_type i,std::vector< std::complex< float > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_complex_Sl_float_Sg__Sg____setslice__(std::vector< std::complex< float > > *self,std::vector< std::complex< float > >::difference_type i,std::vector< std::complex< float > >::difference_type j,std::vector< std::complex< float >,std::allocator< std::complex< float > > > const &v=std::vector< std::complex< float >,std::allocator< std::complex< float > > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_complex_Sl_float_Sg__Sg____delslice__(std::vector< std::complex< float > > *self,std::vector< std::complex< float > >::difference_type i,std::vector< std::complex< float > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_complex_Sl_float_Sg__Sg____delitem____SWIG_0(std::vector< std::complex< float > > *self,std::vector< std::complex< float > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::complex< float >,std::allocator< std::complex< float > > > *std_vector_Sl_std_complex_Sl_float_Sg__Sg____getitem____SWIG_0(std::vector< std::complex< float > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<std::complex< float >,std::allocator< std::complex< float > > >::difference_type id = i;
      std::vector<std::complex< float >,std::allocator< std::complex< float > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_complex_Sl_float_Sg__Sg____setitem____SWIG_0(std::vector< std::complex< float > > *self,PySliceObject *slice,std::vector< std::complex< float >,std::allocator< std::complex< float > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<std::complex< float >,std::allocator< std::complex< float > > >::difference_type id = i;
      std::vector<std::complex< float >,std::allocator< std::complex< float > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_complex_Sl_float_Sg__Sg____setitem____SWIG_1(std::vector< std::complex< float > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<std::complex< float >,std::allocator< std::complex< float > > >::difference_type id = i;
      std::vector<std::complex< float >,std::allocator< std::complex< float > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_complex_Sl_float_Sg__Sg____delitem____SWIG_1(std::vector< std::complex< float > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<std::complex< float >,std::allocator< std::complex< float > > >::difference_type id = i;
      std::vector<std::complex< float >,std::allocator< std::complex< float > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::complex< float > >::value_type const &std_vector_Sl_std_complex_Sl_float_Sg__Sg____getitem____SWIG_1(std::vector< std::complex< float > > const *self,std::vector< std::complex< float > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_complex_Sl_float_Sg__Sg____setitem____SWIG_2(std::vector< std::complex< float > > *self,std::vector< std::complex< float > >::difference_type i,std::vector< std::complex< float > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_complex_Sl_float_Sg__Sg__append(std::vector< std::complex< float > > *self,std::vector< std::complex< float > >::value_type const &x){
      self->push_back(x);
    }

SWIGINTERN int
SWIG_AsVal_std_complex_Sl_double_Sg_  (PyObject *o, std::complex<double>* val)
{
  if (PyComplex_Check(o)) {
    if (val) *val = std::complex<double>(PyComplex_RealAsDouble(o), PyComplex_ImagAsDouble(o));
    return SWIG_OK;
  } else {
    double d;    
    int res = SWIG_AddCast(SWIG_AsVal_double (o, &d));
    if (SWIG_IsOK(res)) {
      if (val) *val = std::complex<double>(d, 0.0);
      return res;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE PyObject*
SWIG_From_std_complex_Sl_double_Sg_  (/*@SWIG:/usr/share/swig2.0/typemaps/swigmacros.swg,104,%ifcplusplus@*/

const std::complex<double>&



/*@SWIG@*/ c)
{
  return PyComplex_FromDoubles(std::real(c), std::imag(c));
}


namespace swig {
  template <> struct traits<std::complex<double> > {
    typedef value_category category;
    static const char* type_name() { return"std::complex<double>"; }
  };  
  template <>  struct traits_asval<std::complex<double> > {   
    typedef std::complex<double> value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_std_complex_Sl_double_Sg_ (obj, val);
    }
  };
  template <>  struct traits_from<std::complex<double> > {
    typedef std::complex<double> value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_complex_Sl_double_Sg_  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<std::complex< double >, std::allocator< std::complex< double > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::complex< double >" "," "std::allocator< std::complex< double > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_complex_Sl_double_Sg__Sg__iterator(std::vector< std::complex< double > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_complex_Sl_double_Sg__Sg____nonzero__(std::vector< std::complex< double > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_complex_Sl_double_Sg__Sg____bool__(std::vector< std::complex< double > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::complex< double > >::size_type std_vector_Sl_std_complex_Sl_double_Sg__Sg____len__(std::vector< std::complex< double > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::complex< double > >::value_type std_vector_Sl_std_complex_Sl_double_Sg__Sg__pop(std::vector< std::complex< double > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::complex< double >,std::allocator< std::complex< double > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::complex< double >,std::allocator< std::complex< double > > > *std_vector_Sl_std_complex_Sl_double_Sg__Sg____getslice__(std::vector< std::complex< double > > *self,std::vector< std::complex< double > >::difference_type i,std::vector< std::complex< double > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_complex_Sl_double_Sg__Sg____setslice__(std::vector< std::complex< double > > *self,std::vector< std::complex< double > >::difference_type i,std::vector< std::complex< double > >::difference_type j,std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &v=std::vector< std::complex< double >,std::allocator< std::complex< double > > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_complex_Sl_double_Sg__Sg____delslice__(std::vector< std::complex< double > > *self,std::vector< std::complex< double > >::difference_type i,std::vector< std::complex< double > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_complex_Sl_double_Sg__Sg____delitem____SWIG_0(std::vector< std::complex< double > > *self,std::vector< std::complex< double > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::complex< double >,std::allocator< std::complex< double > > > *std_vector_Sl_std_complex_Sl_double_Sg__Sg____getitem____SWIG_0(std::vector< std::complex< double > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<std::complex< double >,std::allocator< std::complex< double > > >::difference_type id = i;
      std::vector<std::complex< double >,std::allocator< std::complex< double > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_complex_Sl_double_Sg__Sg____setitem____SWIG_0(std::vector< std::complex< double > > *self,PySliceObject *slice,std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<std::complex< double >,std::allocator< std::complex< double > > >::difference_type id = i;
      std::vector<std::complex< double >,std::allocator< std::complex< double > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_complex_Sl_double_Sg__Sg____setitem____SWIG_1(std::vector< std::complex< double > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<std::complex< double >,std::allocator< std::complex< double > > >::difference_type id = i;
      std::vector<std::complex< double >,std::allocator< std::complex< double > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_complex_Sl_double_Sg__Sg____delitem____SWIG_1(std::vector< std::complex< double > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<std::complex< double >,std::allocator< std::complex< double > > >::difference_type id = i;
      std::vector<std::complex< double >,std::allocator< std::complex< double > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::complex< double > >::value_type const &std_vector_Sl_std_complex_Sl_double_Sg__Sg____getitem____SWIG_1(std::vector< std::complex< double > > const *self,std::vector< std::complex< double > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_complex_Sl_double_Sg__Sg____setitem____SWIG_2(std::vector< std::complex< double > > *self,std::vector< std::complex< double > >::difference_type i,std::vector< std::complex< double > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_complex_Sl_double_Sg__Sg__append(std::vector< std::complex< double > > *self,std::vector< std::complex< double > >::value_type const &x){
      self->push_back(x);
    }

      namespace swig {
	template <>  struct traits<std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >, std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::vector< std::complex< float >,std::allocator< std::complex< float > > >" "," "std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg__iterator(std::vector< std::vector< std::complex< float > > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg____nonzero__(std::vector< std::vector< std::complex< float > > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg____bool__(std::vector< std::vector< std::complex< float > > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::vector< std::complex< float > > >::size_type std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg____len__(std::vector< std::vector< std::complex< float > > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::vector< std::complex< float > > >::value_type std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg__pop(std::vector< std::vector< std::complex< float > > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > *std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg____getslice__(std::vector< std::vector< std::complex< float > > > *self,std::vector< std::vector< std::complex< float > > >::difference_type i,std::vector< std::vector< std::complex< float > > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg____setslice__(std::vector< std::vector< std::complex< float > > > *self,std::vector< std::vector< std::complex< float > > >::difference_type i,std::vector< std::vector< std::complex< float > > >::difference_type j,std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > const &v=std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg____delslice__(std::vector< std::vector< std::complex< float > > > *self,std::vector< std::vector< std::complex< float > > >::difference_type i,std::vector< std::vector< std::complex< float > > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg____delitem____SWIG_0(std::vector< std::vector< std::complex< float > > > *self,std::vector< std::vector< std::complex< float > > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > *std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg____getitem____SWIG_0(std::vector< std::vector< std::complex< float > > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > >::difference_type id = i;
      std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg____setitem____SWIG_0(std::vector< std::vector< std::complex< float > > > *self,PySliceObject *slice,std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > >::difference_type id = i;
      std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg____setitem____SWIG_1(std::vector< std::vector< std::complex< float > > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > >::difference_type id = i;
      std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg____delitem____SWIG_1(std::vector< std::vector< std::complex< float > > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > >::difference_type id = i;
      std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::vector< std::complex< float > > >::value_type const &std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg____getitem____SWIG_1(std::vector< std::vector< std::complex< float > > > const *self,std::vector< std::vector< std::complex< float > > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg____setitem____SWIG_2(std::vector< std::vector< std::complex< float > > > *self,std::vector< std::vector< std::complex< float > > >::difference_type i,std::vector< std::vector< std::complex< float > > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg__append(std::vector< std::vector< std::complex< float > > > *self,std::vector< std::vector< std::complex< float > > >::value_type const &x){
      self->push_back(x);
    }

      namespace swig {
	template <>  struct traits<std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >, std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::vector< std::complex< double >,std::allocator< std::complex< double > > >" "," "std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg__iterator(std::vector< std::vector< std::complex< double > > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg____nonzero__(std::vector< std::vector< std::complex< double > > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg____bool__(std::vector< std::vector< std::complex< double > > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::vector< std::complex< double > > >::size_type std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg____len__(std::vector< std::vector< std::complex< double > > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::vector< std::complex< double > > >::value_type std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg__pop(std::vector< std::vector< std::complex< double > > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > *std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg____getslice__(std::vector< std::vector< std::complex< double > > > *self,std::vector< std::vector< std::complex< double > > >::difference_type i,std::vector< std::vector< std::complex< double > > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg____setslice__(std::vector< std::vector< std::complex< double > > > *self,std::vector< std::vector< std::complex< double > > >::difference_type i,std::vector< std::vector< std::complex< double > > >::difference_type j,std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > const &v=std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg____delslice__(std::vector< std::vector< std::complex< double > > > *self,std::vector< std::vector< std::complex< double > > >::difference_type i,std::vector< std::vector< std::complex< double > > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg____delitem____SWIG_0(std::vector< std::vector< std::complex< double > > > *self,std::vector< std::vector< std::complex< double > > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > *std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg____getitem____SWIG_0(std::vector< std::vector< std::complex< double > > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > >::difference_type id = i;
      std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg____setitem____SWIG_0(std::vector< std::vector< std::complex< double > > > *self,PySliceObject *slice,std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > >::difference_type id = i;
      std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg____setitem____SWIG_1(std::vector< std::vector< std::complex< double > > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > >::difference_type id = i;
      std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg____delitem____SWIG_1(std::vector< std::vector< std::complex< double > > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > >::difference_type id = i;
      std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::vector< std::complex< double > > >::value_type const &std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg____getitem____SWIG_1(std::vector< std::vector< std::complex< double > > > const *self,std::vector< std::vector< std::complex< double > > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg____setitem____SWIG_2(std::vector< std::vector< std::complex< double > > > *self,std::vector< std::vector< std::complex< double > > >::difference_type i,std::vector< std::vector< std::complex< double > > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg__append(std::vector< std::vector< std::complex< double > > > *self,std::vector< std::vector< std::complex< double > > >::value_type const &x){
      self->push_back(x);
    }

#include "gnuradio_swig_bug_workaround.h"	// mandatory bug fix


#include <cstddef>


#include <gnuradio/block.h>
#include <gnuradio/sync_block.h>
#include <gnuradio/sync_decimator.h>
#include <gnuradio/sync_interpolator.h>
#include <gnuradio/tagged_stream_block.h>
#include <gnuradio/block_gateway.h>
#include <gnuradio/feval.h>
#include <gnuradio/py_feval.h>
#include <gnuradio/high_res_timer.h>


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyLong_FromLong(static_cast< long >(value)); 
}


#include <gnuradio/runtime_types.h>


#include <gnuradio/block.h>
#include <gnuradio/block_detail.h>
#include <gnuradio/buffer.h>
#include <gnuradio/constants.h>
#include <gnuradio/endianness.h>
#include <gnuradio/feval.h>
#include <gnuradio/hier_block2.h>
#include <gnuradio/io_signature.h>
#include <gnuradio/message.h>
#include <gnuradio/msg_handler.h>
#include <gnuradio/msg_queue.h>
#include <gnuradio/prefs.h>
#include <gnuradio/realtime.h>
#include <gnuradio/sync_block.h>
#include <gnuradio/sync_decimator.h>
#include <gnuradio/sync_interpolator.h>
#include <gnuradio/tags.h>
#include <gnuradio/tagged_stream_block.h>
#include <gnuradio/top_block.h>
#include <gnuradio/logger.h>
#include <gnuradio/math.h>
#include <gnuradio/random.h>


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


  namespace swig {
    template <>  struct traits<boost::shared_ptr< gr::basic_block > > {
      typedef pointer_category category;
      static const char* type_name() { return"boost::shared_ptr< gr::basic_block >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<boost::shared_ptr< gr::basic_block >, std::allocator< boost::shared_ptr< gr::basic_block > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "boost::shared_ptr< gr::basic_block >" "," "std::allocator< boost::shared_ptr< gr::basic_block > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_gr_basic_block_sptr_Sg__iterator(std::vector< gr::basic_block_sptr > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_gr_basic_block_sptr_Sg____nonzero__(std::vector< gr::basic_block_sptr > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_gr_basic_block_sptr_Sg____bool__(std::vector< gr::basic_block_sptr > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< boost::shared_ptr< gr::basic_block > >::size_type std_vector_Sl_gr_basic_block_sptr_Sg____len__(std::vector< gr::basic_block_sptr > const *self){
      return self->size();
    }
SWIGINTERN std::vector< boost::shared_ptr< gr::basic_block > >::value_type std_vector_Sl_gr_basic_block_sptr_Sg__pop(std::vector< gr::basic_block_sptr > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > > *std_vector_Sl_gr_basic_block_sptr_Sg____getslice__(std::vector< gr::basic_block_sptr > *self,std::vector< boost::shared_ptr< gr::basic_block > >::difference_type i,std::vector< boost::shared_ptr< gr::basic_block > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_gr_basic_block_sptr_Sg____setslice__(std::vector< gr::basic_block_sptr > *self,std::vector< boost::shared_ptr< gr::basic_block > >::difference_type i,std::vector< boost::shared_ptr< gr::basic_block > >::difference_type j,std::vector< boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > > const &v=std::vector< boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_gr_basic_block_sptr_Sg____delslice__(std::vector< gr::basic_block_sptr > *self,std::vector< boost::shared_ptr< gr::basic_block > >::difference_type i,std::vector< boost::shared_ptr< gr::basic_block > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_gr_basic_block_sptr_Sg____delitem____SWIG_0(std::vector< gr::basic_block_sptr > *self,std::vector< boost::shared_ptr< gr::basic_block > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > > *std_vector_Sl_gr_basic_block_sptr_Sg____getitem____SWIG_0(std::vector< gr::basic_block_sptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > >::difference_type id = i;
      std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_gr_basic_block_sptr_Sg____setitem____SWIG_0(std::vector< gr::basic_block_sptr > *self,PySliceObject *slice,std::vector< boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > >::difference_type id = i;
      std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_gr_basic_block_sptr_Sg____setitem____SWIG_1(std::vector< gr::basic_block_sptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > >::difference_type id = i;
      std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_gr_basic_block_sptr_Sg____delitem____SWIG_1(std::vector< gr::basic_block_sptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > >::difference_type id = i;
      std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &std_vector_Sl_gr_basic_block_sptr_Sg____getitem____SWIG_1(std::vector< gr::basic_block_sptr > const *self,std::vector< boost::shared_ptr< gr::basic_block > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_gr_basic_block_sptr_Sg____setitem____SWIG_2(std::vector< gr::basic_block_sptr > *self,std::vector< boost::shared_ptr< gr::basic_block > >::difference_type i,std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_gr_basic_block_sptr_Sg__append(std::vector< gr::basic_block_sptr > *self,std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &x){
      self->push_back(x);
    }

SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyLong_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


namespace swig {
  template <> struct traits<float > {
    typedef value_category category;
    static const char* type_name() { return"float"; }
  };  
  template <>  struct traits_asval<float > {   
    typedef float value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_float (obj, val);
    }
  };
  template <>  struct traits_from<float > {
    typedef float value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_float  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<float, std::allocator< float > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "float" "," "std::allocator< float >" " >";
	  }
	};
      }
    

namespace swig {
  template <> struct traits<int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };  
  template <>  struct traits_asval<int > {   
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_int (obj, val);
    }
  };
  template <>  struct traits_from<int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<int, std::allocator< int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "int" "," "std::allocator< int >" " >";
	  }
	};
      }
    

  namespace swig {
    template <>  struct traits<boost::shared_ptr< gr::block > > {
      typedef pointer_category category;
      static const char* type_name() { return"boost::shared_ptr< gr::block >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<boost::shared_ptr< gr::block >, std::allocator< boost::shared_ptr< gr::block > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "boost::shared_ptr< gr::block >" "," "std::allocator< boost::shared_ptr< gr::block > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_gr_block_sptr_Sg__iterator(std::vector< gr::block_sptr > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_gr_block_sptr_Sg____nonzero__(std::vector< gr::block_sptr > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_gr_block_sptr_Sg____bool__(std::vector< gr::block_sptr > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< boost::shared_ptr< gr::block > >::size_type std_vector_Sl_gr_block_sptr_Sg____len__(std::vector< gr::block_sptr > const *self){
      return self->size();
    }
SWIGINTERN std::vector< boost::shared_ptr< gr::block > >::value_type std_vector_Sl_gr_block_sptr_Sg__pop(std::vector< gr::block_sptr > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > > *std_vector_Sl_gr_block_sptr_Sg____getslice__(std::vector< gr::block_sptr > *self,std::vector< boost::shared_ptr< gr::block > >::difference_type i,std::vector< boost::shared_ptr< gr::block > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_gr_block_sptr_Sg____setslice__(std::vector< gr::block_sptr > *self,std::vector< boost::shared_ptr< gr::block > >::difference_type i,std::vector< boost::shared_ptr< gr::block > >::difference_type j,std::vector< boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > > const &v=std::vector< boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_gr_block_sptr_Sg____delslice__(std::vector< gr::block_sptr > *self,std::vector< boost::shared_ptr< gr::block > >::difference_type i,std::vector< boost::shared_ptr< gr::block > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_gr_block_sptr_Sg____delitem____SWIG_0(std::vector< gr::block_sptr > *self,std::vector< boost::shared_ptr< gr::block > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > > *std_vector_Sl_gr_block_sptr_Sg____getitem____SWIG_0(std::vector< gr::block_sptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > >::difference_type id = i;
      std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_gr_block_sptr_Sg____setitem____SWIG_0(std::vector< gr::block_sptr > *self,PySliceObject *slice,std::vector< boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > >::difference_type id = i;
      std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_gr_block_sptr_Sg____setitem____SWIG_1(std::vector< gr::block_sptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > >::difference_type id = i;
      std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_gr_block_sptr_Sg____delitem____SWIG_1(std::vector< gr::block_sptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > >::difference_type id = i;
      std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< boost::shared_ptr< gr::block > >::value_type const &std_vector_Sl_gr_block_sptr_Sg____getitem____SWIG_1(std::vector< gr::block_sptr > const *self,std::vector< boost::shared_ptr< gr::block > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_gr_block_sptr_Sg____setitem____SWIG_2(std::vector< gr::block_sptr > *self,std::vector< boost::shared_ptr< gr::block > >::difference_type i,std::vector< boost::shared_ptr< gr::block > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_gr_block_sptr_Sg__append(std::vector< gr::block_sptr > *self,std::vector< boost::shared_ptr< gr::block > >::value_type const &x){
      self->push_back(x);
    }

  gr::message::sptr py_msg_queue__delete_head(gr::msg_queue::sptr q) {
    gr::message::sptr msg;
    GR_PYTHON_BLOCKING_CODE(
        msg = q->delete_head();
    )
    return msg;
  }

  void py_msg_queue__insert_tail(gr::msg_queue::sptr q, gr::message::sptr msg) {
    GR_PYTHON_BLOCKING_CODE(
        q->insert_tail(msg);
    )
  }


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


#include <gnuradio/tags.h>


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}


namespace swig {
  template <> struct traits<long > {
    typedef value_category category;
    static const char* type_name() { return"long"; }
  };  
  template <>  struct traits_asval<long > {   
    typedef long value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_long (obj, val);
    }
  };
  template <>  struct traits_from<long > {
    typedef long value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_long  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<long, std::allocator< long > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "long" "," "std::allocator< long >" " >";
	  }
	};
      }
    

  namespace swig {
    template <>  struct traits<gr::tag_t > {
      typedef pointer_category category;
      static const char* type_name() { return"gr::tag_t"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<gr::tag_t, std::allocator< gr::tag_t > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "gr::tag_t" "," "std::allocator< gr::tag_t >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_gr_tag_t_Sg__iterator(std::vector< gr::tag_t > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_gr_tag_t_Sg____nonzero__(std::vector< gr::tag_t > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_gr_tag_t_Sg____bool__(std::vector< gr::tag_t > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< gr::tag_t >::size_type std_vector_Sl_gr_tag_t_Sg____len__(std::vector< gr::tag_t > const *self){
      return self->size();
    }
SWIGINTERN std::vector< gr::tag_t >::value_type std_vector_Sl_gr_tag_t_Sg__pop(std::vector< gr::tag_t > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<gr::tag_t,std::allocator< gr::tag_t > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< gr::tag_t,std::allocator< gr::tag_t > > *std_vector_Sl_gr_tag_t_Sg____getslice__(std::vector< gr::tag_t > *self,std::vector< gr::tag_t >::difference_type i,std::vector< gr::tag_t >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_gr_tag_t_Sg____setslice__(std::vector< gr::tag_t > *self,std::vector< gr::tag_t >::difference_type i,std::vector< gr::tag_t >::difference_type j,std::vector< gr::tag_t,std::allocator< gr::tag_t > > const &v=std::vector< gr::tag_t,std::allocator< gr::tag_t > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_gr_tag_t_Sg____delslice__(std::vector< gr::tag_t > *self,std::vector< gr::tag_t >::difference_type i,std::vector< gr::tag_t >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_gr_tag_t_Sg____delitem____SWIG_0(std::vector< gr::tag_t > *self,std::vector< gr::tag_t >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< gr::tag_t,std::allocator< gr::tag_t > > *std_vector_Sl_gr_tag_t_Sg____getitem____SWIG_0(std::vector< gr::tag_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<gr::tag_t,std::allocator< gr::tag_t > >::difference_type id = i;
      std::vector<gr::tag_t,std::allocator< gr::tag_t > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_gr_tag_t_Sg____setitem____SWIG_0(std::vector< gr::tag_t > *self,PySliceObject *slice,std::vector< gr::tag_t,std::allocator< gr::tag_t > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<gr::tag_t,std::allocator< gr::tag_t > >::difference_type id = i;
      std::vector<gr::tag_t,std::allocator< gr::tag_t > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_gr_tag_t_Sg____setitem____SWIG_1(std::vector< gr::tag_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<gr::tag_t,std::allocator< gr::tag_t > >::difference_type id = i;
      std::vector<gr::tag_t,std::allocator< gr::tag_t > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_gr_tag_t_Sg____delitem____SWIG_1(std::vector< gr::tag_t > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<gr::tag_t,std::allocator< gr::tag_t > >::difference_type id = i;
      std::vector<gr::tag_t,std::allocator< gr::tag_t > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< gr::tag_t >::value_type const &std_vector_Sl_gr_tag_t_Sg____getitem____SWIG_1(std::vector< gr::tag_t > const *self,std::vector< gr::tag_t >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_gr_tag_t_Sg____setitem____SWIG_2(std::vector< gr::tag_t > *self,std::vector< gr::tag_t >::difference_type i,std::vector< gr::tag_t >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_gr_tag_t_Sg__append(std::vector< gr::tag_t > *self,std::vector< gr::tag_t >::value_type const &x){
      self->push_back(x);
    }

void top_block_run_unlocked(gr::top_block_sptr r) throw (std::runtime_error)
{
    GR_PYTHON_BLOCKING_CODE
    (
        r->run();
    )
}

void top_block_start_unlocked(gr::top_block_sptr r, int max_noutput_items) throw (std::runtime_error)
{
    GR_PYTHON_BLOCKING_CODE
    (
        r->start(max_noutput_items);
    )
}

void top_block_wait_unlocked(gr::top_block_sptr r) throw (std::runtime_error)
{
    GR_PYTHON_BLOCKING_CODE
    (
        r->wait();
    )
}

void top_block_stop_unlocked(gr::top_block_sptr r) throw (std::runtime_error)
{
    GR_PYTHON_BLOCKING_CODE
    (
        r->stop();
    )
}

void top_block_unlock_unlocked(gr::top_block_sptr r) throw (std::runtime_error)
{
    GR_PYTHON_BLOCKING_CODE
    (
        r->unlock();
    )
}

std::string
dot_graph_tb(gr::top_block_sptr r)
{
  return dot_graph(r);
}



  namespace swig {
    template <>  struct traits<void > {
      typedef pointer_category category;
      static const char* type_name() { return"void"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<void*, std::allocator< void * > > > {
	  typedef value_category category;
	  static const char* type_name() {
	    return "std::vector<" "void" " *," "std::allocator< void * >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_void_Sm__Sg__iterator(std::vector< void * > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_void_Sm__Sg____nonzero__(std::vector< void * > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_void_Sm__Sg____bool__(std::vector< void * > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< void * >::size_type std_vector_Sl_void_Sm__Sg____len__(std::vector< void * > const *self){
      return self->size();
    }
SWIGINTERN std::vector< void * >::value_type std_vector_Sl_void_Sm__Sg__pop(std::vector< void * > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<void*,std::allocator< void * > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< void *,std::allocator< void * > > *std_vector_Sl_void_Sm__Sg____getslice__(std::vector< void * > *self,std::vector< void * >::difference_type i,std::vector< void * >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_void_Sm__Sg____setslice__(std::vector< void * > *self,std::vector< void * >::difference_type i,std::vector< void * >::difference_type j,std::vector< void *,std::allocator< void * > > const &v=std::vector< void *,std::allocator< void * > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_void_Sm__Sg____delslice__(std::vector< void * > *self,std::vector< void * >::difference_type i,std::vector< void * >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_void_Sm__Sg____delitem____SWIG_0(std::vector< void * > *self,std::vector< void * >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< void *,std::allocator< void * > > *std_vector_Sl_void_Sm__Sg____getitem____SWIG_0(std::vector< void * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<void*,std::allocator< void * > >::difference_type id = i;
      std::vector<void*,std::allocator< void * > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_void_Sm__Sg____setitem____SWIG_0(std::vector< void * > *self,PySliceObject *slice,std::vector< void *,std::allocator< void * > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<void*,std::allocator< void * > >::difference_type id = i;
      std::vector<void*,std::allocator< void * > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_void_Sm__Sg____setitem____SWIG_1(std::vector< void * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<void*,std::allocator< void * > >::difference_type id = i;
      std::vector<void*,std::allocator< void * > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_void_Sm__Sg____delitem____SWIG_1(std::vector< void * > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<void*,std::allocator< void * > >::difference_type id = i;
      std::vector<void*,std::allocator< void * > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< void * >::value_type std_vector_Sl_void_Sm__Sg____getitem____SWIG_1(std::vector< void * > *self,std::vector< void * >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_void_Sm__Sg____setitem____SWIG_2(std::vector< void * > *self,std::vector< void * >::difference_type i,std::vector< void * >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_void_Sm__Sg__append(std::vector< void * > *self,std::vector< void * >::value_type x){
      self->push_back(x);
    }

#include <gnuradio/block_gateway.h>


#include "gnuradio_swig_bug_workaround.h"	// mandatory bug fix
#include <stdexcept>


// The .h files
#include <gnuradio/logger.h>


SWIGINTERN int
SWIG_AsVal_std_string (PyObject * obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


namespace swig {
  template <> struct traits<std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };  
  template <>  struct traits_asval<std::string > {   
    typedef std::string value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from<std::string > {
    typedef std::string value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    

#include <gnuradio/rpcserver_booter_base.h>
#include <gnuradio/rpcserver_booter_aggregator.h>
#include <gnuradio/pycallback_object.h>

SWIGINTERN void pycallback_object_Sl_std_string_Sg__activate(pycallback_object< std::string > *self,PyObject *pyfunc){
    self->set_callback(pyfunc);
    Py_INCREF(pyfunc);
  }
SWIGINTERN void pycallback_object_Sl_int_Sg__activate(pycallback_object< int > *self,PyObject *pyfunc){
    self->set_callback(pyfunc);
    Py_INCREF(pyfunc);
  }
SWIGINTERN void pycallback_object_Sl_float_Sg__activate(pycallback_object< float > *self,PyObject *pyfunc){
    self->set_callback(pyfunc);
    Py_INCREF(pyfunc);
  }
SWIGINTERN void pycallback_object_Sl_double_Sg__activate(pycallback_object< double > *self,PyObject *pyfunc){
    self->set_callback(pyfunc);
    Py_INCREF(pyfunc);
  }
SWIGINTERN void pycallback_object_Sl_gr_complex_Sg__activate(pycallback_object< gr_complex > *self,PyObject *pyfunc){
    self->set_callback(pyfunc);
    Py_INCREF(pyfunc);
  }
SWIGINTERN void pycallback_object_Sl_gr_complexd_Sg__activate(pycallback_object< gr_complexd > *self,PyObject *pyfunc){
    self->set_callback(pyfunc);
    Py_INCREF(pyfunc);
  }
SWIGINTERN void pycallback_object_Sl_std_vector_Sl_float_Sg__Sg__activate(pycallback_object< std::vector< float > > *self,PyObject *pyfunc){
    self->set_callback(pyfunc);
    Py_INCREF(pyfunc);
  }
SWIGINTERN void pycallback_object_Sl_std_vector_Sl_gr_complex_Sg__Sg__activate(pycallback_object< std::vector< gr_complex > > *self,PyObject *pyfunc){
    self->set_callback(pyfunc);
    Py_INCREF(pyfunc);
  }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "runtime_swigPYTHON_wrap.h"

SwigDirector_feval_dd::SwigDirector_feval_dd(PyObject *self): gr::py_feval_dd(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((gr::py_feval_dd *)this, this); 
}




double SwigDirector_feval_dd::eval(double x) {
  double c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_double(static_cast< double >(x));
  swig_set_inner("eval", true);
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call feval_dd.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char * const swig_method_name = "eval";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar((char *)"eval");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  swig_set_inner("eval", false);
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'feval_dd.eval'");
    }
  }
  double swig_val;
  int swig_res = SWIG_AsVal_double(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""double""'");
  }
  c_result = static_cast< double >(swig_val);
  return (double) c_result;
}


SwigDirector_feval_dd::~SwigDirector_feval_dd() {
}

SwigDirector_feval_cc::SwigDirector_feval_cc(PyObject *self): gr::py_feval_cc(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((gr::py_feval_cc *)this, this); 
}




gr_complex SwigDirector_feval_cc::eval(gr_complex x) {
  gr_complex c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_std_complex_Sl_float_Sg_(static_cast< std::complex<float> >(x));
  swig_set_inner("eval", true);
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call feval_cc.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char * const swig_method_name = "eval";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar((char *)"eval");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  swig_set_inner("eval", false);
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'feval_cc.eval'");
    }
  }
  std::complex<float> swig_val;
  int swig_res = SWIG_AsVal_std_complex_Sl_float_Sg_(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""gr_complex""'");
  }
  c_result = static_cast< gr_complex >(swig_val);
  return (gr_complex) c_result;
}


SwigDirector_feval_cc::~SwigDirector_feval_cc() {
}

SwigDirector_feval_ll::SwigDirector_feval_ll(PyObject *self): gr::py_feval_ll(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((gr::py_feval_ll *)this, this); 
}




long SwigDirector_feval_ll::eval(long x) {
  long c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_long(static_cast< long >(x));
  swig_set_inner("eval", true);
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call feval_ll.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char * const swig_method_name = "eval";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar((char *)"eval");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  swig_set_inner("eval", false);
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'feval_ll.eval'");
    }
  }
  long swig_val;
  int swig_res = SWIG_AsVal_long(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""long""'");
  }
  c_result = static_cast< long >(swig_val);
  return (long) c_result;
}


SwigDirector_feval_ll::~SwigDirector_feval_ll() {
}

SwigDirector_feval::SwigDirector_feval(PyObject *self): gr::py_feval(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((gr::py_feval *)this, this); 
}




void SwigDirector_feval::eval() {
  swig_set_inner("eval", true);
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call feval.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char * const swig_method_name = "eval";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject args = PyTuple_New(0);
  swig::SwigVar_PyObject result = PyObject_Call(method, (PyObject*) args, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar((char *)"eval");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name, NULL);
#endif
  swig_set_inner("eval", false);
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'feval.eval'");
    }
  }
}


SwigDirector_feval::~SwigDirector_feval() {
}

SwigDirector_feval_p::SwigDirector_feval_p(PyObject *self): gr::py_feval_p(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((gr::py_feval_p *)this, this); 
}




void SwigDirector_feval_p::eval(pmt::pmt_t x) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(&x), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0 );
  swig_set_inner("eval", true);
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call feval_p.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char * const swig_method_name = "eval";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar((char *)"eval");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  swig_set_inner("eval", false);
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'feval_p.eval'");
    }
  }
}


SwigDirector_feval_p::~SwigDirector_feval_p() {
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_SwigPyIterator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"SwigPyIterator_value",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      try {
        result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 = (size_t) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:SwigPyIterator_incr",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_size_t(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
  }
  {
    try {
      try {
        result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 = (size_t) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:SwigPyIterator_decr",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_size_t(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
  }
  {
    try {
      try {
        result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  ptrdiff_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator_distance",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try {
      try {
        result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
      }
      catch(std::invalid_argument &_e) {
        SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator_equal",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try {
      try {
        result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
      }
      catch(std::invalid_argument &_e) {
        SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"SwigPyIterator_copy",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"SwigPyIterator_next",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      try {
        result = (PyObject *)(arg1)->next();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"SwigPyIterator___next__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      try {
        result = (PyObject *)(arg1)->__next__();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"SwigPyIterator_previous",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  {
    try {
      try {
        result = (PyObject *)(arg1)->previous();
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator_advance",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator___eq__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try {
      result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator___ne__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try {
      result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator___iadd__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator___isub__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:SwigPyIterator___add__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"SwigPyIterator___sub__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    try {
      try {
        result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
      }
      catch(swig::stop_iteration &_e) {
        {
          (void)_e;
          SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
          SWIG_fail;
        }
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SwigPyIterator___sub__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  {
    try {
      result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_gr_vsize_t_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t_iterator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t_iterator" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_size_t_Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t___nonzero__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t___nonzero__" "', argument " "1"" of type '" "std::vector< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_size_t_Sg____nonzero__((std::vector< size_t > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t___bool__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t___bool__" "', argument " "1"" of type '" "std::vector< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_size_t_Sg____bool__((std::vector< size_t > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< size_t >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t___len__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t___len__" "', argument " "1"" of type '" "std::vector< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = std_vector_Sl_size_t_Sg____len__((std::vector< size_t > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< size_t >::value_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t_pop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t_pop" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_size_t_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::difference_type arg2 ;
  std::vector< size_t >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  std::vector< size_t,std::allocator< size_t > > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:gr_vsize_t___getslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t___getslice__" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vsize_t___getslice__" "', argument " "2"" of type '" "std::vector< size_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< size_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vsize_t___getslice__" "', argument " "3"" of type '" "std::vector< size_t >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< size_t >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< size_t,std::allocator< size_t > > *)std_vector_Sl_size_t_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::difference_type arg2 ;
  std::vector< size_t >::difference_type arg3 ;
  std::vector< size_t,std::allocator< size_t > > const &arg4_defvalue = std::vector< size_t,std::allocator< size_t > >() ;
  std::vector< size_t,std::allocator< size_t > > *arg4 = (std::vector< size_t,std::allocator< size_t > > *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:gr_vsize_t___setslice__",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t___setslice__" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vsize_t___setslice__" "', argument " "2"" of type '" "std::vector< size_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< size_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vsize_t___setslice__" "', argument " "3"" of type '" "std::vector< size_t >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< size_t >::difference_type >(val3);
  if (obj3) {
    {
      std::vector<size_t,std::allocator< size_t > > *ptr = (std::vector<size_t,std::allocator< size_t > > *)0;
      res4 = swig::asptr(obj3, &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "gr_vsize_t___setslice__" "', argument " "4"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vsize_t___setslice__" "', argument " "4"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
      }
      arg4 = ptr;
    }
  }
  {
    try {
      try {
        std_vector_Sl_size_t_Sg____setslice__(arg1,arg2,arg3,(std::vector< size_t,std::allocator< size_t > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::difference_type arg2 ;
  std::vector< size_t >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:gr_vsize_t___delslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t___delslice__" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vsize_t___delslice__" "', argument " "2"" of type '" "std::vector< size_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< size_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vsize_t___delslice__" "', argument " "3"" of type '" "std::vector< size_t >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< size_t >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_size_t_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t___delitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t___delitem__" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vsize_t___delitem__" "', argument " "2"" of type '" "std::vector< size_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< size_t >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_size_t_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< size_t,std::allocator< size_t > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t___getitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t___getitem__" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vsize_t___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        result = (std::vector< size_t,std::allocator< size_t > > *)std_vector_Sl_size_t_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< size_t,std::allocator< size_t > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t___setitem__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t___setitem__" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vsize_t___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<size_t,std::allocator< size_t > > *ptr = (std::vector<size_t,std::allocator< size_t > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "gr_vsize_t___setitem__" "', argument " "3"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vsize_t___setitem__" "', argument " "3"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_size_t_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< size_t,std::allocator< size_t > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t___setitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t___setitem__" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vsize_t___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_size_t_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t___delitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t___delitem__" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vsize_t___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_size_t_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_gr_vsize_t___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_gr_vsize_t___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vsize_t___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< size_t >::__delitem__(std::vector< size_t >::difference_type)\n"
    "    std::vector< size_t >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< size_t >::value_type *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t___getitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t___getitem__" "', argument " "1"" of type '" "std::vector< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vsize_t___getitem__" "', argument " "2"" of type '" "std::vector< size_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< size_t >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< size_t >::value_type *) &std_vector_Sl_size_t_Sg____getitem____SWIG_1((std::vector< size_t > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_gr_vsize_t___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_gr_vsize_t___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vsize_t___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< size_t >::__getitem__(PySliceObject *)\n"
    "    std::vector< size_t >::__getitem__(std::vector< size_t >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::difference_type arg2 ;
  std::vector< size_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< size_t >::value_type temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t___setitem__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t___setitem__" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vsize_t___setitem__" "', argument " "2"" of type '" "std::vector< size_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< size_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vsize_t___setitem__" "', argument " "3"" of type '" "std::vector< size_t >::value_type""'");
  } 
  temp3 = static_cast< std::vector< size_t >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      try {
        std_vector_Sl_size_t_Sg____setitem____SWIG_2(arg1,arg2,(size_t const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_gr_vsize_t___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<size_t,std::allocator< size_t > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_gr_vsize_t___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_gr_vsize_t___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vsize_t___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< size_t >::__setitem__(PySliceObject *,std::vector< size_t,std::allocator< size_t > > const &)\n"
    "    std::vector< size_t >::__setitem__(PySliceObject *)\n"
    "    std::vector< size_t >::__setitem__(std::vector< size_t >::difference_type,std::vector< size_t >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< size_t >::value_type temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:gr_vsize_t_append",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t_append" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vsize_t_append" "', argument " "2"" of type '" "std::vector< size_t >::value_type""'");
  } 
  temp2 = static_cast< std::vector< size_t >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      std_vector_Sl_size_t_Sg__append(arg1,(size_t const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gr_vsize_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *result = 0 ;
  
  {
    try {
      result = (std::vector< size_t > *)new std::vector< size_t >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gr_vsize_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< size_t > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_gr_vsize_t",1,1,&obj0)) SWIG_fail;
  {
    std::vector<size_t,std::allocator< size_t > > *ptr = (std::vector<size_t,std::allocator< size_t > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_gr_vsize_t" "', argument " "1"" of type '" "std::vector< size_t > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_gr_vsize_t" "', argument " "1"" of type '" "std::vector< size_t > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< size_t > *)new std::vector< size_t >((std::vector< size_t > const &)*arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t_empty",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t_empty" "', argument " "1"" of type '" "std::vector< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = (bool)((std::vector< size_t > const *)arg1)->empty();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< size_t >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t_size" "', argument " "1"" of type '" "std::vector< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = ((std::vector< size_t > const *)arg1)->size();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t_clear",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t_clear" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:gr_vsize_t_swap",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t_swap" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "gr_vsize_t_swap" "', argument " "2"" of type '" "std::vector< size_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vsize_t_swap" "', argument " "2"" of type '" "std::vector< size_t > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< size_t > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< size_t > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t_get_allocator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t_get_allocator" "', argument " "1"" of type '" "std::vector< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = ((std::vector< size_t > const *)arg1)->get_allocator();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new std::vector< size_t >::allocator_type(static_cast< const std::vector< size_t >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_size_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< size_t >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t_begin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t_begin" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< size_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< size_t >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t_end",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t_end" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< size_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< size_t >::reverse_iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t_rbegin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t_rbegin" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< size_t >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< size_t >::reverse_iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t_rend",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t_rend" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< size_t >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gr_vsize_t__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< size_t > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_gr_vsize_t",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_gr_vsize_t" "', argument " "1"" of type '" "std::vector< size_t >::size_type""'");
  } 
  arg1 = static_cast< std::vector< size_t >::size_type >(val1);
  {
    try {
      result = (std::vector< size_t > *)new std::vector< size_t >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t_pop_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t_pop_back" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t_resize",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t_resize" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vsize_t_resize" "', argument " "2"" of type '" "std::vector< size_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< size_t >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< size_t >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t_erase",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t_erase" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vsize_t_erase" "', argument " "2"" of type '" "std::vector< size_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< size_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< size_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vsize_t_erase" "', argument " "2"" of type '" "std::vector< size_t >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< size_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::iterator arg2 ;
  std::vector< size_t >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< size_t >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t_erase",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t_erase" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vsize_t_erase" "', argument " "2"" of type '" "std::vector< size_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< size_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< size_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vsize_t_erase" "', argument " "2"" of type '" "std::vector< size_t >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vsize_t_erase" "', argument " "3"" of type '" "std::vector< size_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< size_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< size_t >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vsize_t_erase" "', argument " "3"" of type '" "std::vector< size_t >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< size_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< size_t >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_gr_vsize_t_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< size_t >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< size_t >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_gr_vsize_t_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vsize_t_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< size_t >::erase(std::vector< size_t >::iterator)\n"
    "    std::vector< size_t >::erase(std::vector< size_t >::iterator,std::vector< size_t >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_gr_vsize_t__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t >::size_type arg1 ;
  std::vector< size_t >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< size_t >::value_type temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< size_t > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_gr_vsize_t",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_gr_vsize_t" "', argument " "1"" of type '" "std::vector< size_t >::size_type""'");
  } 
  arg1 = static_cast< std::vector< size_t >::size_type >(val1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_gr_vsize_t" "', argument " "2"" of type '" "std::vector< size_t >::value_type""'");
  } 
  temp2 = static_cast< std::vector< size_t >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (std::vector< size_t > *)new std::vector< size_t >(arg1,(std::vector< size_t >::value_type const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gr_vsize_t(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_gr_vsize_t__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_gr_vsize_t__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_gr_vsize_t__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_gr_vsize_t__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_gr_vsize_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< size_t >::vector()\n"
    "    std::vector< size_t >::vector(std::vector< size_t > const &)\n"
    "    std::vector< size_t >::vector(std::vector< size_t >::size_type)\n"
    "    std::vector< size_t >::vector(std::vector< size_t >::size_type,std::vector< size_t >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< size_t >::value_type temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:gr_vsize_t_push_back",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t_push_back" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vsize_t_push_back" "', argument " "2"" of type '" "std::vector< size_t >::value_type""'");
  } 
  temp2 = static_cast< std::vector< size_t >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->push_back((std::vector< size_t >::value_type const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< size_t >::value_type *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t_front",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t_front" "', argument " "1"" of type '" "std::vector< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = (std::vector< size_t >::value_type *) &((std::vector< size_t > const *)arg1)->front();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< size_t >::value_type *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t_back" "', argument " "1"" of type '" "std::vector< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = (std::vector< size_t >::value_type *) &((std::vector< size_t > const *)arg1)->back();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::size_type arg2 ;
  std::vector< size_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< size_t >::value_type temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:gr_vsize_t_assign",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t_assign" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vsize_t_assign" "', argument " "2"" of type '" "std::vector< size_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< size_t >::size_type >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vsize_t_assign" "', argument " "3"" of type '" "std::vector< size_t >::value_type""'");
  } 
  temp3 = static_cast< std::vector< size_t >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->assign(arg2,(std::vector< size_t >::value_type const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::size_type arg2 ;
  std::vector< size_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< size_t >::value_type temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t_resize",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t_resize" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vsize_t_resize" "', argument " "2"" of type '" "std::vector< size_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< size_t >::size_type >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vsize_t_resize" "', argument " "3"" of type '" "std::vector< size_t >::value_type""'");
  } 
  temp3 = static_cast< std::vector< size_t >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->resize(arg2,(std::vector< size_t >::value_type const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_gr_vsize_t_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_gr_vsize_t_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vsize_t_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< size_t >::resize(std::vector< size_t >::size_type)\n"
    "    std::vector< size_t >::resize(std::vector< size_t >::size_type,std::vector< size_t >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::iterator arg2 ;
  std::vector< size_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< size_t >::value_type temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< size_t >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t_insert",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t_insert" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vsize_t_insert" "', argument " "2"" of type '" "std::vector< size_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< size_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< size_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vsize_t_insert" "', argument " "2"" of type '" "std::vector< size_t >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vsize_t_insert" "', argument " "3"" of type '" "std::vector< size_t >::value_type""'");
  } 
  temp3 = static_cast< std::vector< size_t >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      result = (arg1)->insert(arg2,(std::vector< size_t >::value_type const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< size_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::iterator arg2 ;
  std::vector< size_t >::size_type arg3 ;
  std::vector< size_t >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< size_t >::value_type temp4 ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t_insert",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t_insert" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vsize_t_insert" "', argument " "2"" of type '" "std::vector< size_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< size_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< size_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vsize_t_insert" "', argument " "2"" of type '" "std::vector< size_t >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vsize_t_insert" "', argument " "3"" of type '" "std::vector< size_t >::size_type""'");
  } 
  arg3 = static_cast< std::vector< size_t >::size_type >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "gr_vsize_t_insert" "', argument " "4"" of type '" "std::vector< size_t >::value_type""'");
  } 
  temp4 = static_cast< std::vector< size_t >::value_type >(val4);
  arg4 = &temp4;
  {
    try {
      (arg1)->insert(arg2,arg3,(std::vector< size_t >::value_type const &)*arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< size_t >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_gr_vsize_t_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<size_t,std::allocator< size_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< size_t >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_gr_vsize_t_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vsize_t_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< size_t >::insert(std::vector< size_t >::iterator,std::vector< size_t >::value_type const &)\n"
    "    std::vector< size_t >::insert(std::vector< size_t >::iterator,std::vector< size_t >::size_type,std::vector< size_t >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:gr_vsize_t_reserve",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t_reserve" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vsize_t_reserve" "', argument " "2"" of type '" "std::vector< size_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< size_t >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vsize_t_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< size_t >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vsize_t_capacity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vsize_t_capacity" "', argument " "1"" of type '" "std::vector< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      result = ((std::vector< size_t > const *)arg1)->capacity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_gr_vsize_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_gr_vsize_t",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_gr_vsize_t" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *gr_vsize_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_gr_vvvsize_t_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t_iterator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t_iterator" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t___nonzero__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t___nonzero__" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg____nonzero__((std::vector< std::vector< std::vector< size_t > > > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t___bool__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t___bool__" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg____bool__((std::vector< std::vector< std::vector< size_t > > > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::vector< size_t > > >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t___len__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t___len__" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  {
    try {
      result = std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg____len__((std::vector< std::vector< std::vector< size_t > > > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t_pop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t_pop" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< std::vector< size_t > > >::value_type(static_cast< const std::vector< std::vector< std::vector< size_t > > >::value_type& >(result))), SWIGTYPE_p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  std::vector< std::vector< std::vector< size_t > > >::difference_type arg2 ;
  std::vector< std::vector< std::vector< size_t > > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:gr_vvvsize_t___getslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t___getslice__" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vvvsize_t___getslice__" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< size_t > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::vector< size_t > > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vvvsize_t___getslice__" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< size_t > > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::vector< size_t > > >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > > *)std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  std::vector< std::vector< std::vector< size_t > > >::difference_type arg2 ;
  std::vector< std::vector< std::vector< size_t > > >::difference_type arg3 ;
  std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > > const &arg4_defvalue = std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > >() ;
  std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > > *arg4 = (std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > > *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:gr_vvvsize_t___setslice__",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vvvsize_t___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< size_t > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::vector< size_t > > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vvvsize_t___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< size_t > > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::vector< size_t > > >::difference_type >(val3);
  if (obj3) {
    {
      std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > > *ptr = (std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > > *)0;
      res4 = swig::asptr(obj3, &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "gr_vvvsize_t___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vvvsize_t___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > > const &""'"); 
      }
      arg4 = ptr;
    }
  }
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  std::vector< std::vector< std::vector< size_t > > >::difference_type arg2 ;
  std::vector< std::vector< std::vector< size_t > > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:gr_vvvsize_t___delslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t___delslice__" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vvvsize_t___delslice__" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< size_t > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::vector< size_t > > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vvvsize_t___delslice__" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< size_t > > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::vector< size_t > > >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  std::vector< std::vector< std::vector< size_t > > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t___delitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vvvsize_t___delitem__" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< size_t > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::vector< size_t > > >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t___getitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vvvsize_t___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        result = (std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > > *)std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t___setitem__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vvvsize_t___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > > *ptr = (std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "gr_vvvsize_t___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vvvsize_t___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t___setitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vvvsize_t___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t___delitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vvvsize_t___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_gr_vvvsize_t___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_gr_vvvsize_t___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vvvsize_t___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::vector< size_t > > >::__delitem__(std::vector< std::vector< std::vector< size_t > > >::difference_type)\n"
    "    std::vector< std::vector< std::vector< size_t > > >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  std::vector< std::vector< std::vector< size_t > > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< std::vector< size_t > > >::value_type *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t___getitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vvvsize_t___getitem__" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< size_t > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::vector< size_t > > >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< std::vector< std::vector< size_t > > >::value_type *) &std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg____getitem____SWIG_1((std::vector< std::vector< std::vector< size_t > > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_gr_vvvsize_t___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_gr_vvvsize_t___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vvvsize_t___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::vector< size_t > > >::__getitem__(PySliceObject *)\n"
    "    std::vector< std::vector< std::vector< size_t > > >::__getitem__(std::vector< std::vector< std::vector< size_t > > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  std::vector< std::vector< std::vector< size_t > > >::difference_type arg2 ;
  std::vector< std::vector< std::vector< size_t > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t___setitem__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vvvsize_t___setitem__" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< size_t > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::vector< size_t > > >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "gr_vvvsize_t___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< size_t > > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vvvsize_t___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< size_t > > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > >::value_type * >(argp3);
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg____setitem____SWIG_2(arg1,arg2,(std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_gr_vvvsize_t___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_gr_vvvsize_t___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_gr_vvvsize_t___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vvvsize_t___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::vector< size_t > > >::__setitem__(PySliceObject *,std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > > const &)\n"
    "    std::vector< std::vector< std::vector< size_t > > >::__setitem__(PySliceObject *)\n"
    "    std::vector< std::vector< std::vector< size_t > > >::__setitem__(std::vector< std::vector< std::vector< size_t > > >::difference_type,std::vector< std::vector< std::vector< size_t > > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  std::vector< std::vector< std::vector< size_t > > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:gr_vvvsize_t_append",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t_append" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "gr_vvvsize_t_append" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< size_t > > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vvvsize_t_append" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< size_t > > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > >::value_type * >(argp2);
  {
    try {
      std_vector_Sl_std_vector_Sl_std_vector_Sl_size_t_Sg__Sg__Sg__append(arg1,(std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gr_vvvsize_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *result = 0 ;
  
  {
    try {
      result = (std::vector< std::vector< std::vector< size_t > > > *)new std::vector< std::vector< std::vector< size_t > > >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gr_vvvsize_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::vector< size_t > > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_gr_vvvsize_t",1,1,&obj0)) SWIG_fail;
  {
    std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > > *ptr = (std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_gr_vvvsize_t" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_gr_vvvsize_t" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< std::vector< std::vector< size_t > > > *)new std::vector< std::vector< std::vector< size_t > > >((std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > const &)*arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t_empty",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t_empty" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  {
    try {
      result = (bool)((std::vector< std::vector< std::vector< size_t > > > const *)arg1)->empty();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::vector< size_t > > >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t_size" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  {
    try {
      result = ((std::vector< std::vector< std::vector< size_t > > > const *)arg1)->size();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t_clear",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t_clear" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:gr_vvvsize_t_swap",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t_swap" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "gr_vvvsize_t_swap" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vvvsize_t_swap" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t_get_allocator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t_get_allocator" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  {
    try {
      result = ((std::vector< std::vector< std::vector< size_t > > > const *)arg1)->get_allocator();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< std::vector< size_t > > >::allocator_type(static_cast< const std::vector< std::vector< std::vector< size_t > > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::vector< size_t > > >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t_begin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t_begin" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::vector< size_t > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::vector< size_t > > >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t_end",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t_end" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::vector< size_t > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::vector< size_t > > >::reverse_iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t_rbegin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t_rbegin" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::vector< size_t > > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::vector< size_t > > >::reverse_iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t_rend",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t_rend" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::vector< size_t > > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gr_vvvsize_t__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::vector< size_t > > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_gr_vvvsize_t",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_gr_vvvsize_t" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< std::vector< size_t > > >::size_type >(val1);
  {
    try {
      result = (std::vector< std::vector< std::vector< size_t > > > *)new std::vector< std::vector< std::vector< size_t > > >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t_pop_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t_pop_back" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  std::vector< std::vector< std::vector< size_t > > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t_resize",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t_resize" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vvvsize_t_resize" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< size_t > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::vector< size_t > > >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  std::vector< std::vector< std::vector< size_t > > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< std::vector< size_t > > >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t_erase",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t_erase" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vvvsize_t_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< size_t > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::vector< size_t > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::vector< size_t > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vvvsize_t_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< size_t > > >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::vector< size_t > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  std::vector< std::vector< std::vector< size_t > > >::iterator arg2 ;
  std::vector< std::vector< std::vector< size_t > > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::vector< std::vector< size_t > > >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t_erase",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t_erase" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vvvsize_t_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< size_t > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::vector< size_t > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::vector< size_t > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vvvsize_t_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< size_t > > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vvvsize_t_erase" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< size_t > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::vector< size_t > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::vector< size_t > > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vvvsize_t_erase" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< size_t > > >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::vector< size_t > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::vector< size_t > > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_gr_vvvsize_t_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::vector< size_t > > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::vector< size_t > > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_gr_vvvsize_t_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vvvsize_t_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::vector< size_t > > >::erase(std::vector< std::vector< std::vector< size_t > > >::iterator)\n"
    "    std::vector< std::vector< std::vector< size_t > > >::erase(std::vector< std::vector< std::vector< size_t > > >::iterator,std::vector< std::vector< std::vector< size_t > > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_gr_vvvsize_t__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > >::size_type arg1 ;
  std::vector< std::vector< std::vector< size_t > > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< std::vector< size_t > > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_gr_vvvsize_t",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_gr_vvvsize_t" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< std::vector< size_t > > >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_gr_vvvsize_t" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< size_t > > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_gr_vvvsize_t" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< size_t > > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > >::value_type * >(argp2);
  {
    try {
      result = (std::vector< std::vector< std::vector< size_t > > > *)new std::vector< std::vector< std::vector< size_t > > >(arg1,(std::vector< std::vector< std::vector< size_t > > >::value_type const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gr_vvvsize_t(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_gr_vvvsize_t__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_gr_vvvsize_t__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_gr_vvvsize_t__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_gr_vvvsize_t__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_gr_vvvsize_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::vector< size_t > > >::vector()\n"
    "    std::vector< std::vector< std::vector< size_t > > >::vector(std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > const &)\n"
    "    std::vector< std::vector< std::vector< size_t > > >::vector(std::vector< std::vector< std::vector< size_t > > >::size_type)\n"
    "    std::vector< std::vector< std::vector< size_t > > >::vector(std::vector< std::vector< std::vector< size_t > > >::size_type,std::vector< std::vector< std::vector< size_t > > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  std::vector< std::vector< std::vector< size_t > > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:gr_vvvsize_t_push_back",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t_push_back" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "gr_vvvsize_t_push_back" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< size_t > > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vvvsize_t_push_back" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< size_t > > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > >::value_type * >(argp2);
  {
    try {
      (arg1)->push_back((std::vector< std::vector< std::vector< size_t > > >::value_type const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::vector< size_t > > >::value_type *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t_front",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t_front" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  {
    try {
      result = (std::vector< std::vector< std::vector< size_t > > >::value_type *) &((std::vector< std::vector< std::vector< size_t > > > const *)arg1)->front();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::vector< size_t > > >::value_type *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t_back" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  {
    try {
      result = (std::vector< std::vector< std::vector< size_t > > >::value_type *) &((std::vector< std::vector< std::vector< size_t > > > const *)arg1)->back();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  std::vector< std::vector< std::vector< size_t > > >::size_type arg2 ;
  std::vector< std::vector< std::vector< size_t > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:gr_vvvsize_t_assign",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t_assign" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vvvsize_t_assign" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< size_t > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::vector< size_t > > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "gr_vvvsize_t_assign" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< size_t > > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vvvsize_t_assign" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< size_t > > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > >::value_type * >(argp3);
  {
    try {
      (arg1)->assign(arg2,(std::vector< std::vector< std::vector< size_t > > >::value_type const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  std::vector< std::vector< std::vector< size_t > > >::size_type arg2 ;
  std::vector< std::vector< std::vector< size_t > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t_resize",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t_resize" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vvvsize_t_resize" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< size_t > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::vector< size_t > > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "gr_vvvsize_t_resize" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< size_t > > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vvvsize_t_resize" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< size_t > > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > >::value_type * >(argp3);
  {
    try {
      (arg1)->resize(arg2,(std::vector< std::vector< std::vector< size_t > > >::value_type const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_gr_vvvsize_t_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_gr_vvvsize_t_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vvvsize_t_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::vector< size_t > > >::resize(std::vector< std::vector< std::vector< size_t > > >::size_type)\n"
    "    std::vector< std::vector< std::vector< size_t > > >::resize(std::vector< std::vector< std::vector< size_t > > >::size_type,std::vector< std::vector< std::vector< size_t > > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  std::vector< std::vector< std::vector< size_t > > >::iterator arg2 ;
  std::vector< std::vector< std::vector< size_t > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::vector< std::vector< size_t > > >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t_insert",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t_insert" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vvvsize_t_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< size_t > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::vector< size_t > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::vector< size_t > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vvvsize_t_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< size_t > > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "gr_vvvsize_t_insert" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< size_t > > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vvvsize_t_insert" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< size_t > > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > >::value_type * >(argp3);
  {
    try {
      result = (arg1)->insert(arg2,(std::vector< std::vector< std::vector< size_t > > >::value_type const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::vector< size_t > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  std::vector< std::vector< std::vector< size_t > > >::iterator arg2 ;
  std::vector< std::vector< std::vector< size_t > > >::size_type arg3 ;
  std::vector< std::vector< std::vector< size_t > > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t_insert",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t_insert" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vvvsize_t_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< size_t > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::vector< size_t > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::vector< size_t > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vvvsize_t_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< size_t > > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vvvsize_t_insert" "', argument " "3"" of type '" "std::vector< std::vector< std::vector< size_t > > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::vector< size_t > > >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "gr_vvvsize_t_insert" "', argument " "4"" of type '" "std::vector< std::vector< std::vector< size_t > > >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vvvsize_t_insert" "', argument " "4"" of type '" "std::vector< std::vector< std::vector< size_t > > >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > >::value_type * >(argp4);
  {
    try {
      (arg1)->insert(arg2,arg3,(std::vector< std::vector< std::vector< size_t > > >::value_type const &)*arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::vector< size_t > > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_gr_vvvsize_t_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::vector< size_t > > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_gr_vvvsize_t_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vvvsize_t_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::vector< size_t > > >::insert(std::vector< std::vector< std::vector< size_t > > >::iterator,std::vector< std::vector< std::vector< size_t > > >::value_type const &)\n"
    "    std::vector< std::vector< std::vector< size_t > > >::insert(std::vector< std::vector< std::vector< size_t > > >::iterator,std::vector< std::vector< std::vector< size_t > > >::size_type,std::vector< std::vector< std::vector< size_t > > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  std::vector< std::vector< std::vector< size_t > > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:gr_vvvsize_t_reserve",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t_reserve" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vvvsize_t_reserve" "', argument " "2"" of type '" "std::vector< std::vector< std::vector< size_t > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::vector< size_t > > >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vvvsize_t_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::vector< size_t > > >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vvvsize_t_capacity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vvvsize_t_capacity" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  {
    try {
      result = ((std::vector< std::vector< std::vector< size_t > > > const *)arg1)->capacity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_gr_vvvsize_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::vector< size_t > > > *arg1 = (std::vector< std::vector< std::vector< size_t > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_gr_vvvsize_t",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_gr_vvvsize_t" "', argument " "1"" of type '" "std::vector< std::vector< std::vector< size_t > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::vector< size_t > > > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *gr_vvvsize_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_gr_vector_complexf_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf_iterator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf_iterator" "', argument " "1"" of type '" "std::vector< std::complex< float > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_std_complex_Sl_float_Sg__Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf___nonzero__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf___nonzero__" "', argument " "1"" of type '" "std::vector< std::complex< float > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_std_complex_Sl_float_Sg__Sg____nonzero__((std::vector< std::complex< float > > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf___bool__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf___bool__" "', argument " "1"" of type '" "std::vector< std::complex< float > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_std_complex_Sl_float_Sg__Sg____bool__((std::vector< std::complex< float > > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::complex< float > >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf___len__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf___len__" "', argument " "1"" of type '" "std::vector< std::complex< float > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  {
    try {
      result = std_vector_Sl_std_complex_Sl_float_Sg__Sg____len__((std::vector< std::complex< float > > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::complex< float > >::value_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf_pop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf_pop" "', argument " "1"" of type '" "std::vector< std::complex< float > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_std_complex_Sl_float_Sg__Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_complex_Sl_float_Sg_(static_cast< std::complex<float> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::vector< std::complex< float > >::difference_type arg2 ;
  std::vector< std::complex< float > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  std::vector< std::complex< float >,std::allocator< std::complex< float > > > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:gr_vector_complexf___getslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf___getslice__" "', argument " "1"" of type '" "std::vector< std::complex< float > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_complexf___getslice__" "', argument " "2"" of type '" "std::vector< std::complex< float > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::complex< float > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vector_complexf___getslice__" "', argument " "3"" of type '" "std::vector< std::complex< float > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::complex< float > >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< std::complex< float >,std::allocator< std::complex< float > > > *)std_vector_Sl_std_complex_Sl_float_Sg__Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::vector< std::complex< float > >::difference_type arg2 ;
  std::vector< std::complex< float > >::difference_type arg3 ;
  std::vector< std::complex< float >,std::allocator< std::complex< float > > > const &arg4_defvalue = std::vector< std::complex< float >,std::allocator< std::complex< float > > >() ;
  std::vector< std::complex< float >,std::allocator< std::complex< float > > > *arg4 = (std::vector< std::complex< float >,std::allocator< std::complex< float > > > *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:gr_vector_complexf___setslice__",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf___setslice__" "', argument " "1"" of type '" "std::vector< std::complex< float > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_complexf___setslice__" "', argument " "2"" of type '" "std::vector< std::complex< float > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::complex< float > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vector_complexf___setslice__" "', argument " "3"" of type '" "std::vector< std::complex< float > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::complex< float > >::difference_type >(val3);
  if (obj3) {
    {
      std::vector<std::complex< float >,std::allocator< std::complex< float > > > *ptr = (std::vector<std::complex< float >,std::allocator< std::complex< float > > > *)0;
      res4 = swig::asptr(obj3, &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "gr_vector_complexf___setslice__" "', argument " "4"" of type '" "std::vector< std::complex< float >,std::allocator< std::complex< float > > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vector_complexf___setslice__" "', argument " "4"" of type '" "std::vector< std::complex< float >,std::allocator< std::complex< float > > > const &""'"); 
      }
      arg4 = ptr;
    }
  }
  {
    try {
      try {
        std_vector_Sl_std_complex_Sl_float_Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector< std::complex< float >,std::allocator< std::complex< float > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::vector< std::complex< float > >::difference_type arg2 ;
  std::vector< std::complex< float > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:gr_vector_complexf___delslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf___delslice__" "', argument " "1"" of type '" "std::vector< std::complex< float > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_complexf___delslice__" "', argument " "2"" of type '" "std::vector< std::complex< float > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::complex< float > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vector_complexf___delslice__" "', argument " "3"" of type '" "std::vector< std::complex< float > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::complex< float > >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_std_complex_Sl_float_Sg__Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::vector< std::complex< float > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf___delitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf___delitem__" "', argument " "1"" of type '" "std::vector< std::complex< float > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_complexf___delitem__" "', argument " "2"" of type '" "std::vector< std::complex< float > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::complex< float > >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_std_complex_Sl_float_Sg__Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::complex< float >,std::allocator< std::complex< float > > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf___getitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf___getitem__" "', argument " "1"" of type '" "std::vector< std::complex< float > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_complexf___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        result = (std::vector< std::complex< float >,std::allocator< std::complex< float > > > *)std_vector_Sl_std_complex_Sl_float_Sg__Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::complex< float >,std::allocator< std::complex< float > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf___setitem__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf___setitem__" "', argument " "1"" of type '" "std::vector< std::complex< float > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_complexf___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<std::complex< float >,std::allocator< std::complex< float > > > *ptr = (std::vector<std::complex< float >,std::allocator< std::complex< float > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "gr_vector_complexf___setitem__" "', argument " "3"" of type '" "std::vector< std::complex< float >,std::allocator< std::complex< float > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vector_complexf___setitem__" "', argument " "3"" of type '" "std::vector< std::complex< float >,std::allocator< std::complex< float > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_std_complex_Sl_float_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::complex< float >,std::allocator< std::complex< float > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf___setitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf___setitem__" "', argument " "1"" of type '" "std::vector< std::complex< float > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_complexf___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_std_complex_Sl_float_Sg__Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf___delitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf___delitem__" "', argument " "1"" of type '" "std::vector< std::complex< float > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_complexf___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_std_complex_Sl_float_Sg__Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::complex< float >,std::allocator< std::complex< float > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_gr_vector_complexf___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::complex< float >,std::allocator< std::complex< float > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_gr_vector_complexf___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vector_complexf___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< float > >::__delitem__(std::vector< std::complex< float > >::difference_type)\n"
    "    std::vector< std::complex< float > >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::vector< std::complex< float > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::complex< float > >::value_type *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf___getitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf___getitem__" "', argument " "1"" of type '" "std::vector< std::complex< float > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_complexf___getitem__" "', argument " "2"" of type '" "std::vector< std::complex< float > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::complex< float > >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< std::complex< float > >::value_type *) &std_vector_Sl_std_complex_Sl_float_Sg__Sg____getitem____SWIG_1((std::vector< std::complex< float > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_complex_Sl_float_Sg_(static_cast< std::complex<float> >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::complex< float >,std::allocator< std::complex< float > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_gr_vector_complexf___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::complex< float >,std::allocator< std::complex< float > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_gr_vector_complexf___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vector_complexf___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< float > >::__getitem__(PySliceObject *)\n"
    "    std::vector< std::complex< float > >::__getitem__(std::vector< std::complex< float > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::vector< std::complex< float > >::difference_type arg2 ;
  std::vector< std::complex< float > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::complex< float > >::value_type temp3 ;
  std::complex< float > val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf___setitem__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf___setitem__" "', argument " "1"" of type '" "std::vector< std::complex< float > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_complexf___setitem__" "', argument " "2"" of type '" "std::vector< std::complex< float > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::complex< float > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_std_complex_Sl_float_Sg_(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vector_complexf___setitem__" "', argument " "3"" of type '" "std::vector< std::complex< float > >::value_type""'");
  } 
  temp3 = static_cast< std::vector< std::complex< float > >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      try {
        std_vector_Sl_std_complex_Sl_float_Sg__Sg____setitem____SWIG_2(arg1,arg2,(std::complex< float > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::complex< float >,std::allocator< std::complex< float > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_gr_vector_complexf___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::complex< float >,std::allocator< std::complex< float > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::complex< float >,std::allocator< std::complex< float > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_gr_vector_complexf___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::complex< float >,std::allocator< std::complex< float > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_std_complex_Sl_float_Sg_(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_gr_vector_complexf___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vector_complexf___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< float > >::__setitem__(PySliceObject *,std::vector< std::complex< float >,std::allocator< std::complex< float > > > const &)\n"
    "    std::vector< std::complex< float > >::__setitem__(PySliceObject *)\n"
    "    std::vector< std::complex< float > >::__setitem__(std::vector< std::complex< float > >::difference_type,std::vector< std::complex< float > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::vector< std::complex< float > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::complex< float > >::value_type temp2 ;
  std::complex< float > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:gr_vector_complexf_append",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf_append" "', argument " "1"" of type '" "std::vector< std::complex< float > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_float_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_complexf_append" "', argument " "2"" of type '" "std::vector< std::complex< float > >::value_type""'");
  } 
  temp2 = static_cast< std::vector< std::complex< float > >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      std_vector_Sl_std_complex_Sl_float_Sg__Sg__append(arg1,(std::complex< float > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gr_vector_complexf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *result = 0 ;
  
  {
    try {
      result = (std::vector< std::complex< float > > *)new std::vector< std::complex< float > >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gr_vector_complexf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::complex< float > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_gr_vector_complexf",1,1,&obj0)) SWIG_fail;
  {
    std::vector<std::complex< float >,std::allocator< std::complex< float > > > *ptr = (std::vector<std::complex< float >,std::allocator< std::complex< float > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_gr_vector_complexf" "', argument " "1"" of type '" "std::vector< std::complex< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_gr_vector_complexf" "', argument " "1"" of type '" "std::vector< std::complex< float > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< std::complex< float > > *)new std::vector< std::complex< float > >((std::vector< std::complex< float > > const &)*arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf_empty",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf_empty" "', argument " "1"" of type '" "std::vector< std::complex< float > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  {
    try {
      result = (bool)((std::vector< std::complex< float > > const *)arg1)->empty();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::complex< float > >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf_size" "', argument " "1"" of type '" "std::vector< std::complex< float > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  {
    try {
      result = ((std::vector< std::complex< float > > const *)arg1)->size();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf_clear",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf_clear" "', argument " "1"" of type '" "std::vector< std::complex< float > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::vector< std::complex< float > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:gr_vector_complexf_swap",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf_swap" "', argument " "1"" of type '" "std::vector< std::complex< float > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "gr_vector_complexf_swap" "', argument " "2"" of type '" "std::vector< std::complex< float > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vector_complexf_swap" "', argument " "2"" of type '" "std::vector< std::complex< float > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::complex< float > > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::complex< float > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf_get_allocator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf_get_allocator" "', argument " "1"" of type '" "std::vector< std::complex< float > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  {
    try {
      result = ((std::vector< std::complex< float > > const *)arg1)->get_allocator();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::complex< float > >::allocator_type(static_cast< const std::vector< std::complex< float > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__complexT_float_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::complex< float > >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf_begin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf_begin" "', argument " "1"" of type '" "std::vector< std::complex< float > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::complex< float > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::complex< float > >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf_end",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf_end" "', argument " "1"" of type '" "std::vector< std::complex< float > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::complex< float > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::complex< float > >::reverse_iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf_rbegin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf_rbegin" "', argument " "1"" of type '" "std::vector< std::complex< float > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::complex< float > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::complex< float > >::reverse_iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf_rend",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf_rend" "', argument " "1"" of type '" "std::vector< std::complex< float > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::complex< float > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gr_vector_complexf__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::complex< float > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_gr_vector_complexf",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_gr_vector_complexf" "', argument " "1"" of type '" "std::vector< std::complex< float > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::complex< float > >::size_type >(val1);
  {
    try {
      result = (std::vector< std::complex< float > > *)new std::vector< std::complex< float > >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf_pop_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf_pop_back" "', argument " "1"" of type '" "std::vector< std::complex< float > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::vector< std::complex< float > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf_resize",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf_resize" "', argument " "1"" of type '" "std::vector< std::complex< float > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_complexf_resize" "', argument " "2"" of type '" "std::vector< std::complex< float > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::complex< float > >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::vector< std::complex< float > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::complex< float > >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf_erase",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf_erase" "', argument " "1"" of type '" "std::vector< std::complex< float > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_complexf_erase" "', argument " "2"" of type '" "std::vector< std::complex< float > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::complex< float > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::complex< float > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_complexf_erase" "', argument " "2"" of type '" "std::vector< std::complex< float > >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::complex< float > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::vector< std::complex< float > >::iterator arg2 ;
  std::vector< std::complex< float > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::complex< float > >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf_erase",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf_erase" "', argument " "1"" of type '" "std::vector< std::complex< float > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_complexf_erase" "', argument " "2"" of type '" "std::vector< std::complex< float > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::complex< float > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::complex< float > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_complexf_erase" "', argument " "2"" of type '" "std::vector< std::complex< float > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_complexf_erase" "', argument " "3"" of type '" "std::vector< std::complex< float > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::complex< float > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::complex< float > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_complexf_erase" "', argument " "3"" of type '" "std::vector< std::complex< float > >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::complex< float > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::complex< float >,std::allocator< std::complex< float > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::complex< float > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_gr_vector_complexf_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::complex< float >,std::allocator< std::complex< float > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::complex< float > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::complex< float > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_gr_vector_complexf_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vector_complexf_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< float > >::erase(std::vector< std::complex< float > >::iterator)\n"
    "    std::vector< std::complex< float > >::erase(std::vector< std::complex< float > >::iterator,std::vector< std::complex< float > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_gr_vector_complexf__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > >::size_type arg1 ;
  std::vector< std::complex< float > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::complex< float > >::value_type temp2 ;
  std::complex< float > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::complex< float > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_gr_vector_complexf",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_gr_vector_complexf" "', argument " "1"" of type '" "std::vector< std::complex< float > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::complex< float > >::size_type >(val1);
  ecode2 = SWIG_AsVal_std_complex_Sl_float_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_gr_vector_complexf" "', argument " "2"" of type '" "std::vector< std::complex< float > >::value_type""'");
  } 
  temp2 = static_cast< std::vector< std::complex< float > >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (std::vector< std::complex< float > > *)new std::vector< std::complex< float > >(arg1,(std::vector< std::complex< float > >::value_type const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gr_vector_complexf(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_gr_vector_complexf__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_gr_vector_complexf__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::complex< float >,std::allocator< std::complex< float > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_gr_vector_complexf__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_std_complex_Sl_float_Sg_(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_gr_vector_complexf__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_gr_vector_complexf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< float > >::vector()\n"
    "    std::vector< std::complex< float > >::vector(std::vector< std::complex< float > > const &)\n"
    "    std::vector< std::complex< float > >::vector(std::vector< std::complex< float > >::size_type)\n"
    "    std::vector< std::complex< float > >::vector(std::vector< std::complex< float > >::size_type,std::vector< std::complex< float > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::vector< std::complex< float > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::complex< float > >::value_type temp2 ;
  std::complex< float > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:gr_vector_complexf_push_back",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf_push_back" "', argument " "1"" of type '" "std::vector< std::complex< float > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_float_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_complexf_push_back" "', argument " "2"" of type '" "std::vector< std::complex< float > >::value_type""'");
  } 
  temp2 = static_cast< std::vector< std::complex< float > >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->push_back((std::vector< std::complex< float > >::value_type const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::complex< float > >::value_type *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf_front",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf_front" "', argument " "1"" of type '" "std::vector< std::complex< float > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  {
    try {
      result = (std::vector< std::complex< float > >::value_type *) &((std::vector< std::complex< float > > const *)arg1)->front();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_complex_Sl_float_Sg_(static_cast< std::complex<float> >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::complex< float > >::value_type *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf_back" "', argument " "1"" of type '" "std::vector< std::complex< float > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  {
    try {
      result = (std::vector< std::complex< float > >::value_type *) &((std::vector< std::complex< float > > const *)arg1)->back();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_complex_Sl_float_Sg_(static_cast< std::complex<float> >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::vector< std::complex< float > >::size_type arg2 ;
  std::vector< std::complex< float > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::complex< float > >::value_type temp3 ;
  std::complex< float > val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:gr_vector_complexf_assign",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf_assign" "', argument " "1"" of type '" "std::vector< std::complex< float > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_complexf_assign" "', argument " "2"" of type '" "std::vector< std::complex< float > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::complex< float > >::size_type >(val2);
  ecode3 = SWIG_AsVal_std_complex_Sl_float_Sg_(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vector_complexf_assign" "', argument " "3"" of type '" "std::vector< std::complex< float > >::value_type""'");
  } 
  temp3 = static_cast< std::vector< std::complex< float > >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->assign(arg2,(std::vector< std::complex< float > >::value_type const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::vector< std::complex< float > >::size_type arg2 ;
  std::vector< std::complex< float > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::complex< float > >::value_type temp3 ;
  std::complex< float > val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf_resize",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf_resize" "', argument " "1"" of type '" "std::vector< std::complex< float > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_complexf_resize" "', argument " "2"" of type '" "std::vector< std::complex< float > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::complex< float > >::size_type >(val2);
  ecode3 = SWIG_AsVal_std_complex_Sl_float_Sg_(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vector_complexf_resize" "', argument " "3"" of type '" "std::vector< std::complex< float > >::value_type""'");
  } 
  temp3 = static_cast< std::vector< std::complex< float > >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->resize(arg2,(std::vector< std::complex< float > >::value_type const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::complex< float >,std::allocator< std::complex< float > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_gr_vector_complexf_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::complex< float >,std::allocator< std::complex< float > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_std_complex_Sl_float_Sg_(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_gr_vector_complexf_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vector_complexf_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< float > >::resize(std::vector< std::complex< float > >::size_type)\n"
    "    std::vector< std::complex< float > >::resize(std::vector< std::complex< float > >::size_type,std::vector< std::complex< float > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::vector< std::complex< float > >::iterator arg2 ;
  std::vector< std::complex< float > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::complex< float > >::value_type temp3 ;
  std::complex< float > val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::complex< float > >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf_insert",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf_insert" "', argument " "1"" of type '" "std::vector< std::complex< float > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_complexf_insert" "', argument " "2"" of type '" "std::vector< std::complex< float > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::complex< float > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::complex< float > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_complexf_insert" "', argument " "2"" of type '" "std::vector< std::complex< float > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_std_complex_Sl_float_Sg_(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vector_complexf_insert" "', argument " "3"" of type '" "std::vector< std::complex< float > >::value_type""'");
  } 
  temp3 = static_cast< std::vector< std::complex< float > >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      result = (arg1)->insert(arg2,(std::vector< std::complex< float > >::value_type const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::complex< float > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::vector< std::complex< float > >::iterator arg2 ;
  std::vector< std::complex< float > >::size_type arg3 ;
  std::vector< std::complex< float > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< std::complex< float > >::value_type temp4 ;
  std::complex< float > val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf_insert",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf_insert" "', argument " "1"" of type '" "std::vector< std::complex< float > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_complexf_insert" "', argument " "2"" of type '" "std::vector< std::complex< float > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::complex< float > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::complex< float > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_complexf_insert" "', argument " "2"" of type '" "std::vector< std::complex< float > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vector_complexf_insert" "', argument " "3"" of type '" "std::vector< std::complex< float > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::complex< float > >::size_type >(val3);
  ecode4 = SWIG_AsVal_std_complex_Sl_float_Sg_(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "gr_vector_complexf_insert" "', argument " "4"" of type '" "std::vector< std::complex< float > >::value_type""'");
  } 
  temp4 = static_cast< std::vector< std::complex< float > >::value_type >(val4);
  arg4 = &temp4;
  {
    try {
      (arg1)->insert(arg2,arg3,(std::vector< std::complex< float > >::value_type const &)*arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::complex< float >,std::allocator< std::complex< float > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::complex< float > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_std_complex_Sl_float_Sg_(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_gr_vector_complexf_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::complex< float >,std::allocator< std::complex< float > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::complex< float > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_std_complex_Sl_float_Sg_(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_gr_vector_complexf_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vector_complexf_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< float > >::insert(std::vector< std::complex< float > >::iterator,std::vector< std::complex< float > >::value_type const &)\n"
    "    std::vector< std::complex< float > >::insert(std::vector< std::complex< float > >::iterator,std::vector< std::complex< float > >::size_type,std::vector< std::complex< float > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  std::vector< std::complex< float > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:gr_vector_complexf_reserve",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf_reserve" "', argument " "1"" of type '" "std::vector< std::complex< float > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_complexf_reserve" "', argument " "2"" of type '" "std::vector< std::complex< float > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::complex< float > >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexf_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::complex< float > >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexf_capacity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexf_capacity" "', argument " "1"" of type '" "std::vector< std::complex< float > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  {
    try {
      result = ((std::vector< std::complex< float > > const *)arg1)->capacity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_gr_vector_complexf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< float > > *arg1 = (std::vector< std::complex< float > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_gr_vector_complexf",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_gr_vector_complexf" "', argument " "1"" of type '" "std::vector< std::complex< float > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< float > > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *gr_vector_complexf_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_gr_vector_complexd_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd_iterator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd_iterator" "', argument " "1"" of type '" "std::vector< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_std_complex_Sl_double_Sg__Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd___nonzero__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd___nonzero__" "', argument " "1"" of type '" "std::vector< std::complex< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_std_complex_Sl_double_Sg__Sg____nonzero__((std::vector< std::complex< double > > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd___bool__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd___bool__" "', argument " "1"" of type '" "std::vector< std::complex< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_std_complex_Sl_double_Sg__Sg____bool__((std::vector< std::complex< double > > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::complex< double > >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd___len__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd___len__" "', argument " "1"" of type '" "std::vector< std::complex< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  {
    try {
      result = std_vector_Sl_std_complex_Sl_double_Sg__Sg____len__((std::vector< std::complex< double > > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::complex< double > >::value_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd_pop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd_pop" "', argument " "1"" of type '" "std::vector< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_std_complex_Sl_double_Sg__Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::vector< std::complex< double > >::difference_type arg2 ;
  std::vector< std::complex< double > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  std::vector< std::complex< double >,std::allocator< std::complex< double > > > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:gr_vector_complexd___getslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd___getslice__" "', argument " "1"" of type '" "std::vector< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_complexd___getslice__" "', argument " "2"" of type '" "std::vector< std::complex< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::complex< double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vector_complexd___getslice__" "', argument " "3"" of type '" "std::vector< std::complex< double > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::complex< double > >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< std::complex< double >,std::allocator< std::complex< double > > > *)std_vector_Sl_std_complex_Sl_double_Sg__Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::vector< std::complex< double > >::difference_type arg2 ;
  std::vector< std::complex< double > >::difference_type arg3 ;
  std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &arg4_defvalue = std::vector< std::complex< double >,std::allocator< std::complex< double > > >() ;
  std::vector< std::complex< double >,std::allocator< std::complex< double > > > *arg4 = (std::vector< std::complex< double >,std::allocator< std::complex< double > > > *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:gr_vector_complexd___setslice__",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd___setslice__" "', argument " "1"" of type '" "std::vector< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_complexd___setslice__" "', argument " "2"" of type '" "std::vector< std::complex< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::complex< double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vector_complexd___setslice__" "', argument " "3"" of type '" "std::vector< std::complex< double > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::complex< double > >::difference_type >(val3);
  if (obj3) {
    {
      std::vector<std::complex< double >,std::allocator< std::complex< double > > > *ptr = (std::vector<std::complex< double >,std::allocator< std::complex< double > > > *)0;
      res4 = swig::asptr(obj3, &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "gr_vector_complexd___setslice__" "', argument " "4"" of type '" "std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vector_complexd___setslice__" "', argument " "4"" of type '" "std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &""'"); 
      }
      arg4 = ptr;
    }
  }
  {
    try {
      try {
        std_vector_Sl_std_complex_Sl_double_Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::vector< std::complex< double > >::difference_type arg2 ;
  std::vector< std::complex< double > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:gr_vector_complexd___delslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd___delslice__" "', argument " "1"" of type '" "std::vector< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_complexd___delslice__" "', argument " "2"" of type '" "std::vector< std::complex< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::complex< double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vector_complexd___delslice__" "', argument " "3"" of type '" "std::vector< std::complex< double > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::complex< double > >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_std_complex_Sl_double_Sg__Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::vector< std::complex< double > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd___delitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd___delitem__" "', argument " "1"" of type '" "std::vector< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_complexd___delitem__" "', argument " "2"" of type '" "std::vector< std::complex< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::complex< double > >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_std_complex_Sl_double_Sg__Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::complex< double >,std::allocator< std::complex< double > > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd___getitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd___getitem__" "', argument " "1"" of type '" "std::vector< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_complexd___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        result = (std::vector< std::complex< double >,std::allocator< std::complex< double > > > *)std_vector_Sl_std_complex_Sl_double_Sg__Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::complex< double >,std::allocator< std::complex< double > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd___setitem__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd___setitem__" "', argument " "1"" of type '" "std::vector< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_complexd___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<std::complex< double >,std::allocator< std::complex< double > > > *ptr = (std::vector<std::complex< double >,std::allocator< std::complex< double > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "gr_vector_complexd___setitem__" "', argument " "3"" of type '" "std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vector_complexd___setitem__" "', argument " "3"" of type '" "std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_std_complex_Sl_double_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd___setitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd___setitem__" "', argument " "1"" of type '" "std::vector< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_complexd___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_std_complex_Sl_double_Sg__Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd___delitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd___delitem__" "', argument " "1"" of type '" "std::vector< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_complexd___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_std_complex_Sl_double_Sg__Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::complex< double >,std::allocator< std::complex< double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_gr_vector_complexd___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::complex< double >,std::allocator< std::complex< double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_gr_vector_complexd___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vector_complexd___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< double > >::__delitem__(std::vector< std::complex< double > >::difference_type)\n"
    "    std::vector< std::complex< double > >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::vector< std::complex< double > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::complex< double > >::value_type *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd___getitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd___getitem__" "', argument " "1"" of type '" "std::vector< std::complex< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_complexd___getitem__" "', argument " "2"" of type '" "std::vector< std::complex< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::complex< double > >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< std::complex< double > >::value_type *) &std_vector_Sl_std_complex_Sl_double_Sg__Sg____getitem____SWIG_1((std::vector< std::complex< double > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::complex< double >,std::allocator< std::complex< double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_gr_vector_complexd___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::complex< double >,std::allocator< std::complex< double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_gr_vector_complexd___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vector_complexd___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< double > >::__getitem__(PySliceObject *)\n"
    "    std::vector< std::complex< double > >::__getitem__(std::vector< std::complex< double > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::vector< std::complex< double > >::difference_type arg2 ;
  std::vector< std::complex< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::complex< double > >::value_type temp3 ;
  std::complex< double > val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd___setitem__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd___setitem__" "', argument " "1"" of type '" "std::vector< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_complexd___setitem__" "', argument " "2"" of type '" "std::vector< std::complex< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::complex< double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vector_complexd___setitem__" "', argument " "3"" of type '" "std::vector< std::complex< double > >::value_type""'");
  } 
  temp3 = static_cast< std::vector< std::complex< double > >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      try {
        std_vector_Sl_std_complex_Sl_double_Sg__Sg____setitem____SWIG_2(arg1,arg2,(std::complex< double > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::complex< double >,std::allocator< std::complex< double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_gr_vector_complexd___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::complex< double >,std::allocator< std::complex< double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::complex< double >,std::allocator< std::complex< double > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_gr_vector_complexd___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::complex< double >,std::allocator< std::complex< double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_gr_vector_complexd___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vector_complexd___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< double > >::__setitem__(PySliceObject *,std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &)\n"
    "    std::vector< std::complex< double > >::__setitem__(PySliceObject *)\n"
    "    std::vector< std::complex< double > >::__setitem__(std::vector< std::complex< double > >::difference_type,std::vector< std::complex< double > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::vector< std::complex< double > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::complex< double > >::value_type temp2 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:gr_vector_complexd_append",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd_append" "', argument " "1"" of type '" "std::vector< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_complexd_append" "', argument " "2"" of type '" "std::vector< std::complex< double > >::value_type""'");
  } 
  temp2 = static_cast< std::vector< std::complex< double > >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      std_vector_Sl_std_complex_Sl_double_Sg__Sg__append(arg1,(std::complex< double > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gr_vector_complexd__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *result = 0 ;
  
  {
    try {
      result = (std::vector< std::complex< double > > *)new std::vector< std::complex< double > >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gr_vector_complexd__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::complex< double > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_gr_vector_complexd",1,1,&obj0)) SWIG_fail;
  {
    std::vector<std::complex< double >,std::allocator< std::complex< double > > > *ptr = (std::vector<std::complex< double >,std::allocator< std::complex< double > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_gr_vector_complexd" "', argument " "1"" of type '" "std::vector< std::complex< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_gr_vector_complexd" "', argument " "1"" of type '" "std::vector< std::complex< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< std::complex< double > > *)new std::vector< std::complex< double > >((std::vector< std::complex< double > > const &)*arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd_empty",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd_empty" "', argument " "1"" of type '" "std::vector< std::complex< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  {
    try {
      result = (bool)((std::vector< std::complex< double > > const *)arg1)->empty();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::complex< double > >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd_size" "', argument " "1"" of type '" "std::vector< std::complex< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  {
    try {
      result = ((std::vector< std::complex< double > > const *)arg1)->size();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd_clear",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd_clear" "', argument " "1"" of type '" "std::vector< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::vector< std::complex< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:gr_vector_complexd_swap",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd_swap" "', argument " "1"" of type '" "std::vector< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "gr_vector_complexd_swap" "', argument " "2"" of type '" "std::vector< std::complex< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vector_complexd_swap" "', argument " "2"" of type '" "std::vector< std::complex< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::complex< double > > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::complex< double > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd_get_allocator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd_get_allocator" "', argument " "1"" of type '" "std::vector< std::complex< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  {
    try {
      result = ((std::vector< std::complex< double > > const *)arg1)->get_allocator();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::complex< double > >::allocator_type(static_cast< const std::vector< std::complex< double > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__complexT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::complex< double > >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd_begin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd_begin" "', argument " "1"" of type '" "std::vector< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::complex< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::complex< double > >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd_end",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd_end" "', argument " "1"" of type '" "std::vector< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::complex< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::complex< double > >::reverse_iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd_rbegin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd_rbegin" "', argument " "1"" of type '" "std::vector< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::complex< double > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::complex< double > >::reverse_iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd_rend",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd_rend" "', argument " "1"" of type '" "std::vector< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::complex< double > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gr_vector_complexd__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::complex< double > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_gr_vector_complexd",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_gr_vector_complexd" "', argument " "1"" of type '" "std::vector< std::complex< double > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::complex< double > >::size_type >(val1);
  {
    try {
      result = (std::vector< std::complex< double > > *)new std::vector< std::complex< double > >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd_pop_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd_pop_back" "', argument " "1"" of type '" "std::vector< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::vector< std::complex< double > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd_resize",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd_resize" "', argument " "1"" of type '" "std::vector< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_complexd_resize" "', argument " "2"" of type '" "std::vector< std::complex< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::complex< double > >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::vector< std::complex< double > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::complex< double > >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd_erase",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd_erase" "', argument " "1"" of type '" "std::vector< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_complexd_erase" "', argument " "2"" of type '" "std::vector< std::complex< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::complex< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::complex< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_complexd_erase" "', argument " "2"" of type '" "std::vector< std::complex< double > >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::complex< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::vector< std::complex< double > >::iterator arg2 ;
  std::vector< std::complex< double > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::complex< double > >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd_erase",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd_erase" "', argument " "1"" of type '" "std::vector< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_complexd_erase" "', argument " "2"" of type '" "std::vector< std::complex< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::complex< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::complex< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_complexd_erase" "', argument " "2"" of type '" "std::vector< std::complex< double > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_complexd_erase" "', argument " "3"" of type '" "std::vector< std::complex< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::complex< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::complex< double > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_complexd_erase" "', argument " "3"" of type '" "std::vector< std::complex< double > >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::complex< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::complex< double >,std::allocator< std::complex< double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::complex< double > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_gr_vector_complexd_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::complex< double >,std::allocator< std::complex< double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::complex< double > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::complex< double > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_gr_vector_complexd_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vector_complexd_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< double > >::erase(std::vector< std::complex< double > >::iterator)\n"
    "    std::vector< std::complex< double > >::erase(std::vector< std::complex< double > >::iterator,std::vector< std::complex< double > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_gr_vector_complexd__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > >::size_type arg1 ;
  std::vector< std::complex< double > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::complex< double > >::value_type temp2 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::complex< double > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_gr_vector_complexd",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_gr_vector_complexd" "', argument " "1"" of type '" "std::vector< std::complex< double > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::complex< double > >::size_type >(val1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_gr_vector_complexd" "', argument " "2"" of type '" "std::vector< std::complex< double > >::value_type""'");
  } 
  temp2 = static_cast< std::vector< std::complex< double > >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      result = (std::vector< std::complex< double > > *)new std::vector< std::complex< double > >(arg1,(std::vector< std::complex< double > >::value_type const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gr_vector_complexd(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_gr_vector_complexd__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_gr_vector_complexd__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::complex< double >,std::allocator< std::complex< double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_gr_vector_complexd__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_gr_vector_complexd__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_gr_vector_complexd'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< double > >::vector()\n"
    "    std::vector< std::complex< double > >::vector(std::vector< std::complex< double > > const &)\n"
    "    std::vector< std::complex< double > >::vector(std::vector< std::complex< double > >::size_type)\n"
    "    std::vector< std::complex< double > >::vector(std::vector< std::complex< double > >::size_type,std::vector< std::complex< double > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::vector< std::complex< double > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::complex< double > >::value_type temp2 ;
  std::complex< double > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:gr_vector_complexd_push_back",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd_push_back" "', argument " "1"" of type '" "std::vector< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_complexd_push_back" "', argument " "2"" of type '" "std::vector< std::complex< double > >::value_type""'");
  } 
  temp2 = static_cast< std::vector< std::complex< double > >::value_type >(val2);
  arg2 = &temp2;
  {
    try {
      (arg1)->push_back((std::vector< std::complex< double > >::value_type const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::complex< double > >::value_type *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd_front",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd_front" "', argument " "1"" of type '" "std::vector< std::complex< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  {
    try {
      result = (std::vector< std::complex< double > >::value_type *) &((std::vector< std::complex< double > > const *)arg1)->front();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::complex< double > >::value_type *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd_back" "', argument " "1"" of type '" "std::vector< std::complex< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  {
    try {
      result = (std::vector< std::complex< double > >::value_type *) &((std::vector< std::complex< double > > const *)arg1)->back();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::vector< std::complex< double > >::size_type arg2 ;
  std::vector< std::complex< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::complex< double > >::value_type temp3 ;
  std::complex< double > val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:gr_vector_complexd_assign",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd_assign" "', argument " "1"" of type '" "std::vector< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_complexd_assign" "', argument " "2"" of type '" "std::vector< std::complex< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::complex< double > >::size_type >(val2);
  ecode3 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vector_complexd_assign" "', argument " "3"" of type '" "std::vector< std::complex< double > >::value_type""'");
  } 
  temp3 = static_cast< std::vector< std::complex< double > >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->assign(arg2,(std::vector< std::complex< double > >::value_type const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::vector< std::complex< double > >::size_type arg2 ;
  std::vector< std::complex< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::complex< double > >::value_type temp3 ;
  std::complex< double > val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd_resize",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd_resize" "', argument " "1"" of type '" "std::vector< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_complexd_resize" "', argument " "2"" of type '" "std::vector< std::complex< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::complex< double > >::size_type >(val2);
  ecode3 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vector_complexd_resize" "', argument " "3"" of type '" "std::vector< std::complex< double > >::value_type""'");
  } 
  temp3 = static_cast< std::vector< std::complex< double > >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->resize(arg2,(std::vector< std::complex< double > >::value_type const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::complex< double >,std::allocator< std::complex< double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_gr_vector_complexd_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::complex< double >,std::allocator< std::complex< double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_gr_vector_complexd_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vector_complexd_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< double > >::resize(std::vector< std::complex< double > >::size_type)\n"
    "    std::vector< std::complex< double > >::resize(std::vector< std::complex< double > >::size_type,std::vector< std::complex< double > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::vector< std::complex< double > >::iterator arg2 ;
  std::vector< std::complex< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::complex< double > >::value_type temp3 ;
  std::complex< double > val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::complex< double > >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd_insert",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd_insert" "', argument " "1"" of type '" "std::vector< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_complexd_insert" "', argument " "2"" of type '" "std::vector< std::complex< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::complex< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::complex< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_complexd_insert" "', argument " "2"" of type '" "std::vector< std::complex< double > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vector_complexd_insert" "', argument " "3"" of type '" "std::vector< std::complex< double > >::value_type""'");
  } 
  temp3 = static_cast< std::vector< std::complex< double > >::value_type >(val3);
  arg3 = &temp3;
  {
    try {
      result = (arg1)->insert(arg2,(std::vector< std::complex< double > >::value_type const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::complex< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::vector< std::complex< double > >::iterator arg2 ;
  std::vector< std::complex< double > >::size_type arg3 ;
  std::vector< std::complex< double > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< std::complex< double > >::value_type temp4 ;
  std::complex< double > val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd_insert",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd_insert" "', argument " "1"" of type '" "std::vector< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_complexd_insert" "', argument " "2"" of type '" "std::vector< std::complex< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::complex< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::complex< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_complexd_insert" "', argument " "2"" of type '" "std::vector< std::complex< double > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vector_complexd_insert" "', argument " "3"" of type '" "std::vector< std::complex< double > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::complex< double > >::size_type >(val3);
  ecode4 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "gr_vector_complexd_insert" "', argument " "4"" of type '" "std::vector< std::complex< double > >::value_type""'");
  } 
  temp4 = static_cast< std::vector< std::complex< double > >::value_type >(val4);
  arg4 = &temp4;
  {
    try {
      (arg1)->insert(arg2,arg3,(std::vector< std::complex< double > >::value_type const &)*arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::complex< double >,std::allocator< std::complex< double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::complex< double > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_gr_vector_complexd_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::complex< double >,std::allocator< std::complex< double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::complex< double > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_gr_vector_complexd_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vector_complexd_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::complex< double > >::insert(std::vector< std::complex< double > >::iterator,std::vector< std::complex< double > >::value_type const &)\n"
    "    std::vector< std::complex< double > >::insert(std::vector< std::complex< double > >::iterator,std::vector< std::complex< double > >::size_type,std::vector< std::complex< double > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  std::vector< std::complex< double > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:gr_vector_complexd_reserve",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd_reserve" "', argument " "1"" of type '" "std::vector< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_complexd_reserve" "', argument " "2"" of type '" "std::vector< std::complex< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::complex< double > >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_complexd_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::complex< double > >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_complexd_capacity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_complexd_capacity" "', argument " "1"" of type '" "std::vector< std::complex< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  {
    try {
      result = ((std::vector< std::complex< double > > const *)arg1)->capacity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_gr_vector_complexd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::complex< double > > *arg1 = (std::vector< std::complex< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_gr_vector_complexd",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_gr_vector_complexd" "', argument " "1"" of type '" "std::vector< std::complex< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::complex< double > > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *gr_vector_complexd_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf_iterator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf_iterator" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf___nonzero__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf___nonzero__" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg____nonzero__((std::vector< std::vector< std::complex< float > > > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf___bool__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf___bool__" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg____bool__((std::vector< std::vector< std::complex< float > > > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::complex< float > > >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf___len__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf___len__" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  {
    try {
      result = std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg____len__((std::vector< std::vector< std::complex< float > > > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf_pop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf_pop" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<std::complex< float >,std::allocator< std::complex< float > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  std::vector< std::vector< std::complex< float > > >::difference_type arg2 ;
  std::vector< std::vector< std::complex< float > > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:gr_vector_vector_complexf___getslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf___getslice__" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_vector_complexf___getslice__" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< float > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::complex< float > > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vector_vector_complexf___getslice__" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< float > > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::complex< float > > >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > *)std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  std::vector< std::vector< std::complex< float > > >::difference_type arg2 ;
  std::vector< std::vector< std::complex< float > > >::difference_type arg3 ;
  std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > const &arg4_defvalue = std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > >() ;
  std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > *arg4 = (std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:gr_vector_vector_complexf___setslice__",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_vector_complexf___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< float > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::complex< float > > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vector_vector_complexf___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< float > > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::complex< float > > >::difference_type >(val3);
  if (obj3) {
    {
      std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > *ptr = (std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > *)0;
      res4 = swig::asptr(obj3, &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "gr_vector_vector_complexf___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vector_vector_complexf___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > const &""'"); 
      }
      arg4 = ptr;
    }
  }
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  std::vector< std::vector< std::complex< float > > >::difference_type arg2 ;
  std::vector< std::vector< std::complex< float > > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:gr_vector_vector_complexf___delslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf___delslice__" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_vector_complexf___delslice__" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< float > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::complex< float > > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vector_vector_complexf___delslice__" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< float > > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::complex< float > > >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  std::vector< std::vector< std::complex< float > > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf___delitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_vector_complexf___delitem__" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< float > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::complex< float > > >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf___getitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_vector_complexf___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        result = (std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > *)std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf___setitem__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_vector_complexf___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > *ptr = (std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "gr_vector_vector_complexf___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vector_vector_complexf___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf___setitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_vector_complexf___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf___delitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_vector_complexf___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_gr_vector_vector_complexf___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_gr_vector_vector_complexf___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vector_vector_complexf___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::complex< float > > >::__delitem__(std::vector< std::vector< std::complex< float > > >::difference_type)\n"
    "    std::vector< std::vector< std::complex< float > > >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  std::vector< std::vector< std::complex< float > > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< std::complex< float > > >::value_type *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf___getitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_vector_complexf___getitem__" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< float > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::complex< float > > >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< std::vector< std::complex< float > > >::value_type *) &std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg____getitem____SWIG_1((std::vector< std::vector< std::complex< float > > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<std::complex< float >,std::allocator< std::complex< float > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_gr_vector_vector_complexf___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_gr_vector_vector_complexf___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vector_vector_complexf___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::complex< float > > >::__getitem__(PySliceObject *)\n"
    "    std::vector< std::vector< std::complex< float > > >::__getitem__(std::vector< std::vector< std::complex< float > > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  std::vector< std::vector< std::complex< float > > >::difference_type arg2 ;
  std::vector< std::vector< std::complex< float > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf___setitem__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_vector_complexf___setitem__" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< float > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::complex< float > > >::difference_type >(val2);
  {
    std::vector<std::complex< float >,std::allocator< std::complex< float > > > *ptr = (std::vector<std::complex< float >,std::allocator< std::complex< float > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "gr_vector_vector_complexf___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< float > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vector_vector_complexf___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< float > > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg____setitem____SWIG_2(arg1,arg2,(std::vector< std::complex< float >,std::allocator< std::complex< float > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_gr_vector_vector_complexf___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_gr_vector_vector_complexf___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::complex< float >,std::allocator< std::complex< float > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_gr_vector_vector_complexf___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vector_vector_complexf___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::complex< float > > >::__setitem__(PySliceObject *,std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > const &)\n"
    "    std::vector< std::vector< std::complex< float > > >::__setitem__(PySliceObject *)\n"
    "    std::vector< std::vector< std::complex< float > > >::__setitem__(std::vector< std::vector< std::complex< float > > >::difference_type,std::vector< std::vector< std::complex< float > > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  std::vector< std::vector< std::complex< float > > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:gr_vector_vector_complexf_append",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf_append" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  {
    std::vector<std::complex< float >,std::allocator< std::complex< float > > > *ptr = (std::vector<std::complex< float >,std::allocator< std::complex< float > > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "gr_vector_vector_complexf_append" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< float > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vector_vector_complexf_append" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< float > > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      std_vector_Sl_std_vector_Sl_std_complex_Sl_float_Sg__Sg__Sg__append(arg1,(std::vector< std::complex< float >,std::allocator< std::complex< float > > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gr_vector_vector_complexf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *result = 0 ;
  
  {
    try {
      result = (std::vector< std::vector< std::complex< float > > > *)new std::vector< std::vector< std::complex< float > > >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gr_vector_vector_complexf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::complex< float > > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_gr_vector_vector_complexf",1,1,&obj0)) SWIG_fail;
  {
    std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > *ptr = (std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_gr_vector_vector_complexf" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_gr_vector_vector_complexf" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< std::vector< std::complex< float > > > *)new std::vector< std::vector< std::complex< float > > >((std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > const &)*arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf_empty",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf_empty" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  {
    try {
      result = (bool)((std::vector< std::vector< std::complex< float > > > const *)arg1)->empty();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::complex< float > > >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf_size" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  {
    try {
      result = ((std::vector< std::vector< std::complex< float > > > const *)arg1)->size();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf_clear",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf_clear" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:gr_vector_vector_complexf_swap",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf_swap" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "gr_vector_vector_complexf_swap" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vector_vector_complexf_swap" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf_get_allocator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf_get_allocator" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  {
    try {
      result = ((std::vector< std::vector< std::complex< float > > > const *)arg1)->get_allocator();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< std::complex< float > > >::allocator_type(static_cast< const std::vector< std::vector< std::complex< float > > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::complex< float > > >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf_begin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf_begin" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::complex< float > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::complex< float > > >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf_end",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf_end" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::complex< float > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::complex< float > > >::reverse_iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf_rbegin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf_rbegin" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::complex< float > > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::complex< float > > >::reverse_iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf_rend",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf_rend" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::complex< float > > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gr_vector_vector_complexf__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::complex< float > > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_gr_vector_vector_complexf",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_gr_vector_vector_complexf" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< std::complex< float > > >::size_type >(val1);
  {
    try {
      result = (std::vector< std::vector< std::complex< float > > > *)new std::vector< std::vector< std::complex< float > > >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf_pop_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf_pop_back" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  std::vector< std::vector< std::complex< float > > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf_resize",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf_resize" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_vector_complexf_resize" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< float > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::complex< float > > >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  std::vector< std::vector< std::complex< float > > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< std::complex< float > > >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf_erase",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf_erase" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_vector_complexf_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< float > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::complex< float > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::complex< float > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_vector_complexf_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< float > > >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::complex< float > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  std::vector< std::vector< std::complex< float > > >::iterator arg2 ;
  std::vector< std::vector< std::complex< float > > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::vector< std::complex< float > > >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf_erase",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf_erase" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_vector_complexf_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< float > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::complex< float > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::complex< float > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_vector_complexf_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< float > > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_vector_complexf_erase" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< float > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::complex< float > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::complex< float > > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_vector_complexf_erase" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< float > > >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::complex< float > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::complex< float > > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_gr_vector_vector_complexf_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::complex< float > > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::complex< float > > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_gr_vector_vector_complexf_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vector_vector_complexf_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::complex< float > > >::erase(std::vector< std::vector< std::complex< float > > >::iterator)\n"
    "    std::vector< std::vector< std::complex< float > > >::erase(std::vector< std::vector< std::complex< float > > >::iterator,std::vector< std::vector< std::complex< float > > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_gr_vector_vector_complexf__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > >::size_type arg1 ;
  std::vector< std::vector< std::complex< float > > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< std::complex< float > > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_gr_vector_vector_complexf",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_gr_vector_vector_complexf" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< std::complex< float > > >::size_type >(val1);
  {
    std::vector<std::complex< float >,std::allocator< std::complex< float > > > *ptr = (std::vector<std::complex< float >,std::allocator< std::complex< float > > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_gr_vector_vector_complexf" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< float > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_gr_vector_vector_complexf" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< float > > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (std::vector< std::vector< std::complex< float > > > *)new std::vector< std::vector< std::complex< float > > >(arg1,(std::vector< std::vector< std::complex< float > > >::value_type const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gr_vector_vector_complexf(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_gr_vector_vector_complexf__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_gr_vector_vector_complexf__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_gr_vector_vector_complexf__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<std::complex< float >,std::allocator< std::complex< float > > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_gr_vector_vector_complexf__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_gr_vector_vector_complexf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::complex< float > > >::vector()\n"
    "    std::vector< std::vector< std::complex< float > > >::vector(std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > const &)\n"
    "    std::vector< std::vector< std::complex< float > > >::vector(std::vector< std::vector< std::complex< float > > >::size_type)\n"
    "    std::vector< std::vector< std::complex< float > > >::vector(std::vector< std::vector< std::complex< float > > >::size_type,std::vector< std::vector< std::complex< float > > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  std::vector< std::vector< std::complex< float > > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:gr_vector_vector_complexf_push_back",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf_push_back" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  {
    std::vector<std::complex< float >,std::allocator< std::complex< float > > > *ptr = (std::vector<std::complex< float >,std::allocator< std::complex< float > > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "gr_vector_vector_complexf_push_back" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< float > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vector_vector_complexf_push_back" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< float > > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->push_back((std::vector< std::vector< std::complex< float > > >::value_type const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::complex< float > > >::value_type *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf_front",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf_front" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  {
    try {
      result = (std::vector< std::vector< std::complex< float > > >::value_type *) &((std::vector< std::vector< std::complex< float > > > const *)arg1)->front();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<std::complex< float >,std::allocator< std::complex< float > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::complex< float > > >::value_type *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf_back" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  {
    try {
      result = (std::vector< std::vector< std::complex< float > > >::value_type *) &((std::vector< std::vector< std::complex< float > > > const *)arg1)->back();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<std::complex< float >,std::allocator< std::complex< float > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  std::vector< std::vector< std::complex< float > > >::size_type arg2 ;
  std::vector< std::vector< std::complex< float > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:gr_vector_vector_complexf_assign",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf_assign" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_vector_complexf_assign" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< float > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::complex< float > > >::size_type >(val2);
  {
    std::vector<std::complex< float >,std::allocator< std::complex< float > > > *ptr = (std::vector<std::complex< float >,std::allocator< std::complex< float > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "gr_vector_vector_complexf_assign" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< float > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vector_vector_complexf_assign" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< float > > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->assign(arg2,(std::vector< std::vector< std::complex< float > > >::value_type const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  std::vector< std::vector< std::complex< float > > >::size_type arg2 ;
  std::vector< std::vector< std::complex< float > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf_resize",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf_resize" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_vector_complexf_resize" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< float > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::complex< float > > >::size_type >(val2);
  {
    std::vector<std::complex< float >,std::allocator< std::complex< float > > > *ptr = (std::vector<std::complex< float >,std::allocator< std::complex< float > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "gr_vector_vector_complexf_resize" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< float > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vector_vector_complexf_resize" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< float > > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->resize(arg2,(std::vector< std::vector< std::complex< float > > >::value_type const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_gr_vector_vector_complexf_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::complex< float >,std::allocator< std::complex< float > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_gr_vector_vector_complexf_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vector_vector_complexf_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::complex< float > > >::resize(std::vector< std::vector< std::complex< float > > >::size_type)\n"
    "    std::vector< std::vector< std::complex< float > > >::resize(std::vector< std::vector< std::complex< float > > >::size_type,std::vector< std::vector< std::complex< float > > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  std::vector< std::vector< std::complex< float > > >::iterator arg2 ;
  std::vector< std::vector< std::complex< float > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::vector< std::complex< float > > >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf_insert",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf_insert" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_vector_complexf_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< float > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::complex< float > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::complex< float > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_vector_complexf_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< float > > >::iterator""'");
    }
  }
  {
    std::vector<std::complex< float >,std::allocator< std::complex< float > > > *ptr = (std::vector<std::complex< float >,std::allocator< std::complex< float > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "gr_vector_vector_complexf_insert" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< float > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vector_vector_complexf_insert" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< float > > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (arg1)->insert(arg2,(std::vector< std::vector< std::complex< float > > >::value_type const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::complex< float > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  std::vector< std::vector< std::complex< float > > >::iterator arg2 ;
  std::vector< std::vector< std::complex< float > > >::size_type arg3 ;
  std::vector< std::vector< std::complex< float > > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf_insert",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf_insert" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_vector_complexf_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< float > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::complex< float > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::complex< float > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_vector_complexf_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< float > > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vector_vector_complexf_insert" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< float > > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::complex< float > > >::size_type >(val3);
  {
    std::vector<std::complex< float >,std::allocator< std::complex< float > > > *ptr = (std::vector<std::complex< float >,std::allocator< std::complex< float > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "gr_vector_vector_complexf_insert" "', argument " "4"" of type '" "std::vector< std::vector< std::complex< float > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vector_vector_complexf_insert" "', argument " "4"" of type '" "std::vector< std::vector< std::complex< float > > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      (arg1)->insert(arg2,arg3,(std::vector< std::vector< std::complex< float > > >::value_type const &)*arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::complex< float > > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::complex< float >,std::allocator< std::complex< float > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_gr_vector_vector_complexf_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::complex< float > > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<std::complex< float >,std::allocator< std::complex< float > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_gr_vector_vector_complexf_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vector_vector_complexf_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::complex< float > > >::insert(std::vector< std::vector< std::complex< float > > >::iterator,std::vector< std::vector< std::complex< float > > >::value_type const &)\n"
    "    std::vector< std::vector< std::complex< float > > >::insert(std::vector< std::vector< std::complex< float > > >::iterator,std::vector< std::vector< std::complex< float > > >::size_type,std::vector< std::vector< std::complex< float > > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  std::vector< std::vector< std::complex< float > > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:gr_vector_vector_complexf_reserve",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf_reserve" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_vector_complexf_reserve" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< float > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::complex< float > > >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexf_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::complex< float > > >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexf_capacity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexf_capacity" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  {
    try {
      result = ((std::vector< std::vector< std::complex< float > > > const *)arg1)->capacity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_gr_vector_vector_complexf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< float > > > *arg1 = (std::vector< std::vector< std::complex< float > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_gr_vector_vector_complexf",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_gr_vector_vector_complexf" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< float > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< float > > > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *gr_vector_vector_complexf_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd_iterator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd_iterator" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd___nonzero__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd___nonzero__" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg____nonzero__((std::vector< std::vector< std::complex< double > > > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd___bool__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd___bool__" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg____bool__((std::vector< std::vector< std::complex< double > > > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::complex< double > > >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd___len__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd___len__" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  {
    try {
      result = std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg____len__((std::vector< std::vector< std::complex< double > > > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::complex< double > > >::value_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd_pop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd_pop" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<std::complex< double >,std::allocator< std::complex< double > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  std::vector< std::vector< std::complex< double > > >::difference_type arg2 ;
  std::vector< std::vector< std::complex< double > > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:gr_vector_vector_complexd___getslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd___getslice__" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_vector_complexd___getslice__" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< double > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::complex< double > > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vector_vector_complexd___getslice__" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< double > > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::complex< double > > >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > *)std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  std::vector< std::vector< std::complex< double > > >::difference_type arg2 ;
  std::vector< std::vector< std::complex< double > > >::difference_type arg3 ;
  std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > const &arg4_defvalue = std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > >() ;
  std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > *arg4 = (std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:gr_vector_vector_complexd___setslice__",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_vector_complexd___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< double > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::complex< double > > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vector_vector_complexd___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< double > > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::complex< double > > >::difference_type >(val3);
  if (obj3) {
    {
      std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > *ptr = (std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > *)0;
      res4 = swig::asptr(obj3, &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "gr_vector_vector_complexd___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vector_vector_complexd___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > const &""'"); 
      }
      arg4 = ptr;
    }
  }
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  std::vector< std::vector< std::complex< double > > >::difference_type arg2 ;
  std::vector< std::vector< std::complex< double > > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:gr_vector_vector_complexd___delslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd___delslice__" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_vector_complexd___delslice__" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< double > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::complex< double > > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vector_vector_complexd___delslice__" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< double > > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::complex< double > > >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  std::vector< std::vector< std::complex< double > > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd___delitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_vector_complexd___delitem__" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< double > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::complex< double > > >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd___getitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_vector_complexd___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        result = (std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > *)std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd___setitem__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_vector_complexd___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > *ptr = (std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "gr_vector_vector_complexd___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vector_vector_complexd___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd___setitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_vector_complexd___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd___delitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_vector_complexd___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_gr_vector_vector_complexd___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_gr_vector_vector_complexd___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vector_vector_complexd___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::complex< double > > >::__delitem__(std::vector< std::vector< std::complex< double > > >::difference_type)\n"
    "    std::vector< std::vector< std::complex< double > > >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  std::vector< std::vector< std::complex< double > > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< std::complex< double > > >::value_type *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd___getitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_vector_complexd___getitem__" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< double > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::complex< double > > >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< std::vector< std::complex< double > > >::value_type *) &std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg____getitem____SWIG_1((std::vector< std::vector< std::complex< double > > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<std::complex< double >,std::allocator< std::complex< double > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_gr_vector_vector_complexd___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_gr_vector_vector_complexd___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vector_vector_complexd___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::complex< double > > >::__getitem__(PySliceObject *)\n"
    "    std::vector< std::vector< std::complex< double > > >::__getitem__(std::vector< std::vector< std::complex< double > > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  std::vector< std::vector< std::complex< double > > >::difference_type arg2 ;
  std::vector< std::vector< std::complex< double > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd___setitem__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_vector_complexd___setitem__" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< double > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::complex< double > > >::difference_type >(val2);
  {
    std::vector<std::complex< double >,std::allocator< std::complex< double > > > *ptr = (std::vector<std::complex< double >,std::allocator< std::complex< double > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "gr_vector_vector_complexd___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< double > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vector_vector_complexd___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< double > > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg____setitem____SWIG_2(arg1,arg2,(std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_gr_vector_vector_complexd___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_gr_vector_vector_complexd___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::complex< double >,std::allocator< std::complex< double > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_gr_vector_vector_complexd___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vector_vector_complexd___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::complex< double > > >::__setitem__(PySliceObject *,std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > const &)\n"
    "    std::vector< std::vector< std::complex< double > > >::__setitem__(PySliceObject *)\n"
    "    std::vector< std::vector< std::complex< double > > >::__setitem__(std::vector< std::vector< std::complex< double > > >::difference_type,std::vector< std::vector< std::complex< double > > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  std::vector< std::vector< std::complex< double > > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:gr_vector_vector_complexd_append",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd_append" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  {
    std::vector<std::complex< double >,std::allocator< std::complex< double > > > *ptr = (std::vector<std::complex< double >,std::allocator< std::complex< double > > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "gr_vector_vector_complexd_append" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< double > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vector_vector_complexd_append" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< double > > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      std_vector_Sl_std_vector_Sl_std_complex_Sl_double_Sg__Sg__Sg__append(arg1,(std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gr_vector_vector_complexd__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *result = 0 ;
  
  {
    try {
      result = (std::vector< std::vector< std::complex< double > > > *)new std::vector< std::vector< std::complex< double > > >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gr_vector_vector_complexd__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::complex< double > > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_gr_vector_vector_complexd",1,1,&obj0)) SWIG_fail;
  {
    std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > *ptr = (std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_gr_vector_vector_complexd" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_gr_vector_vector_complexd" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< std::vector< std::complex< double > > > *)new std::vector< std::vector< std::complex< double > > >((std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > const &)*arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd_empty",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd_empty" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  {
    try {
      result = (bool)((std::vector< std::vector< std::complex< double > > > const *)arg1)->empty();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::complex< double > > >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd_size" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  {
    try {
      result = ((std::vector< std::vector< std::complex< double > > > const *)arg1)->size();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd_clear",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd_clear" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:gr_vector_vector_complexd_swap",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd_swap" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "gr_vector_vector_complexd_swap" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vector_vector_complexd_swap" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd_get_allocator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd_get_allocator" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  {
    try {
      result = ((std::vector< std::vector< std::complex< double > > > const *)arg1)->get_allocator();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< std::complex< double > > >::allocator_type(static_cast< const std::vector< std::vector< std::complex< double > > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::complex< double > > >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd_begin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd_begin" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::complex< double > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::complex< double > > >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd_end",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd_end" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::complex< double > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::complex< double > > >::reverse_iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd_rbegin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd_rbegin" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::complex< double > > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::complex< double > > >::reverse_iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd_rend",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd_rend" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::complex< double > > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gr_vector_vector_complexd__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::complex< double > > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_gr_vector_vector_complexd",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_gr_vector_vector_complexd" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< std::complex< double > > >::size_type >(val1);
  {
    try {
      result = (std::vector< std::vector< std::complex< double > > > *)new std::vector< std::vector< std::complex< double > > >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd_pop_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd_pop_back" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  std::vector< std::vector< std::complex< double > > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd_resize",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd_resize" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_vector_complexd_resize" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< double > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::complex< double > > >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  std::vector< std::vector< std::complex< double > > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< std::complex< double > > >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd_erase",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd_erase" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_vector_complexd_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< double > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::complex< double > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::complex< double > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_vector_complexd_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< double > > >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::complex< double > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  std::vector< std::vector< std::complex< double > > >::iterator arg2 ;
  std::vector< std::vector< std::complex< double > > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::vector< std::complex< double > > >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd_erase",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd_erase" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_vector_complexd_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< double > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::complex< double > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::complex< double > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_vector_complexd_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< double > > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_vector_complexd_erase" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< double > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::complex< double > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::complex< double > > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_vector_complexd_erase" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< double > > >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::complex< double > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::complex< double > > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_gr_vector_vector_complexd_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::complex< double > > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::complex< double > > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_gr_vector_vector_complexd_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vector_vector_complexd_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::complex< double > > >::erase(std::vector< std::vector< std::complex< double > > >::iterator)\n"
    "    std::vector< std::vector< std::complex< double > > >::erase(std::vector< std::vector< std::complex< double > > >::iterator,std::vector< std::vector< std::complex< double > > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_gr_vector_vector_complexd__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > >::size_type arg1 ;
  std::vector< std::vector< std::complex< double > > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::vector< std::complex< double > > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_gr_vector_vector_complexd",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_gr_vector_vector_complexd" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< std::complex< double > > >::size_type >(val1);
  {
    std::vector<std::complex< double >,std::allocator< std::complex< double > > > *ptr = (std::vector<std::complex< double >,std::allocator< std::complex< double > > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_gr_vector_vector_complexd" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< double > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_gr_vector_vector_complexd" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< double > > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (std::vector< std::vector< std::complex< double > > > *)new std::vector< std::vector< std::complex< double > > >(arg1,(std::vector< std::vector< std::complex< double > > >::value_type const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gr_vector_vector_complexd(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_gr_vector_vector_complexd__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_gr_vector_vector_complexd__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_gr_vector_vector_complexd__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector<std::complex< double >,std::allocator< std::complex< double > > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_gr_vector_vector_complexd__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_gr_vector_vector_complexd'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::complex< double > > >::vector()\n"
    "    std::vector< std::vector< std::complex< double > > >::vector(std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > const &)\n"
    "    std::vector< std::vector< std::complex< double > > >::vector(std::vector< std::vector< std::complex< double > > >::size_type)\n"
    "    std::vector< std::vector< std::complex< double > > >::vector(std::vector< std::vector< std::complex< double > > >::size_type,std::vector< std::vector< std::complex< double > > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  std::vector< std::vector< std::complex< double > > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:gr_vector_vector_complexd_push_back",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd_push_back" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  {
    std::vector<std::complex< double >,std::allocator< std::complex< double > > > *ptr = (std::vector<std::complex< double >,std::allocator< std::complex< double > > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "gr_vector_vector_complexd_push_back" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< double > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vector_vector_complexd_push_back" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< double > > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->push_back((std::vector< std::vector< std::complex< double > > >::value_type const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::complex< double > > >::value_type *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd_front",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd_front" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  {
    try {
      result = (std::vector< std::vector< std::complex< double > > >::value_type *) &((std::vector< std::vector< std::complex< double > > > const *)arg1)->front();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<std::complex< double >,std::allocator< std::complex< double > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::complex< double > > >::value_type *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd_back" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  {
    try {
      result = (std::vector< std::vector< std::complex< double > > >::value_type *) &((std::vector< std::vector< std::complex< double > > > const *)arg1)->back();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<std::complex< double >,std::allocator< std::complex< double > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  std::vector< std::vector< std::complex< double > > >::size_type arg2 ;
  std::vector< std::vector< std::complex< double > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:gr_vector_vector_complexd_assign",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd_assign" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_vector_complexd_assign" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< double > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::complex< double > > >::size_type >(val2);
  {
    std::vector<std::complex< double >,std::allocator< std::complex< double > > > *ptr = (std::vector<std::complex< double >,std::allocator< std::complex< double > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "gr_vector_vector_complexd_assign" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< double > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vector_vector_complexd_assign" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< double > > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->assign(arg2,(std::vector< std::vector< std::complex< double > > >::value_type const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  std::vector< std::vector< std::complex< double > > >::size_type arg2 ;
  std::vector< std::vector< std::complex< double > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd_resize",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd_resize" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_vector_complexd_resize" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< double > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::complex< double > > >::size_type >(val2);
  {
    std::vector<std::complex< double >,std::allocator< std::complex< double > > > *ptr = (std::vector<std::complex< double >,std::allocator< std::complex< double > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "gr_vector_vector_complexd_resize" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< double > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vector_vector_complexd_resize" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< double > > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->resize(arg2,(std::vector< std::vector< std::complex< double > > >::value_type const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_gr_vector_vector_complexd_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::complex< double >,std::allocator< std::complex< double > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_gr_vector_vector_complexd_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vector_vector_complexd_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::complex< double > > >::resize(std::vector< std::vector< std::complex< double > > >::size_type)\n"
    "    std::vector< std::vector< std::complex< double > > >::resize(std::vector< std::vector< std::complex< double > > >::size_type,std::vector< std::vector< std::complex< double > > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  std::vector< std::vector< std::complex< double > > >::iterator arg2 ;
  std::vector< std::vector< std::complex< double > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::vector< std::complex< double > > >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd_insert",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd_insert" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_vector_complexd_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< double > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::complex< double > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::complex< double > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_vector_complexd_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< double > > >::iterator""'");
    }
  }
  {
    std::vector<std::complex< double >,std::allocator< std::complex< double > > > *ptr = (std::vector<std::complex< double >,std::allocator< std::complex< double > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "gr_vector_vector_complexd_insert" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< double > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vector_vector_complexd_insert" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< double > > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (arg1)->insert(arg2,(std::vector< std::vector< std::complex< double > > >::value_type const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::complex< double > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  std::vector< std::vector< std::complex< double > > >::iterator arg2 ;
  std::vector< std::vector< std::complex< double > > >::size_type arg3 ;
  std::vector< std::vector< std::complex< double > > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd_insert",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd_insert" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_vector_complexd_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< double > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::complex< double > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::complex< double > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "gr_vector_vector_complexd_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< double > > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gr_vector_vector_complexd_insert" "', argument " "3"" of type '" "std::vector< std::vector< std::complex< double > > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::complex< double > > >::size_type >(val3);
  {
    std::vector<std::complex< double >,std::allocator< std::complex< double > > > *ptr = (std::vector<std::complex< double >,std::allocator< std::complex< double > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "gr_vector_vector_complexd_insert" "', argument " "4"" of type '" "std::vector< std::vector< std::complex< double > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gr_vector_vector_complexd_insert" "', argument " "4"" of type '" "std::vector< std::vector< std::complex< double > > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      (arg1)->insert(arg2,arg3,(std::vector< std::vector< std::complex< double > > >::value_type const &)*arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::complex< double > > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::complex< double >,std::allocator< std::complex< double > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_gr_vector_vector_complexd_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::complex< double > > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<std::complex< double >,std::allocator< std::complex< double > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_gr_vector_vector_complexd_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'gr_vector_vector_complexd_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::complex< double > > >::insert(std::vector< std::vector< std::complex< double > > >::iterator,std::vector< std::vector< std::complex< double > > >::value_type const &)\n"
    "    std::vector< std::vector< std::complex< double > > >::insert(std::vector< std::vector< std::complex< double > > >::iterator,std::vector< std::vector< std::complex< double > > >::size_type,std::vector< std::vector< std::complex< double > > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  std::vector< std::vector< std::complex< double > > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:gr_vector_vector_complexd_reserve",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd_reserve" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gr_vector_vector_complexd_reserve" "', argument " "2"" of type '" "std::vector< std::vector< std::complex< double > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::complex< double > > >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gr_vector_vector_complexd_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::vector< std::complex< double > > >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"gr_vector_vector_complexd_capacity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gr_vector_vector_complexd_capacity" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  {
    try {
      result = ((std::vector< std::vector< std::complex< double > > > const *)arg1)->capacity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_gr_vector_vector_complexd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::complex< double > > > *arg1 = (std::vector< std::vector< std::complex< double > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_gr_vector_vector_complexd",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_gr_vector_vector_complexd" "', argument " "1"" of type '" "std::vector< std::vector< std::complex< double > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::complex< double > > > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *gr_vector_vector_complexd_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_high_res_timer_now(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::high_res_timer_type result;
  
  {
    try {
      result = (gr::high_res_timer_type)gr::high_res_timer_now();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_high_res_timer_now_perfmon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::high_res_timer_type result;
  
  {
    try {
      result = (gr::high_res_timer_type)gr::high_res_timer_now_perfmon();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_high_res_timer_tps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::high_res_timer_type result;
  
  {
    try {
      result = (gr::high_res_timer_type)gr::high_res_timer_tps();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_high_res_timer_epoch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::high_res_timer_type result;
  
  {
    try {
      result = (gr::high_res_timer_type)gr::high_res_timer_epoch();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_basic_block_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::basic_block > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::basic_block > *)new boost::shared_ptr< gr::basic_block >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_basic_block_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::basic_block *arg1 = (gr::basic_block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::basic_block > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_basic_block_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__basic_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_basic_block_sptr" "', argument " "1"" of type '" "gr::basic_block *""'"); 
  }
  arg1 = reinterpret_cast< gr::basic_block * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::basic_block > *)new boost::shared_ptr< gr::basic_block >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_basic_block_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_basic_block_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__basic_block, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_basic_block_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_basic_block_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::basic_block >::shared_ptr()\n"
    "    boost::shared_ptr< gr::basic_block >::shared_ptr(gr::basic_block *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_basic_block_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::basic_block > *arg1 = (boost::shared_ptr< gr::basic_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"basic_block_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basic_block_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::basic_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::basic_block > * >(argp1);
  {
    try {
      result = (gr::basic_block *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__basic_block, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_basic_block_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::basic_block > *arg1 = (boost::shared_ptr< gr::basic_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_basic_block_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_basic_block_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::basic_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::basic_block > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basic_block_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::basic_block > *arg1 = (boost::shared_ptr< gr::basic_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"basic_block_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basic_block_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::basic_block > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::basic_block > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basic_block_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::basic_block > *arg1 = (boost::shared_ptr< gr::basic_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"basic_block_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basic_block_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::basic_block > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::basic_block > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basic_block_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::basic_block > *arg1 = (boost::shared_ptr< gr::basic_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"basic_block_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basic_block_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::basic_block > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::basic_block > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basic_block_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::basic_block > *arg1 = (boost::shared_ptr< gr::basic_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"basic_block_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basic_block_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::basic_block > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::basic_block > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basic_block_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::basic_block > *arg1 = (boost::shared_ptr< gr::basic_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"basic_block_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basic_block_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::basic_block > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::basic_block > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basic_block_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::basic_block > *arg1 = (boost::shared_ptr< gr::basic_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"basic_block_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basic_block_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::basic_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::basic_block > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basic_block_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::basic_block > *arg1 = (boost::shared_ptr< gr::basic_block > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:basic_block_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basic_block_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::basic_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::basic_block > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "basic_block_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "basic_block_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basic_block_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::basic_block > *arg1 = (boost::shared_ptr< gr::basic_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"basic_block_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basic_block_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::basic_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::basic_block > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basic_block_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::basic_block > *arg1 = (boost::shared_ptr< gr::basic_block > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:basic_block_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basic_block_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::basic_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::basic_block > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "basic_block_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basic_block_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::basic_block > *arg1 = (boost::shared_ptr< gr::basic_block > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:basic_block_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basic_block_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::basic_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::basic_block > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "basic_block_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "basic_block_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "basic_block_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "basic_block_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basic_block_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::basic_block > *arg1 = (boost::shared_ptr< gr::basic_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"basic_block_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basic_block_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::basic_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::basic_block > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basic_block_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::basic_block > *arg1 = (boost::shared_ptr< gr::basic_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"basic_block_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basic_block_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::basic_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::basic_block > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basic_block_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::basic_block > *arg1 = (boost::shared_ptr< gr::basic_block > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:basic_block_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basic_block_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::basic_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::basic_block > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "basic_block_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "basic_block_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *basic_block_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr_iterator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr_iterator" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_gr_basic_block_sptr_Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr___nonzero__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr___nonzero__" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_gr_basic_block_sptr_Sg____nonzero__((std::vector< boost::shared_ptr< gr::basic_block > > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr___bool__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr___bool__" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_gr_basic_block_sptr_Sg____bool__((std::vector< boost::shared_ptr< gr::basic_block > > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< gr::basic_block > >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr___len__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr___len__" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  {
    try {
      result = std_vector_Sl_gr_basic_block_sptr_Sg____len__((std::vector< boost::shared_ptr< gr::basic_block > > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< gr::basic_block > >::value_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr_pop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr_pop" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_gr_basic_block_sptr_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new std::vector< boost::shared_ptr< gr::basic_block > >::value_type(static_cast< const std::vector< boost::shared_ptr< gr::basic_block > >::value_type& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  std::vector< boost::shared_ptr< gr::basic_block > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< gr::basic_block > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  std::vector< boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:x_vector_basic_block_sptr___getslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr___getslice__" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "x_vector_basic_block_sptr___getslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< gr::basic_block > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "x_vector_basic_block_sptr___getslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< gr::basic_block > >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > > *)std_vector_Sl_gr_basic_block_sptr_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  std::vector< boost::shared_ptr< gr::basic_block > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< gr::basic_block > >::difference_type arg3 ;
  std::vector< boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > > const &arg4_defvalue = std::vector< boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > >() ;
  std::vector< boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > > *arg4 = (std::vector< boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > > *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:x_vector_basic_block_sptr___setslice__",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr___setslice__" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "x_vector_basic_block_sptr___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< gr::basic_block > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "x_vector_basic_block_sptr___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< gr::basic_block > >::difference_type >(val3);
  if (obj3) {
    {
      std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > > *ptr = (std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > > *)0;
      res4 = swig::asptr(obj3, &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "x_vector_basic_block_sptr___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "x_vector_basic_block_sptr___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > > const &""'"); 
      }
      arg4 = ptr;
    }
  }
  {
    try {
      try {
        std_vector_Sl_gr_basic_block_sptr_Sg____setslice__(arg1,arg2,arg3,(std::vector< boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  std::vector< boost::shared_ptr< gr::basic_block > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< gr::basic_block > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:x_vector_basic_block_sptr___delslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr___delslice__" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "x_vector_basic_block_sptr___delslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< gr::basic_block > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "x_vector_basic_block_sptr___delslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< gr::basic_block > >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_gr_basic_block_sptr_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  std::vector< boost::shared_ptr< gr::basic_block > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr___delitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr___delitem__" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "x_vector_basic_block_sptr___delitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< gr::basic_block > >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_gr_basic_block_sptr_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr___getitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr___getitem__" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "x_vector_basic_block_sptr___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        result = (std::vector< boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > > *)std_vector_Sl_gr_basic_block_sptr_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr___setitem__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr___setitem__" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "x_vector_basic_block_sptr___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > > *ptr = (std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "x_vector_basic_block_sptr___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "x_vector_basic_block_sptr___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_gr_basic_block_sptr_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr___setitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr___setitem__" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "x_vector_basic_block_sptr___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_gr_basic_block_sptr_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr___delitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr___delitem__" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "x_vector_basic_block_sptr___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_gr_basic_block_sptr_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_x_vector_basic_block_sptr___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_x_vector_basic_block_sptr___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'x_vector_basic_block_sptr___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< gr::basic_block_sptr >::__delitem__(std::vector< boost::shared_ptr< gr::basic_block > >::difference_type)\n"
    "    std::vector< gr::basic_block_sptr >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  std::vector< boost::shared_ptr< gr::basic_block > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< gr::basic_block > >::value_type *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr___getitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr___getitem__" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "x_vector_basic_block_sptr___getitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< gr::basic_block > >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< boost::shared_ptr< gr::basic_block > >::value_type *) &std_vector_Sl_gr_basic_block_sptr_Sg____getitem____SWIG_1((std::vector< boost::shared_ptr< gr::basic_block > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_x_vector_basic_block_sptr___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_x_vector_basic_block_sptr___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'x_vector_basic_block_sptr___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< gr::basic_block_sptr >::__getitem__(PySliceObject *)\n"
    "    std::vector< gr::basic_block_sptr >::__getitem__(std::vector< boost::shared_ptr< gr::basic_block > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  std::vector< boost::shared_ptr< gr::basic_block > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< gr::basic_block > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr___setitem__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr___setitem__" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "x_vector_basic_block_sptr___setitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< gr::basic_block > >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "x_vector_basic_block_sptr___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "x_vector_basic_block_sptr___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< boost::shared_ptr< gr::basic_block > >::value_type * >(argp3);
  {
    try {
      try {
        std_vector_Sl_gr_basic_block_sptr_Sg____setitem____SWIG_2(arg1,arg2,(boost::shared_ptr< gr::basic_block > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_x_vector_basic_block_sptr___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_x_vector_basic_block_sptr___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_x_vector_basic_block_sptr___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'x_vector_basic_block_sptr___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< gr::basic_block_sptr >::__setitem__(PySliceObject *,std::vector< boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > > const &)\n"
    "    std::vector< gr::basic_block_sptr >::__setitem__(PySliceObject *)\n"
    "    std::vector< gr::basic_block_sptr >::__setitem__(std::vector< boost::shared_ptr< gr::basic_block > >::difference_type,std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  std::vector< boost::shared_ptr< gr::basic_block > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:x_vector_basic_block_sptr_append",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr_append" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "x_vector_basic_block_sptr_append" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "x_vector_basic_block_sptr_append" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< boost::shared_ptr< gr::basic_block > >::value_type * >(argp2);
  {
    try {
      std_vector_Sl_gr_basic_block_sptr_Sg__append(arg1,(boost::shared_ptr< gr::basic_block > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_x_vector_basic_block_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *result = 0 ;
  
  {
    try {
      result = (std::vector< gr::basic_block_sptr > *)new std::vector< gr::basic_block_sptr >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_x_vector_basic_block_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< gr::basic_block_sptr > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_x_vector_basic_block_sptr",1,1,&obj0)) SWIG_fail;
  {
    std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > > *ptr = (std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_x_vector_basic_block_sptr" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_x_vector_basic_block_sptr" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< gr::basic_block_sptr > *)new std::vector< gr::basic_block_sptr >((std::vector< gr::basic_block_sptr > const &)*arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr_empty",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr_empty" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  {
    try {
      result = (bool)((std::vector< gr::basic_block_sptr > const *)arg1)->empty();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< gr::basic_block > >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr_size" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  {
    try {
      result = ((std::vector< gr::basic_block_sptr > const *)arg1)->size();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr_clear",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr_clear" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  std::vector< gr::basic_block_sptr > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:x_vector_basic_block_sptr_swap",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr_swap" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "x_vector_basic_block_sptr_swap" "', argument " "2"" of type '" "std::vector< gr::basic_block_sptr > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "x_vector_basic_block_sptr_swap" "', argument " "2"" of type '" "std::vector< gr::basic_block_sptr > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< boost::shared_ptr< gr::basic_block > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr_get_allocator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr_get_allocator" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  {
    try {
      result = ((std::vector< gr::basic_block_sptr > const *)arg1)->get_allocator();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new std::vector< boost::shared_ptr< gr::basic_block > >::allocator_type(static_cast< const std::vector< boost::shared_ptr< gr::basic_block > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< gr::basic_block > >::iterator > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr_begin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr_begin" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< gr::basic_block > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< gr::basic_block > >::iterator > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr_end",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr_end" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< gr::basic_block > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< gr::basic_block > >::reverse_iterator > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr_rbegin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr_rbegin" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< gr::basic_block > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< gr::basic_block > >::reverse_iterator > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr_rend",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr_rend" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< gr::basic_block > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_x_vector_basic_block_sptr__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< gr::basic_block > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< gr::basic_block_sptr > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_x_vector_basic_block_sptr",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_x_vector_basic_block_sptr" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< gr::basic_block > >::size_type >(val1);
  {
    try {
      result = (std::vector< gr::basic_block_sptr > *)new std::vector< gr::basic_block_sptr >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr_pop_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr_pop_back" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  std::vector< boost::shared_ptr< gr::basic_block > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr_resize",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr_resize" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "x_vector_basic_block_sptr_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< gr::basic_block > >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< gr::basic_block > >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< gr::basic_block > >::iterator > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr_erase",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr_erase" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "x_vector_basic_block_sptr_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::basic_block > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::basic_block > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "x_vector_basic_block_sptr_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< gr::basic_block > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< gr::basic_block > >::iterator > arg2 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< gr::basic_block > >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< gr::basic_block > >::iterator > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr_erase",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr_erase" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "x_vector_basic_block_sptr_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::basic_block > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::basic_block > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "x_vector_basic_block_sptr_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "x_vector_basic_block_sptr_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::basic_block > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::basic_block > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "x_vector_basic_block_sptr_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< gr::basic_block > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::basic_block > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_x_vector_basic_block_sptr_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::basic_block > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::basic_block > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_x_vector_basic_block_sptr_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'x_vector_basic_block_sptr_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< gr::basic_block_sptr >::erase(std::vector< boost::shared_ptr< gr::basic_block > >::iterator)\n"
    "    std::vector< gr::basic_block_sptr >::erase(std::vector< boost::shared_ptr< gr::basic_block > >::iterator,std::vector< boost::shared_ptr< gr::basic_block > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_x_vector_basic_block_sptr__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< gr::basic_block > >::size_type arg1 ;
  std::vector< boost::shared_ptr< gr::basic_block > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< gr::basic_block_sptr > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_x_vector_basic_block_sptr",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_x_vector_basic_block_sptr" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< gr::basic_block > >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_x_vector_basic_block_sptr" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_x_vector_basic_block_sptr" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< boost::shared_ptr< gr::basic_block > >::value_type * >(argp2);
  {
    try {
      result = (std::vector< gr::basic_block_sptr > *)new std::vector< gr::basic_block_sptr >(arg1,(std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_x_vector_basic_block_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_x_vector_basic_block_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_x_vector_basic_block_sptr__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_x_vector_basic_block_sptr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_x_vector_basic_block_sptr__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_x_vector_basic_block_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< gr::basic_block_sptr >::vector()\n"
    "    std::vector< gr::basic_block_sptr >::vector(std::vector< gr::basic_block_sptr > const &)\n"
    "    std::vector< gr::basic_block_sptr >::vector(std::vector< boost::shared_ptr< gr::basic_block > >::size_type)\n"
    "    std::vector< gr::basic_block_sptr >::vector(std::vector< boost::shared_ptr< gr::basic_block > >::size_type,std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  std::vector< boost::shared_ptr< gr::basic_block > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:x_vector_basic_block_sptr_push_back",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr_push_back" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "x_vector_basic_block_sptr_push_back" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "x_vector_basic_block_sptr_push_back" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< boost::shared_ptr< gr::basic_block > >::value_type * >(argp2);
  {
    try {
      (arg1)->push_back((std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< gr::basic_block > >::value_type *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr_front",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr_front" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  {
    try {
      result = (std::vector< boost::shared_ptr< gr::basic_block > >::value_type *) &((std::vector< gr::basic_block_sptr > const *)arg1)->front();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< gr::basic_block > >::value_type *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr_back" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  {
    try {
      result = (std::vector< boost::shared_ptr< gr::basic_block > >::value_type *) &((std::vector< gr::basic_block_sptr > const *)arg1)->back();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  std::vector< boost::shared_ptr< gr::basic_block > >::size_type arg2 ;
  std::vector< boost::shared_ptr< gr::basic_block > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:x_vector_basic_block_sptr_assign",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr_assign" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "x_vector_basic_block_sptr_assign" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< gr::basic_block > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "x_vector_basic_block_sptr_assign" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "x_vector_basic_block_sptr_assign" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< boost::shared_ptr< gr::basic_block > >::value_type * >(argp3);
  {
    try {
      (arg1)->assign(arg2,(std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  std::vector< boost::shared_ptr< gr::basic_block > >::size_type arg2 ;
  std::vector< boost::shared_ptr< gr::basic_block > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr_resize",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr_resize" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "x_vector_basic_block_sptr_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< gr::basic_block > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "x_vector_basic_block_sptr_resize" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "x_vector_basic_block_sptr_resize" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< boost::shared_ptr< gr::basic_block > >::value_type * >(argp3);
  {
    try {
      (arg1)->resize(arg2,(std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_x_vector_basic_block_sptr_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_x_vector_basic_block_sptr_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'x_vector_basic_block_sptr_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< gr::basic_block_sptr >::resize(std::vector< boost::shared_ptr< gr::basic_block > >::size_type)\n"
    "    std::vector< gr::basic_block_sptr >::resize(std::vector< boost::shared_ptr< gr::basic_block > >::size_type,std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< gr::basic_block > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< gr::basic_block > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< gr::basic_block > >::iterator > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr_insert",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr_insert" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "x_vector_basic_block_sptr_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::basic_block > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::basic_block > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "x_vector_basic_block_sptr_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "x_vector_basic_block_sptr_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "x_vector_basic_block_sptr_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< boost::shared_ptr< gr::basic_block > >::value_type * >(argp3);
  {
    try {
      result = (arg1)->insert(arg2,(std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< gr::basic_block > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< gr::basic_block > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< gr::basic_block > >::size_type arg3 ;
  std::vector< boost::shared_ptr< gr::basic_block > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr_insert",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr_insert" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "x_vector_basic_block_sptr_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::basic_block > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::basic_block > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "x_vector_basic_block_sptr_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "x_vector_basic_block_sptr_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< gr::basic_block > >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "x_vector_basic_block_sptr_insert" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "x_vector_basic_block_sptr_insert" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< boost::shared_ptr< gr::basic_block > >::value_type * >(argp4);
  {
    try {
      (arg1)->insert(arg2,arg3,(std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &)*arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::basic_block > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_x_vector_basic_block_sptr_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::basic_block > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_x_vector_basic_block_sptr_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'x_vector_basic_block_sptr_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< gr::basic_block_sptr >::insert(std::vector< boost::shared_ptr< gr::basic_block > >::iterator,std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &)\n"
    "    std::vector< gr::basic_block_sptr >::insert(std::vector< boost::shared_ptr< gr::basic_block > >::iterator,std::vector< boost::shared_ptr< gr::basic_block > >::size_type,std::vector< boost::shared_ptr< gr::basic_block > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  std::vector< boost::shared_ptr< gr::basic_block > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:x_vector_basic_block_sptr_reserve",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr_reserve" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "x_vector_basic_block_sptr_reserve" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::basic_block > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< gr::basic_block > >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_basic_block_sptr_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< gr::basic_block > >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_basic_block_sptr_capacity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_basic_block_sptr_capacity" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  {
    try {
      result = ((std::vector< gr::basic_block_sptr > const *)arg1)->capacity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_x_vector_basic_block_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::basic_block_sptr > *arg1 = (std::vector< gr::basic_block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_x_vector_basic_block_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_x_vector_basic_block_sptr" "', argument " "1"" of type '" "std::vector< gr::basic_block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::basic_block_sptr > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *x_vector_basic_block_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::basic_block *arg1 = (gr::basic_block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__basic_block, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_basic_block" "', argument " "1"" of type '" "gr::basic_block *""'"); 
  }
  arg1 = reinterpret_cast< gr::basic_block * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basic_block_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::basic_block *arg1 = (gr::basic_block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"basic_block_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__basic_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basic_block_name" "', argument " "1"" of type '" "gr::basic_block const *""'"); 
  }
  arg1 = reinterpret_cast< gr::basic_block * >(argp1);
  {
    try {
      result = ((gr::basic_block const *)arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basic_block_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::basic_block *arg1 = (gr::basic_block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"basic_block_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__basic_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basic_block_symbol_name" "', argument " "1"" of type '" "gr::basic_block const *""'"); 
  }
  arg1 = reinterpret_cast< gr::basic_block * >(argp1);
  {
    try {
      result = ((gr::basic_block const *)arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basic_block_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::basic_block *arg1 = (gr::basic_block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"basic_block_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__basic_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basic_block_input_signature" "', argument " "1"" of type '" "gr::basic_block const *""'"); 
  }
  arg1 = reinterpret_cast< gr::basic_block * >(argp1);
  {
    try {
      result = ((gr::basic_block const *)arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basic_block_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::basic_block *arg1 = (gr::basic_block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"basic_block_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__basic_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basic_block_output_signature" "', argument " "1"" of type '" "gr::basic_block const *""'"); 
  }
  arg1 = reinterpret_cast< gr::basic_block * >(argp1);
  {
    try {
      result = ((gr::basic_block const *)arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basic_block_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::basic_block *arg1 = (gr::basic_block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"basic_block_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__basic_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basic_block_unique_id" "', argument " "1"" of type '" "gr::basic_block const *""'"); 
  }
  arg1 = reinterpret_cast< gr::basic_block * >(argp1);
  {
    try {
      result = (long)((gr::basic_block const *)arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basic_block_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::basic_block *arg1 = (gr::basic_block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"basic_block_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__basic_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basic_block_to_basic_block" "', argument " "1"" of type '" "gr::basic_block *""'"); 
  }
  arg1 = reinterpret_cast< gr::basic_block * >(argp1);
  {
    try {
      result = (arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basic_block_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::basic_block *arg1 = (gr::basic_block *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:basic_block_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__basic_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basic_block_check_topology" "', argument " "1"" of type '" "gr::basic_block *""'"); 
  }
  arg1 = reinterpret_cast< gr::basic_block * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "basic_block_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "basic_block_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basic_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::basic_block *arg1 = (gr::basic_block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"basic_block_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__basic_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basic_block_alias" "', argument " "1"" of type '" "gr::basic_block *""'"); 
  }
  arg1 = reinterpret_cast< gr::basic_block * >(argp1);
  {
    try {
      result = (arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basic_block_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::basic_block *arg1 = (gr::basic_block *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:basic_block_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__basic_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basic_block_set_block_alias" "', argument " "1"" of type '" "gr::basic_block *""'"); 
  }
  arg1 = reinterpret_cast< gr::basic_block * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "basic_block_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basic_block__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::basic_block *arg1 = (gr::basic_block *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:basic_block__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__basic_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basic_block__post" "', argument " "1"" of type '" "gr::basic_block *""'"); 
  }
  arg1 = reinterpret_cast< gr::basic_block * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "basic_block__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "basic_block__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "basic_block__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "basic_block__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basic_block_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::basic_block *arg1 = (gr::basic_block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"basic_block_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__basic_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basic_block_message_ports_in" "', argument " "1"" of type '" "gr::basic_block *""'"); 
  }
  arg1 = reinterpret_cast< gr::basic_block * >(argp1);
  {
    try {
      result = (arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basic_block_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::basic_block *arg1 = (gr::basic_block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"basic_block_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__basic_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basic_block_message_ports_out" "', argument " "1"" of type '" "gr::basic_block *""'"); 
  }
  arg1 = reinterpret_cast< gr::basic_block * >(argp1);
  {
    try {
      result = (arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_basic_block_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::basic_block *arg1 = (gr::basic_block *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:basic_block_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__basic_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basic_block_message_subscribers" "', argument " "1"" of type '" "gr::basic_block *""'"); 
  }
  arg1 = reinterpret_cast< gr::basic_block * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "basic_block_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "basic_block_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *basic_block_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__basic_block, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_block_ncurrently_allocated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long result;
  
  {
    try {
      result = (long)gr::basic_block_ncurrently_allocated();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_block_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::block > *)new boost::shared_ptr< gr::block >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__block_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_block_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::block > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_block_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_block_sptr" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::block > *)new boost::shared_ptr< gr::block >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__block_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_block_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_block_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__block, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_block_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_block_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::block >::shared_ptr()\n"
    "    boost::shared_ptr< gr::block >::shared_ptr(gr::block *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::block *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (gr::block *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__block, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_block_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_block_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_block_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "block_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_block_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_block_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "block_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_block_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_block_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "block_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_block_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_block_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< float,std::allocator< float > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_block_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_block_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< float,std::allocator< float > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_block_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_block_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< float,std::allocator< float > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_block_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_block_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< float,std::allocator< float > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_block_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_block_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< float,std::allocator< float > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_block_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_block_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< float,std::allocator< float > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_block_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_block_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< int,std::allocator< int > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:block_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "block_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "block_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:block_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "block_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block > *arg1 = (boost::shared_ptr< gr::block > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *block_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__block_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_x_vector_block_sptr_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr_iterator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr_iterator" "', argument " "1"" of type '" "std::vector< gr::block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_gr_block_sptr_Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr___nonzero__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr___nonzero__" "', argument " "1"" of type '" "std::vector< gr::block_sptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_gr_block_sptr_Sg____nonzero__((std::vector< boost::shared_ptr< gr::block > > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr___bool__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr___bool__" "', argument " "1"" of type '" "std::vector< gr::block_sptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_gr_block_sptr_Sg____bool__((std::vector< boost::shared_ptr< gr::block > > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< gr::block > >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr___len__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr___len__" "', argument " "1"" of type '" "std::vector< gr::block_sptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  {
    try {
      result = std_vector_Sl_gr_block_sptr_Sg____len__((std::vector< boost::shared_ptr< gr::block > > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< gr::block > >::value_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr_pop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr_pop" "', argument " "1"" of type '" "std::vector< gr::block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_gr_block_sptr_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new std::vector< boost::shared_ptr< gr::block > >::value_type(static_cast< const std::vector< boost::shared_ptr< gr::block > >::value_type& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  std::vector< boost::shared_ptr< gr::block > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< gr::block > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  std::vector< boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:x_vector_block_sptr___getslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr___getslice__" "', argument " "1"" of type '" "std::vector< gr::block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "x_vector_block_sptr___getslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::block > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< gr::block > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "x_vector_block_sptr___getslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::block > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< gr::block > >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > > *)std_vector_Sl_gr_block_sptr_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  std::vector< boost::shared_ptr< gr::block > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< gr::block > >::difference_type arg3 ;
  std::vector< boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > > const &arg4_defvalue = std::vector< boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > >() ;
  std::vector< boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > > *arg4 = (std::vector< boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > > *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:x_vector_block_sptr___setslice__",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr___setslice__" "', argument " "1"" of type '" "std::vector< gr::block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "x_vector_block_sptr___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::block > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< gr::block > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "x_vector_block_sptr___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::block > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< gr::block > >::difference_type >(val3);
  if (obj3) {
    {
      std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > > *ptr = (std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > > *)0;
      res4 = swig::asptr(obj3, &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "x_vector_block_sptr___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "x_vector_block_sptr___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > > const &""'"); 
      }
      arg4 = ptr;
    }
  }
  {
    try {
      try {
        std_vector_Sl_gr_block_sptr_Sg____setslice__(arg1,arg2,arg3,(std::vector< boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  std::vector< boost::shared_ptr< gr::block > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< gr::block > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:x_vector_block_sptr___delslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr___delslice__" "', argument " "1"" of type '" "std::vector< gr::block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "x_vector_block_sptr___delslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::block > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< gr::block > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "x_vector_block_sptr___delslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::block > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< gr::block > >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_gr_block_sptr_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  std::vector< boost::shared_ptr< gr::block > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr___delitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr___delitem__" "', argument " "1"" of type '" "std::vector< gr::block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "x_vector_block_sptr___delitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::block > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< gr::block > >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_gr_block_sptr_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr___getitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr___getitem__" "', argument " "1"" of type '" "std::vector< gr::block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "x_vector_block_sptr___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        result = (std::vector< boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > > *)std_vector_Sl_gr_block_sptr_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr___setitem__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr___setitem__" "', argument " "1"" of type '" "std::vector< gr::block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "x_vector_block_sptr___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > > *ptr = (std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "x_vector_block_sptr___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "x_vector_block_sptr___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_gr_block_sptr_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr___setitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr___setitem__" "', argument " "1"" of type '" "std::vector< gr::block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "x_vector_block_sptr___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_gr_block_sptr_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr___delitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr___delitem__" "', argument " "1"" of type '" "std::vector< gr::block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "x_vector_block_sptr___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_gr_block_sptr_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_x_vector_block_sptr___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_x_vector_block_sptr___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'x_vector_block_sptr___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< gr::block_sptr >::__delitem__(std::vector< boost::shared_ptr< gr::block > >::difference_type)\n"
    "    std::vector< gr::block_sptr >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  std::vector< boost::shared_ptr< gr::block > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< gr::block > >::value_type *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr___getitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr___getitem__" "', argument " "1"" of type '" "std::vector< gr::block_sptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "x_vector_block_sptr___getitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::block > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< gr::block > >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< boost::shared_ptr< gr::block > >::value_type *) &std_vector_Sl_gr_block_sptr_Sg____getitem____SWIG_1((std::vector< boost::shared_ptr< gr::block > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_x_vector_block_sptr___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_x_vector_block_sptr___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'x_vector_block_sptr___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< gr::block_sptr >::__getitem__(PySliceObject *)\n"
    "    std::vector< gr::block_sptr >::__getitem__(std::vector< boost::shared_ptr< gr::block > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  std::vector< boost::shared_ptr< gr::block > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< gr::block > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr___setitem__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr___setitem__" "', argument " "1"" of type '" "std::vector< gr::block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "x_vector_block_sptr___setitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::block > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< gr::block > >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_gr__block_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "x_vector_block_sptr___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::block > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "x_vector_block_sptr___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::block > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< boost::shared_ptr< gr::block > >::value_type * >(argp3);
  {
    try {
      try {
        std_vector_Sl_gr_block_sptr_Sg____setitem____SWIG_2(arg1,arg2,(boost::shared_ptr< gr::block > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_x_vector_block_sptr___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_x_vector_block_sptr___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_x_vector_block_sptr___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'x_vector_block_sptr___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< gr::block_sptr >::__setitem__(PySliceObject *,std::vector< boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > > const &)\n"
    "    std::vector< gr::block_sptr >::__setitem__(PySliceObject *)\n"
    "    std::vector< gr::block_sptr >::__setitem__(std::vector< boost::shared_ptr< gr::block > >::difference_type,std::vector< boost::shared_ptr< gr::block > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  std::vector< boost::shared_ptr< gr::block > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:x_vector_block_sptr_append",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr_append" "', argument " "1"" of type '" "std::vector< gr::block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__block_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "x_vector_block_sptr_append" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::block > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "x_vector_block_sptr_append" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::block > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< boost::shared_ptr< gr::block > >::value_type * >(argp2);
  {
    try {
      std_vector_Sl_gr_block_sptr_Sg__append(arg1,(boost::shared_ptr< gr::block > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_x_vector_block_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *result = 0 ;
  
  {
    try {
      result = (std::vector< gr::block_sptr > *)new std::vector< gr::block_sptr >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_x_vector_block_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< gr::block_sptr > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_x_vector_block_sptr",1,1,&obj0)) SWIG_fail;
  {
    std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > > *ptr = (std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_x_vector_block_sptr" "', argument " "1"" of type '" "std::vector< gr::block_sptr > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_x_vector_block_sptr" "', argument " "1"" of type '" "std::vector< gr::block_sptr > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< gr::block_sptr > *)new std::vector< gr::block_sptr >((std::vector< gr::block_sptr > const &)*arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr_empty",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr_empty" "', argument " "1"" of type '" "std::vector< gr::block_sptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  {
    try {
      result = (bool)((std::vector< gr::block_sptr > const *)arg1)->empty();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< gr::block > >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr_size" "', argument " "1"" of type '" "std::vector< gr::block_sptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  {
    try {
      result = ((std::vector< gr::block_sptr > const *)arg1)->size();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr_clear",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr_clear" "', argument " "1"" of type '" "std::vector< gr::block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  std::vector< gr::block_sptr > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:x_vector_block_sptr_swap",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr_swap" "', argument " "1"" of type '" "std::vector< gr::block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "x_vector_block_sptr_swap" "', argument " "2"" of type '" "std::vector< gr::block_sptr > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "x_vector_block_sptr_swap" "', argument " "2"" of type '" "std::vector< gr::block_sptr > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< boost::shared_ptr< gr::block > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr_get_allocator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr_get_allocator" "', argument " "1"" of type '" "std::vector< gr::block_sptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  {
    try {
      result = ((std::vector< gr::block_sptr > const *)arg1)->get_allocator();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new std::vector< boost::shared_ptr< gr::block > >::allocator_type(static_cast< const std::vector< boost::shared_ptr< gr::block > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_gr__block_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< gr::block > >::iterator > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr_begin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr_begin" "', argument " "1"" of type '" "std::vector< gr::block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< gr::block > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< gr::block > >::iterator > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr_end",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr_end" "', argument " "1"" of type '" "std::vector< gr::block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< gr::block > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< gr::block > >::reverse_iterator > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr_rbegin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr_rbegin" "', argument " "1"" of type '" "std::vector< gr::block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< gr::block > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< gr::block > >::reverse_iterator > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr_rend",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr_rend" "', argument " "1"" of type '" "std::vector< gr::block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< gr::block > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_x_vector_block_sptr__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< gr::block > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< gr::block_sptr > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_x_vector_block_sptr",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_x_vector_block_sptr" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< gr::block > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< gr::block > >::size_type >(val1);
  {
    try {
      result = (std::vector< gr::block_sptr > *)new std::vector< gr::block_sptr >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr_pop_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr_pop_back" "', argument " "1"" of type '" "std::vector< gr::block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  std::vector< boost::shared_ptr< gr::block > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr_resize",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr_resize" "', argument " "1"" of type '" "std::vector< gr::block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "x_vector_block_sptr_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::block > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< gr::block > >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< gr::block > >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< gr::block > >::iterator > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr_erase",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr_erase" "', argument " "1"" of type '" "std::vector< gr::block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "x_vector_block_sptr_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::block > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::block > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::block > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "x_vector_block_sptr_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::block > >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< gr::block > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< gr::block > >::iterator > arg2 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< gr::block > >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< gr::block > >::iterator > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr_erase",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr_erase" "', argument " "1"" of type '" "std::vector< gr::block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "x_vector_block_sptr_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::block > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::block > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::block > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "x_vector_block_sptr_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::block > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "x_vector_block_sptr_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::block > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::block > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::block > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "x_vector_block_sptr_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::block > >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< gr::block > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::block > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_x_vector_block_sptr_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::block > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::block > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_x_vector_block_sptr_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'x_vector_block_sptr_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< gr::block_sptr >::erase(std::vector< boost::shared_ptr< gr::block > >::iterator)\n"
    "    std::vector< gr::block_sptr >::erase(std::vector< boost::shared_ptr< gr::block > >::iterator,std::vector< boost::shared_ptr< gr::block > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_x_vector_block_sptr__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< gr::block > >::size_type arg1 ;
  std::vector< boost::shared_ptr< gr::block > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< gr::block_sptr > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_x_vector_block_sptr",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_x_vector_block_sptr" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< gr::block > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< gr::block > >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__block_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_x_vector_block_sptr" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::block > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_x_vector_block_sptr" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::block > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< boost::shared_ptr< gr::block > >::value_type * >(argp2);
  {
    try {
      result = (std::vector< gr::block_sptr > *)new std::vector< gr::block_sptr >(arg1,(std::vector< boost::shared_ptr< gr::block > >::value_type const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_x_vector_block_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_x_vector_block_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_x_vector_block_sptr__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_x_vector_block_sptr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_x_vector_block_sptr__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_x_vector_block_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< gr::block_sptr >::vector()\n"
    "    std::vector< gr::block_sptr >::vector(std::vector< gr::block_sptr > const &)\n"
    "    std::vector< gr::block_sptr >::vector(std::vector< boost::shared_ptr< gr::block > >::size_type)\n"
    "    std::vector< gr::block_sptr >::vector(std::vector< boost::shared_ptr< gr::block > >::size_type,std::vector< boost::shared_ptr< gr::block > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  std::vector< boost::shared_ptr< gr::block > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:x_vector_block_sptr_push_back",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr_push_back" "', argument " "1"" of type '" "std::vector< gr::block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__block_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "x_vector_block_sptr_push_back" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::block > >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "x_vector_block_sptr_push_back" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::block > >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< boost::shared_ptr< gr::block > >::value_type * >(argp2);
  {
    try {
      (arg1)->push_back((std::vector< boost::shared_ptr< gr::block > >::value_type const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< gr::block > >::value_type *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr_front",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr_front" "', argument " "1"" of type '" "std::vector< gr::block_sptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  {
    try {
      result = (std::vector< boost::shared_ptr< gr::block > >::value_type *) &((std::vector< gr::block_sptr > const *)arg1)->front();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< gr::block > >::value_type *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr_back" "', argument " "1"" of type '" "std::vector< gr::block_sptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  {
    try {
      result = (std::vector< boost::shared_ptr< gr::block > >::value_type *) &((std::vector< gr::block_sptr > const *)arg1)->back();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  std::vector< boost::shared_ptr< gr::block > >::size_type arg2 ;
  std::vector< boost::shared_ptr< gr::block > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:x_vector_block_sptr_assign",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr_assign" "', argument " "1"" of type '" "std::vector< gr::block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "x_vector_block_sptr_assign" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::block > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< gr::block > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_gr__block_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "x_vector_block_sptr_assign" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::block > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "x_vector_block_sptr_assign" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::block > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< boost::shared_ptr< gr::block > >::value_type * >(argp3);
  {
    try {
      (arg1)->assign(arg2,(std::vector< boost::shared_ptr< gr::block > >::value_type const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  std::vector< boost::shared_ptr< gr::block > >::size_type arg2 ;
  std::vector< boost::shared_ptr< gr::block > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr_resize",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr_resize" "', argument " "1"" of type '" "std::vector< gr::block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "x_vector_block_sptr_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::block > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< gr::block > >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_gr__block_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "x_vector_block_sptr_resize" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::block > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "x_vector_block_sptr_resize" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::block > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< boost::shared_ptr< gr::block > >::value_type * >(argp3);
  {
    try {
      (arg1)->resize(arg2,(std::vector< boost::shared_ptr< gr::block > >::value_type const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_x_vector_block_sptr_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_x_vector_block_sptr_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'x_vector_block_sptr_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< gr::block_sptr >::resize(std::vector< boost::shared_ptr< gr::block > >::size_type)\n"
    "    std::vector< gr::block_sptr >::resize(std::vector< boost::shared_ptr< gr::block > >::size_type,std::vector< boost::shared_ptr< gr::block > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< gr::block > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< gr::block > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< gr::block > >::iterator > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr_insert",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr_insert" "', argument " "1"" of type '" "std::vector< gr::block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "x_vector_block_sptr_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::block > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::block > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::block > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "x_vector_block_sptr_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::block > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_gr__block_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "x_vector_block_sptr_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::block > >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "x_vector_block_sptr_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::block > >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< boost::shared_ptr< gr::block > >::value_type * >(argp3);
  {
    try {
      result = (arg1)->insert(arg2,(std::vector< boost::shared_ptr< gr::block > >::value_type const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< gr::block > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< gr::block > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< gr::block > >::size_type arg3 ;
  std::vector< boost::shared_ptr< gr::block > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr_insert",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr_insert" "', argument " "1"" of type '" "std::vector< gr::block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "x_vector_block_sptr_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::block > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::block > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::block > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "x_vector_block_sptr_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::block > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "x_vector_block_sptr_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< gr::block > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< gr::block > >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_gr__block_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "x_vector_block_sptr_insert" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< gr::block > >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "x_vector_block_sptr_insert" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< gr::block > >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< boost::shared_ptr< gr::block > >::value_type * >(argp4);
  {
    try {
      (arg1)->insert(arg2,arg3,(std::vector< boost::shared_ptr< gr::block > >::value_type const &)*arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::block > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_x_vector_block_sptr_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< gr::block > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_gr__block_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_x_vector_block_sptr_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'x_vector_block_sptr_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< gr::block_sptr >::insert(std::vector< boost::shared_ptr< gr::block > >::iterator,std::vector< boost::shared_ptr< gr::block > >::value_type const &)\n"
    "    std::vector< gr::block_sptr >::insert(std::vector< boost::shared_ptr< gr::block > >::iterator,std::vector< boost::shared_ptr< gr::block > >::size_type,std::vector< boost::shared_ptr< gr::block > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  std::vector< boost::shared_ptr< gr::block > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:x_vector_block_sptr_reserve",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr_reserve" "', argument " "1"" of type '" "std::vector< gr::block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "x_vector_block_sptr_reserve" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< gr::block > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< gr::block > >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_x_vector_block_sptr_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< gr::block > >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"x_vector_block_sptr_capacity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "x_vector_block_sptr_capacity" "', argument " "1"" of type '" "std::vector< gr::block_sptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  {
    try {
      result = ((std::vector< gr::block_sptr > const *)arg1)->capacity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_x_vector_block_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::block_sptr > *arg1 = (std::vector< gr::block_sptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_x_vector_block_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_x_vector_block_sptr" "', argument " "1"" of type '" "std::vector< gr::block_sptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::block_sptr > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *x_vector_block_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_block" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_history" "', argument " "1"" of type '" "gr::block const *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      result = (unsigned int)((gr::block const *)arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_declare_sample_delay" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "block_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_declare_sample_delay" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__block, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_block_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__block, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_block_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_sample_delay" "', argument " "1"" of type '" "gr::block const *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)((gr::block const *)arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_output_multiple" "', argument " "1"" of type '" "gr::block const *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      result = (int)((gr::block const *)arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_relative_rate" "', argument " "1"" of type '" "gr::block const *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      result = (double)((gr::block const *)arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_start" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      result = (bool)(arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_stop" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      result = (bool)(arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_nitems_read" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_nitems_written" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_max_noutput_items" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      result = (int)(arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_set_max_noutput_items" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_unset_max_noutput_items" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      (arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_is_set_max_noutput_items" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      result = (bool)(arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_set_min_noutput_items" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_min_noutput_items" "', argument " "1"" of type '" "gr::block const *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      result = (int)((gr::block const *)arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_max_output_buffer" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_set_max_output_buffer" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_set_max_output_buffer" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "block_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__block, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_block_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__block, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_block_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_min_output_buffer" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_set_min_output_buffer" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_set_min_output_buffer" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "block_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__block, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_block_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__block, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_block_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_pc_noutput_items" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      result = (float)(arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_pc_noutput_items_avg" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      result = (float)(arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_pc_noutput_items_var" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      result = (float)(arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_pc_nproduced" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      result = (float)(arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_pc_nproduced_avg" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      result = (float)(arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_pc_nproduced_var" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      result = (float)(arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_pc_input_buffers_full" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_pc_input_buffers_full_avg" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_pc_input_buffers_full_var" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< float,std::allocator< float > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_pc_input_buffers_full" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      result = (arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__block, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_block_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__block, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_block_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< float,std::allocator< float > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_pc_input_buffers_full_avg" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      result = (arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__block, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_block_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__block, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_block_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< float,std::allocator< float > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_pc_input_buffers_full_var" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      result = (arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__block, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_block_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__block, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_block_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_pc_output_buffers_full" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_pc_output_buffers_full_avg" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_pc_output_buffers_full_var" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< float,std::allocator< float > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_pc_output_buffers_full" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      result = (arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__block, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_block_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__block, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_block_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< float,std::allocator< float > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_pc_output_buffers_full_avg" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      result = (arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__block, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_block_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__block, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_block_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< float,std::allocator< float > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_pc_output_buffers_full_var" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      result = (arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__block, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_block_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__block, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_block_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_pc_work_time" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      result = (float)(arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_pc_work_time_avg" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      result = (float)(arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_pc_work_time_var" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      result = (float)(arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_pc_work_time_total" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      result = (float)(arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_pc_throughput_avg" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      result = (float)(arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_set_processor_affinity" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_unset_processor_affinity" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      (arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< int,std::allocator< int > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_processor_affinity" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      result = (arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_active_thread_priority" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      result = (int)(arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_thread_priority" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  {
    try {
      result = (int)(arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::block *arg1 = (gr::block *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_set_thread_priority" "', argument " "1"" of type '" "gr::block *""'"); 
  }
  arg1 = reinterpret_cast< gr::block * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *block_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__block, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_block_detail_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_detail > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::block_detail > *)new boost::shared_ptr< gr::block_detail >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__block_detail_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_block_detail_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_detail *arg1 = (gr::block_detail *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::block_detail > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_block_detail_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_detail, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_block_detail_sptr" "', argument " "1"" of type '" "gr::block_detail *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_detail * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::block_detail > *)new boost::shared_ptr< gr::block_detail >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__block_detail_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_block_detail_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_block_detail_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__block_detail, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_block_detail_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_block_detail_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::block_detail >::shared_ptr()\n"
    "    boost::shared_ptr< gr::block_detail >::shared_ptr(gr::block_detail *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_detail_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_detail > *arg1 = (boost::shared_ptr< gr::block_detail > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::block_detail *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_detail_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_detail_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_detail_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_detail > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_detail > * >(argp1);
  {
    try {
      result = (gr::block_detail *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__block_detail, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_block_detail_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_detail > *arg1 = (boost::shared_ptr< gr::block_detail > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_block_detail_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_detail_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_block_detail_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_detail > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_detail > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_detail_sptr_ninputs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_detail > *arg1 = (boost::shared_ptr< gr::block_detail > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_detail_sptr_ninputs",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_detail_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_detail_sptr_ninputs" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_detail > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_detail > * >(argp1);
  {
    try {
      result = (int)(*arg1)->ninputs();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_detail_sptr_noutputs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_detail > *arg1 = (boost::shared_ptr< gr::block_detail > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_detail_sptr_noutputs",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_detail_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_detail_sptr_noutputs" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_detail > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_detail > * >(argp1);
  {
    try {
      result = (int)(*arg1)->noutputs();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_detail_sptr_sink_p(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_detail > *arg1 = (boost::shared_ptr< gr::block_detail > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_detail_sptr_sink_p",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_detail_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_detail_sptr_sink_p" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_detail > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_detail > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->sink_p();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_detail_sptr_source_p(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_detail > *arg1 = (boost::shared_ptr< gr::block_detail > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_detail_sptr_source_p",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_detail_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_detail_sptr_source_p" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_detail > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_detail > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->source_p();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_detail_sptr_set_input(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_detail > *arg1 = (boost::shared_ptr< gr::block_detail > *) 0 ;
  unsigned int arg2 ;
  gr::buffer_reader_sptr arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which",(char *) "reader", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:block_detail_sptr_set_input",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_detail_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_detail_sptr_set_input" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_detail > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_detail > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_detail_sptr_set_input" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_gr__buffer_reader_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "block_detail_sptr_set_input" "', argument " "3"" of type '" "gr::buffer_reader_sptr""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_detail_sptr_set_input" "', argument " "3"" of type '" "gr::buffer_reader_sptr""'");
    } else {
      gr::buffer_reader_sptr * temp = reinterpret_cast< gr::buffer_reader_sptr * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_input(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_detail_sptr_input(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_detail > *arg1 = (boost::shared_ptr< gr::block_detail > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  gr::buffer_reader_sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_detail_sptr_input",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_detail_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_detail_sptr_input" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_detail > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_detail > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_detail_sptr_input" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (*arg1)->input(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::buffer_reader_sptr(static_cast< const gr::buffer_reader_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__buffer_reader_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_detail_sptr_set_output(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_detail > *arg1 = (boost::shared_ptr< gr::block_detail > *) 0 ;
  unsigned int arg2 ;
  gr::buffer_sptr arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which",(char *) "buffer", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:block_detail_sptr_set_output",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_detail_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_detail_sptr_set_output" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_detail > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_detail > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_detail_sptr_set_output" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_gr__buffer_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "block_detail_sptr_set_output" "', argument " "3"" of type '" "gr::buffer_sptr""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_detail_sptr_set_output" "', argument " "3"" of type '" "gr::buffer_sptr""'");
    } else {
      gr::buffer_sptr * temp = reinterpret_cast< gr::buffer_sptr * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->set_output(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_detail_sptr_output(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_detail > *arg1 = (boost::shared_ptr< gr::block_detail > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  gr::buffer_sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_detail_sptr_output",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_detail_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_detail_sptr_output" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_detail > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_detail > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_detail_sptr_output" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (*arg1)->output(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::buffer_sptr(static_cast< const gr::buffer_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__buffer_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *block_detail_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__block_detail_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_block_detail_ncurrently_allocated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long result;
  
  {
    try {
      result = (long)gr::block_detail_ncurrently_allocated();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_buffer_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::buffer > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::buffer > *)new boost::shared_ptr< gr::buffer >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__buffer_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_buffer_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::buffer *arg1 = (gr::buffer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::buffer > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_buffer_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__buffer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_buffer_sptr" "', argument " "1"" of type '" "gr::buffer *""'"); 
  }
  arg1 = reinterpret_cast< gr::buffer * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::buffer > *)new boost::shared_ptr< gr::buffer >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__buffer_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_buffer_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_buffer_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__buffer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_buffer_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_buffer_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::buffer >::shared_ptr()\n"
    "    boost::shared_ptr< gr::buffer >::shared_ptr(gr::buffer *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_buffer_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::buffer > *arg1 = (boost::shared_ptr< gr::buffer > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::buffer *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"buffer_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__buffer_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "buffer_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::buffer > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::buffer > * >(argp1);
  {
    try {
      result = (gr::buffer *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__buffer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_buffer_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::buffer > *arg1 = (boost::shared_ptr< gr::buffer > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_buffer_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__buffer_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_buffer_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::buffer > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::buffer > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *buffer_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__buffer_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_buffer_reader_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::buffer_reader > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::buffer_reader > *)new boost::shared_ptr< gr::buffer_reader >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__buffer_reader_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_buffer_reader_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::buffer_reader *arg1 = (gr::buffer_reader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::buffer_reader > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_buffer_reader_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__buffer_reader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_buffer_reader_sptr" "', argument " "1"" of type '" "gr::buffer_reader *""'"); 
  }
  arg1 = reinterpret_cast< gr::buffer_reader * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::buffer_reader > *)new boost::shared_ptr< gr::buffer_reader >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__buffer_reader_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_buffer_reader_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_buffer_reader_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__buffer_reader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_buffer_reader_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_buffer_reader_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::buffer_reader >::shared_ptr()\n"
    "    boost::shared_ptr< gr::buffer_reader >::shared_ptr(gr::buffer_reader *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_buffer_reader_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::buffer_reader > *arg1 = (boost::shared_ptr< gr::buffer_reader > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::buffer_reader *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"buffer_reader_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__buffer_reader_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "buffer_reader_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::buffer_reader > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::buffer_reader > * >(argp1);
  {
    try {
      result = (gr::buffer_reader *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__buffer_reader, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_buffer_reader_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::buffer_reader > *arg1 = (boost::shared_ptr< gr::buffer_reader > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_buffer_reader_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__buffer_reader_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_buffer_reader_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::buffer_reader > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::buffer_reader > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *buffer_reader_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__buffer_reader_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_buffer_ncurrently_allocated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long result;
  
  {
    try {
      result = (long)gr::buffer_ncurrently_allocated();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_buffer_reader_ncurrently_allocated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long result;
  
  {
    try {
      result = (long)gr::buffer_reader_ncurrently_allocated();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prefix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  {
    try {
      result = gr::prefix();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sysconfdir(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  {
    try {
      result = gr::sysconfdir();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prefsdir(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  {
    try {
      result = gr::prefsdir();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_build_date(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  {
    try {
      result = gr::build_date();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_version(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  {
    try {
      result = gr::version();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_major_version(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  {
    try {
      result = gr::major_version();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_api_version(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  {
    try {
      result = gr::api_version();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_minor_version(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  {
    try {
      result = gr::minor_version();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feval_dd_example(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::feval_dd *arg1 = (gr::feval_dd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "f",(char *) "x", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:feval_dd_example",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__feval_dd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feval_dd_example" "', argument " "1"" of type '" "gr::feval_dd *""'"); 
  }
  arg1 = reinterpret_cast< gr::feval_dd * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "feval_dd_example" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)gr::feval_dd_example(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feval_cc_example(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::feval_cc *arg1 = (gr::feval_cc *) 0 ;
  gr_complex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< float > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "f",(char *) "x", NULL 
  };
  gr_complex result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:feval_cc_example",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__feval_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feval_cc_example" "', argument " "1"" of type '" "gr::feval_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::feval_cc * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_float_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "feval_cc_example" "', argument " "2"" of type '" "gr_complex""'");
  } 
  arg2 = static_cast< gr_complex >(val2);
  {
    try {
      result = gr::feval_cc_example(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_complex_Sl_float_Sg_(static_cast< std::complex<float> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feval_ll_example(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::feval_ll *arg1 = (gr::feval_ll *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "f",(char *) "x", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:feval_ll_example",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__feval_ll, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feval_ll_example" "', argument " "1"" of type '" "gr::feval_ll *""'"); 
  }
  arg1 = reinterpret_cast< gr::feval_ll * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "feval_ll_example" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = (long)gr::feval_ll_example(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feval_example(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::feval *arg1 = (gr::feval *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "f", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:feval_example",kwnames,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__feval, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feval_example" "', argument " "1"" of type '" "gr::feval *""'"); 
  }
  arg1 = reinterpret_cast< gr::feval * >(argp1);
  {
    try {
      gr::feval_example(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ensure_py_gil_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ensure_py_gil_state *result = 0 ;
  
  {
    try {
      result = (ensure_py_gil_state *)new ensure_py_gil_state();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ensure_py_gil_state, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ensure_py_gil_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ensure_py_gil_state *arg1 = (ensure_py_gil_state *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_ensure_py_gil_state",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ensure_py_gil_state, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ensure_py_gil_state" "', argument " "1"" of type '" "ensure_py_gil_state *""'"); 
  }
  arg1 = reinterpret_cast< ensure_py_gil_state * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ensure_py_gil_state_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ensure_py_gil_state, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_feval_dd_calleval(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::py_feval_dd *arg1 = (gr::py_feval_dd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:feval_dd_calleval",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__py_feval_dd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feval_dd_calleval" "', argument " "1"" of type '" "gr::py_feval_dd *""'"); 
  }
  arg1 = reinterpret_cast< gr::py_feval_dd * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "feval_dd_calleval" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)(arg1)->calleval(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_feval_dd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::py_feval_dd *arg1 = (gr::py_feval_dd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_feval_dd",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__py_feval_dd, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_feval_dd" "', argument " "1"" of type '" "gr::py_feval_dd *""'"); 
  }
  arg1 = reinterpret_cast< gr::py_feval_dd * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_feval_dd(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "self", NULL 
  };
  gr::py_feval_dd *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_feval_dd",kwnames,&obj0)) SWIG_fail;
  arg1 = obj0;
  {
    try {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (gr::py_feval_dd *)new SwigDirector_feval_dd(arg1); 
      } else {
        result = (gr::py_feval_dd *)new gr::py_feval_dd(); 
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__py_feval_dd, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_feval_dd(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::py_feval_dd *arg1 = (gr::py_feval_dd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "self", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:disown_feval_dd",kwnames,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__py_feval_dd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_feval_dd" "', argument " "1"" of type '" "gr::py_feval_dd *""'"); 
  }
  arg1 = reinterpret_cast< gr::py_feval_dd * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feval_dd_eval(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::py_feval_dd *arg1 = (gr::py_feval_dd *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  Swig::Director *director = 0;
  bool upcall = false;
  SwigDirector_feval_dd *darg = 0;
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:feval_dd_eval",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__py_feval_dd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feval_dd_eval" "', argument " "1"" of type '" "gr::py_feval_dd *""'"); 
  }
  arg1 = reinterpret_cast< gr::py_feval_dd * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "feval_dd_eval" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (!director || !(director->swig_get_inner("eval"))) {
    SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing protected member eval");
    SWIG_fail;
  }
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    darg = dynamic_cast<SwigDirector_feval_dd *>(arg1);
    {
      try {
        if (upcall) {
          result = (double)(darg)->evalSwigPublic(arg2);
        } else {
          result = (double)(darg)->eval(arg2);
        }
      }
      catch(std::exception &e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
      catch(...) {
        SWIG_exception(SWIG_RuntimeError, "Unknown exception");
      }
      
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *feval_dd_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__py_feval_dd, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_feval_cc_calleval(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::py_feval_cc *arg1 = (gr::py_feval_cc *) 0 ;
  gr_complex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< float > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  gr_complex result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:feval_cc_calleval",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__py_feval_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feval_cc_calleval" "', argument " "1"" of type '" "gr::py_feval_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::py_feval_cc * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_float_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "feval_cc_calleval" "', argument " "2"" of type '" "gr_complex""'");
  } 
  arg2 = static_cast< gr_complex >(val2);
  {
    try {
      result = (arg1)->calleval(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_complex_Sl_float_Sg_(static_cast< std::complex<float> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_feval_cc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::py_feval_cc *arg1 = (gr::py_feval_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_feval_cc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__py_feval_cc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_feval_cc" "', argument " "1"" of type '" "gr::py_feval_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::py_feval_cc * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_feval_cc(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "self", NULL 
  };
  gr::py_feval_cc *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_feval_cc",kwnames,&obj0)) SWIG_fail;
  arg1 = obj0;
  {
    try {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (gr::py_feval_cc *)new SwigDirector_feval_cc(arg1); 
      } else {
        result = (gr::py_feval_cc *)new gr::py_feval_cc(); 
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__py_feval_cc, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_feval_cc(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::py_feval_cc *arg1 = (gr::py_feval_cc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "self", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:disown_feval_cc",kwnames,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__py_feval_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_feval_cc" "', argument " "1"" of type '" "gr::py_feval_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::py_feval_cc * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feval_cc_eval(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::py_feval_cc *arg1 = (gr::py_feval_cc *) 0 ;
  gr_complex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< float > val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  Swig::Director *director = 0;
  bool upcall = false;
  SwigDirector_feval_cc *darg = 0;
  gr_complex result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:feval_cc_eval",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__py_feval_cc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feval_cc_eval" "', argument " "1"" of type '" "gr::py_feval_cc *""'"); 
  }
  arg1 = reinterpret_cast< gr::py_feval_cc * >(argp1);
  ecode2 = SWIG_AsVal_std_complex_Sl_float_Sg_(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "feval_cc_eval" "', argument " "2"" of type '" "gr_complex""'");
  } 
  arg2 = static_cast< gr_complex >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (!director || !(director->swig_get_inner("eval"))) {
    SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing protected member eval");
    SWIG_fail;
  }
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    darg = dynamic_cast<SwigDirector_feval_cc *>(arg1);
    {
      try {
        if (upcall) {
          result = (darg)->evalSwigPublic(arg2);
        } else {
          result = (darg)->eval(arg2);
        }
      }
      catch(std::exception &e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
      catch(...) {
        SWIG_exception(SWIG_RuntimeError, "Unknown exception");
      }
      
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_std_complex_Sl_float_Sg_(static_cast< std::complex<float> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *feval_cc_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__py_feval_cc, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_feval_ll_calleval(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::py_feval_ll *arg1 = (gr::py_feval_ll *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:feval_ll_calleval",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__py_feval_ll, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feval_ll_calleval" "', argument " "1"" of type '" "gr::py_feval_ll *""'"); 
  }
  arg1 = reinterpret_cast< gr::py_feval_ll * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "feval_ll_calleval" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = (long)(arg1)->calleval(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_feval_ll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::py_feval_ll *arg1 = (gr::py_feval_ll *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_feval_ll",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__py_feval_ll, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_feval_ll" "', argument " "1"" of type '" "gr::py_feval_ll *""'"); 
  }
  arg1 = reinterpret_cast< gr::py_feval_ll * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_feval_ll(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "self", NULL 
  };
  gr::py_feval_ll *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_feval_ll",kwnames,&obj0)) SWIG_fail;
  arg1 = obj0;
  {
    try {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (gr::py_feval_ll *)new SwigDirector_feval_ll(arg1); 
      } else {
        result = (gr::py_feval_ll *)new gr::py_feval_ll(); 
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__py_feval_ll, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_feval_ll(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::py_feval_ll *arg1 = (gr::py_feval_ll *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "self", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:disown_feval_ll",kwnames,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__py_feval_ll, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_feval_ll" "', argument " "1"" of type '" "gr::py_feval_ll *""'"); 
  }
  arg1 = reinterpret_cast< gr::py_feval_ll * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feval_ll_eval(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::py_feval_ll *arg1 = (gr::py_feval_ll *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  Swig::Director *director = 0;
  bool upcall = false;
  SwigDirector_feval_ll *darg = 0;
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:feval_ll_eval",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__py_feval_ll, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feval_ll_eval" "', argument " "1"" of type '" "gr::py_feval_ll *""'"); 
  }
  arg1 = reinterpret_cast< gr::py_feval_ll * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "feval_ll_eval" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (!director || !(director->swig_get_inner("eval"))) {
    SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing protected member eval");
    SWIG_fail;
  }
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    darg = dynamic_cast<SwigDirector_feval_ll *>(arg1);
    {
      try {
        if (upcall) {
          result = (long)(darg)->evalSwigPublic(arg2);
        } else {
          result = (long)(darg)->eval(arg2);
        }
      }
      catch(std::exception &e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
      catch(...) {
        SWIG_exception(SWIG_RuntimeError, "Unknown exception");
      }
      
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *feval_ll_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__py_feval_ll, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_feval_calleval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::py_feval *arg1 = (gr::py_feval *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"feval_calleval",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__py_feval, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feval_calleval" "', argument " "1"" of type '" "gr::py_feval *""'"); 
  }
  arg1 = reinterpret_cast< gr::py_feval * >(argp1);
  {
    try {
      (arg1)->calleval();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_feval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::py_feval *arg1 = (gr::py_feval *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_feval",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__py_feval, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_feval" "', argument " "1"" of type '" "gr::py_feval *""'"); 
  }
  arg1 = reinterpret_cast< gr::py_feval * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_feval(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "self", NULL 
  };
  gr::py_feval *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_feval",kwnames,&obj0)) SWIG_fail;
  arg1 = obj0;
  {
    try {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (gr::py_feval *)new SwigDirector_feval(arg1); 
      } else {
        result = (gr::py_feval *)new gr::py_feval(); 
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__py_feval, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_feval(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::py_feval *arg1 = (gr::py_feval *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "self", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:disown_feval",kwnames,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__py_feval, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_feval" "', argument " "1"" of type '" "gr::py_feval *""'"); 
  }
  arg1 = reinterpret_cast< gr::py_feval * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feval_eval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::py_feval *arg1 = (gr::py_feval *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  SwigDirector_feval *darg = 0;
  
  if(!PyArg_UnpackTuple(args,(char *)"feval_eval",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__py_feval, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feval_eval" "', argument " "1"" of type '" "gr::py_feval *""'"); 
  }
  arg1 = reinterpret_cast< gr::py_feval * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (!director || !(director->swig_get_inner("eval"))) {
    SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing protected member eval");
    SWIG_fail;
  }
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    darg = dynamic_cast<SwigDirector_feval *>(arg1);
    {
      try {
        if (upcall) {
          (darg)->evalSwigPublic();
        } else {
          (darg)->eval();
        }
      }
      catch(std::exception &e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
      catch(...) {
        SWIG_exception(SWIG_RuntimeError, "Unknown exception");
      }
      
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *feval_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__py_feval, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_feval_p_calleval(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::py_feval_p *arg1 = (gr::py_feval_p *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:feval_p_calleval",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__py_feval_p, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feval_p_calleval" "', argument " "1"" of type '" "gr::py_feval_p *""'"); 
  }
  arg1 = reinterpret_cast< gr::py_feval_p * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "feval_p_calleval" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "feval_p_calleval" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->calleval(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_feval_p(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::py_feval_p *arg1 = (gr::py_feval_p *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_feval_p",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__py_feval_p, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_feval_p" "', argument " "1"" of type '" "gr::py_feval_p *""'"); 
  }
  arg1 = reinterpret_cast< gr::py_feval_p * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_feval_p(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "self", NULL 
  };
  gr::py_feval_p *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_feval_p",kwnames,&obj0)) SWIG_fail;
  arg1 = obj0;
  {
    try {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (gr::py_feval_p *)new SwigDirector_feval_p(arg1); 
      } else {
        result = (gr::py_feval_p *)new gr::py_feval_p(); 
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__py_feval_p, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_feval_p(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::py_feval_p *arg1 = (gr::py_feval_p *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "self", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:disown_feval_p",kwnames,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__py_feval_p, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_feval_p" "', argument " "1"" of type '" "gr::py_feval_p *""'"); 
  }
  arg1 = reinterpret_cast< gr::py_feval_p * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_feval_p_eval(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::py_feval_p *arg1 = (gr::py_feval_p *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  Swig::Director *director = 0;
  bool upcall = false;
  SwigDirector_feval_p *darg = 0;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:feval_p_eval",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__py_feval_p, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "feval_p_eval" "', argument " "1"" of type '" "gr::py_feval_p *""'"); 
  }
  arg1 = reinterpret_cast< gr::py_feval_p * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "feval_p_eval" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "feval_p_eval" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  if (!director || !(director->swig_get_inner("eval"))) {
    SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing protected member eval");
    SWIG_fail;
  }
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    darg = dynamic_cast<SwigDirector_feval_p *>(arg1);
    {
      try {
        if (upcall) {
          (darg)->evalSwigPublic(arg2);
        } else {
          (darg)->eval(arg2);
        }
      }
      catch(std::exception &e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
      catch(...) {
        SWIG_exception(SWIG_RuntimeError, "Unknown exception");
      }
      
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *feval_p_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__py_feval_p, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_hier_block2_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::hier_block2 > *)new boost::shared_ptr< gr::hier_block2 >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_hier_block2_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::hier_block2 *arg1 = (gr::hier_block2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::hier_block2 > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_hier_block2_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__hier_block2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_hier_block2_sptr" "', argument " "1"" of type '" "gr::hier_block2 *""'"); 
  }
  arg1 = reinterpret_cast< gr::hier_block2 * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::hier_block2 > *)new boost::shared_ptr< gr::hier_block2 >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_hier_block2_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_hier_block2_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__hier_block2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_hier_block2_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_hier_block2_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::hier_block2 >::shared_ptr()\n"
    "    boost::shared_ptr< gr::hier_block2 >::shared_ptr(gr::hier_block2 *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::hier_block2 *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    try {
      result = (gr::hier_block2 *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__hier_block2, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_hier_block2_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_hier_block2_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_hier_block2_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_primitive_connect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  gr::basic_block_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_sptr_primitive_connect",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_primitive_connect" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hier_block2_sptr_primitive_connect" "', argument " "2"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_sptr_primitive_connect" "', argument " "2"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      try {
        (*arg1)->connect(arg2);
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_primitive_connect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  gr::basic_block_sptr arg2 ;
  int arg3 ;
  gr::basic_block_sptr arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_sptr_primitive_connect",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_primitive_connect" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hier_block2_sptr_primitive_connect" "', argument " "2"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_sptr_primitive_connect" "', argument " "2"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hier_block2_sptr_primitive_connect" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "hier_block2_sptr_primitive_connect" "', argument " "4"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_sptr_primitive_connect" "', argument " "4"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "hier_block2_sptr_primitive_connect" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      try {
        (*arg1)->connect(arg2,arg3,arg4,arg5);
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_primitive_connect(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_hier_block2_sptr_primitive_connect__SWIG_0(self, args);
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_hier_block2_sptr_primitive_connect__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'hier_block2_sptr_primitive_connect'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::hier_block2::connect(gr::basic_block_sptr)\n"
    "    gr::hier_block2::connect(gr::basic_block_sptr,int,gr::basic_block_sptr,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_primitive_msg_connect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  gr::basic_block_sptr arg2 ;
  pmt::pmt_t arg3 ;
  gr::basic_block_sptr arg4 ;
  pmt::pmt_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_sptr_primitive_msg_connect",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_primitive_msg_connect" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hier_block2_sptr_primitive_msg_connect" "', argument " "2"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_sptr_primitive_msg_connect" "', argument " "2"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "hier_block2_sptr_primitive_msg_connect" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_sptr_primitive_msg_connect" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "hier_block2_sptr_primitive_msg_connect" "', argument " "4"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_sptr_primitive_msg_connect" "', argument " "4"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "hier_block2_sptr_primitive_msg_connect" "', argument " "5"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_sptr_primitive_msg_connect" "', argument " "5"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    try {
      try {
        (*arg1)->msg_connect(arg2,arg3,arg4,arg5);
      }
      catch(std::runtime_error &_e) {
        SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_primitive_msg_connect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  gr::basic_block_sptr arg2 ;
  std::string arg3 ;
  gr::basic_block_sptr arg4 ;
  std::string arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_sptr_primitive_msg_connect",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_primitive_msg_connect" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hier_block2_sptr_primitive_msg_connect" "', argument " "2"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_sptr_primitive_msg_connect" "', argument " "2"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "hier_block2_sptr_primitive_msg_connect" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "hier_block2_sptr_primitive_msg_connect" "', argument " "4"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_sptr_primitive_msg_connect" "', argument " "4"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "hier_block2_sptr_primitive_msg_connect" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      try {
        (*arg1)->msg_connect(arg2,arg3,arg4,arg5);
      }
      catch(std::runtime_error &_e) {
        SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_primitive_msg_connect(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_hier_block2_sptr_primitive_msg_connect__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_hier_block2_sptr_primitive_msg_connect__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'hier_block2_sptr_primitive_msg_connect'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::hier_block2::msg_connect(gr::basic_block_sptr,pmt::pmt_t,gr::basic_block_sptr,pmt::pmt_t)\n"
    "    gr::hier_block2::msg_connect(gr::basic_block_sptr,std::string,gr::basic_block_sptr,std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_primitive_msg_disconnect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  gr::basic_block_sptr arg2 ;
  pmt::pmt_t arg3 ;
  gr::basic_block_sptr arg4 ;
  pmt::pmt_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_sptr_primitive_msg_disconnect",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_primitive_msg_disconnect" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hier_block2_sptr_primitive_msg_disconnect" "', argument " "2"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_sptr_primitive_msg_disconnect" "', argument " "2"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "hier_block2_sptr_primitive_msg_disconnect" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_sptr_primitive_msg_disconnect" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "hier_block2_sptr_primitive_msg_disconnect" "', argument " "4"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_sptr_primitive_msg_disconnect" "', argument " "4"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "hier_block2_sptr_primitive_msg_disconnect" "', argument " "5"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_sptr_primitive_msg_disconnect" "', argument " "5"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    try {
      try {
        (*arg1)->msg_disconnect(arg2,arg3,arg4,arg5);
      }
      catch(std::runtime_error &_e) {
        SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_primitive_msg_disconnect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  gr::basic_block_sptr arg2 ;
  std::string arg3 ;
  gr::basic_block_sptr arg4 ;
  std::string arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_sptr_primitive_msg_disconnect",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_primitive_msg_disconnect" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hier_block2_sptr_primitive_msg_disconnect" "', argument " "2"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_sptr_primitive_msg_disconnect" "', argument " "2"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "hier_block2_sptr_primitive_msg_disconnect" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "hier_block2_sptr_primitive_msg_disconnect" "', argument " "4"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_sptr_primitive_msg_disconnect" "', argument " "4"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "hier_block2_sptr_primitive_msg_disconnect" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      try {
        (*arg1)->msg_disconnect(arg2,arg3,arg4,arg5);
      }
      catch(std::runtime_error &_e) {
        SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_primitive_msg_disconnect(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_hier_block2_sptr_primitive_msg_disconnect__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_hier_block2_sptr_primitive_msg_disconnect__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'hier_block2_sptr_primitive_msg_disconnect'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::hier_block2::msg_disconnect(gr::basic_block_sptr,pmt::pmt_t,gr::basic_block_sptr,pmt::pmt_t)\n"
    "    gr::hier_block2::msg_disconnect(gr::basic_block_sptr,std::string,gr::basic_block_sptr,std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_primitive_disconnect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  gr::basic_block_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_sptr_primitive_disconnect",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_primitive_disconnect" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hier_block2_sptr_primitive_disconnect" "', argument " "2"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_sptr_primitive_disconnect" "', argument " "2"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      try {
        (*arg1)->disconnect(arg2);
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_primitive_disconnect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  gr::basic_block_sptr arg2 ;
  int arg3 ;
  gr::basic_block_sptr arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_sptr_primitive_disconnect",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_primitive_disconnect" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hier_block2_sptr_primitive_disconnect" "', argument " "2"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_sptr_primitive_disconnect" "', argument " "2"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hier_block2_sptr_primitive_disconnect" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "hier_block2_sptr_primitive_disconnect" "', argument " "4"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_sptr_primitive_disconnect" "', argument " "4"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "hier_block2_sptr_primitive_disconnect" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      try {
        (*arg1)->disconnect(arg2,arg3,arg4,arg5);
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_primitive_disconnect(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_hier_block2_sptr_primitive_disconnect__SWIG_0(self, args);
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_hier_block2_sptr_primitive_disconnect__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'hier_block2_sptr_primitive_disconnect'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::hier_block2::disconnect(gr::basic_block_sptr)\n"
    "    gr::hier_block2::disconnect(gr::basic_block_sptr,int,gr::basic_block_sptr,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_disconnect_all(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_sptr_disconnect_all",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_disconnect_all" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    try {
      (*arg1)->disconnect_all();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_lock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_sptr_lock",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_lock" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    try {
      (*arg1)->lock();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_unlock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_sptr_unlock",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_unlock" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    try {
      (*arg1)->unlock();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_primitive_message_port_register_hier_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "port_id", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:hier_block2_sptr_primitive_message_port_register_hier_in",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_primitive_message_port_register_hier_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hier_block2_sptr_primitive_message_port_register_hier_in" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_sptr_primitive_message_port_register_hier_in" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->message_port_register_hier_in(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_primitive_message_port_register_hier_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "port_id", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:hier_block2_sptr_primitive_message_port_register_hier_out",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_primitive_message_port_register_hier_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hier_block2_sptr_primitive_message_port_register_hier_out" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_sptr_primitive_message_port_register_hier_out" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->message_port_register_hier_out(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:hier_block2_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hier_block2_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< int,std::allocator< int > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  size_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:hier_block2_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hier_block2_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hier_block2_sptr_set_max_output_buffer" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  int arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hier_block2_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hier_block2_sptr_set_max_output_buffer" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_hier_block2_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_hier_block2_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'hier_block2_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::hier_block2::set_max_output_buffer(size_t)\n"
    "    gr::hier_block2::set_max_output_buffer(int,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  size_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:hier_block2_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hier_block2_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hier_block2_sptr_set_min_output_buffer" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  int arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hier_block2_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hier_block2_sptr_set_min_output_buffer" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_hier_block2_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_hier_block2_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'hier_block2_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::hier_block2::set_min_output_buffer(size_t)\n"
    "    gr::hier_block2::set_min_output_buffer(int,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_to_hier_block2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::hier_block2_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_sptr_to_hier_block2",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_to_hier_block2" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    try {
      result = (*arg1)->to_hier_block2();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::hier_block2_sptr(static_cast< const gr::hier_block2_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:hier_block2_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hier_block2_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hier_block2_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:hier_block2_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "hier_block2_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:hier_block2_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hier_block2_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "hier_block2_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::hier_block2 > *arg1 = (boost::shared_ptr< gr::hier_block2 > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:hier_block2_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::hier_block2 > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::hier_block2 > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hier_block2_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *hier_block2_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_hier_block2_swig(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  gr::io_signature::sptr arg2 ;
  gr::io_signature::sptr arg3 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "name",(char *) "input_signature",(char *) "output_signature", NULL 
  };
  gr::hier_block2_sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:hier_block2_swig",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "hier_block2_swig" "', argument " "1"" of type '" "std::string const""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hier_block2_swig" "', argument " "2"" of type '" "gr::io_signature::sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_swig" "', argument " "2"" of type '" "gr::io_signature::sptr""'");
    } else {
      gr::io_signature::sptr * temp = reinterpret_cast< gr::io_signature::sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "hier_block2_swig" "', argument " "3"" of type '" "gr::io_signature::sptr""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_swig" "', argument " "3"" of type '" "gr::io_signature::sptr""'");
    } else {
      gr::io_signature::sptr * temp = reinterpret_cast< gr::io_signature::sptr * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      try {
        result = gr::make_hier_block2(arg1,arg2,arg3);
      }
      catch(std::runtime_error &_e) {
        SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::hier_block2_sptr(static_cast< const gr::hier_block2_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_hier_block2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::hier_block2 *arg1 = (gr::hier_block2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_hier_block2",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__hier_block2, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_hier_block2" "', argument " "1"" of type '" "gr::hier_block2 *""'"); 
  }
  arg1 = reinterpret_cast< gr::hier_block2 * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_primitive_connect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::hier_block2 *arg1 = (gr::hier_block2 *) 0 ;
  gr::basic_block_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_primitive_connect",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__hier_block2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_primitive_connect" "', argument " "1"" of type '" "gr::hier_block2 *""'"); 
  }
  arg1 = reinterpret_cast< gr::hier_block2 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hier_block2_primitive_connect" "', argument " "2"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_primitive_connect" "', argument " "2"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      try {
        (arg1)->connect(arg2);
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_primitive_connect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::hier_block2 *arg1 = (gr::hier_block2 *) 0 ;
  gr::basic_block_sptr arg2 ;
  int arg3 ;
  gr::basic_block_sptr arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_primitive_connect",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__hier_block2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_primitive_connect" "', argument " "1"" of type '" "gr::hier_block2 *""'"); 
  }
  arg1 = reinterpret_cast< gr::hier_block2 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hier_block2_primitive_connect" "', argument " "2"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_primitive_connect" "', argument " "2"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hier_block2_primitive_connect" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "hier_block2_primitive_connect" "', argument " "4"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_primitive_connect" "', argument " "4"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "hier_block2_primitive_connect" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      try {
        (arg1)->connect(arg2,arg3,arg4,arg5);
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_primitive_connect(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__hier_block2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_hier_block2_primitive_connect__SWIG_0(self, args);
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__hier_block2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_hier_block2_primitive_connect__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'hier_block2_primitive_connect'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::hier_block2::connect(gr::basic_block_sptr)\n"
    "    gr::hier_block2::connect(gr::basic_block_sptr,int,gr::basic_block_sptr,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_hier_block2_primitive_msg_connect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::hier_block2 *arg1 = (gr::hier_block2 *) 0 ;
  gr::basic_block_sptr arg2 ;
  pmt::pmt_t arg3 ;
  gr::basic_block_sptr arg4 ;
  pmt::pmt_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_primitive_msg_connect",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__hier_block2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_primitive_msg_connect" "', argument " "1"" of type '" "gr::hier_block2 *""'"); 
  }
  arg1 = reinterpret_cast< gr::hier_block2 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hier_block2_primitive_msg_connect" "', argument " "2"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_primitive_msg_connect" "', argument " "2"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "hier_block2_primitive_msg_connect" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_primitive_msg_connect" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "hier_block2_primitive_msg_connect" "', argument " "4"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_primitive_msg_connect" "', argument " "4"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "hier_block2_primitive_msg_connect" "', argument " "5"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_primitive_msg_connect" "', argument " "5"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    try {
      try {
        (arg1)->msg_connect(arg2,arg3,arg4,arg5);
      }
      catch(std::runtime_error &_e) {
        SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_primitive_msg_connect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::hier_block2 *arg1 = (gr::hier_block2 *) 0 ;
  gr::basic_block_sptr arg2 ;
  std::string arg3 ;
  gr::basic_block_sptr arg4 ;
  std::string arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_primitive_msg_connect",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__hier_block2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_primitive_msg_connect" "', argument " "1"" of type '" "gr::hier_block2 *""'"); 
  }
  arg1 = reinterpret_cast< gr::hier_block2 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hier_block2_primitive_msg_connect" "', argument " "2"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_primitive_msg_connect" "', argument " "2"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "hier_block2_primitive_msg_connect" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "hier_block2_primitive_msg_connect" "', argument " "4"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_primitive_msg_connect" "', argument " "4"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "hier_block2_primitive_msg_connect" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      try {
        (arg1)->msg_connect(arg2,arg3,arg4,arg5);
      }
      catch(std::runtime_error &_e) {
        SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_primitive_msg_connect(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__hier_block2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_hier_block2_primitive_msg_connect__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__hier_block2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_hier_block2_primitive_msg_connect__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'hier_block2_primitive_msg_connect'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::hier_block2::msg_connect(gr::basic_block_sptr,pmt::pmt_t,gr::basic_block_sptr,pmt::pmt_t)\n"
    "    gr::hier_block2::msg_connect(gr::basic_block_sptr,std::string,gr::basic_block_sptr,std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_hier_block2_primitive_msg_disconnect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::hier_block2 *arg1 = (gr::hier_block2 *) 0 ;
  gr::basic_block_sptr arg2 ;
  pmt::pmt_t arg3 ;
  gr::basic_block_sptr arg4 ;
  pmt::pmt_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_primitive_msg_disconnect",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__hier_block2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_primitive_msg_disconnect" "', argument " "1"" of type '" "gr::hier_block2 *""'"); 
  }
  arg1 = reinterpret_cast< gr::hier_block2 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hier_block2_primitive_msg_disconnect" "', argument " "2"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_primitive_msg_disconnect" "', argument " "2"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "hier_block2_primitive_msg_disconnect" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_primitive_msg_disconnect" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "hier_block2_primitive_msg_disconnect" "', argument " "4"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_primitive_msg_disconnect" "', argument " "4"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "hier_block2_primitive_msg_disconnect" "', argument " "5"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_primitive_msg_disconnect" "', argument " "5"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    try {
      try {
        (arg1)->msg_disconnect(arg2,arg3,arg4,arg5);
      }
      catch(std::runtime_error &_e) {
        SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_primitive_msg_disconnect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::hier_block2 *arg1 = (gr::hier_block2 *) 0 ;
  gr::basic_block_sptr arg2 ;
  std::string arg3 ;
  gr::basic_block_sptr arg4 ;
  std::string arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_primitive_msg_disconnect",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__hier_block2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_primitive_msg_disconnect" "', argument " "1"" of type '" "gr::hier_block2 *""'"); 
  }
  arg1 = reinterpret_cast< gr::hier_block2 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hier_block2_primitive_msg_disconnect" "', argument " "2"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_primitive_msg_disconnect" "', argument " "2"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "hier_block2_primitive_msg_disconnect" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "hier_block2_primitive_msg_disconnect" "', argument " "4"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_primitive_msg_disconnect" "', argument " "4"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "hier_block2_primitive_msg_disconnect" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      try {
        (arg1)->msg_disconnect(arg2,arg3,arg4,arg5);
      }
      catch(std::runtime_error &_e) {
        SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_primitive_msg_disconnect(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__hier_block2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_hier_block2_primitive_msg_disconnect__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__hier_block2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_hier_block2_primitive_msg_disconnect__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'hier_block2_primitive_msg_disconnect'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::hier_block2::msg_disconnect(gr::basic_block_sptr,pmt::pmt_t,gr::basic_block_sptr,pmt::pmt_t)\n"
    "    gr::hier_block2::msg_disconnect(gr::basic_block_sptr,std::string,gr::basic_block_sptr,std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_hier_block2_primitive_disconnect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::hier_block2 *arg1 = (gr::hier_block2 *) 0 ;
  gr::basic_block_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_primitive_disconnect",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__hier_block2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_primitive_disconnect" "', argument " "1"" of type '" "gr::hier_block2 *""'"); 
  }
  arg1 = reinterpret_cast< gr::hier_block2 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hier_block2_primitive_disconnect" "', argument " "2"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_primitive_disconnect" "', argument " "2"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      try {
        (arg1)->disconnect(arg2);
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_primitive_disconnect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::hier_block2 *arg1 = (gr::hier_block2 *) 0 ;
  gr::basic_block_sptr arg2 ;
  int arg3 ;
  gr::basic_block_sptr arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_primitive_disconnect",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__hier_block2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_primitive_disconnect" "', argument " "1"" of type '" "gr::hier_block2 *""'"); 
  }
  arg1 = reinterpret_cast< gr::hier_block2 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hier_block2_primitive_disconnect" "', argument " "2"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_primitive_disconnect" "', argument " "2"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hier_block2_primitive_disconnect" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "hier_block2_primitive_disconnect" "', argument " "4"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_primitive_disconnect" "', argument " "4"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "hier_block2_primitive_disconnect" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      try {
        (arg1)->disconnect(arg2,arg3,arg4,arg5);
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_primitive_disconnect(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__hier_block2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_hier_block2_primitive_disconnect__SWIG_0(self, args);
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__hier_block2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_hier_block2_primitive_disconnect__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'hier_block2_primitive_disconnect'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::hier_block2::disconnect(gr::basic_block_sptr)\n"
    "    gr::hier_block2::disconnect(gr::basic_block_sptr,int,gr::basic_block_sptr,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_hier_block2_disconnect_all(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::hier_block2 *arg1 = (gr::hier_block2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_disconnect_all",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__hier_block2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_disconnect_all" "', argument " "1"" of type '" "gr::hier_block2 *""'"); 
  }
  arg1 = reinterpret_cast< gr::hier_block2 * >(argp1);
  {
    try {
      (arg1)->disconnect_all();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_lock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::hier_block2 *arg1 = (gr::hier_block2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_lock",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__hier_block2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_lock" "', argument " "1"" of type '" "gr::hier_block2 *""'"); 
  }
  arg1 = reinterpret_cast< gr::hier_block2 * >(argp1);
  {
    try {
      (arg1)->lock();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_unlock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::hier_block2 *arg1 = (gr::hier_block2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_unlock",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__hier_block2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_unlock" "', argument " "1"" of type '" "gr::hier_block2 *""'"); 
  }
  arg1 = reinterpret_cast< gr::hier_block2 * >(argp1);
  {
    try {
      (arg1)->unlock();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_primitive_message_port_register_hier_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::hier_block2 *arg1 = (gr::hier_block2 *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "port_id", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:hier_block2_primitive_message_port_register_hier_in",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__hier_block2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_primitive_message_port_register_hier_in" "', argument " "1"" of type '" "gr::hier_block2 *""'"); 
  }
  arg1 = reinterpret_cast< gr::hier_block2 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hier_block2_primitive_message_port_register_hier_in" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_primitive_message_port_register_hier_in" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->message_port_register_hier_in(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_primitive_message_port_register_hier_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::hier_block2 *arg1 = (gr::hier_block2 *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "port_id", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:hier_block2_primitive_message_port_register_hier_out",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__hier_block2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_primitive_message_port_register_hier_out" "', argument " "1"" of type '" "gr::hier_block2 *""'"); 
  }
  arg1 = reinterpret_cast< gr::hier_block2 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hier_block2_primitive_message_port_register_hier_out" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_primitive_message_port_register_hier_out" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->message_port_register_hier_out(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::hier_block2 *arg1 = (gr::hier_block2 *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:hier_block2_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__hier_block2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_set_processor_affinity" "', argument " "1"" of type '" "gr::hier_block2 *""'"); 
  }
  arg1 = reinterpret_cast< gr::hier_block2 * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hier_block2_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hier_block2_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::hier_block2 *arg1 = (gr::hier_block2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__hier_block2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_unset_processor_affinity" "', argument " "1"" of type '" "gr::hier_block2 *""'"); 
  }
  arg1 = reinterpret_cast< gr::hier_block2 * >(argp1);
  {
    try {
      (arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::hier_block2 *arg1 = (gr::hier_block2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< int,std::allocator< int > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__hier_block2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_processor_affinity" "', argument " "1"" of type '" "gr::hier_block2 *""'"); 
  }
  arg1 = reinterpret_cast< gr::hier_block2 * >(argp1);
  {
    try {
      result = (arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::hier_block2 *arg1 = (gr::hier_block2 *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  size_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:hier_block2_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__hier_block2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_max_output_buffer" "', argument " "1"" of type '" "gr::hier_block2 *""'"); 
  }
  arg1 = reinterpret_cast< gr::hier_block2 * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hier_block2_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::hier_block2 *arg1 = (gr::hier_block2 *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__hier_block2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_set_max_output_buffer" "', argument " "1"" of type '" "gr::hier_block2 *""'"); 
  }
  arg1 = reinterpret_cast< gr::hier_block2 * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hier_block2_set_max_output_buffer" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::hier_block2 *arg1 = (gr::hier_block2 *) 0 ;
  int arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__hier_block2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_set_max_output_buffer" "', argument " "1"" of type '" "gr::hier_block2 *""'"); 
  }
  arg1 = reinterpret_cast< gr::hier_block2 * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hier_block2_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hier_block2_set_max_output_buffer" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      (arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__hier_block2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_hier_block2_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__hier_block2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_hier_block2_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'hier_block2_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::hier_block2::set_max_output_buffer(size_t)\n"
    "    gr::hier_block2::set_max_output_buffer(int,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_hier_block2_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::hier_block2 *arg1 = (gr::hier_block2 *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  size_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:hier_block2_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__hier_block2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_min_output_buffer" "', argument " "1"" of type '" "gr::hier_block2 *""'"); 
  }
  arg1 = reinterpret_cast< gr::hier_block2 * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hier_block2_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::hier_block2 *arg1 = (gr::hier_block2 *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__hier_block2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_set_min_output_buffer" "', argument " "1"" of type '" "gr::hier_block2 *""'"); 
  }
  arg1 = reinterpret_cast< gr::hier_block2 * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hier_block2_set_min_output_buffer" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::hier_block2 *arg1 = (gr::hier_block2 *) 0 ;
  int arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__hier_block2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_set_min_output_buffer" "', argument " "1"" of type '" "gr::hier_block2 *""'"); 
  }
  arg1 = reinterpret_cast< gr::hier_block2 * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hier_block2_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hier_block2_set_min_output_buffer" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      (arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hier_block2_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__hier_block2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_hier_block2_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__hier_block2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_hier_block2_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'hier_block2_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::hier_block2::set_min_output_buffer(size_t)\n"
    "    gr::hier_block2::set_min_output_buffer(int,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_hier_block2_to_hier_block2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::hier_block2 *arg1 = (gr::hier_block2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::hier_block2_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"hier_block2_to_hier_block2",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__hier_block2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hier_block2_to_hier_block2" "', argument " "1"" of type '" "gr::hier_block2 *""'"); 
  }
  arg1 = reinterpret_cast< gr::hier_block2 * >(argp1);
  {
    try {
      result = (arg1)->to_hier_block2();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::hier_block2_sptr(static_cast< const gr::hier_block2_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *hier_block2_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__hier_block2, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_dot_graph(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::hier_block2_sptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "hierblock2", NULL 
  };
  std::string result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:dot_graph",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dot_graph" "', argument " "1"" of type '" "gr::hier_block2_sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dot_graph" "', argument " "1"" of type '" "gr::hier_block2_sptr""'");
    } else {
      gr::hier_block2_sptr * temp = reinterpret_cast< gr::hier_block2_sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = gr::dot_graph(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_io_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::io_signature *arg1 = (gr::io_signature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_io_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__io_signature, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_io_signature" "', argument " "1"" of type '" "gr::io_signature *""'"); 
  }
  arg1 = reinterpret_cast< gr::io_signature * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_io_signature_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "min_streams",(char *) "max_streams",(char *) "sizeof_stream_item", NULL 
  };
  gr::io_signature::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:io_signature_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "io_signature_make" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "io_signature_make" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "io_signature_make" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = gr::io_signature::make(arg1,arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_io_signature_make2(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "min_streams",(char *) "max_streams",(char *) "sizeof_stream_item1",(char *) "sizeof_stream_item2", NULL 
  };
  gr::io_signature::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:io_signature_make2",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "io_signature_make2" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "io_signature_make2" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "io_signature_make2" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "io_signature_make2" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = gr::io_signature::make2(arg1,arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_io_signature_make3(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "min_streams",(char *) "max_streams",(char *) "sizeof_stream_item1",(char *) "sizeof_stream_item2",(char *) "sizeof_stream_item3", NULL 
  };
  gr::io_signature::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:io_signature_make3",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "io_signature_make3" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "io_signature_make3" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "io_signature_make3" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "io_signature_make3" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "io_signature_make3" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = gr::io_signature::make3(arg1,arg2,arg3,arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_io_signature_makev(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "min_streams",(char *) "max_streams",(char *) "sizeof_stream_items", NULL 
  };
  gr::io_signature::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:io_signature_makev",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "io_signature_makev" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "io_signature_makev" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "io_signature_makev" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "io_signature_makev" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = gr::io_signature::makev(arg1,arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_io_signature_min_streams(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::io_signature *arg1 = (gr::io_signature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"io_signature_min_streams",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__io_signature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "io_signature_min_streams" "', argument " "1"" of type '" "gr::io_signature const *""'"); 
  }
  arg1 = reinterpret_cast< gr::io_signature * >(argp1);
  {
    try {
      result = (int)((gr::io_signature const *)arg1)->min_streams();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_io_signature_max_streams(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::io_signature *arg1 = (gr::io_signature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"io_signature_max_streams",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__io_signature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "io_signature_max_streams" "', argument " "1"" of type '" "gr::io_signature const *""'"); 
  }
  arg1 = reinterpret_cast< gr::io_signature * >(argp1);
  {
    try {
      result = (int)((gr::io_signature const *)arg1)->max_streams();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_io_signature_sizeof_stream_item(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::io_signature *arg1 = (gr::io_signature *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "index", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:io_signature_sizeof_stream_item",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__io_signature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "io_signature_sizeof_stream_item" "', argument " "1"" of type '" "gr::io_signature const *""'"); 
  }
  arg1 = reinterpret_cast< gr::io_signature * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "io_signature_sizeof_stream_item" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)((gr::io_signature const *)arg1)->sizeof_stream_item(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_io_signature_sizeof_stream_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::io_signature *arg1 = (gr::io_signature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< int,std::allocator< int > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"io_signature_sizeof_stream_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__io_signature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "io_signature_sizeof_stream_items" "', argument " "1"" of type '" "gr::io_signature const *""'"); 
  }
  arg1 = reinterpret_cast< gr::io_signature * >(argp1);
  {
    try {
      result = ((gr::io_signature const *)arg1)->sizeof_stream_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *io_signature_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__io_signature, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_io_signature_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::io_signature > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::io_signature > *)new boost::shared_ptr< gr::io_signature >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_io_signature_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::io_signature *arg1 = (gr::io_signature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::io_signature > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_io_signature_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__io_signature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_io_signature_sptr" "', argument " "1"" of type '" "gr::io_signature *""'"); 
  }
  arg1 = reinterpret_cast< gr::io_signature * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::io_signature > *)new boost::shared_ptr< gr::io_signature >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_io_signature_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_io_signature_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__io_signature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_io_signature_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_io_signature_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::io_signature >::shared_ptr()\n"
    "    boost::shared_ptr< gr::io_signature >::shared_ptr(gr::io_signature *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_io_signature_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::io_signature > *arg1 = (boost::shared_ptr< gr::io_signature > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"io_signature_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "io_signature_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::io_signature > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::io_signature > * >(argp1);
  {
    try {
      result = (gr::io_signature *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__io_signature, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_io_signature_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::io_signature > *arg1 = (boost::shared_ptr< gr::io_signature > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_io_signature_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_io_signature_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::io_signature > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::io_signature > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_io_signature_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::io_signature > *arg1 = (boost::shared_ptr< gr::io_signature > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "min_streams",(char *) "max_streams",(char *) "sizeof_stream_item", NULL 
  };
  gr::io_signature::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:io_signature_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "io_signature_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::io_signature > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::io_signature > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "io_signature_sptr_make" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "io_signature_sptr_make" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "io_signature_sptr_make" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_io_signature_sptr_make2(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::io_signature > *arg1 = (boost::shared_ptr< gr::io_signature > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "min_streams",(char *) "max_streams",(char *) "sizeof_stream_item1",(char *) "sizeof_stream_item2", NULL 
  };
  gr::io_signature::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:io_signature_sptr_make2",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "io_signature_sptr_make2" "', argument " "1"" of type '" "boost::shared_ptr< gr::io_signature > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::io_signature > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "io_signature_sptr_make2" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "io_signature_sptr_make2" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "io_signature_sptr_make2" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "io_signature_sptr_make2" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (*arg1)->make2(arg2,arg3,arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_io_signature_sptr_make3(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::io_signature > *arg1 = (boost::shared_ptr< gr::io_signature > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "min_streams",(char *) "max_streams",(char *) "sizeof_stream_item1",(char *) "sizeof_stream_item2",(char *) "sizeof_stream_item3", NULL 
  };
  gr::io_signature::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOO:io_signature_sptr_make3",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "io_signature_sptr_make3" "', argument " "1"" of type '" "boost::shared_ptr< gr::io_signature > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::io_signature > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "io_signature_sptr_make3" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "io_signature_sptr_make3" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "io_signature_sptr_make3" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "io_signature_sptr_make3" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "io_signature_sptr_make3" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (*arg1)->make3(arg2,arg3,arg4,arg5,arg6);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_io_signature_sptr_makev(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::io_signature > *arg1 = (boost::shared_ptr< gr::io_signature > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "min_streams",(char *) "max_streams",(char *) "sizeof_stream_items", NULL 
  };
  gr::io_signature::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:io_signature_sptr_makev",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "io_signature_sptr_makev" "', argument " "1"" of type '" "boost::shared_ptr< gr::io_signature > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::io_signature > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "io_signature_sptr_makev" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "io_signature_sptr_makev" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "io_signature_sptr_makev" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "io_signature_sptr_makev" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (*arg1)->makev(arg2,arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_io_signature_sptr_min_streams(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::io_signature > *arg1 = (boost::shared_ptr< gr::io_signature > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"io_signature_sptr_min_streams",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "io_signature_sptr_min_streams" "', argument " "1"" of type '" "boost::shared_ptr< gr::io_signature > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::io_signature > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_streams();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_io_signature_sptr_max_streams(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::io_signature > *arg1 = (boost::shared_ptr< gr::io_signature > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"io_signature_sptr_max_streams",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "io_signature_sptr_max_streams" "', argument " "1"" of type '" "boost::shared_ptr< gr::io_signature > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::io_signature > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_streams();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_io_signature_sptr_sizeof_stream_item(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::io_signature > *arg1 = (boost::shared_ptr< gr::io_signature > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "index", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:io_signature_sptr_sizeof_stream_item",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "io_signature_sptr_sizeof_stream_item" "', argument " "1"" of type '" "boost::shared_ptr< gr::io_signature > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::io_signature > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "io_signature_sptr_sizeof_stream_item" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->sizeof_stream_item(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_io_signature_sptr_sizeof_stream_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::io_signature > *arg1 = (boost::shared_ptr< gr::io_signature > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< int,std::allocator< int > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"io_signature_sptr_sizeof_stream_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "io_signature_sptr_sizeof_stream_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::io_signature > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::io_signature > * >(argp1);
  {
    try {
      result = (*arg1)->sizeof_stream_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *io_signature_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_message_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  long arg1 = (long) 0 ;
  double arg2 = (double) 0 ;
  double arg3 = (double) 0 ;
  size_t arg4 = (size_t) 0 ;
  long val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "type",(char *) "arg1",(char *) "arg2",(char *) "length", NULL 
  };
  gr::message::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OOOO:message_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_long(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "message_make" "', argument " "1"" of type '" "long""'");
    } 
    arg1 = static_cast< long >(val1);
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "message_make" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "message_make" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_size_t(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "message_make" "', argument " "4"" of type '" "size_t""'");
    } 
    arg4 = static_cast< size_t >(val4);
  }
  {
    try {
      result = gr::message::make(arg1,arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::message::sptr(static_cast< const gr::message::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__message_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_message_make_from_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  long arg2 = (long) 0 ;
  double arg3 = (double) 0 ;
  double arg4 = (double) 0 ;
  long val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "s",(char *) "type",(char *) "arg1",(char *) "arg2", NULL 
  };
  gr::message::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOO:message_make_from_string",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "message_make_from_string" "', argument " "1"" of type '" "std::string const""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "message_make_from_string" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "message_make_from_string" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_double(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "message_make_from_string" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  {
    try {
      result = gr::message::make_from_string(arg1,arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::message::sptr(static_cast< const gr::message::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__message_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_message(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::message *arg1 = (gr::message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_message",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__message, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_message" "', argument " "1"" of type '" "gr::message *""'"); 
  }
  arg1 = reinterpret_cast< gr::message * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_message_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::message *arg1 = (gr::message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"message_type",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_type" "', argument " "1"" of type '" "gr::message const *""'"); 
  }
  arg1 = reinterpret_cast< gr::message * >(argp1);
  {
    try {
      result = (long)((gr::message const *)arg1)->type();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_message_arg1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::message *arg1 = (gr::message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"message_arg1",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_arg1" "', argument " "1"" of type '" "gr::message const *""'"); 
  }
  arg1 = reinterpret_cast< gr::message * >(argp1);
  {
    try {
      result = (double)((gr::message const *)arg1)->arg1();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_message_arg2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::message *arg1 = (gr::message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"message_arg2",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_arg2" "', argument " "1"" of type '" "gr::message const *""'"); 
  }
  arg1 = reinterpret_cast< gr::message * >(argp1);
  {
    try {
      result = (double)((gr::message const *)arg1)->arg2();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_message_set_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::message *arg1 = (gr::message *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "type", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:message_set_type",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_set_type" "', argument " "1"" of type '" "gr::message *""'"); 
  }
  arg1 = reinterpret_cast< gr::message * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "message_set_type" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (arg1)->set_type(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_message_set_arg1(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::message *arg1 = (gr::message *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "arg1", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:message_set_arg1",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_set_arg1" "', argument " "1"" of type '" "gr::message *""'"); 
  }
  arg1 = reinterpret_cast< gr::message * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "message_set_arg1" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_arg1(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_message_set_arg2(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::message *arg1 = (gr::message *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "arg2", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:message_set_arg2",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_set_arg2" "', argument " "1"" of type '" "gr::message *""'"); 
  }
  arg1 = reinterpret_cast< gr::message * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "message_set_arg2" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->set_arg2(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_message_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::message *arg1 = (gr::message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"message_length",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_length" "', argument " "1"" of type '" "gr::message const *""'"); 
  }
  arg1 = reinterpret_cast< gr::message * >(argp1);
  {
    try {
      result = ((gr::message const *)arg1)->length();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_message_to_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::message *arg1 = (gr::message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"message_to_string",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_to_string" "', argument " "1"" of type '" "gr::message const *""'"); 
  }
  arg1 = reinterpret_cast< gr::message * >(argp1);
  {
    try {
      result = ((gr::message const *)arg1)->to_string();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *message_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__message, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_message_ncurrently_allocated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long result;
  
  {
    try {
      result = (long)gr::message_ncurrently_allocated();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_message_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::message > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::message > *)new boost::shared_ptr< gr::message >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__message_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_message_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::message *arg1 = (gr::message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::message > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_message_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_message_sptr" "', argument " "1"" of type '" "gr::message *""'"); 
  }
  arg1 = reinterpret_cast< gr::message * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::message > *)new boost::shared_ptr< gr::message >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__message_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_message_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_message_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__message, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_message_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_message_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::message >::shared_ptr()\n"
    "    boost::shared_ptr< gr::message >::shared_ptr(gr::message *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_message_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::message > *arg1 = (boost::shared_ptr< gr::message > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::message *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"message_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__message_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::message > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::message > * >(argp1);
  {
    try {
      result = (gr::message *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__message, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_message_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::message > *arg1 = (boost::shared_ptr< gr::message > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_message_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__message_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_message_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::message > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::message > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_message_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::message > *arg1 = (boost::shared_ptr< gr::message > *) 0 ;
  long arg2 = (long) 0 ;
  double arg3 = (double) 0 ;
  double arg4 = (double) 0 ;
  size_t arg5 = (size_t) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "type",(char *) "arg1",(char *) "arg2",(char *) "length", NULL 
  };
  gr::message::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOO:message_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__message_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::message > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::message > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "message_sptr_make" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "message_sptr_make" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_double(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "message_sptr_make" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_size_t(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "message_sptr_make" "', argument " "5"" of type '" "size_t""'");
    } 
    arg5 = static_cast< size_t >(val5);
  }
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::message::sptr(static_cast< const gr::message::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__message_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_message_sptr_make_from_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::message > *arg1 = (boost::shared_ptr< gr::message > *) 0 ;
  std::string arg2 ;
  long arg3 = (long) 0 ;
  double arg4 = (double) 0 ;
  double arg5 = (double) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "s",(char *) "type",(char *) "arg1",(char *) "arg2", NULL 
  };
  gr::message::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OOO:message_sptr_make_from_string",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__message_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_sptr_make_from_string" "', argument " "1"" of type '" "boost::shared_ptr< gr::message > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::message > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "message_sptr_make_from_string" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_long(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "message_sptr_make_from_string" "', argument " "3"" of type '" "long""'");
    } 
    arg3 = static_cast< long >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_double(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "message_sptr_make_from_string" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_double(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "message_sptr_make_from_string" "', argument " "5"" of type '" "double""'");
    } 
    arg5 = static_cast< double >(val5);
  }
  {
    try {
      result = (*arg1)->make_from_string(arg2,arg3,arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::message::sptr(static_cast< const gr::message::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__message_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_message_sptr_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::message > *arg1 = (boost::shared_ptr< gr::message > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"message_sptr_type",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__message_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_sptr_type" "', argument " "1"" of type '" "boost::shared_ptr< gr::message > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::message > * >(argp1);
  {
    try {
      result = (long)(*arg1)->type();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_message_sptr_arg1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::message > *arg1 = (boost::shared_ptr< gr::message > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"message_sptr_arg1",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__message_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_sptr_arg1" "', argument " "1"" of type '" "boost::shared_ptr< gr::message > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::message > * >(argp1);
  {
    try {
      result = (double)(*arg1)->arg1();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_message_sptr_arg2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::message > *arg1 = (boost::shared_ptr< gr::message > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"message_sptr_arg2",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__message_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_sptr_arg2" "', argument " "1"" of type '" "boost::shared_ptr< gr::message > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::message > * >(argp1);
  {
    try {
      result = (double)(*arg1)->arg2();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_message_sptr_set_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::message > *arg1 = (boost::shared_ptr< gr::message > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "type", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:message_sptr_set_type",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__message_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_sptr_set_type" "', argument " "1"" of type '" "boost::shared_ptr< gr::message > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::message > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "message_sptr_set_type" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_type(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_message_sptr_set_arg1(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::message > *arg1 = (boost::shared_ptr< gr::message > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "arg1", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:message_sptr_set_arg1",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__message_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_sptr_set_arg1" "', argument " "1"" of type '" "boost::shared_ptr< gr::message > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::message > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "message_sptr_set_arg1" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->set_arg1(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_message_sptr_set_arg2(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::message > *arg1 = (boost::shared_ptr< gr::message > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "arg2", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:message_sptr_set_arg2",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__message_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_sptr_set_arg2" "', argument " "1"" of type '" "boost::shared_ptr< gr::message > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::message > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "message_sptr_set_arg2" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->set_arg2(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_message_sptr_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::message > *arg1 = (boost::shared_ptr< gr::message > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"message_sptr_length",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__message_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_sptr_length" "', argument " "1"" of type '" "boost::shared_ptr< gr::message > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::message > * >(argp1);
  {
    try {
      result = (*arg1)->length();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_message_sptr_to_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::message > *arg1 = (boost::shared_ptr< gr::message > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"message_sptr_to_string",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__message_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_sptr_to_string" "', argument " "1"" of type '" "boost::shared_ptr< gr::message > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::message > * >(argp1);
  {
    try {
      result = (*arg1)->to_string();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *message_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__message_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_msg_handler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::msg_handler *arg1 = (gr::msg_handler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_msg_handler",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__msg_handler, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_msg_handler" "', argument " "1"" of type '" "gr::msg_handler *""'"); 
  }
  arg1 = reinterpret_cast< gr::msg_handler * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_msg_handler_handle(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::msg_handler *arg1 = (gr::msg_handler *) 0 ;
  gr::message::sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:msg_handler_handle",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__msg_handler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "msg_handler_handle" "', argument " "1"" of type '" "gr::msg_handler *""'"); 
  }
  arg1 = reinterpret_cast< gr::msg_handler * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__message_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "msg_handler_handle" "', argument " "2"" of type '" "gr::message::sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "msg_handler_handle" "', argument " "2"" of type '" "gr::message::sptr""'");
    } else {
      gr::message::sptr * temp = reinterpret_cast< gr::message::sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->handle(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *msg_handler_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__msg_handler, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_msg_queue_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  unsigned int arg1 = (unsigned int) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "limit", NULL 
  };
  gr::msg_queue::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|O:msg_queue_make",kwnames,&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "msg_queue_make" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
  }
  {
    try {
      result = gr::msg_queue::make(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::msg_queue::sptr(static_cast< const gr::msg_queue::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__msg_queue_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_msg_queue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::msg_queue *arg1 = (gr::msg_queue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_msg_queue",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__msg_queue, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_msg_queue" "', argument " "1"" of type '" "gr::msg_queue *""'"); 
  }
  arg1 = reinterpret_cast< gr::msg_queue * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_msg_queue_delete_head_nowait(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::msg_queue *arg1 = (gr::msg_queue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::message::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"msg_queue_delete_head_nowait",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__msg_queue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "msg_queue_delete_head_nowait" "', argument " "1"" of type '" "gr::msg_queue *""'"); 
  }
  arg1 = reinterpret_cast< gr::msg_queue * >(argp1);
  {
    try {
      result = (arg1)->delete_head_nowait();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::message::sptr(static_cast< const gr::message::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__message_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_msg_queue_empty_p(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::msg_queue *arg1 = (gr::msg_queue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"msg_queue_empty_p",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__msg_queue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "msg_queue_empty_p" "', argument " "1"" of type '" "gr::msg_queue const *""'"); 
  }
  arg1 = reinterpret_cast< gr::msg_queue * >(argp1);
  {
    try {
      result = (bool)((gr::msg_queue const *)arg1)->empty_p();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_msg_queue_full_p(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::msg_queue *arg1 = (gr::msg_queue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"msg_queue_full_p",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__msg_queue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "msg_queue_full_p" "', argument " "1"" of type '" "gr::msg_queue const *""'"); 
  }
  arg1 = reinterpret_cast< gr::msg_queue * >(argp1);
  {
    try {
      result = (bool)((gr::msg_queue const *)arg1)->full_p();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_msg_queue_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::msg_queue *arg1 = (gr::msg_queue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"msg_queue_count",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__msg_queue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "msg_queue_count" "', argument " "1"" of type '" "gr::msg_queue const *""'"); 
  }
  arg1 = reinterpret_cast< gr::msg_queue * >(argp1);
  {
    try {
      result = (unsigned int)((gr::msg_queue const *)arg1)->count();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_msg_queue_flush(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::msg_queue *arg1 = (gr::msg_queue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"msg_queue_flush",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__msg_queue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "msg_queue_flush" "', argument " "1"" of type '" "gr::msg_queue *""'"); 
  }
  arg1 = reinterpret_cast< gr::msg_queue * >(argp1);
  {
    try {
      (arg1)->flush();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *msg_queue_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__msg_queue, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_py_msg_queue__delete_head(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::msg_queue::sptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "q", NULL 
  };
  gr::message::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:py_msg_queue__delete_head",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__msg_queue_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "py_msg_queue__delete_head" "', argument " "1"" of type '" "gr::msg_queue::sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "py_msg_queue__delete_head" "', argument " "1"" of type '" "gr::msg_queue::sptr""'");
    } else {
      gr::msg_queue::sptr * temp = reinterpret_cast< gr::msg_queue::sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = py_msg_queue__delete_head(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::message::sptr(static_cast< const gr::message::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__message_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_py_msg_queue__insert_tail(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::msg_queue::sptr arg1 ;
  gr::message::sptr arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "q",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:py_msg_queue__insert_tail",kwnames,&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__msg_queue_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "py_msg_queue__insert_tail" "', argument " "1"" of type '" "gr::msg_queue::sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "py_msg_queue__insert_tail" "', argument " "1"" of type '" "gr::msg_queue::sptr""'");
    } else {
      gr::msg_queue::sptr * temp = reinterpret_cast< gr::msg_queue::sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__message_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "py_msg_queue__insert_tail" "', argument " "2"" of type '" "gr::message::sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "py_msg_queue__insert_tail" "', argument " "2"" of type '" "gr::message::sptr""'");
    } else {
      gr::message::sptr * temp = reinterpret_cast< gr::message::sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      py_msg_queue__insert_tail(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_msg_queue_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::msg_queue > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::msg_queue > *)new boost::shared_ptr< gr::msg_queue >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__msg_queue_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_msg_queue_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::msg_queue *arg1 = (gr::msg_queue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::msg_queue > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_msg_queue_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__msg_queue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_msg_queue_sptr" "', argument " "1"" of type '" "gr::msg_queue *""'"); 
  }
  arg1 = reinterpret_cast< gr::msg_queue * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::msg_queue > *)new boost::shared_ptr< gr::msg_queue >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__msg_queue_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_msg_queue_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_msg_queue_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__msg_queue, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_msg_queue_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_msg_queue_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::msg_queue >::shared_ptr()\n"
    "    boost::shared_ptr< gr::msg_queue >::shared_ptr(gr::msg_queue *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_msg_queue_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::msg_queue > *arg1 = (boost::shared_ptr< gr::msg_queue > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::msg_queue *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"msg_queue_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__msg_queue_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "msg_queue_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::msg_queue > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::msg_queue > * >(argp1);
  {
    try {
      result = (gr::msg_queue *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__msg_queue, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_msg_queue_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::msg_queue > *arg1 = (boost::shared_ptr< gr::msg_queue > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_msg_queue_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__msg_queue_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_msg_queue_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::msg_queue > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::msg_queue > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_msg_queue_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::msg_queue > *arg1 = (boost::shared_ptr< gr::msg_queue > *) 0 ;
  unsigned int arg2 = (unsigned int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "limit", NULL 
  };
  gr::msg_queue::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:msg_queue_sptr_make",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__msg_queue_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "msg_queue_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::msg_queue > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::msg_queue > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "msg_queue_sptr_make" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
  }
  {
    try {
      result = (*arg1)->make(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::msg_queue::sptr(static_cast< const gr::msg_queue::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__msg_queue_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_msg_queue_sptr_delete_head_nowait(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::msg_queue > *arg1 = (boost::shared_ptr< gr::msg_queue > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::message::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"msg_queue_sptr_delete_head_nowait",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__msg_queue_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "msg_queue_sptr_delete_head_nowait" "', argument " "1"" of type '" "boost::shared_ptr< gr::msg_queue > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::msg_queue > * >(argp1);
  {
    try {
      result = (*arg1)->delete_head_nowait();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::message::sptr(static_cast< const gr::message::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__message_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_msg_queue_sptr_empty_p(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::msg_queue > *arg1 = (boost::shared_ptr< gr::msg_queue > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"msg_queue_sptr_empty_p",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__msg_queue_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "msg_queue_sptr_empty_p" "', argument " "1"" of type '" "boost::shared_ptr< gr::msg_queue > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::msg_queue > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->empty_p();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_msg_queue_sptr_full_p(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::msg_queue > *arg1 = (boost::shared_ptr< gr::msg_queue > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"msg_queue_sptr_full_p",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__msg_queue_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "msg_queue_sptr_full_p" "', argument " "1"" of type '" "boost::shared_ptr< gr::msg_queue > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::msg_queue > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->full_p();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_msg_queue_sptr_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::msg_queue > *arg1 = (boost::shared_ptr< gr::msg_queue > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"msg_queue_sptr_count",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__msg_queue_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "msg_queue_sptr_count" "', argument " "1"" of type '" "boost::shared_ptr< gr::msg_queue > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::msg_queue > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->count();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_msg_queue_sptr_flush(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::msg_queue > *arg1 = (boost::shared_ptr< gr::msg_queue > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"msg_queue_sptr_flush",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__msg_queue_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "msg_queue_sptr_flush" "', argument " "1"" of type '" "boost::shared_ptr< gr::msg_queue > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::msg_queue > * >(argp1);
  {
    try {
      (*arg1)->flush();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_msg_queue_sptr_handle(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::msg_queue > *arg1 = (boost::shared_ptr< gr::msg_queue > *) 0 ;
  gr::message::sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:msg_queue_sptr_handle",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__msg_queue_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "msg_queue_sptr_handle" "', argument " "1"" of type '" "boost::shared_ptr< gr::msg_queue > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::msg_queue > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__message_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "msg_queue_sptr_handle" "', argument " "2"" of type '" "gr::message::sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "msg_queue_sptr_handle" "', argument " "2"" of type '" "gr::message::sptr""'");
    } else {
      gr::message::sptr * temp = reinterpret_cast< gr::message::sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->handle(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *msg_queue_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__msg_queue_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_prefs_singleton(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::prefs *result = 0 ;
  
  {
    try {
      result = (gr::prefs *)gr::prefs::singleton();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__prefs, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prefs_add_config_file(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::prefs *arg1 = (gr::prefs *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "configfile", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:prefs_add_config_file",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__prefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prefs_add_config_file" "', argument " "1"" of type '" "gr::prefs *""'"); 
  }
  arg1 = reinterpret_cast< gr::prefs * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prefs_add_config_file" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prefs_add_config_file" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->add_config_file((std::string const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_prefs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::prefs *arg1 = (gr::prefs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_prefs",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__prefs, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_prefs" "', argument " "1"" of type '" "gr::prefs *""'"); 
  }
  arg1 = reinterpret_cast< gr::prefs * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prefs_to_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::prefs *arg1 = (gr::prefs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"prefs_to_string",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__prefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prefs_to_string" "', argument " "1"" of type '" "gr::prefs *""'"); 
  }
  arg1 = reinterpret_cast< gr::prefs * >(argp1);
  {
    try {
      result = (arg1)->to_string();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prefs_save(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::prefs *arg1 = (gr::prefs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"prefs_save",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__prefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prefs_save" "', argument " "1"" of type '" "gr::prefs *""'"); 
  }
  arg1 = reinterpret_cast< gr::prefs * >(argp1);
  {
    try {
      (arg1)->save();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_prefs_has_section(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::prefs *arg1 = (gr::prefs *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "section", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:prefs_has_section",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__prefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prefs_has_section" "', argument " "1"" of type '" "gr::prefs *""'"); 
  }
  arg1 = reinterpret_cast< gr::prefs * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prefs_has_section" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prefs_has_section" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(arg1)->has_section((std::string const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prefs_has_option(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::prefs *arg1 = (gr::prefs *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "section",(char *) "option", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:prefs_has_option",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__prefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prefs_has_option" "', argument " "1"" of type '" "gr::prefs *""'"); 
  }
  arg1 = reinterpret_cast< gr::prefs * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prefs_has_option" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prefs_has_option" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "prefs_has_option" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prefs_has_option" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (bool)(arg1)->has_option((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prefs_get_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::prefs *arg1 = (gr::prefs *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "section",(char *) "option",(char *) "default_val", NULL 
  };
  std::string result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:prefs_get_string",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__prefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prefs_get_string" "', argument " "1"" of type '" "gr::prefs *""'"); 
  }
  arg1 = reinterpret_cast< gr::prefs * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prefs_get_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prefs_get_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "prefs_get_string" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prefs_get_string" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "prefs_get_string" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prefs_get_string" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (arg1)->get_string((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prefs_set_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::prefs *arg1 = (gr::prefs *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "section",(char *) "option",(char *) "val", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:prefs_set_string",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__prefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prefs_set_string" "', argument " "1"" of type '" "gr::prefs *""'"); 
  }
  arg1 = reinterpret_cast< gr::prefs * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prefs_set_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prefs_set_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "prefs_set_string" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prefs_set_string" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "prefs_set_string" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prefs_set_string" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      (arg1)->set_string((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prefs_get_bool(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::prefs *arg1 = (gr::prefs *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "section",(char *) "option",(char *) "default_val", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:prefs_get_bool",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__prefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prefs_get_bool" "', argument " "1"" of type '" "gr::prefs *""'"); 
  }
  arg1 = reinterpret_cast< gr::prefs * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prefs_get_bool" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prefs_get_bool" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "prefs_get_bool" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prefs_get_bool" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "prefs_get_bool" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (bool)(arg1)->get_bool((std::string const &)*arg2,(std::string const &)*arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prefs_set_bool(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::prefs *arg1 = (gr::prefs *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "section",(char *) "option",(char *) "val", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:prefs_set_bool",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__prefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prefs_set_bool" "', argument " "1"" of type '" "gr::prefs *""'"); 
  }
  arg1 = reinterpret_cast< gr::prefs * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prefs_set_bool" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prefs_set_bool" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "prefs_set_bool" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prefs_set_bool" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "prefs_set_bool" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      (arg1)->set_bool((std::string const &)*arg2,(std::string const &)*arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prefs_get_long(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::prefs *arg1 = (gr::prefs *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "section",(char *) "option",(char *) "default_val", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:prefs_get_long",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__prefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prefs_get_long" "', argument " "1"" of type '" "gr::prefs *""'"); 
  }
  arg1 = reinterpret_cast< gr::prefs * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prefs_get_long" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prefs_get_long" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "prefs_get_long" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prefs_get_long" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "prefs_get_long" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  {
    try {
      result = (long)(arg1)->get_long((std::string const &)*arg2,(std::string const &)*arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prefs_set_long(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::prefs *arg1 = (gr::prefs *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "section",(char *) "option",(char *) "val", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:prefs_set_long",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__prefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prefs_set_long" "', argument " "1"" of type '" "gr::prefs *""'"); 
  }
  arg1 = reinterpret_cast< gr::prefs * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prefs_set_long" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prefs_set_long" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "prefs_set_long" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prefs_set_long" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "prefs_set_long" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  {
    try {
      (arg1)->set_long((std::string const &)*arg2,(std::string const &)*arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prefs_get_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::prefs *arg1 = (gr::prefs *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "section",(char *) "option",(char *) "default_val", NULL 
  };
  double result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:prefs_get_double",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__prefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prefs_get_double" "', argument " "1"" of type '" "gr::prefs *""'"); 
  }
  arg1 = reinterpret_cast< gr::prefs * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prefs_get_double" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prefs_get_double" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "prefs_get_double" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prefs_get_double" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "prefs_get_double" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (double)(arg1)->get_double((std::string const &)*arg2,(std::string const &)*arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_prefs_set_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::prefs *arg1 = (gr::prefs *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "section",(char *) "option",(char *) "val", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:prefs_set_double",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__prefs, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prefs_set_double" "', argument " "1"" of type '" "gr::prefs *""'"); 
  }
  arg1 = reinterpret_cast< gr::prefs * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prefs_set_double" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prefs_set_double" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "prefs_set_double" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prefs_set_double" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "prefs_set_double" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->set_double((std::string const &)*arg2,(std::string const &)*arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_prefs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::prefs *result = 0 ;
  
  {
    try {
      result = (gr::prefs *)new gr::prefs();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__prefs, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *prefs_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__prefs, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_enable_realtime_scheduling(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::rt_status_t result;
  
  {
    try {
      result = (gr::rt_status_t)gr::enable_realtime_scheduling();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_sync_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::sync_block *arg1 = (gr::sync_block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_sync_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__sync_block, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_sync_block" "', argument " "1"" of type '" "gr::sync_block *""'"); 
  }
  arg1 = reinterpret_cast< gr::sync_block * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *sync_block_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__sync_block, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_sync_decimator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::sync_decimator *arg1 = (gr::sync_decimator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_sync_decimator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__sync_decimator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_sync_decimator" "', argument " "1"" of type '" "gr::sync_decimator *""'"); 
  }
  arg1 = reinterpret_cast< gr::sync_decimator * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *sync_decimator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__sync_decimator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_sync_interpolator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::sync_interpolator *arg1 = (gr::sync_interpolator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_sync_interpolator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__sync_interpolator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_sync_interpolator" "', argument " "1"" of type '" "gr::sync_interpolator *""'"); 
  }
  arg1 = reinterpret_cast< gr::sync_interpolator * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *sync_interpolator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__sync_interpolator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_tagged_stream_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::tagged_stream_block *arg1 = (gr::tagged_stream_block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_tagged_stream_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__tagged_stream_block, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tagged_stream_block" "', argument " "1"" of type '" "gr::tagged_stream_block *""'"); 
  }
  arg1 = reinterpret_cast< gr::tagged_stream_block * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tagged_stream_block_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__tagged_stream_block, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_tag_t_offset_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::tag_t *arg1 = (gr::tag_t *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_t_offset_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__tag_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_t_offset_set" "', argument " "1"" of type '" "gr::tag_t *""'"); 
  }
  arg1 = reinterpret_cast< gr::tag_t * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tag_t_offset_set" "', argument " "2"" of type '" "uint64_t""'");
  } 
  arg2 = static_cast< uint64_t >(val2);
  if (arg1) (arg1)->offset = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_t_offset_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::tag_t *arg1 = (gr::tag_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint64_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_t_offset_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__tag_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_t_offset_get" "', argument " "1"" of type '" "gr::tag_t *""'"); 
  }
  arg1 = reinterpret_cast< gr::tag_t * >(argp1);
  result = (uint64_t) ((arg1)->offset);
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_t_key_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::tag_t *arg1 = (gr::tag_t *) 0 ;
  pmt::pmt_t *arg2 = (pmt::pmt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_t_key_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__tag_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_t_key_set" "', argument " "1"" of type '" "gr::tag_t *""'"); 
  }
  arg1 = reinterpret_cast< gr::tag_t * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tag_t_key_set" "', argument " "2"" of type '" "pmt::pmt_t *""'"); 
  }
  arg2 = reinterpret_cast< pmt::pmt_t * >(argp2);
  if (arg1) (arg1)->key = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_t_key_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::tag_t *arg1 = (gr::tag_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_t_key_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__tag_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_t_key_get" "', argument " "1"" of type '" "gr::tag_t *""'"); 
  }
  arg1 = reinterpret_cast< gr::tag_t * >(argp1);
  result = (pmt::pmt_t *)& ((arg1)->key);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_t_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::tag_t *arg1 = (gr::tag_t *) 0 ;
  pmt::pmt_t *arg2 = (pmt::pmt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_t_value_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__tag_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_t_value_set" "', argument " "1"" of type '" "gr::tag_t *""'"); 
  }
  arg1 = reinterpret_cast< gr::tag_t * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tag_t_value_set" "', argument " "2"" of type '" "pmt::pmt_t *""'"); 
  }
  arg2 = reinterpret_cast< pmt::pmt_t * >(argp2);
  if (arg1) (arg1)->value = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_t_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::tag_t *arg1 = (gr::tag_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_t_value_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__tag_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_t_value_get" "', argument " "1"" of type '" "gr::tag_t *""'"); 
  }
  arg1 = reinterpret_cast< gr::tag_t * >(argp1);
  result = (pmt::pmt_t *)& ((arg1)->value);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_t_srcid_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::tag_t *arg1 = (gr::tag_t *) 0 ;
  pmt::pmt_t *arg2 = (pmt::pmt_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_t_srcid_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__tag_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_t_srcid_set" "', argument " "1"" of type '" "gr::tag_t *""'"); 
  }
  arg1 = reinterpret_cast< gr::tag_t * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tag_t_srcid_set" "', argument " "2"" of type '" "pmt::pmt_t *""'"); 
  }
  arg2 = reinterpret_cast< pmt::pmt_t * >(argp2);
  if (arg1) (arg1)->srcid = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_t_srcid_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::tag_t *arg1 = (gr::tag_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_t_srcid_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__tag_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_t_srcid_get" "', argument " "1"" of type '" "gr::tag_t *""'"); 
  }
  arg1 = reinterpret_cast< gr::tag_t * >(argp1);
  result = (pmt::pmt_t *)& ((arg1)->srcid);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_t_marked_deleted_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::tag_t *arg1 = (gr::tag_t *) 0 ;
  std::vector< long,std::allocator< long > > *arg2 = (std::vector< long,std::allocator< long > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_t_marked_deleted_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__tag_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_t_marked_deleted_set" "', argument " "1"" of type '" "gr::tag_t *""'"); 
  }
  arg1 = reinterpret_cast< gr::tag_t * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tag_t_marked_deleted_set" "', argument " "2"" of type '" "std::vector< long,std::allocator< long > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< long,std::allocator< long > > * >(argp2);
  if (arg1) (arg1)->marked_deleted = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_t_marked_deleted_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::tag_t *arg1 = (gr::tag_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< long,std::allocator< long > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tag_t_marked_deleted_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__tag_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_t_marked_deleted_get" "', argument " "1"" of type '" "gr::tag_t *""'"); 
  }
  arg1 = reinterpret_cast< gr::tag_t * >(argp1);
  result = (std::vector< long,std::allocator< long > > *)& ((arg1)->marked_deleted);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_t_offset_compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::tag_t *arg1 = 0 ;
  gr::tag_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "x",(char *) "y", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tag_t_offset_compare",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gr__tag_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_t_offset_compare" "', argument " "1"" of type '" "gr::tag_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tag_t_offset_compare" "', argument " "1"" of type '" "gr::tag_t const &""'"); 
  }
  arg1 = reinterpret_cast< gr::tag_t * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gr__tag_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tag_t_offset_compare" "', argument " "2"" of type '" "gr::tag_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tag_t_offset_compare" "', argument " "2"" of type '" "gr::tag_t const &""'"); 
  }
  arg2 = reinterpret_cast< gr::tag_t * >(argp2);
  {
    try {
      result = (bool)gr::tag_t::offset_compare((gr::tag_t const &)*arg1,(gr::tag_t const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tag_t___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::tag_t *arg1 = (gr::tag_t *) 0 ;
  gr::tag_t *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "t", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tag_t___eq__",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__tag_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tag_t___eq__" "', argument " "1"" of type '" "gr::tag_t const *""'"); 
  }
  arg1 = reinterpret_cast< gr::tag_t * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gr__tag_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tag_t___eq__" "', argument " "2"" of type '" "gr::tag_t const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tag_t___eq__" "', argument " "2"" of type '" "gr::tag_t const &""'"); 
  }
  arg2 = reinterpret_cast< gr::tag_t * >(argp2);
  {
    try {
      result = (bool)((gr::tag_t const *)arg1)->operator ==((gr::tag_t const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tag_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::tag_t *result = 0 ;
  
  {
    try {
      result = (gr::tag_t *)new gr::tag_t();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__tag_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tag_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::tag_t *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::tag_t *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_tag_t",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_gr__tag_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_tag_t" "', argument " "1"" of type '" "gr::tag_t const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_tag_t" "', argument " "1"" of type '" "gr::tag_t const &""'"); 
  }
  arg1 = reinterpret_cast< gr::tag_t * >(argp1);
  {
    try {
      result = (gr::tag_t *)new gr::tag_t((gr::tag_t const &)*arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__tag_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tag_t(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_tag_t__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_gr__tag_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_tag_t__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_tag_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::tag_t::tag_t()\n"
    "    gr::tag_t::tag_t(gr::tag_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_tag_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::tag_t *arg1 = (gr::tag_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_tag_t",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__tag_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tag_t" "', argument " "1"" of type '" "gr::tag_t *""'"); 
  }
  arg1 = reinterpret_cast< gr::tag_t * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tag_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__tag_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_tags_vector_t_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t_iterator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t_iterator" "', argument " "1"" of type '" "std::vector< gr::tag_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_gr_tag_t_Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t___nonzero__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t___nonzero__" "', argument " "1"" of type '" "std::vector< gr::tag_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_gr_tag_t_Sg____nonzero__((std::vector< gr::tag_t > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t___bool__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t___bool__" "', argument " "1"" of type '" "std::vector< gr::tag_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_gr_tag_t_Sg____bool__((std::vector< gr::tag_t > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< gr::tag_t >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t___len__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t___len__" "', argument " "1"" of type '" "std::vector< gr::tag_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  {
    try {
      result = std_vector_Sl_gr_tag_t_Sg____len__((std::vector< gr::tag_t > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< gr::tag_t >::value_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t_pop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t_pop" "', argument " "1"" of type '" "std::vector< gr::tag_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_gr_tag_t_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new std::vector< gr::tag_t >::value_type(static_cast< const std::vector< gr::tag_t >::value_type& >(result))), SWIGTYPE_p_gr__tag_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  std::vector< gr::tag_t >::difference_type arg2 ;
  std::vector< gr::tag_t >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  std::vector< gr::tag_t,std::allocator< gr::tag_t > > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:tags_vector_t___getslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t___getslice__" "', argument " "1"" of type '" "std::vector< gr::tag_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_vector_t___getslice__" "', argument " "2"" of type '" "std::vector< gr::tag_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< gr::tag_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tags_vector_t___getslice__" "', argument " "3"" of type '" "std::vector< gr::tag_t >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< gr::tag_t >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< gr::tag_t,std::allocator< gr::tag_t > > *)std_vector_Sl_gr_tag_t_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  std::vector< gr::tag_t >::difference_type arg2 ;
  std::vector< gr::tag_t >::difference_type arg3 ;
  std::vector< gr::tag_t,std::allocator< gr::tag_t > > const &arg4_defvalue = std::vector< gr::tag_t,std::allocator< gr::tag_t > >() ;
  std::vector< gr::tag_t,std::allocator< gr::tag_t > > *arg4 = (std::vector< gr::tag_t,std::allocator< gr::tag_t > > *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:tags_vector_t___setslice__",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t___setslice__" "', argument " "1"" of type '" "std::vector< gr::tag_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_vector_t___setslice__" "', argument " "2"" of type '" "std::vector< gr::tag_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< gr::tag_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tags_vector_t___setslice__" "', argument " "3"" of type '" "std::vector< gr::tag_t >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< gr::tag_t >::difference_type >(val3);
  if (obj3) {
    {
      std::vector<gr::tag_t,std::allocator< gr::tag_t > > *ptr = (std::vector<gr::tag_t,std::allocator< gr::tag_t > > *)0;
      res4 = swig::asptr(obj3, &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "tags_vector_t___setslice__" "', argument " "4"" of type '" "std::vector< gr::tag_t,std::allocator< gr::tag_t > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tags_vector_t___setslice__" "', argument " "4"" of type '" "std::vector< gr::tag_t,std::allocator< gr::tag_t > > const &""'"); 
      }
      arg4 = ptr;
    }
  }
  {
    try {
      try {
        std_vector_Sl_gr_tag_t_Sg____setslice__(arg1,arg2,arg3,(std::vector< gr::tag_t,std::allocator< gr::tag_t > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  std::vector< gr::tag_t >::difference_type arg2 ;
  std::vector< gr::tag_t >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:tags_vector_t___delslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t___delslice__" "', argument " "1"" of type '" "std::vector< gr::tag_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_vector_t___delslice__" "', argument " "2"" of type '" "std::vector< gr::tag_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< gr::tag_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tags_vector_t___delslice__" "', argument " "3"" of type '" "std::vector< gr::tag_t >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< gr::tag_t >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_gr_tag_t_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  std::vector< gr::tag_t >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t___delitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t___delitem__" "', argument " "1"" of type '" "std::vector< gr::tag_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_vector_t___delitem__" "', argument " "2"" of type '" "std::vector< gr::tag_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< gr::tag_t >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_gr_tag_t_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< gr::tag_t,std::allocator< gr::tag_t > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t___getitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t___getitem__" "', argument " "1"" of type '" "std::vector< gr::tag_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "tags_vector_t___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        result = (std::vector< gr::tag_t,std::allocator< gr::tag_t > > *)std_vector_Sl_gr_tag_t_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< gr::tag_t,std::allocator< gr::tag_t > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t___setitem__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t___setitem__" "', argument " "1"" of type '" "std::vector< gr::tag_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "tags_vector_t___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<gr::tag_t,std::allocator< gr::tag_t > > *ptr = (std::vector<gr::tag_t,std::allocator< gr::tag_t > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tags_vector_t___setitem__" "', argument " "3"" of type '" "std::vector< gr::tag_t,std::allocator< gr::tag_t > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tags_vector_t___setitem__" "', argument " "3"" of type '" "std::vector< gr::tag_t,std::allocator< gr::tag_t > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_gr_tag_t_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< gr::tag_t,std::allocator< gr::tag_t > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t___setitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t___setitem__" "', argument " "1"" of type '" "std::vector< gr::tag_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "tags_vector_t___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_gr_tag_t_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t___delitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t___delitem__" "', argument " "1"" of type '" "std::vector< gr::tag_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "tags_vector_t___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_gr_tag_t_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<gr::tag_t,std::allocator< gr::tag_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_tags_vector_t___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<gr::tag_t,std::allocator< gr::tag_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tags_vector_t___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tags_vector_t___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< gr::tag_t >::__delitem__(std::vector< gr::tag_t >::difference_type)\n"
    "    std::vector< gr::tag_t >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tags_vector_t___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  std::vector< gr::tag_t >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< gr::tag_t >::value_type *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t___getitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t___getitem__" "', argument " "1"" of type '" "std::vector< gr::tag_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_vector_t___getitem__" "', argument " "2"" of type '" "std::vector< gr::tag_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< gr::tag_t >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< gr::tag_t >::value_type *) &std_vector_Sl_gr_tag_t_Sg____getitem____SWIG_1((std::vector< gr::tag_t > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__tag_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<gr::tag_t,std::allocator< gr::tag_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_tags_vector_t___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<gr::tag_t,std::allocator< gr::tag_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tags_vector_t___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tags_vector_t___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< gr::tag_t >::__getitem__(PySliceObject *)\n"
    "    std::vector< gr::tag_t >::__getitem__(std::vector< gr::tag_t >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tags_vector_t___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  std::vector< gr::tag_t >::difference_type arg2 ;
  std::vector< gr::tag_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t___setitem__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t___setitem__" "', argument " "1"" of type '" "std::vector< gr::tag_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_vector_t___setitem__" "', argument " "2"" of type '" "std::vector< gr::tag_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< gr::tag_t >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_gr__tag_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tags_vector_t___setitem__" "', argument " "3"" of type '" "std::vector< gr::tag_t >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tags_vector_t___setitem__" "', argument " "3"" of type '" "std::vector< gr::tag_t >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< gr::tag_t >::value_type * >(argp3);
  {
    try {
      try {
        std_vector_Sl_gr_tag_t_Sg____setitem____SWIG_2(arg1,arg2,(gr::tag_t const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<gr::tag_t,std::allocator< gr::tag_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_tags_vector_t___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<gr::tag_t,std::allocator< gr::tag_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<gr::tag_t,std::allocator< gr::tag_t > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_tags_vector_t___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<gr::tag_t,std::allocator< gr::tag_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_gr__tag_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_tags_vector_t___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tags_vector_t___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< gr::tag_t >::__setitem__(PySliceObject *,std::vector< gr::tag_t,std::allocator< gr::tag_t > > const &)\n"
    "    std::vector< gr::tag_t >::__setitem__(PySliceObject *)\n"
    "    std::vector< gr::tag_t >::__setitem__(std::vector< gr::tag_t >::difference_type,std::vector< gr::tag_t >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tags_vector_t_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  std::vector< gr::tag_t >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tags_vector_t_append",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t_append" "', argument " "1"" of type '" "std::vector< gr::tag_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gr__tag_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tags_vector_t_append" "', argument " "2"" of type '" "std::vector< gr::tag_t >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tags_vector_t_append" "', argument " "2"" of type '" "std::vector< gr::tag_t >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< gr::tag_t >::value_type * >(argp2);
  {
    try {
      std_vector_Sl_gr_tag_t_Sg__append(arg1,(gr::tag_t const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tags_vector_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *result = 0 ;
  
  {
    try {
      result = (std::vector< gr::tag_t > *)new std::vector< gr::tag_t >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tags_vector_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< gr::tag_t > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_tags_vector_t",1,1,&obj0)) SWIG_fail;
  {
    std::vector<gr::tag_t,std::allocator< gr::tag_t > > *ptr = (std::vector<gr::tag_t,std::allocator< gr::tag_t > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_tags_vector_t" "', argument " "1"" of type '" "std::vector< gr::tag_t > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_tags_vector_t" "', argument " "1"" of type '" "std::vector< gr::tag_t > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< gr::tag_t > *)new std::vector< gr::tag_t >((std::vector< gr::tag_t > const &)*arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t_empty",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t_empty" "', argument " "1"" of type '" "std::vector< gr::tag_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  {
    try {
      result = (bool)((std::vector< gr::tag_t > const *)arg1)->empty();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< gr::tag_t >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t_size" "', argument " "1"" of type '" "std::vector< gr::tag_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  {
    try {
      result = ((std::vector< gr::tag_t > const *)arg1)->size();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t_clear",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t_clear" "', argument " "1"" of type '" "std::vector< gr::tag_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  std::vector< gr::tag_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tags_vector_t_swap",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t_swap" "', argument " "1"" of type '" "std::vector< gr::tag_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tags_vector_t_swap" "', argument " "2"" of type '" "std::vector< gr::tag_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tags_vector_t_swap" "', argument " "2"" of type '" "std::vector< gr::tag_t > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< gr::tag_t > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< gr::tag_t > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t_get_allocator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t_get_allocator" "', argument " "1"" of type '" "std::vector< gr::tag_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  {
    try {
      result = ((std::vector< gr::tag_t > const *)arg1)->get_allocator();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new std::vector< gr::tag_t >::allocator_type(static_cast< const std::vector< gr::tag_t >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_gr__tag_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< gr::tag_t >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t_begin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t_begin" "', argument " "1"" of type '" "std::vector< gr::tag_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< gr::tag_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< gr::tag_t >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t_end",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t_end" "', argument " "1"" of type '" "std::vector< gr::tag_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< gr::tag_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< gr::tag_t >::reverse_iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t_rbegin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t_rbegin" "', argument " "1"" of type '" "std::vector< gr::tag_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< gr::tag_t >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< gr::tag_t >::reverse_iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t_rend",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t_rend" "', argument " "1"" of type '" "std::vector< gr::tag_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< gr::tag_t >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tags_vector_t__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< gr::tag_t > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_tags_vector_t",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_tags_vector_t" "', argument " "1"" of type '" "std::vector< gr::tag_t >::size_type""'");
  } 
  arg1 = static_cast< std::vector< gr::tag_t >::size_type >(val1);
  {
    try {
      result = (std::vector< gr::tag_t > *)new std::vector< gr::tag_t >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t_pop_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t_pop_back" "', argument " "1"" of type '" "std::vector< gr::tag_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  std::vector< gr::tag_t >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t_resize",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t_resize" "', argument " "1"" of type '" "std::vector< gr::tag_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_vector_t_resize" "', argument " "2"" of type '" "std::vector< gr::tag_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< gr::tag_t >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  std::vector< gr::tag_t >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< gr::tag_t >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t_erase",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t_erase" "', argument " "1"" of type '" "std::vector< gr::tag_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "tags_vector_t_erase" "', argument " "2"" of type '" "std::vector< gr::tag_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< gr::tag_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< gr::tag_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "tags_vector_t_erase" "', argument " "2"" of type '" "std::vector< gr::tag_t >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< gr::tag_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  std::vector< gr::tag_t >::iterator arg2 ;
  std::vector< gr::tag_t >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< gr::tag_t >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t_erase",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t_erase" "', argument " "1"" of type '" "std::vector< gr::tag_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "tags_vector_t_erase" "', argument " "2"" of type '" "std::vector< gr::tag_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< gr::tag_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< gr::tag_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "tags_vector_t_erase" "', argument " "2"" of type '" "std::vector< gr::tag_t >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "tags_vector_t_erase" "', argument " "3"" of type '" "std::vector< gr::tag_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< gr::tag_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< gr::tag_t >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "tags_vector_t_erase" "', argument " "3"" of type '" "std::vector< gr::tag_t >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< gr::tag_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<gr::tag_t,std::allocator< gr::tag_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< gr::tag_t >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_tags_vector_t_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<gr::tag_t,std::allocator< gr::tag_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< gr::tag_t >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< gr::tag_t >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_tags_vector_t_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tags_vector_t_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< gr::tag_t >::erase(std::vector< gr::tag_t >::iterator)\n"
    "    std::vector< gr::tag_t >::erase(std::vector< gr::tag_t >::iterator,std::vector< gr::tag_t >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_tags_vector_t__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t >::size_type arg1 ;
  std::vector< gr::tag_t >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< gr::tag_t > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_tags_vector_t",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_tags_vector_t" "', argument " "1"" of type '" "std::vector< gr::tag_t >::size_type""'");
  } 
  arg1 = static_cast< std::vector< gr::tag_t >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gr__tag_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_tags_vector_t" "', argument " "2"" of type '" "std::vector< gr::tag_t >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_tags_vector_t" "', argument " "2"" of type '" "std::vector< gr::tag_t >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< gr::tag_t >::value_type * >(argp2);
  {
    try {
      result = (std::vector< gr::tag_t > *)new std::vector< gr::tag_t >(arg1,(std::vector< gr::tag_t >::value_type const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tags_vector_t(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_tags_vector_t__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_tags_vector_t__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<gr::tag_t,std::allocator< gr::tag_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_tags_vector_t__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_gr__tag_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_tags_vector_t__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_tags_vector_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< gr::tag_t >::vector()\n"
    "    std::vector< gr::tag_t >::vector(std::vector< gr::tag_t > const &)\n"
    "    std::vector< gr::tag_t >::vector(std::vector< gr::tag_t >::size_type)\n"
    "    std::vector< gr::tag_t >::vector(std::vector< gr::tag_t >::size_type,std::vector< gr::tag_t >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tags_vector_t_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  std::vector< gr::tag_t >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tags_vector_t_push_back",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t_push_back" "', argument " "1"" of type '" "std::vector< gr::tag_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gr__tag_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tags_vector_t_push_back" "', argument " "2"" of type '" "std::vector< gr::tag_t >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tags_vector_t_push_back" "', argument " "2"" of type '" "std::vector< gr::tag_t >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< gr::tag_t >::value_type * >(argp2);
  {
    try {
      (arg1)->push_back((std::vector< gr::tag_t >::value_type const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< gr::tag_t >::value_type *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t_front",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t_front" "', argument " "1"" of type '" "std::vector< gr::tag_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  {
    try {
      result = (std::vector< gr::tag_t >::value_type *) &((std::vector< gr::tag_t > const *)arg1)->front();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__tag_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< gr::tag_t >::value_type *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t_back" "', argument " "1"" of type '" "std::vector< gr::tag_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  {
    try {
      result = (std::vector< gr::tag_t >::value_type *) &((std::vector< gr::tag_t > const *)arg1)->back();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__tag_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  std::vector< gr::tag_t >::size_type arg2 ;
  std::vector< gr::tag_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:tags_vector_t_assign",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t_assign" "', argument " "1"" of type '" "std::vector< gr::tag_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_vector_t_assign" "', argument " "2"" of type '" "std::vector< gr::tag_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< gr::tag_t >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_gr__tag_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tags_vector_t_assign" "', argument " "3"" of type '" "std::vector< gr::tag_t >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tags_vector_t_assign" "', argument " "3"" of type '" "std::vector< gr::tag_t >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< gr::tag_t >::value_type * >(argp3);
  {
    try {
      (arg1)->assign(arg2,(std::vector< gr::tag_t >::value_type const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  std::vector< gr::tag_t >::size_type arg2 ;
  std::vector< gr::tag_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t_resize",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t_resize" "', argument " "1"" of type '" "std::vector< gr::tag_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_vector_t_resize" "', argument " "2"" of type '" "std::vector< gr::tag_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< gr::tag_t >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_gr__tag_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tags_vector_t_resize" "', argument " "3"" of type '" "std::vector< gr::tag_t >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tags_vector_t_resize" "', argument " "3"" of type '" "std::vector< gr::tag_t >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< gr::tag_t >::value_type * >(argp3);
  {
    try {
      (arg1)->resize(arg2,(std::vector< gr::tag_t >::value_type const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<gr::tag_t,std::allocator< gr::tag_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tags_vector_t_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<gr::tag_t,std::allocator< gr::tag_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_gr__tag_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_tags_vector_t_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tags_vector_t_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< gr::tag_t >::resize(std::vector< gr::tag_t >::size_type)\n"
    "    std::vector< gr::tag_t >::resize(std::vector< gr::tag_t >::size_type,std::vector< gr::tag_t >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tags_vector_t_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  std::vector< gr::tag_t >::iterator arg2 ;
  std::vector< gr::tag_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< gr::tag_t >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t_insert",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t_insert" "', argument " "1"" of type '" "std::vector< gr::tag_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "tags_vector_t_insert" "', argument " "2"" of type '" "std::vector< gr::tag_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< gr::tag_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< gr::tag_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "tags_vector_t_insert" "', argument " "2"" of type '" "std::vector< gr::tag_t >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_gr__tag_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tags_vector_t_insert" "', argument " "3"" of type '" "std::vector< gr::tag_t >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tags_vector_t_insert" "', argument " "3"" of type '" "std::vector< gr::tag_t >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< gr::tag_t >::value_type * >(argp3);
  {
    try {
      result = (arg1)->insert(arg2,(std::vector< gr::tag_t >::value_type const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< gr::tag_t >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  std::vector< gr::tag_t >::iterator arg2 ;
  std::vector< gr::tag_t >::size_type arg3 ;
  std::vector< gr::tag_t >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t_insert",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t_insert" "', argument " "1"" of type '" "std::vector< gr::tag_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "tags_vector_t_insert" "', argument " "2"" of type '" "std::vector< gr::tag_t >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< gr::tag_t >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< gr::tag_t >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "tags_vector_t_insert" "', argument " "2"" of type '" "std::vector< gr::tag_t >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tags_vector_t_insert" "', argument " "3"" of type '" "std::vector< gr::tag_t >::size_type""'");
  } 
  arg3 = static_cast< std::vector< gr::tag_t >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_gr__tag_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "tags_vector_t_insert" "', argument " "4"" of type '" "std::vector< gr::tag_t >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tags_vector_t_insert" "', argument " "4"" of type '" "std::vector< gr::tag_t >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< gr::tag_t >::value_type * >(argp4);
  {
    try {
      (arg1)->insert(arg2,arg3,(std::vector< gr::tag_t >::value_type const &)*arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<gr::tag_t,std::allocator< gr::tag_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< gr::tag_t >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_gr__tag_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_tags_vector_t_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<gr::tag_t,std::allocator< gr::tag_t > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< gr::tag_t >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_gr__tag_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_tags_vector_t_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tags_vector_t_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< gr::tag_t >::insert(std::vector< gr::tag_t >::iterator,std::vector< gr::tag_t >::value_type const &)\n"
    "    std::vector< gr::tag_t >::insert(std::vector< gr::tag_t >::iterator,std::vector< gr::tag_t >::size_type,std::vector< gr::tag_t >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tags_vector_t_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  std::vector< gr::tag_t >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tags_vector_t_reserve",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t_reserve" "', argument " "1"" of type '" "std::vector< gr::tag_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tags_vector_t_reserve" "', argument " "2"" of type '" "std::vector< gr::tag_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< gr::tag_t >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tags_vector_t_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< gr::tag_t >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tags_vector_t_capacity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tags_vector_t_capacity" "', argument " "1"" of type '" "std::vector< gr::tag_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  {
    try {
      result = ((std::vector< gr::tag_t > const *)arg1)->capacity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tags_vector_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< gr::tag_t > *arg1 = (std::vector< gr::tag_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_tags_vector_t",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tags_vector_t" "', argument " "1"" of type '" "std::vector< gr::tag_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< gr::tag_t > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tags_vector_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_top_block_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::top_block > *)new boost::shared_ptr< gr::top_block >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_top_block_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::top_block *arg1 = (gr::top_block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::top_block > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_top_block_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__top_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_top_block_sptr" "', argument " "1"" of type '" "gr::top_block *""'"); 
  }
  arg1 = reinterpret_cast< gr::top_block * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::top_block > *)new boost::shared_ptr< gr::top_block >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_top_block_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_top_block_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__top_block, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_top_block_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_top_block_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::top_block >::shared_ptr()\n"
    "    boost::shared_ptr< gr::top_block >::shared_ptr(gr::top_block *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_top_block_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::top_block *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    try {
      result = (gr::top_block *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__top_block, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_top_block_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_top_block_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_top_block_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  int arg2 = (int) 100000000 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "max_noutput_items", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:top_block_sptr_start",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "top_block_sptr_start" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    try {
      try {
        (*arg1)->start(arg2);
      }
      catch(std::runtime_error &_e) {
        SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    try {
      (*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_lock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_lock",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_lock" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    try {
      (*arg1)->lock();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_unlock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_unlock",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_unlock" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    try {
      try {
        (*arg1)->unlock();
      }
      catch(std::runtime_error &_e) {
        SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_edge_list(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_edge_list",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_edge_list" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    try {
      result = (*arg1)->edge_list();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_msg_edge_list(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_msg_edge_list",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_msg_edge_list" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    try {
      result = (*arg1)->msg_edge_list();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_dump(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_dump",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_dump" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    try {
      (*arg1)->dump();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "nmax", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:top_block_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "top_block_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_to_top_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::top_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_to_top_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_to_top_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    try {
      result = (*arg1)->to_top_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::top_block_sptr(static_cast< const gr::top_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_primitive_connect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  gr::basic_block_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_primitive_connect",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_primitive_connect" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "top_block_sptr_primitive_connect" "', argument " "2"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "top_block_sptr_primitive_connect" "', argument " "2"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      try {
        (*arg1)->connect(arg2);
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_primitive_connect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  gr::basic_block_sptr arg2 ;
  int arg3 ;
  gr::basic_block_sptr arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_primitive_connect",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_primitive_connect" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "top_block_sptr_primitive_connect" "', argument " "2"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "top_block_sptr_primitive_connect" "', argument " "2"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "top_block_sptr_primitive_connect" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "top_block_sptr_primitive_connect" "', argument " "4"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "top_block_sptr_primitive_connect" "', argument " "4"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "top_block_sptr_primitive_connect" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      try {
        (*arg1)->connect(arg2,arg3,arg4,arg5);
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_primitive_connect(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_top_block_sptr_primitive_connect__SWIG_0(self, args);
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_top_block_sptr_primitive_connect__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'top_block_sptr_primitive_connect'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::hier_block2::connect(gr::basic_block_sptr)\n"
    "    gr::hier_block2::connect(gr::basic_block_sptr,int,gr::basic_block_sptr,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_primitive_msg_connect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  gr::basic_block_sptr arg2 ;
  pmt::pmt_t arg3 ;
  gr::basic_block_sptr arg4 ;
  pmt::pmt_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_primitive_msg_connect",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_primitive_msg_connect" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "top_block_sptr_primitive_msg_connect" "', argument " "2"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "top_block_sptr_primitive_msg_connect" "', argument " "2"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "top_block_sptr_primitive_msg_connect" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "top_block_sptr_primitive_msg_connect" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "top_block_sptr_primitive_msg_connect" "', argument " "4"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "top_block_sptr_primitive_msg_connect" "', argument " "4"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "top_block_sptr_primitive_msg_connect" "', argument " "5"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "top_block_sptr_primitive_msg_connect" "', argument " "5"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    try {
      try {
        (*arg1)->msg_connect(arg2,arg3,arg4,arg5);
      }
      catch(std::runtime_error &_e) {
        SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_primitive_msg_connect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  gr::basic_block_sptr arg2 ;
  std::string arg3 ;
  gr::basic_block_sptr arg4 ;
  std::string arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_primitive_msg_connect",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_primitive_msg_connect" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "top_block_sptr_primitive_msg_connect" "', argument " "2"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "top_block_sptr_primitive_msg_connect" "', argument " "2"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "top_block_sptr_primitive_msg_connect" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "top_block_sptr_primitive_msg_connect" "', argument " "4"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "top_block_sptr_primitive_msg_connect" "', argument " "4"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "top_block_sptr_primitive_msg_connect" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      try {
        (*arg1)->msg_connect(arg2,arg3,arg4,arg5);
      }
      catch(std::runtime_error &_e) {
        SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_primitive_msg_connect(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_top_block_sptr_primitive_msg_connect__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_top_block_sptr_primitive_msg_connect__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'top_block_sptr_primitive_msg_connect'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::hier_block2::msg_connect(gr::basic_block_sptr,pmt::pmt_t,gr::basic_block_sptr,pmt::pmt_t)\n"
    "    gr::hier_block2::msg_connect(gr::basic_block_sptr,std::string,gr::basic_block_sptr,std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_primitive_msg_disconnect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  gr::basic_block_sptr arg2 ;
  pmt::pmt_t arg3 ;
  gr::basic_block_sptr arg4 ;
  pmt::pmt_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_primitive_msg_disconnect",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_primitive_msg_disconnect" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "top_block_sptr_primitive_msg_disconnect" "', argument " "2"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "top_block_sptr_primitive_msg_disconnect" "', argument " "2"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "top_block_sptr_primitive_msg_disconnect" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "top_block_sptr_primitive_msg_disconnect" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "top_block_sptr_primitive_msg_disconnect" "', argument " "4"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "top_block_sptr_primitive_msg_disconnect" "', argument " "4"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "top_block_sptr_primitive_msg_disconnect" "', argument " "5"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "top_block_sptr_primitive_msg_disconnect" "', argument " "5"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    try {
      try {
        (*arg1)->msg_disconnect(arg2,arg3,arg4,arg5);
      }
      catch(std::runtime_error &_e) {
        SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_primitive_msg_disconnect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  gr::basic_block_sptr arg2 ;
  std::string arg3 ;
  gr::basic_block_sptr arg4 ;
  std::string arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_primitive_msg_disconnect",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_primitive_msg_disconnect" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "top_block_sptr_primitive_msg_disconnect" "', argument " "2"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "top_block_sptr_primitive_msg_disconnect" "', argument " "2"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "top_block_sptr_primitive_msg_disconnect" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "top_block_sptr_primitive_msg_disconnect" "', argument " "4"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "top_block_sptr_primitive_msg_disconnect" "', argument " "4"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "top_block_sptr_primitive_msg_disconnect" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      try {
        (*arg1)->msg_disconnect(arg2,arg3,arg4,arg5);
      }
      catch(std::runtime_error &_e) {
        SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_primitive_msg_disconnect(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_top_block_sptr_primitive_msg_disconnect__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_top_block_sptr_primitive_msg_disconnect__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'top_block_sptr_primitive_msg_disconnect'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::hier_block2::msg_disconnect(gr::basic_block_sptr,pmt::pmt_t,gr::basic_block_sptr,pmt::pmt_t)\n"
    "    gr::hier_block2::msg_disconnect(gr::basic_block_sptr,std::string,gr::basic_block_sptr,std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_primitive_disconnect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  gr::basic_block_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_primitive_disconnect",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_primitive_disconnect" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "top_block_sptr_primitive_disconnect" "', argument " "2"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "top_block_sptr_primitive_disconnect" "', argument " "2"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      try {
        (*arg1)->disconnect(arg2);
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_primitive_disconnect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  gr::basic_block_sptr arg2 ;
  int arg3 ;
  gr::basic_block_sptr arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_primitive_disconnect",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_primitive_disconnect" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "top_block_sptr_primitive_disconnect" "', argument " "2"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "top_block_sptr_primitive_disconnect" "', argument " "2"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "top_block_sptr_primitive_disconnect" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "top_block_sptr_primitive_disconnect" "', argument " "4"" of type '" "gr::basic_block_sptr""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "top_block_sptr_primitive_disconnect" "', argument " "4"" of type '" "gr::basic_block_sptr""'");
    } else {
      gr::basic_block_sptr * temp = reinterpret_cast< gr::basic_block_sptr * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "top_block_sptr_primitive_disconnect" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      try {
        (*arg1)->disconnect(arg2,arg3,arg4,arg5);
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_primitive_disconnect(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_top_block_sptr_primitive_disconnect__SWIG_0(self, args);
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_top_block_sptr_primitive_disconnect__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'top_block_sptr_primitive_disconnect'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::hier_block2::disconnect(gr::basic_block_sptr)\n"
    "    gr::hier_block2::disconnect(gr::basic_block_sptr,int,gr::basic_block_sptr,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_disconnect_all(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_disconnect_all",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_disconnect_all" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    try {
      (*arg1)->disconnect_all();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_primitive_message_port_register_hier_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "port_id", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:top_block_sptr_primitive_message_port_register_hier_in",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_primitive_message_port_register_hier_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "top_block_sptr_primitive_message_port_register_hier_in" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "top_block_sptr_primitive_message_port_register_hier_in" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->message_port_register_hier_in(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_primitive_message_port_register_hier_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "port_id", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:top_block_sptr_primitive_message_port_register_hier_out",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_primitive_message_port_register_hier_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "top_block_sptr_primitive_message_port_register_hier_out" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "top_block_sptr_primitive_message_port_register_hier_out" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->message_port_register_hier_out(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:top_block_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "top_block_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "top_block_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< int,std::allocator< int > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  size_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:top_block_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "top_block_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "top_block_sptr_set_max_output_buffer" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  int arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "top_block_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "top_block_sptr_set_max_output_buffer" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_top_block_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_top_block_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'top_block_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::hier_block2::set_max_output_buffer(size_t)\n"
    "    gr::hier_block2::set_max_output_buffer(int,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  size_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:top_block_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "top_block_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "top_block_sptr_set_min_output_buffer" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  int arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "top_block_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "top_block_sptr_set_min_output_buffer" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_top_block_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_top_block_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'top_block_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::hier_block2::set_min_output_buffer(size_t)\n"
    "    gr::hier_block2::set_min_output_buffer(int,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_to_hier_block2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::hier_block2_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_to_hier_block2",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_to_hier_block2" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    try {
      result = (*arg1)->to_hier_block2();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::hier_block2_sptr(static_cast< const gr::hier_block2_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:top_block_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "top_block_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "top_block_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:top_block_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "top_block_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:top_block_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "top_block_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "top_block_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "top_block_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "top_block_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::top_block > *arg1 = (boost::shared_ptr< gr::top_block > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:top_block_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::top_block > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::top_block > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "top_block_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "top_block_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *top_block_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_top_block_swig(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "name", NULL 
  };
  gr::top_block_sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:top_block_swig",kwnames,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "top_block_swig" "', argument " "1"" of type '" "std::string const""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      try {
        result = gr::make_top_block(arg1);
      }
      catch(std::logic_error &_e) {
        SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::top_block_sptr(static_cast< const gr::top_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_top_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::top_block *arg1 = (gr::top_block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_top_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__top_block, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_top_block" "', argument " "1"" of type '" "gr::top_block *""'"); 
  }
  arg1 = reinterpret_cast< gr::top_block * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::top_block *arg1 = (gr::top_block *) 0 ;
  int arg2 = (int) 100000000 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "max_noutput_items", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:top_block_start",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__top_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_start" "', argument " "1"" of type '" "gr::top_block *""'"); 
  }
  arg1 = reinterpret_cast< gr::top_block * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "top_block_start" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    try {
      try {
        (arg1)->start(arg2);
      }
      catch(std::runtime_error &_e) {
        SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::top_block *arg1 = (gr::top_block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__top_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_stop" "', argument " "1"" of type '" "gr::top_block *""'"); 
  }
  arg1 = reinterpret_cast< gr::top_block * >(argp1);
  {
    try {
      (arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_lock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::top_block *arg1 = (gr::top_block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_lock",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__top_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_lock" "', argument " "1"" of type '" "gr::top_block *""'"); 
  }
  arg1 = reinterpret_cast< gr::top_block * >(argp1);
  {
    try {
      (arg1)->lock();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_unlock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::top_block *arg1 = (gr::top_block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_unlock",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__top_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_unlock" "', argument " "1"" of type '" "gr::top_block *""'"); 
  }
  arg1 = reinterpret_cast< gr::top_block * >(argp1);
  {
    try {
      try {
        (arg1)->unlock();
      }
      catch(std::runtime_error &_e) {
        SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_edge_list(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::top_block *arg1 = (gr::top_block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_edge_list",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__top_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_edge_list" "', argument " "1"" of type '" "gr::top_block *""'"); 
  }
  arg1 = reinterpret_cast< gr::top_block * >(argp1);
  {
    try {
      result = (arg1)->edge_list();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_msg_edge_list(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::top_block *arg1 = (gr::top_block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_msg_edge_list",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__top_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_msg_edge_list" "', argument " "1"" of type '" "gr::top_block *""'"); 
  }
  arg1 = reinterpret_cast< gr::top_block * >(argp1);
  {
    try {
      result = (arg1)->msg_edge_list();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_dump(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::top_block *arg1 = (gr::top_block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_dump",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__top_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_dump" "', argument " "1"" of type '" "gr::top_block *""'"); 
  }
  arg1 = reinterpret_cast< gr::top_block * >(argp1);
  {
    try {
      (arg1)->dump();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::top_block *arg1 = (gr::top_block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__top_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_max_noutput_items" "', argument " "1"" of type '" "gr::top_block *""'"); 
  }
  arg1 = reinterpret_cast< gr::top_block * >(argp1);
  {
    try {
      result = (int)(arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::top_block *arg1 = (gr::top_block *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "nmax", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:top_block_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__top_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_set_max_noutput_items" "', argument " "1"" of type '" "gr::top_block *""'"); 
  }
  arg1 = reinterpret_cast< gr::top_block * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "top_block_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_to_top_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::top_block *arg1 = (gr::top_block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::top_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"top_block_to_top_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__top_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_to_top_block" "', argument " "1"" of type '" "gr::top_block *""'"); 
  }
  arg1 = reinterpret_cast< gr::top_block * >(argp1);
  {
    try {
      result = (arg1)->to_top_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::top_block_sptr(static_cast< const gr::top_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *top_block_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__top_block, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_top_block_run_unlocked(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::top_block_sptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "r", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:top_block_run_unlocked",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_run_unlocked" "', argument " "1"" of type '" "gr::top_block_sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "top_block_run_unlocked" "', argument " "1"" of type '" "gr::top_block_sptr""'");
    } else {
      gr::top_block_sptr * temp = reinterpret_cast< gr::top_block_sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      try {
        top_block_run_unlocked(arg1);
      }
      catch(std::runtime_error &_e) {
        SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_start_unlocked(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::top_block_sptr arg1 ;
  int arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "r",(char *) "max_noutput_items", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:top_block_start_unlocked",kwnames,&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_start_unlocked" "', argument " "1"" of type '" "gr::top_block_sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "top_block_start_unlocked" "', argument " "1"" of type '" "gr::top_block_sptr""'");
    } else {
      gr::top_block_sptr * temp = reinterpret_cast< gr::top_block_sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "top_block_start_unlocked" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      try {
        top_block_start_unlocked(arg1,arg2);
      }
      catch(std::runtime_error &_e) {
        SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_wait_unlocked(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::top_block_sptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "r", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:top_block_wait_unlocked",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_wait_unlocked" "', argument " "1"" of type '" "gr::top_block_sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "top_block_wait_unlocked" "', argument " "1"" of type '" "gr::top_block_sptr""'");
    } else {
      gr::top_block_sptr * temp = reinterpret_cast< gr::top_block_sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      try {
        top_block_wait_unlocked(arg1);
      }
      catch(std::runtime_error &_e) {
        SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_stop_unlocked(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::top_block_sptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "r", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:top_block_stop_unlocked",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_stop_unlocked" "', argument " "1"" of type '" "gr::top_block_sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "top_block_stop_unlocked" "', argument " "1"" of type '" "gr::top_block_sptr""'");
    } else {
      gr::top_block_sptr * temp = reinterpret_cast< gr::top_block_sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      try {
        top_block_stop_unlocked(arg1);
      }
      catch(std::runtime_error &_e) {
        SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_top_block_unlock_unlocked(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::top_block_sptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "r", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:top_block_unlock_unlocked",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "top_block_unlock_unlocked" "', argument " "1"" of type '" "gr::top_block_sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "top_block_unlock_unlocked" "', argument " "1"" of type '" "gr::top_block_sptr""'");
    } else {
      gr::top_block_sptr * temp = reinterpret_cast< gr::top_block_sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      try {
        top_block_unlock_unlocked(arg1);
      }
      catch(std::runtime_error &_e) {
        SWIG_exception_fail(SWIG_RuntimeError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dot_graph_tb(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::top_block_sptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "r", NULL 
  };
  std::string result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:dot_graph_tb",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dot_graph_tb" "', argument " "1"" of type '" "gr::top_block_sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dot_graph_tb" "', argument " "1"" of type '" "gr::top_block_sptr""'");
    } else {
      gr::top_block_sptr * temp = reinterpret_cast< gr::top_block_sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = dot_graph_tb(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t_iterator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t_iterator" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_void_Sm__Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t___nonzero__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t___nonzero__" "', argument " "1"" of type '" "std::vector< void * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_void_Sm__Sg____nonzero__((std::vector< void * > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t___bool__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t___bool__" "', argument " "1"" of type '" "std::vector< void * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_void_Sm__Sg____bool__((std::vector< void * > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< void * >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t___len__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t___len__" "', argument " "1"" of type '" "std::vector< void * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  {
    try {
      result = std_vector_Sl_void_Sm__Sg____len__((std::vector< void * > const *)arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< void * >::value_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t_pop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t_pop" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  {
    try {
      try {
        result = (std::vector< void * >::value_type)std_vector_Sl_void_Sm__Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * >::difference_type arg2 ;
  std::vector< void * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  std::vector< void *,std::allocator< void * > > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:void_start_vector_t___getslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t___getslice__" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "void_start_vector_t___getslice__" "', argument " "2"" of type '" "std::vector< void * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< void * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "void_start_vector_t___getslice__" "', argument " "3"" of type '" "std::vector< void * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< void * >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< void *,std::allocator< void * > > *)std_vector_Sl_void_Sm__Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * >::difference_type arg2 ;
  std::vector< void * >::difference_type arg3 ;
  std::vector< void *,std::allocator< void * > > const &arg4_defvalue = std::vector< void *,std::allocator< void * > >() ;
  std::vector< void *,std::allocator< void * > > *arg4 = (std::vector< void *,std::allocator< void * > > *) &arg4_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:void_start_vector_t___setslice__",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t___setslice__" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "void_start_vector_t___setslice__" "', argument " "2"" of type '" "std::vector< void * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< void * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "void_start_vector_t___setslice__" "', argument " "3"" of type '" "std::vector< void * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< void * >::difference_type >(val3);
  if (obj3) {
    {
      std::vector<void*,std::allocator< void * > > *ptr = (std::vector<void*,std::allocator< void * > > *)0;
      res4 = swig::asptr(obj3, &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "void_start_vector_t___setslice__" "', argument " "4"" of type '" "std::vector< void *,std::allocator< void * > > const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "void_start_vector_t___setslice__" "', argument " "4"" of type '" "std::vector< void *,std::allocator< void * > > const &""'"); 
      }
      arg4 = ptr;
    }
  }
  {
    try {
      try {
        std_vector_Sl_void_Sm__Sg____setslice__(arg1,arg2,arg3,(std::vector< void *,std::allocator< void * > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * >::difference_type arg2 ;
  std::vector< void * >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i",(char *) "j", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:void_start_vector_t___delslice__",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t___delslice__" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "void_start_vector_t___delslice__" "', argument " "2"" of type '" "std::vector< void * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< void * >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "void_start_vector_t___delslice__" "', argument " "3"" of type '" "std::vector< void * >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< void * >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_void_Sm__Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t___delitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t___delitem__" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "void_start_vector_t___delitem__" "', argument " "2"" of type '" "std::vector< void * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< void * >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_void_Sm__Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< void *,std::allocator< void * > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t___getitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t___getitem__" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "void_start_vector_t___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        result = (std::vector< void *,std::allocator< void * > > *)std_vector_Sl_void_Sm__Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< void *,std::allocator< void * > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t___setitem__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t___setitem__" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "void_start_vector_t___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<void*,std::allocator< void * > > *ptr = (std::vector<void*,std::allocator< void * > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "void_start_vector_t___setitem__" "', argument " "3"" of type '" "std::vector< void *,std::allocator< void * > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "void_start_vector_t___setitem__" "', argument " "3"" of type '" "std::vector< void *,std::allocator< void * > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_void_Sm__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< void *,std::allocator< void * > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t___setitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t___setitem__" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "void_start_vector_t___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_void_Sm__Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t___delitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t___delitem__" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "void_start_vector_t___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_void_Sm__Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<void*,std::allocator< void * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_void_start_vector_t___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<void*,std::allocator< void * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_void_start_vector_t___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'void_start_vector_t___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< void * >::__delitem__(std::vector< void * >::difference_type)\n"
    "    std::vector< void * >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< void * >::value_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t___getitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t___getitem__" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "void_start_vector_t___getitem__" "', argument " "2"" of type '" "std::vector< void * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< void * >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< void * >::value_type)std_vector_Sl_void_Sm__Sg____getitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<void*,std::allocator< void * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_void_start_vector_t___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<void*,std::allocator< void * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_void_start_vector_t___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'void_start_vector_t___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< void * >::__getitem__(PySliceObject *)\n"
    "    std::vector< void * >::__getitem__(std::vector< void * >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * >::difference_type arg2 ;
  std::vector< void * >::value_type arg3 = (std::vector< void * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t___setitem__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t___setitem__" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "void_start_vector_t___setitem__" "', argument " "2"" of type '" "std::vector< void * >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< void * >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "void_start_vector_t___setitem__" "', argument " "3"" of type '" "std::vector< void * >::value_type""'"); 
  }
  {
    try {
      try {
        std_vector_Sl_void_Sm__Sg____setitem____SWIG_2(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<void*,std::allocator< void * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_void_start_vector_t___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<void*,std::allocator< void * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<void*,std::allocator< void * > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_void_start_vector_t___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<void*,std::allocator< void * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *ptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &ptr, 0, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_void_start_vector_t___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'void_start_vector_t___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< void * >::__setitem__(PySliceObject *,std::vector< void *,std::allocator< void * > > const &)\n"
    "    std::vector< void * >::__setitem__(PySliceObject *)\n"
    "    std::vector< void * >::__setitem__(std::vector< void * >::difference_type,std::vector< void * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * >::value_type arg2 = (std::vector< void * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:void_start_vector_t_append",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t_append" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "void_start_vector_t_append" "', argument " "2"" of type '" "std::vector< void * >::value_type""'"); 
  }
  {
    try {
      std_vector_Sl_void_Sm__Sg__append(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_void_start_vector_t__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *result = 0 ;
  
  {
    try {
      result = (std::vector< void * > *)new std::vector< void * >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_void_start_vector_t__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< void * > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_void_start_vector_t",1,1,&obj0)) SWIG_fail;
  {
    std::vector<void*,std::allocator< void * > > *ptr = (std::vector<void*,std::allocator< void * > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_void_start_vector_t" "', argument " "1"" of type '" "std::vector< void * > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_void_start_vector_t" "', argument " "1"" of type '" "std::vector< void * > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< void * > *)new std::vector< void * >((std::vector< void * > const &)*arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t_empty",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t_empty" "', argument " "1"" of type '" "std::vector< void * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  {
    try {
      result = (bool)((std::vector< void * > const *)arg1)->empty();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< void * >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t_size" "', argument " "1"" of type '" "std::vector< void * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  {
    try {
      result = ((std::vector< void * > const *)arg1)->size();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t_clear",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t_clear" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  {
    try {
      (arg1)->clear();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "v", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:void_start_vector_t_swap",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t_swap" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "void_start_vector_t_swap" "', argument " "2"" of type '" "std::vector< void * > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "void_start_vector_t_swap" "', argument " "2"" of type '" "std::vector< void * > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< void * > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< void * > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t_get_allocator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t_get_allocator" "', argument " "1"" of type '" "std::vector< void * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  {
    try {
      result = ((std::vector< void * > const *)arg1)->get_allocator();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new std::vector< void * >::allocator_type(static_cast< const std::vector< void * >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_void_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< void * >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t_begin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t_begin" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  {
    try {
      result = (arg1)->begin();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< void * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< void * >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t_end",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t_end" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  {
    try {
      result = (arg1)->end();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< void * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< void * >::reverse_iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t_rbegin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t_rbegin" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< void * >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< void * >::reverse_iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t_rend",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t_rend" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  {
    try {
      result = (arg1)->rend();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< void * >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_void_start_vector_t__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< void * > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_void_start_vector_t",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_void_start_vector_t" "', argument " "1"" of type '" "std::vector< void * >::size_type""'");
  } 
  arg1 = static_cast< std::vector< void * >::size_type >(val1);
  {
    try {
      result = (std::vector< void * > *)new std::vector< void * >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t_pop_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t_pop_back" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  {
    try {
      (arg1)->pop_back();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t_resize",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t_resize" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "void_start_vector_t_resize" "', argument " "2"" of type '" "std::vector< void * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< void * >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< void * >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t_erase",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t_erase" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "void_start_vector_t_erase" "', argument " "2"" of type '" "std::vector< void * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< void * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< void * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "void_start_vector_t_erase" "', argument " "2"" of type '" "std::vector< void * >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< void * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * >::iterator arg2 ;
  std::vector< void * >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< void * >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t_erase",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t_erase" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "void_start_vector_t_erase" "', argument " "2"" of type '" "std::vector< void * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< void * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< void * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "void_start_vector_t_erase" "', argument " "2"" of type '" "std::vector< void * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "void_start_vector_t_erase" "', argument " "3"" of type '" "std::vector< void * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< void * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< void * >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "void_start_vector_t_erase" "', argument " "3"" of type '" "std::vector< void * >::iterator""'");
    }
  }
  {
    try {
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< void * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<void*,std::allocator< void * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< void * >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_void_start_vector_t_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<void*,std::allocator< void * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< void * >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< void * >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_void_start_vector_t_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'void_start_vector_t_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< void * >::erase(std::vector< void * >::iterator)\n"
    "    std::vector< void * >::erase(std::vector< void * >::iterator,std::vector< void * >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_void_start_vector_t__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * >::size_type arg1 ;
  std::vector< void * >::value_type arg2 = (std::vector< void * >::value_type) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< void * > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_void_start_vector_t",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_void_start_vector_t" "', argument " "1"" of type '" "std::vector< void * >::size_type""'");
  } 
  arg1 = static_cast< std::vector< void * >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_void_start_vector_t" "', argument " "2"" of type '" "std::vector< void * >::value_type""'"); 
  }
  {
    try {
      result = (std::vector< void * > *)new std::vector< void * >(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_void_start_vector_t(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_void_start_vector_t__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_void_start_vector_t__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<void*,std::allocator< void * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_void_start_vector_t__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_void_start_vector_t__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_void_start_vector_t'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< void * >::vector()\n"
    "    std::vector< void * >::vector(std::vector< void * > const &)\n"
    "    std::vector< void * >::vector(std::vector< void * >::size_type)\n"
    "    std::vector< void * >::vector(std::vector< void * >::size_type,std::vector< void * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * >::value_type arg2 = (std::vector< void * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:void_start_vector_t_push_back",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t_push_back" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "void_start_vector_t_push_back" "', argument " "2"" of type '" "std::vector< void * >::value_type""'"); 
  }
  {
    try {
      (arg1)->push_back(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< void * >::value_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t_front",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t_front" "', argument " "1"" of type '" "std::vector< void * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  {
    try {
      result = (std::vector< void * >::value_type)((std::vector< void * > const *)arg1)->front();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< void * >::value_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t_back" "', argument " "1"" of type '" "std::vector< void * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  {
    try {
      result = (std::vector< void * >::value_type)((std::vector< void * > const *)arg1)->back();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * >::size_type arg2 ;
  std::vector< void * >::value_type arg3 = (std::vector< void * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n",(char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:void_start_vector_t_assign",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t_assign" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "void_start_vector_t_assign" "', argument " "2"" of type '" "std::vector< void * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< void * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "void_start_vector_t_assign" "', argument " "3"" of type '" "std::vector< void * >::value_type""'"); 
  }
  {
    try {
      (arg1)->assign(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * >::size_type arg2 ;
  std::vector< void * >::value_type arg3 = (std::vector< void * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t_resize",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t_resize" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "void_start_vector_t_resize" "', argument " "2"" of type '" "std::vector< void * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< void * >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "void_start_vector_t_resize" "', argument " "3"" of type '" "std::vector< void * >::value_type""'"); 
  }
  {
    try {
      (arg1)->resize(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<void*,std::allocator< void * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_void_start_vector_t_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<void*,std::allocator< void * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *ptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &ptr, 0, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_void_start_vector_t_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'void_start_vector_t_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< void * >::resize(std::vector< void * >::size_type)\n"
    "    std::vector< void * >::resize(std::vector< void * >::size_type,std::vector< void * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * >::iterator arg2 ;
  std::vector< void * >::value_type arg3 = (std::vector< void * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< void * >::iterator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t_insert",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t_insert" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "void_start_vector_t_insert" "', argument " "2"" of type '" "std::vector< void * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< void * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< void * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "void_start_vector_t_insert" "', argument " "2"" of type '" "std::vector< void * >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "void_start_vector_t_insert" "', argument " "3"" of type '" "std::vector< void * >::value_type""'"); 
  }
  {
    try {
      result = (arg1)->insert(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< void * >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * >::iterator arg2 ;
  std::vector< void * >::size_type arg3 ;
  std::vector< void * >::value_type arg4 = (std::vector< void * >::value_type) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t_insert",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t_insert" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "void_start_vector_t_insert" "', argument " "2"" of type '" "std::vector< void * >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< void * >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< void * >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "void_start_vector_t_insert" "', argument " "2"" of type '" "std::vector< void * >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "void_start_vector_t_insert" "', argument " "3"" of type '" "std::vector< void * >::size_type""'");
  } 
  arg3 = static_cast< std::vector< void * >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4), 0, 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "void_start_vector_t_insert" "', argument " "4"" of type '" "std::vector< void * >::value_type""'"); 
  }
  {
    try {
      (arg1)->insert(arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<void*,std::allocator< void * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< void * >::iterator > *>(iter) != 0));
      if (_v) {
        void *ptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &ptr, 0, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_void_start_vector_t_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<void*,std::allocator< void * > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< void * >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &ptr, 0, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_void_start_vector_t_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'void_start_vector_t_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< void * >::insert(std::vector< void * >::iterator,std::vector< void * >::value_type)\n"
    "    std::vector< void * >::insert(std::vector< void * >::iterator,std::vector< void * >::size_type,std::vector< void * >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  std::vector< void * >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "n", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:void_start_vector_t_reserve",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t_reserve" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "void_start_vector_t_reserve" "', argument " "2"" of type '" "std::vector< void * >::size_type""'");
  } 
  arg2 = static_cast< std::vector< void * >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_void_start_vector_t_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< void * >::size_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"void_start_vector_t_capacity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "void_start_vector_t_capacity" "', argument " "1"" of type '" "std::vector< void * > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  {
    try {
      result = ((std::vector< void * > const *)arg1)->capacity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_void_start_vector_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< void * > *arg1 = (std::vector< void * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_void_start_vector_t",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_void_start_vector_t" "', argument " "1"" of type '" "std::vector< void * > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< void * > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *void_start_vector_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_block_gw_message_type_action_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  gr::block_gw_message_type::action_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_action_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_action_set" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gw_message_type_action_set" "', argument " "2"" of type '" "gr::block_gw_message_type::action_type""'");
  } 
  arg2 = static_cast< gr::block_gw_message_type::action_type >(val2);
  if (arg1) (arg1)->action = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gw_message_type_action_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::block_gw_message_type::action_type result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_action_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_action_get" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  result = (gr::block_gw_message_type::action_type) ((arg1)->action);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gw_message_type_general_work_args_noutput_items_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_general_work_args_noutput_items_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_general_work_args_noutput_items_set" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gw_message_type_general_work_args_noutput_items_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->general_work_args_noutput_items = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gw_message_type_general_work_args_noutput_items_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_general_work_args_noutput_items_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_general_work_args_noutput_items_get" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  result = (int) ((arg1)->general_work_args_noutput_items);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gw_message_type_general_work_args_ninput_items_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = (std::vector< int,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_general_work_args_ninput_items_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_general_work_args_ninput_items_set" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_gw_message_type_general_work_args_ninput_items_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->general_work_args_ninput_items = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gw_message_type_general_work_args_ninput_items_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_general_work_args_ninput_items_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_general_work_args_ninput_items_get" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  result = (std::vector< int,std::allocator< int > > *)& ((arg1)->general_work_args_ninput_items);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gw_message_type_general_work_args_input_items_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  std::vector< void *,std::allocator< void * > > *arg2 = (std::vector< void *,std::allocator< void * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_general_work_args_input_items_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_general_work_args_input_items_set" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_gw_message_type_general_work_args_input_items_set" "', argument " "2"" of type '" "std::vector< void *,std::allocator< void * > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< void *,std::allocator< void * > > * >(argp2);
  if (arg1) (arg1)->general_work_args_input_items = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gw_message_type_general_work_args_input_items_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< void *,std::allocator< void * > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_general_work_args_input_items_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_general_work_args_input_items_get" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  result = (std::vector< void *,std::allocator< void * > > *)& ((arg1)->general_work_args_input_items);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gw_message_type_general_work_args_output_items_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  std::vector< void *,std::allocator< void * > > *arg2 = (std::vector< void *,std::allocator< void * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_general_work_args_output_items_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_general_work_args_output_items_set" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_gw_message_type_general_work_args_output_items_set" "', argument " "2"" of type '" "std::vector< void *,std::allocator< void * > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< void *,std::allocator< void * > > * >(argp2);
  if (arg1) (arg1)->general_work_args_output_items = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gw_message_type_general_work_args_output_items_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< void *,std::allocator< void * > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_general_work_args_output_items_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_general_work_args_output_items_get" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  result = (std::vector< void *,std::allocator< void * > > *)& ((arg1)->general_work_args_output_items);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gw_message_type_general_work_args_return_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_general_work_args_return_value_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_general_work_args_return_value_set" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gw_message_type_general_work_args_return_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->general_work_args_return_value = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gw_message_type_general_work_args_return_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_general_work_args_return_value_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_general_work_args_return_value_get" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  result = (int) ((arg1)->general_work_args_return_value);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gw_message_type_work_args_ninput_items_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_work_args_ninput_items_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_work_args_ninput_items_set" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gw_message_type_work_args_ninput_items_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->work_args_ninput_items = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gw_message_type_work_args_ninput_items_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_work_args_ninput_items_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_work_args_ninput_items_get" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  result = (int) ((arg1)->work_args_ninput_items);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gw_message_type_work_args_noutput_items_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_work_args_noutput_items_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_work_args_noutput_items_set" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gw_message_type_work_args_noutput_items_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->work_args_noutput_items = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gw_message_type_work_args_noutput_items_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_work_args_noutput_items_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_work_args_noutput_items_get" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  result = (int) ((arg1)->work_args_noutput_items);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gw_message_type_work_args_input_items_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  std::vector< void *,std::allocator< void * > > *arg2 = (std::vector< void *,std::allocator< void * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_work_args_input_items_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_work_args_input_items_set" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_gw_message_type_work_args_input_items_set" "', argument " "2"" of type '" "std::vector< void *,std::allocator< void * > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< void *,std::allocator< void * > > * >(argp2);
  if (arg1) (arg1)->work_args_input_items = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gw_message_type_work_args_input_items_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< void *,std::allocator< void * > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_work_args_input_items_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_work_args_input_items_get" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  result = (std::vector< void *,std::allocator< void * > > *)& ((arg1)->work_args_input_items);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gw_message_type_work_args_output_items_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  std::vector< void *,std::allocator< void * > > *arg2 = (std::vector< void *,std::allocator< void * > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_work_args_output_items_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_work_args_output_items_set" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_gw_message_type_work_args_output_items_set" "', argument " "2"" of type '" "std::vector< void *,std::allocator< void * > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< void *,std::allocator< void * > > * >(argp2);
  if (arg1) (arg1)->work_args_output_items = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gw_message_type_work_args_output_items_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< void *,std::allocator< void * > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_work_args_output_items_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_work_args_output_items_get" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  result = (std::vector< void *,std::allocator< void * > > *)& ((arg1)->work_args_output_items);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gw_message_type_work_args_return_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_work_args_return_value_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_work_args_return_value_set" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gw_message_type_work_args_return_value_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->work_args_return_value = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gw_message_type_work_args_return_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_work_args_return_value_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_work_args_return_value_get" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  result = (int) ((arg1)->work_args_return_value);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gw_message_type_forecast_args_noutput_items_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_forecast_args_noutput_items_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_forecast_args_noutput_items_set" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gw_message_type_forecast_args_noutput_items_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->forecast_args_noutput_items = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gw_message_type_forecast_args_noutput_items_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_forecast_args_noutput_items_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_forecast_args_noutput_items_get" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  result = (int) ((arg1)->forecast_args_noutput_items);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gw_message_type_forecast_args_ninput_items_required_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = (std::vector< int,std::allocator< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_forecast_args_ninput_items_required_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_forecast_args_ninput_items_required_set" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_gw_message_type_forecast_args_ninput_items_required_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
  if (arg1) (arg1)->forecast_args_ninput_items_required = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gw_message_type_forecast_args_ninput_items_required_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_forecast_args_ninput_items_required_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_forecast_args_ninput_items_required_get" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  result = (std::vector< int,std::allocator< int > > *)& ((arg1)->forecast_args_ninput_items_required);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gw_message_type_start_args_return_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_start_args_return_value_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_start_args_return_value_set" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gw_message_type_start_args_return_value_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->start_args_return_value = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gw_message_type_start_args_return_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_start_args_return_value_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_start_args_return_value_get" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  result = (bool) ((arg1)->start_args_return_value);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gw_message_type_stop_args_return_value_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_stop_args_return_value_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_stop_args_return_value_set" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gw_message_type_stop_args_return_value_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->stop_args_return_value = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gw_message_type_stop_args_return_value_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gw_message_type_stop_args_return_value_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gw_message_type_stop_args_return_value_get" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  result = (bool) ((arg1)->stop_args_return_value);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_block_gw_message_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *result = 0 ;
  
  {
    try {
      result = (gr::block_gw_message_type *)new gr::block_gw_message_type();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__block_gw_message_type, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_block_gw_message_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gw_message_type *arg1 = (gr::block_gw_message_type *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_block_gw_message_type",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gw_message_type, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_block_gw_message_type" "', argument " "1"" of type '" "gr::block_gw_message_type *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gw_message_type * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *block_gw_message_type_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__block_gw_message_type, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_block_gateway_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::feval_ll *arg1 = (gr::feval_ll *) 0 ;
  std::string *arg2 = 0 ;
  gr::io_signature::sptr arg3 ;
  gr::io_signature::sptr arg4 ;
  gr::block_gw_work_type arg5 ;
  unsigned int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char *  kwnames[] = {
    (char *) "handler",(char *) "name",(char *) "in_sig",(char *) "out_sig",(char *) "work_type",(char *) "factor", NULL 
  };
  gr::block_gateway::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOO:block_gateway_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__feval_ll, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_make" "', argument " "1"" of type '" "gr::feval_ll *""'"); 
  }
  arg1 = reinterpret_cast< gr::feval_ll * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_gateway_make" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_make" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "block_gateway_make" "', argument " "3"" of type '" "gr::io_signature::sptr""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_make" "', argument " "3"" of type '" "gr::io_signature::sptr""'");
    } else {
      gr::io_signature::sptr * temp = reinterpret_cast< gr::io_signature::sptr * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "block_gateway_make" "', argument " "4"" of type '" "gr::io_signature::sptr""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_make" "', argument " "4"" of type '" "gr::io_signature::sptr""'");
    } else {
      gr::io_signature::sptr * temp = reinterpret_cast< gr::io_signature::sptr * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "block_gateway_make" "', argument " "5"" of type '" "gr::block_gw_work_type""'");
  } 
  arg5 = static_cast< gr::block_gw_work_type >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "block_gateway_make" "', argument " "6"" of type '" "unsigned int""'");
  } 
  arg6 = static_cast< unsigned int >(val6);
  {
    try {
      result = gr::block_gateway::make(arg1,(std::string const &)*arg2,arg3,arg4,arg5,arg6);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::block_gateway::sptr(static_cast< const gr::block_gateway::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block_message(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::block_gw_message_type *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_block_message",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block_message" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  {
    try {
      result = (gr::block_gw_message_type *) &(arg1)->block_message();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_block__unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__unique_id" "', argument " "1"" of type '" "gr::block_gateway const *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  {
    try {
      result = (long)((gr::block_gateway const *)arg1)->block__unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_block__name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__name" "', argument " "1"" of type '" "gr::block_gateway const *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  {
    try {
      result = ((gr::block_gateway const *)arg1)->block__name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_block__history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__history" "', argument " "1"" of type '" "gr::block_gateway const *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  {
    try {
      result = (unsigned int)((gr::block_gateway const *)arg1)->block__history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__set_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "history", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_block__set_history",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__set_history" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_block__set_history" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (arg1)->block__set_history(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__set_fixed_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "fixed_rate", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_block__set_fixed_rate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__set_fixed_rate" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_block__set_fixed_rate" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->block__set_fixed_rate(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__fixed_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_block__fixed_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__fixed_rate" "', argument " "1"" of type '" "gr::block_gateway const *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  {
    try {
      result = (bool)((gr::block_gateway const *)arg1)->block__fixed_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__set_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "multiple", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_block__set_output_multiple",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__set_output_multiple" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_block__set_output_multiple" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->block__set_output_multiple(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_block__set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__set_min_output_buffer" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_block__set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "block_gateway_block__set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (arg1)->block__set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_block__set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__set_min_output_buffer" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_block__set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (arg1)->block__set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__block_gateway, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_block_gateway_block__set_min_output_buffer__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__block_gateway, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_block_gateway_block__set_min_output_buffer__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_gateway_block__set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block_gateway::block__set_min_output_buffer(int,long)\n"
    "    gr::block_gateway::block__set_min_output_buffer(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_block__output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__output_multiple" "', argument " "1"" of type '" "gr::block_gateway const *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  {
    try {
      result = (int)((gr::block_gateway const *)arg1)->block__output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__consume(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input",(char *) "how_many_items", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:block_gateway_block__consume",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__consume" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_block__consume" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "block_gateway_block__consume" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->block__consume(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__consume_each(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "how_many_items", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_block__consume_each",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__consume_each" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_block__consume_each" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->block__consume_each(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__produce(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output",(char *) "how_many_items", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:block_gateway_block__produce",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__produce" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_block__produce" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "block_gateway_block__produce" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->block__produce(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__set_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "relative_rate", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_block__set_relative_rate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__set_relative_rate" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_block__set_relative_rate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->block__set_relative_rate(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_block__relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__relative_rate" "', argument " "1"" of type '" "gr::block_gateway const *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  {
    try {
      result = (double)((gr::block_gateway const *)arg1)->block__relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_block__nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__nitems_read" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_block__nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(arg1)->block__nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_block__nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__nitems_written" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_block__nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(arg1)->block__nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__tag_propagation_policy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::block::tag_propagation_policy_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_block__tag_propagation_policy",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__tag_propagation_policy" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  {
    try {
      result = (gr::block::tag_propagation_policy_t)(arg1)->block__tag_propagation_policy();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__set_tag_propagation_policy(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  gr::block::tag_propagation_policy_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "p", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_block__set_tag_propagation_policy",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__set_tag_propagation_policy" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_block__set_tag_propagation_policy" "', argument " "2"" of type '" "gr::block::tag_propagation_policy_t""'");
  } 
  arg2 = static_cast< gr::block::tag_propagation_policy_t >(val2);
  {
    try {
      (arg1)->block__set_tag_propagation_policy(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__add_item_tag__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  unsigned int arg2 ;
  gr::tag_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_block__add_item_tag",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__add_item_tag" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_block__add_item_tag" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_gr__tag_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "block_gateway_block__add_item_tag" "', argument " "3"" of type '" "gr::tag_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_block__add_item_tag" "', argument " "3"" of type '" "gr::tag_t const &""'"); 
  }
  arg3 = reinterpret_cast< gr::tag_t * >(argp3);
  {
    try {
      (arg1)->block__add_item_tag(arg2,(gr::tag_t const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__add_item_tag__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  unsigned int arg2 ;
  uint64_t arg3 ;
  pmt::pmt_t *arg4 = 0 ;
  pmt::pmt_t *arg5 = 0 ;
  pmt::pmt_t const &arg6_defvalue = pmt::get_PMT_F() ;
  pmt::pmt_t *arg6 = (pmt::pmt_t *) &arg6_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_block__add_item_tag",5,6,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__add_item_tag" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_block__add_item_tag" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "block_gateway_block__add_item_tag" "', argument " "3"" of type '" "uint64_t""'");
  } 
  arg3 = static_cast< uint64_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "block_gateway_block__add_item_tag" "', argument " "4"" of type '" "pmt::pmt_t const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_block__add_item_tag" "', argument " "4"" of type '" "pmt::pmt_t const &""'"); 
  }
  arg4 = reinterpret_cast< pmt::pmt_t * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "block_gateway_block__add_item_tag" "', argument " "5"" of type '" "pmt::pmt_t const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_block__add_item_tag" "', argument " "5"" of type '" "pmt::pmt_t const &""'"); 
  }
  arg5 = reinterpret_cast< pmt::pmt_t * >(argp5);
  if (obj5) {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "block_gateway_block__add_item_tag" "', argument " "6"" of type '" "pmt::pmt_t const &""'"); 
    }
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_block__add_item_tag" "', argument " "6"" of type '" "pmt::pmt_t const &""'"); 
    }
    arg6 = reinterpret_cast< pmt::pmt_t * >(argp6);
  }
  {
    try {
      (arg1)->block__add_item_tag(arg2,arg3,(pmt::pmt_t const &)*arg4,(pmt::pmt_t const &)*arg5,(pmt::pmt_t const &)*arg6);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__add_item_tag(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__block_gateway, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_gr__tag_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_block_gateway_block__add_item_tag__SWIG_0(self, args);
        }
      }
    }
  }
  if ((argc >= 5) && (argc <= 6)) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__block_gateway, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              if (argc <= 5) {
                return _wrap_block_gateway_block__add_item_tag__SWIG_1(self, args);
              }
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_block_gateway_block__add_item_tag__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_gateway_block__add_item_tag'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block_gateway::block__add_item_tag(unsigned int,gr::tag_t const &)\n"
    "    gr::block_gateway::block__add_item_tag(unsigned int,uint64_t,pmt::pmt_t const &,pmt::pmt_t const &,pmt::pmt_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__get_tags_in_range__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  unsigned int arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  unsigned long long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::vector< gr::tag_t,std::allocator< gr::tag_t > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_block__get_tags_in_range",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__get_tags_in_range" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_block__get_tags_in_range" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "block_gateway_block__get_tags_in_range" "', argument " "3"" of type '" "uint64_t""'");
  } 
  arg3 = static_cast< uint64_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long_SS_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "block_gateway_block__get_tags_in_range" "', argument " "4"" of type '" "uint64_t""'");
  } 
  arg4 = static_cast< uint64_t >(val4);
  {
    try {
      result = (arg1)->block__get_tags_in_range(arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<gr::tag_t,std::allocator< gr::tag_t > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__get_tags_in_range__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  unsigned int arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  pmt::pmt_t *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  unsigned long long val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::vector< gr::tag_t,std::allocator< gr::tag_t > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_block__get_tags_in_range",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__get_tags_in_range" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_block__get_tags_in_range" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "block_gateway_block__get_tags_in_range" "', argument " "3"" of type '" "uint64_t""'");
  } 
  arg3 = static_cast< uint64_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long_SS_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "block_gateway_block__get_tags_in_range" "', argument " "4"" of type '" "uint64_t""'");
  } 
  arg4 = static_cast< uint64_t >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "block_gateway_block__get_tags_in_range" "', argument " "5"" of type '" "pmt::pmt_t const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_block__get_tags_in_range" "', argument " "5"" of type '" "pmt::pmt_t const &""'"); 
  }
  arg5 = reinterpret_cast< pmt::pmt_t * >(argp5);
  {
    try {
      result = (arg1)->block__get_tags_in_range(arg2,arg3,arg4,(pmt::pmt_t const &)*arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<gr::tag_t,std::allocator< gr::tag_t > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__get_tags_in_range(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__block_gateway, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_block_gateway_block__get_tags_in_range__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__block_gateway, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_block_gateway_block__get_tags_in_range__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_gateway_block__get_tags_in_range'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block_gateway::block__get_tags_in_range(unsigned int,uint64_t,uint64_t)\n"
    "    gr::block_gateway::block__get_tags_in_range(unsigned int,uint64_t,uint64_t,pmt::pmt_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__get_tags_in_window__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  unsigned int arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  unsigned long long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::vector< gr::tag_t,std::allocator< gr::tag_t > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_block__get_tags_in_window",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__get_tags_in_window" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_block__get_tags_in_window" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "block_gateway_block__get_tags_in_window" "', argument " "3"" of type '" "uint64_t""'");
  } 
  arg3 = static_cast< uint64_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long_SS_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "block_gateway_block__get_tags_in_window" "', argument " "4"" of type '" "uint64_t""'");
  } 
  arg4 = static_cast< uint64_t >(val4);
  {
    try {
      result = (arg1)->block__get_tags_in_window(arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<gr::tag_t,std::allocator< gr::tag_t > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__get_tags_in_window__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  unsigned int arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  pmt::pmt_t *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  unsigned long long val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::vector< gr::tag_t,std::allocator< gr::tag_t > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_block__get_tags_in_window",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__get_tags_in_window" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_block__get_tags_in_window" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "block_gateway_block__get_tags_in_window" "', argument " "3"" of type '" "uint64_t""'");
  } 
  arg3 = static_cast< uint64_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long_SS_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "block_gateway_block__get_tags_in_window" "', argument " "4"" of type '" "uint64_t""'");
  } 
  arg4 = static_cast< uint64_t >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "block_gateway_block__get_tags_in_window" "', argument " "5"" of type '" "pmt::pmt_t const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_block__get_tags_in_window" "', argument " "5"" of type '" "pmt::pmt_t const &""'"); 
  }
  arg5 = reinterpret_cast< pmt::pmt_t * >(argp5);
  {
    try {
      result = (arg1)->block__get_tags_in_window(arg2,arg3,arg4,(pmt::pmt_t const &)*arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<gr::tag_t,std::allocator< gr::tag_t > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__get_tags_in_window(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__block_gateway, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_block_gateway_block__get_tags_in_window__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__block_gateway, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_block_gateway_block__get_tags_in_window__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_gateway_block__get_tags_in_window'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block_gateway::block__get_tags_in_window(unsigned int,uint64_t,uint64_t)\n"
    "    gr::block_gateway::block__get_tags_in_window(unsigned int,uint64_t,uint64_t,pmt::pmt_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__message_port_register_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "port_id", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_block__message_port_register_in",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__message_port_register_in" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_gateway_block__message_port_register_in" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_block__message_port_register_in" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->block__message_port_register_in(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__message_port_register_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "port_id", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_block__message_port_register_out",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__message_port_register_out" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_gateway_block__message_port_register_out" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_block__message_port_register_out" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->block__message_port_register_out(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__message_port_pub(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "port_id",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:block_gateway_block__message_port_pub",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__message_port_pub" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_gateway_block__message_port_pub" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_block__message_port_pub" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "block_gateway_block__message_port_pub" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_block__message_port_pub" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (arg1)->block__message_port_pub(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__message_port_sub(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "port_id",(char *) "target", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:block_gateway_block__message_port_sub",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__message_port_sub" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_gateway_block__message_port_sub" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_block__message_port_sub" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "block_gateway_block__message_port_sub" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_block__message_port_sub" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (arg1)->block__message_port_sub(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__message_port_unsub(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "port_id",(char *) "target", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:block_gateway_block__message_port_unsub",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__message_port_unsub" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_gateway_block__message_port_unsub" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_block__message_port_unsub" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "block_gateway_block__message_port_unsub" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_block__message_port_unsub" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (arg1)->block__message_port_unsub(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_block__message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__message_subscribers" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_gateway_block__message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_block__message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (arg1)->block__message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_block__message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__message_ports_in" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  {
    try {
      result = (arg1)->block__message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_block__message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_block__message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_block__message_ports_out" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  {
    try {
      result = (arg1)->block__message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_set_msg_handler_feval(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  pmt::pmt_t arg2 ;
  gr::feval_p *arg3 = (gr::feval_p *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg_handler", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:block_gateway_set_msg_handler_feval",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_set_msg_handler_feval" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_gateway_set_msg_handler_feval" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_set_msg_handler_feval" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_gr__feval_p, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "block_gateway_set_msg_handler_feval" "', argument " "3"" of type '" "gr::feval_p *""'"); 
  }
  arg3 = reinterpret_cast< gr::feval_p * >(argp3);
  {
    try {
      (arg1)->set_msg_handler_feval(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_block_gateway(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_block_gateway",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_block_gateway" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *block_gateway_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__block_gateway, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_block_gateway_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::block_gateway > *)new boost::shared_ptr< gr::block_gateway >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_block_gateway_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::block_gateway *arg1 = (gr::block_gateway *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::block_gateway > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_block_gateway_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_block_gateway_sptr" "', argument " "1"" of type '" "gr::block_gateway *""'"); 
  }
  arg1 = reinterpret_cast< gr::block_gateway * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::block_gateway > *)new boost::shared_ptr< gr::block_gateway >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_block_gateway_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_block_gateway_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__block_gateway, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_block_gateway_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_block_gateway_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::block_gateway >::shared_ptr()\n"
    "    boost::shared_ptr< gr::block_gateway >::shared_ptr(gr::block_gateway *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::block_gateway *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (gr::block_gateway *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__block_gateway, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_block_gateway_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_block_gateway_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_block_gateway_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  gr::feval_ll *arg2 = (gr::feval_ll *) 0 ;
  std::string *arg3 = 0 ;
  gr::io_signature::sptr arg4 ;
  gr::io_signature::sptr arg5 ;
  gr::block_gw_work_type arg6 ;
  unsigned int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  unsigned int val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "handler",(char *) "name",(char *) "in_sig",(char *) "out_sig",(char *) "work_type",(char *) "factor", NULL 
  };
  gr::block_gateway::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOOO:block_gateway_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_gr__feval_ll, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_gateway_sptr_make" "', argument " "2"" of type '" "gr::feval_ll *""'"); 
  }
  arg2 = reinterpret_cast< gr::feval_ll * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "block_gateway_sptr_make" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_sptr_make" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "block_gateway_sptr_make" "', argument " "4"" of type '" "gr::io_signature::sptr""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_sptr_make" "', argument " "4"" of type '" "gr::io_signature::sptr""'");
    } else {
      gr::io_signature::sptr * temp = reinterpret_cast< gr::io_signature::sptr * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "block_gateway_sptr_make" "', argument " "5"" of type '" "gr::io_signature::sptr""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_sptr_make" "', argument " "5"" of type '" "gr::io_signature::sptr""'");
    } else {
      gr::io_signature::sptr * temp = reinterpret_cast< gr::io_signature::sptr * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "block_gateway_sptr_make" "', argument " "6"" of type '" "gr::block_gw_work_type""'");
  } 
  arg6 = static_cast< gr::block_gw_work_type >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "block_gateway_sptr_make" "', argument " "7"" of type '" "unsigned int""'");
  } 
  arg7 = static_cast< unsigned int >(val7);
  {
    try {
      result = (*arg1)->make(arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::block_gateway::sptr(static_cast< const gr::block_gateway::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block_message(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::block_gw_message_type *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_block_message",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block_message" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (gr::block_gw_message_type *) &(*arg1)->block_message();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__block_gw_message_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_block__unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (long)(*arg1)->block__unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_block__name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__name" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (*arg1)->block__name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_block__history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__history" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->block__history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__set_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "history", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_sptr_block__set_history",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__set_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_block__set_history" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->block__set_history(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__set_fixed_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "fixed_rate", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_sptr_block__set_fixed_rate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__set_fixed_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_block__set_fixed_rate" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      (*arg1)->block__set_fixed_rate(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__fixed_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_block__fixed_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__fixed_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->block__fixed_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__set_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "multiple", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_sptr_block__set_output_multiple",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__set_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_block__set_output_multiple" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->block__set_output_multiple(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_block__set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_block__set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "block_gateway_sptr_block__set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->block__set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_block__set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_block__set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->block__set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_block_gateway_sptr_block__set_min_output_buffer__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_block_gateway_sptr_block__set_min_output_buffer__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_gateway_sptr_block__set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block_gateway::block__set_min_output_buffer(int,long)\n"
    "    gr::block_gateway::block__set_min_output_buffer(long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_block__output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (int)(*arg1)->block__output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__consume(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input",(char *) "how_many_items", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:block_gateway_sptr_block__consume",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__consume" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_block__consume" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "block_gateway_sptr_block__consume" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->block__consume(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__consume_each(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "how_many_items", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_sptr_block__consume_each",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__consume_each" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_block__consume_each" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->block__consume_each(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__produce(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output",(char *) "how_many_items", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:block_gateway_sptr_block__produce",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__produce" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_block__produce" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "block_gateway_sptr_block__produce" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->block__produce(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__set_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "relative_rate", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_sptr_block__set_relative_rate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__set_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_block__set_relative_rate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (*arg1)->block__set_relative_rate(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_block__relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (double)(*arg1)->block__relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_sptr_block__nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_block__nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->block__nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_sptr_block__nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_block__nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->block__nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__tag_propagation_policy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::block::tag_propagation_policy_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_block__tag_propagation_policy",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__tag_propagation_policy" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (gr::block::tag_propagation_policy_t)(*arg1)->block__tag_propagation_policy();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__set_tag_propagation_policy(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  gr::block::tag_propagation_policy_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "p", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_sptr_block__set_tag_propagation_policy",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__set_tag_propagation_policy" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_block__set_tag_propagation_policy" "', argument " "2"" of type '" "gr::block::tag_propagation_policy_t""'");
  } 
  arg2 = static_cast< gr::block::tag_propagation_policy_t >(val2);
  {
    try {
      (*arg1)->block__set_tag_propagation_policy(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__add_item_tag__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  unsigned int arg2 ;
  gr::tag_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_block__add_item_tag",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__add_item_tag" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_block__add_item_tag" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_gr__tag_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "block_gateway_sptr_block__add_item_tag" "', argument " "3"" of type '" "gr::tag_t const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_sptr_block__add_item_tag" "', argument " "3"" of type '" "gr::tag_t const &""'"); 
  }
  arg3 = reinterpret_cast< gr::tag_t * >(argp3);
  {
    try {
      (*arg1)->block__add_item_tag(arg2,(gr::tag_t const &)*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__add_item_tag__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  unsigned int arg2 ;
  uint64_t arg3 ;
  pmt::pmt_t *arg4 = 0 ;
  pmt::pmt_t *arg5 = 0 ;
  pmt::pmt_t const &arg6_defvalue = pmt::get_PMT_F() ;
  pmt::pmt_t *arg6 = (pmt::pmt_t *) &arg6_defvalue ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_block__add_item_tag",5,6,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__add_item_tag" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_block__add_item_tag" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "block_gateway_sptr_block__add_item_tag" "', argument " "3"" of type '" "uint64_t""'");
  } 
  arg3 = static_cast< uint64_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "block_gateway_sptr_block__add_item_tag" "', argument " "4"" of type '" "pmt::pmt_t const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_sptr_block__add_item_tag" "', argument " "4"" of type '" "pmt::pmt_t const &""'"); 
  }
  arg4 = reinterpret_cast< pmt::pmt_t * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "block_gateway_sptr_block__add_item_tag" "', argument " "5"" of type '" "pmt::pmt_t const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_sptr_block__add_item_tag" "', argument " "5"" of type '" "pmt::pmt_t const &""'"); 
  }
  arg5 = reinterpret_cast< pmt::pmt_t * >(argp5);
  if (obj5) {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "block_gateway_sptr_block__add_item_tag" "', argument " "6"" of type '" "pmt::pmt_t const &""'"); 
    }
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_sptr_block__add_item_tag" "', argument " "6"" of type '" "pmt::pmt_t const &""'"); 
    }
    arg6 = reinterpret_cast< pmt::pmt_t * >(argp6);
  }
  {
    try {
      (*arg1)->block__add_item_tag(arg2,arg3,(pmt::pmt_t const &)*arg4,(pmt::pmt_t const &)*arg5,(pmt::pmt_t const &)*arg6);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__add_item_tag(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_gr__tag_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_block_gateway_sptr_block__add_item_tag__SWIG_0(self, args);
        }
      }
    }
  }
  if ((argc >= 5) && (argc <= 6)) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              if (argc <= 5) {
                return _wrap_block_gateway_sptr_block__add_item_tag__SWIG_1(self, args);
              }
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_block_gateway_sptr_block__add_item_tag__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_gateway_sptr_block__add_item_tag'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block_gateway::block__add_item_tag(unsigned int,gr::tag_t const &)\n"
    "    gr::block_gateway::block__add_item_tag(unsigned int,uint64_t,pmt::pmt_t const &,pmt::pmt_t const &,pmt::pmt_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__get_tags_in_range__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  unsigned int arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  unsigned long long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::vector< gr::tag_t,std::allocator< gr::tag_t > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_block__get_tags_in_range",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__get_tags_in_range" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_block__get_tags_in_range" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "block_gateway_sptr_block__get_tags_in_range" "', argument " "3"" of type '" "uint64_t""'");
  } 
  arg3 = static_cast< uint64_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long_SS_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "block_gateway_sptr_block__get_tags_in_range" "', argument " "4"" of type '" "uint64_t""'");
  } 
  arg4 = static_cast< uint64_t >(val4);
  {
    try {
      result = (*arg1)->block__get_tags_in_range(arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<gr::tag_t,std::allocator< gr::tag_t > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__get_tags_in_range__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  unsigned int arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  pmt::pmt_t *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  unsigned long long val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::vector< gr::tag_t,std::allocator< gr::tag_t > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_block__get_tags_in_range",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__get_tags_in_range" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_block__get_tags_in_range" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "block_gateway_sptr_block__get_tags_in_range" "', argument " "3"" of type '" "uint64_t""'");
  } 
  arg3 = static_cast< uint64_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long_SS_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "block_gateway_sptr_block__get_tags_in_range" "', argument " "4"" of type '" "uint64_t""'");
  } 
  arg4 = static_cast< uint64_t >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "block_gateway_sptr_block__get_tags_in_range" "', argument " "5"" of type '" "pmt::pmt_t const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_sptr_block__get_tags_in_range" "', argument " "5"" of type '" "pmt::pmt_t const &""'"); 
  }
  arg5 = reinterpret_cast< pmt::pmt_t * >(argp5);
  {
    try {
      result = (*arg1)->block__get_tags_in_range(arg2,arg3,arg4,(pmt::pmt_t const &)*arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<gr::tag_t,std::allocator< gr::tag_t > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__get_tags_in_range(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_block_gateway_sptr_block__get_tags_in_range__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_block_gateway_sptr_block__get_tags_in_range__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_gateway_sptr_block__get_tags_in_range'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block_gateway::block__get_tags_in_range(unsigned int,uint64_t,uint64_t)\n"
    "    gr::block_gateway::block__get_tags_in_range(unsigned int,uint64_t,uint64_t,pmt::pmt_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__get_tags_in_window__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  unsigned int arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  unsigned long long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::vector< gr::tag_t,std::allocator< gr::tag_t > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_block__get_tags_in_window",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__get_tags_in_window" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_block__get_tags_in_window" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "block_gateway_sptr_block__get_tags_in_window" "', argument " "3"" of type '" "uint64_t""'");
  } 
  arg3 = static_cast< uint64_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long_SS_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "block_gateway_sptr_block__get_tags_in_window" "', argument " "4"" of type '" "uint64_t""'");
  } 
  arg4 = static_cast< uint64_t >(val4);
  {
    try {
      result = (*arg1)->block__get_tags_in_window(arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<gr::tag_t,std::allocator< gr::tag_t > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__get_tags_in_window__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  unsigned int arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  pmt::pmt_t *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned long long val3 ;
  int ecode3 = 0 ;
  unsigned long long val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::vector< gr::tag_t,std::allocator< gr::tag_t > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_block__get_tags_in_window",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__get_tags_in_window" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_block__get_tags_in_window" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "block_gateway_sptr_block__get_tags_in_window" "', argument " "3"" of type '" "uint64_t""'");
  } 
  arg3 = static_cast< uint64_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long_SS_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "block_gateway_sptr_block__get_tags_in_window" "', argument " "4"" of type '" "uint64_t""'");
  } 
  arg4 = static_cast< uint64_t >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "block_gateway_sptr_block__get_tags_in_window" "', argument " "5"" of type '" "pmt::pmt_t const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_sptr_block__get_tags_in_window" "', argument " "5"" of type '" "pmt::pmt_t const &""'"); 
  }
  arg5 = reinterpret_cast< pmt::pmt_t * >(argp5);
  {
    try {
      result = (*arg1)->block__get_tags_in_window(arg2,arg3,arg4,(pmt::pmt_t const &)*arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<gr::tag_t,std::allocator< gr::tag_t > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__get_tags_in_window(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_block_gateway_sptr_block__get_tags_in_window__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_block_gateway_sptr_block__get_tags_in_window__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_gateway_sptr_block__get_tags_in_window'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block_gateway::block__get_tags_in_window(unsigned int,uint64_t,uint64_t)\n"
    "    gr::block_gateway::block__get_tags_in_window(unsigned int,uint64_t,uint64_t,pmt::pmt_t const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__message_port_register_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "port_id", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_sptr_block__message_port_register_in",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__message_port_register_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_gateway_sptr_block__message_port_register_in" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_sptr_block__message_port_register_in" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->block__message_port_register_in(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__message_port_register_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "port_id", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_sptr_block__message_port_register_out",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__message_port_register_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_gateway_sptr_block__message_port_register_out" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_sptr_block__message_port_register_out" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (*arg1)->block__message_port_register_out(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__message_port_pub(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "port_id",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:block_gateway_sptr_block__message_port_pub",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__message_port_pub" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_gateway_sptr_block__message_port_pub" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_sptr_block__message_port_pub" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "block_gateway_sptr_block__message_port_pub" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_sptr_block__message_port_pub" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->block__message_port_pub(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__message_port_sub(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "port_id",(char *) "target", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:block_gateway_sptr_block__message_port_sub",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__message_port_sub" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_gateway_sptr_block__message_port_sub" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_sptr_block__message_port_sub" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "block_gateway_sptr_block__message_port_sub" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_sptr_block__message_port_sub" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->block__message_port_sub(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__message_port_unsub(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "port_id",(char *) "target", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:block_gateway_sptr_block__message_port_unsub",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__message_port_unsub" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_gateway_sptr_block__message_port_unsub" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_sptr_block__message_port_unsub" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "block_gateway_sptr_block__message_port_unsub" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_sptr_block__message_port_unsub" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->block__message_port_unsub(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_sptr_block__message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_gateway_sptr_block__message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_sptr_block__message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->block__message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_block__message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (*arg1)->block__message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_block__message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_block__message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_block__message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (*arg1)->block__message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_set_msg_handler_feval(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  pmt::pmt_t arg2 ;
  gr::feval_p *arg3 = (gr::feval_p *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg_handler", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:block_gateway_sptr_set_msg_handler_feval",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_set_msg_handler_feval" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_gateway_sptr_set_msg_handler_feval" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_sptr_set_msg_handler_feval" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_gr__feval_p, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "block_gateway_sptr_set_msg_handler_feval" "', argument " "3"" of type '" "gr::feval_p *""'"); 
  }
  arg3 = reinterpret_cast< gr::feval_p * >(argp3);
  {
    try {
      (*arg1)->set_msg_handler_feval(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "block_gateway_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_block_gateway_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_block_gateway_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_gateway_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "block_gateway_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_block_gateway_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_block_gateway_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_gateway_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "block_gateway_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_block_gateway_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_block_gateway_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_gateway_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< float,std::allocator< float > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_block_gateway_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_block_gateway_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_gateway_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< float,std::allocator< float > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_block_gateway_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_block_gateway_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_gateway_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< float,std::allocator< float > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_block_gateway_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_block_gateway_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_gateway_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< float,std::allocator< float > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_block_gateway_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_block_gateway_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_gateway_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< float,std::allocator< float > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_block_gateway_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_block_gateway_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_gateway_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< float,std::allocator< float > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_block_gateway_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_block_gateway_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'block_gateway_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_gateway_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< int,std::allocator< int > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:block_gateway_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_gateway_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "block_gateway_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "block_gateway_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:block_gateway_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_gateway_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "block_gateway_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_gateway_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_gateway_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::block_gateway > *arg1 = (boost::shared_ptr< gr::block_gateway > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:block_gateway_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_gateway_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::block_gateway > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::block_gateway > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_gateway_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "block_gateway_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *block_gateway_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__block_gateway_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_logger_config(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  unsigned int arg2 = (unsigned int) 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "config_filename",(char *) "watch_period", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:logger_config",kwnames,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "logger_config" "', argument " "1"" of type '" "std::string const""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "logger_config" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
  }
  {
    try {
      gr_logger_config(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_logger_get_names(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string,std::allocator< std::string > > result;
  
  {
    try {
      result = gr_logger_get_logger_names();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_logger_reset_config(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  {
    try {
      gr_logger_reset_config();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_logger(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "logger_name", NULL 
  };
  gr::logger *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:new_logger",kwnames,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_logger" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gr::logger *)new gr::logger(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__logger, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_logger_set_level(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::logger *arg1 = (gr::logger *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "level", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:logger_set_level",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__logger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "logger_set_level" "', argument " "1"" of type '" "gr::logger *""'"); 
  }
  arg1 = reinterpret_cast< gr::logger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "logger_set_level" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->set_level(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_logger_get_level(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::logger *arg1 = (gr::logger *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "level", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:logger_get_level",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__logger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "logger_get_level" "', argument " "1"" of type '" "gr::logger *""'"); 
  }
  arg1 = reinterpret_cast< gr::logger * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "logger_get_level" "', argument " "2"" of type '" "std::string &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "logger_get_level" "', argument " "2"" of type '" "std::string &""'"); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  {
    try {
      (arg1)->get_level(*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_logger_debug(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::logger *arg1 = (gr::logger *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:logger_debug",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__logger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "logger_debug" "', argument " "1"" of type '" "gr::logger *""'"); 
  }
  arg1 = reinterpret_cast< gr::logger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "logger_debug" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->debug(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_logger_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::logger *arg1 = (gr::logger *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:logger_info",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__logger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "logger_info" "', argument " "1"" of type '" "gr::logger *""'"); 
  }
  arg1 = reinterpret_cast< gr::logger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "logger_info" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->info(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_logger_notice(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::logger *arg1 = (gr::logger *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:logger_notice",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__logger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "logger_notice" "', argument " "1"" of type '" "gr::logger *""'"); 
  }
  arg1 = reinterpret_cast< gr::logger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "logger_notice" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->notice(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_logger_warn(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::logger *arg1 = (gr::logger *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:logger_warn",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__logger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "logger_warn" "', argument " "1"" of type '" "gr::logger *""'"); 
  }
  arg1 = reinterpret_cast< gr::logger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "logger_warn" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->warn(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_logger_error(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::logger *arg1 = (gr::logger *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:logger_error",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__logger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "logger_error" "', argument " "1"" of type '" "gr::logger *""'"); 
  }
  arg1 = reinterpret_cast< gr::logger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "logger_error" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->error(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_logger_crit(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::logger *arg1 = (gr::logger *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:logger_crit",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__logger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "logger_crit" "', argument " "1"" of type '" "gr::logger *""'"); 
  }
  arg1 = reinterpret_cast< gr::logger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "logger_crit" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->crit(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_logger_alert(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::logger *arg1 = (gr::logger *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:logger_alert",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__logger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "logger_alert" "', argument " "1"" of type '" "gr::logger *""'"); 
  }
  arg1 = reinterpret_cast< gr::logger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "logger_alert" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->alert(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_logger_fatal(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::logger *arg1 = (gr::logger *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:logger_fatal",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__logger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "logger_fatal" "', argument " "1"" of type '" "gr::logger *""'"); 
  }
  arg1 = reinterpret_cast< gr::logger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "logger_fatal" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->fatal(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_logger_emerg(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::logger *arg1 = (gr::logger *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:logger_emerg",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__logger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "logger_emerg" "', argument " "1"" of type '" "gr::logger *""'"); 
  }
  arg1 = reinterpret_cast< gr::logger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "logger_emerg" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->emerg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_logger_errorIF(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::logger *arg1 = (gr::logger *) 0 ;
  bool arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cond",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:logger_errorIF",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__logger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "logger_errorIF" "', argument " "1"" of type '" "gr::logger *""'"); 
  }
  arg1 = reinterpret_cast< gr::logger * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "logger_errorIF" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "logger_errorIF" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->errorIF(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_logger_log_assert(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::logger *arg1 = (gr::logger *) 0 ;
  bool arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cond",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:logger_log_assert",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__logger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "logger_log_assert" "', argument " "1"" of type '" "gr::logger *""'"); 
  }
  arg1 = reinterpret_cast< gr::logger * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "logger_log_assert" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "logger_log_assert" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->log_assert(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_logger_add_console_appender(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::logger *arg1 = (gr::logger *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "target",(char *) "pattern", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:logger_add_console_appender",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__logger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "logger_add_console_appender" "', argument " "1"" of type '" "gr::logger *""'"); 
  }
  arg1 = reinterpret_cast< gr::logger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "logger_add_console_appender" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "logger_add_console_appender" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->add_console_appender(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_logger_add_file_appender(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::logger *arg1 = (gr::logger *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  std::string arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "filename",(char *) "append",(char *) "pattern", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:logger_add_file_appender",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__logger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "logger_add_file_appender" "', argument " "1"" of type '" "gr::logger *""'"); 
  }
  arg1 = reinterpret_cast< gr::logger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "logger_add_file_appender" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "logger_add_file_appender" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "logger_add_file_appender" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->add_file_appender(arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_logger_add_rollingfile_appender(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::logger *arg1 = (gr::logger *) 0 ;
  std::string arg2 ;
  size_t arg3 ;
  int arg4 ;
  bool arg5 ;
  mode_t arg6 ;
  std::string arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "filename",(char *) "filesize",(char *) "bkup_index",(char *) "append",(char *) "mode",(char *) "pattern", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOOO:logger_add_rollingfile_appender",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__logger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "logger_add_rollingfile_appender" "', argument " "1"" of type '" "gr::logger *""'"); 
  }
  arg1 = reinterpret_cast< gr::logger * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "logger_add_rollingfile_appender" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "logger_add_rollingfile_appender" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "logger_add_rollingfile_appender" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "logger_add_rollingfile_appender" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_mode_t,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "logger_add_rollingfile_appender" "', argument " "6"" of type '" "mode_t""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "logger_add_rollingfile_appender" "', argument " "6"" of type '" "mode_t""'");
    } else {
      mode_t * temp = reinterpret_cast< mode_t * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "logger_add_rollingfile_appender" "', argument " "7"" of type '" "std::string""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->add_rollingfile_appender(arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_logger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::logger *arg1 = (gr::logger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_logger",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__logger, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_logger" "', argument " "1"" of type '" "gr::logger *""'"); 
  }
  arg1 = reinterpret_cast< gr::logger * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *logger_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__logger, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_DISPNULL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DISPNULL is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DISPNULL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(DISPNULL));
  return pyobj;
}


SWIGINTERN int Swig_var_DISPTIME_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DISPTIME is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DISPTIME_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(DISPTIME));
  return pyobj;
}


SWIGINTERN int Swig_var_DISPXY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DISPXY is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DISPXY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(DISPXY));
  return pyobj;
}


SWIGINTERN int Swig_var_DISPPSD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DISPPSD is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DISPPSD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(DISPPSD));
  return pyobj;
}


SWIGINTERN int Swig_var_DISPSPEC_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DISPSPEC is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DISPSPEC_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(DISPSPEC));
  return pyobj;
}


SWIGINTERN int Swig_var_DISPRAST_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DISPRAST is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DISPRAST_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(DISPRAST));
  return pyobj;
}


SWIGINTERN int Swig_var_DISPOPTCPLX_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DISPOPTCPLX is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DISPOPTCPLX_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(DISPOPTCPLX));
  return pyobj;
}


SWIGINTERN int Swig_var_DISPOPTLOG_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DISPOPTLOG is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DISPOPTLOG_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(DISPOPTLOG));
  return pyobj;
}


SWIGINTERN int Swig_var_DISPOPTSTEM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DISPOPTSTEM is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DISPOPTSTEM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(DISPOPTSTEM));
  return pyobj;
}


SWIGINTERN int Swig_var_DISPOPTSTRIP_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DISPOPTSTRIP is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DISPOPTSTRIP_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(DISPOPTSTRIP));
  return pyobj;
}


SWIGINTERN int Swig_var_DISPOPTSCATTER_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DISPOPTSCATTER is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DISPOPTSCATTER_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(DISPOPTSCATTER));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_delete_rpcserver_booter_base(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  rpcserver_booter_base *arg1 = (rpcserver_booter_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_rpcserver_booter_base",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_rpcserver_booter_base, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_rpcserver_booter_base" "', argument " "1"" of type '" "rpcserver_booter_base *""'"); 
  }
  arg1 = reinterpret_cast< rpcserver_booter_base * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rpcserver_booter_base_i(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  rpcserver_booter_base *arg1 = (rpcserver_booter_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  rpcserver_base *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"rpcserver_booter_base_i",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_rpcserver_booter_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rpcserver_booter_base_i" "', argument " "1"" of type '" "rpcserver_booter_base *""'"); 
  }
  arg1 = reinterpret_cast< rpcserver_booter_base * >(argp1);
  {
    try {
      result = (rpcserver_base *)(arg1)->i();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_rpcserver_base, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rpcserver_booter_base_endpoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  rpcserver_booter_base *arg1 = (rpcserver_booter_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"rpcserver_booter_base_endpoints",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_rpcserver_booter_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rpcserver_booter_base_endpoints" "', argument " "1"" of type '" "rpcserver_booter_base *""'"); 
  }
  arg1 = reinterpret_cast< rpcserver_booter_base * >(argp1);
  {
    try {
      result = (arg1)->endpoints();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rpcserver_booter_base_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  rpcserver_booter_base *arg1 = (rpcserver_booter_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"rpcserver_booter_base_type",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_rpcserver_booter_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rpcserver_booter_base_type" "', argument " "1"" of type '" "rpcserver_booter_base *""'"); 
  }
  arg1 = reinterpret_cast< rpcserver_booter_base * >(argp1);
  {
    try {
      result = (std::string *) &(arg1)->type();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *rpcserver_booter_base_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_rpcserver_booter_base, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_rpcserver_booter_aggregator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  rpcserver_booter_aggregator *result = 0 ;
  
  {
    try {
      result = (rpcserver_booter_aggregator *)new rpcserver_booter_aggregator();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_rpcserver_booter_aggregator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_rpcserver_booter_aggregator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  rpcserver_booter_aggregator *arg1 = (rpcserver_booter_aggregator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_rpcserver_booter_aggregator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_rpcserver_booter_aggregator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_rpcserver_booter_aggregator" "', argument " "1"" of type '" "rpcserver_booter_aggregator *""'"); 
  }
  arg1 = reinterpret_cast< rpcserver_booter_aggregator * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rpcserver_booter_aggregator_registeredServers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  rpcserver_booter_aggregator *arg1 = (rpcserver_booter_aggregator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"rpcserver_booter_aggregator_registeredServers",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_rpcserver_booter_aggregator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rpcserver_booter_aggregator_registeredServers" "', argument " "1"" of type '" "rpcserver_booter_aggregator *""'"); 
  }
  arg1 = reinterpret_cast< rpcserver_booter_aggregator * >(argp1);
  {
    try {
      result = (std::vector< std::string,std::allocator< std::string > > *) &(arg1)->registeredServers();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *rpcserver_booter_aggregator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_rpcserver_booter_aggregator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_pycallback_object_count_set(PyObject *_val) {
  {
    int val;
    int res = SWIG_AsVal_int(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""pycallback_object_count""' of type '""int""'");
    }
    pycallback_object_count = static_cast< int >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_pycallback_object_count_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(pycallback_object_count));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_rpcmanager(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  rpcmanager *result = 0 ;
  
  {
    try {
      result = (rpcmanager *)new rpcmanager();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_rpcmanager, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_rpcmanager(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  rpcmanager *arg1 = (rpcmanager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_rpcmanager",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_rpcmanager, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_rpcmanager" "', argument " "1"" of type '" "rpcmanager *""'"); 
  }
  arg1 = reinterpret_cast< rpcmanager * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rpcmanager_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  rpcserver_booter_base *result = 0 ;
  
  {
    try {
      result = (rpcserver_booter_base *)rpcmanager::get();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_rpcserver_booter_base, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_rpcmanager_register_booter(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  rpcserver_booter_base *arg1 = (rpcserver_booter_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "booter", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:rpcmanager_register_booter",kwnames,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_rpcserver_booter_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rpcmanager_register_booter" "', argument " "1"" of type '" "rpcserver_booter_base *""'"); 
  }
  arg1 = reinterpret_cast< rpcserver_booter_base * >(argp1);
  {
    try {
      rpcmanager::register_booter(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *rpcmanager_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_rpcmanager, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RPC_get_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  std::string arg7 ;
  DisplayType arg8 ;
  unsigned int val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  char *  kwnames[] = {
    (char *) "name",(char *) "functionbase",(char *) "units",(char *) "desc",(char *) "min",(char *) "max",(char *) "deflt",(char *) "dtype", NULL 
  };
  pycallback_object< std::string > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOOOO:new_RPC_get_string",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_string" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_string" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_string" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_string" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_string" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_string" "', argument " "6"" of type '" "std::string""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_string" "', argument " "7"" of type '" "std::string""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode8 = SWIG_AsVal_unsigned_SS_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_RPC_get_string" "', argument " "8"" of type '" "DisplayType""'");
  } 
  arg8 = static_cast< DisplayType >(val8);
  {
    try {
      result = (pycallback_object< std::string > *)new pycallback_object< std::string >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pycallback_objectT_std__string_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_string_add_rpc_variable(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  pycallback_object< std::string > *arg1 = (pycallback_object< std::string > *) 0 ;
  rpcbasic_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "s", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RPC_get_string_add_rpc_variable",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_string_add_rpc_variable" "', argument " "1"" of type '" "pycallback_object< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< std::string > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_rpcbasic_sptr,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RPC_get_string_add_rpc_variable" "', argument " "2"" of type '" "rpcbasic_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RPC_get_string_add_rpc_variable" "', argument " "2"" of type '" "rpcbasic_sptr""'");
    } else {
      rpcbasic_sptr * temp = reinterpret_cast< rpcbasic_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->add_rpc_variable(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_string_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pycallback_object< std::string > *arg1 = (pycallback_object< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RPC_get_string_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_string_get" "', argument " "1"" of type '" "pycallback_object< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< std::string > * >(argp1);
  {
    try {
      result = (arg1)->get();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_string_set_callback(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  pycallback_object< std::string > *arg1 = (pycallback_object< std::string > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cb", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RPC_get_string_set_callback",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_string_set_callback" "', argument " "1"" of type '" "pycallback_object< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< std::string > * >(argp1);
  arg2 = obj1;
  {
    try {
      (arg1)->set_callback(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_string_setup_rpc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pycallback_object< std::string > *arg1 = (pycallback_object< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RPC_get_string_setup_rpc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_string_setup_rpc" "', argument " "1"" of type '" "pycallback_object< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< std::string > * >(argp1);
  {
    try {
      (arg1)->setup_rpc();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_string_activate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  pycallback_object< std::string > *arg1 = (pycallback_object< std::string > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "pyfunc", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RPC_get_string_activate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_string_activate" "', argument " "1"" of type '" "pycallback_object< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< std::string > * >(argp1);
  arg2 = obj1;
  {
    try {
      pycallback_object_Sl_std_string_Sg__activate(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RPC_get_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pycallback_object< std::string > *arg1 = (pycallback_object< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_RPC_get_string",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__string_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RPC_get_string" "', argument " "1"" of type '" "pycallback_object< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< std::string > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RPC_get_string_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pycallback_objectT_std__string_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RPC_get_int(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  DisplayType arg8 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  unsigned int val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  char *  kwnames[] = {
    (char *) "name",(char *) "functionbase",(char *) "units",(char *) "desc",(char *) "min",(char *) "max",(char *) "deflt",(char *) "dtype", NULL 
  };
  pycallback_object< int > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOOOO:new_RPC_get_int",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_int" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_int" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_int" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_int" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_RPC_get_int" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_RPC_get_int" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_RPC_get_int" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_unsigned_SS_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_RPC_get_int" "', argument " "8"" of type '" "DisplayType""'");
  } 
  arg8 = static_cast< DisplayType >(val8);
  {
    try {
      result = (pycallback_object< int > *)new pycallback_object< int >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pycallback_objectT_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_int_add_rpc_variable(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  pycallback_object< int > *arg1 = (pycallback_object< int > *) 0 ;
  rpcbasic_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "s", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RPC_get_int_add_rpc_variable",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_int_add_rpc_variable" "', argument " "1"" of type '" "pycallback_object< int > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< int > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_rpcbasic_sptr,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RPC_get_int_add_rpc_variable" "', argument " "2"" of type '" "rpcbasic_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RPC_get_int_add_rpc_variable" "', argument " "2"" of type '" "rpcbasic_sptr""'");
    } else {
      rpcbasic_sptr * temp = reinterpret_cast< rpcbasic_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->add_rpc_variable(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_int_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pycallback_object< int > *arg1 = (pycallback_object< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RPC_get_int_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_int_get" "', argument " "1"" of type '" "pycallback_object< int > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< int > * >(argp1);
  {
    try {
      result = (int)(arg1)->get();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_int_set_callback(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  pycallback_object< int > *arg1 = (pycallback_object< int > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cb", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RPC_get_int_set_callback",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_int_set_callback" "', argument " "1"" of type '" "pycallback_object< int > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< int > * >(argp1);
  arg2 = obj1;
  {
    try {
      (arg1)->set_callback(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_int_setup_rpc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pycallback_object< int > *arg1 = (pycallback_object< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RPC_get_int_setup_rpc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_int_setup_rpc" "', argument " "1"" of type '" "pycallback_object< int > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< int > * >(argp1);
  {
    try {
      (arg1)->setup_rpc();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_int_activate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  pycallback_object< int > *arg1 = (pycallback_object< int > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "pyfunc", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RPC_get_int_activate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_int_activate" "', argument " "1"" of type '" "pycallback_object< int > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< int > * >(argp1);
  arg2 = obj1;
  {
    try {
      pycallback_object_Sl_int_Sg__activate(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RPC_get_int(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pycallback_object< int > *arg1 = (pycallback_object< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_RPC_get_int",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RPC_get_int" "', argument " "1"" of type '" "pycallback_object< int > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< int > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RPC_get_int_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pycallback_objectT_int_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RPC_get_float(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  DisplayType arg8 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  unsigned int val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  char *  kwnames[] = {
    (char *) "name",(char *) "functionbase",(char *) "units",(char *) "desc",(char *) "min",(char *) "max",(char *) "deflt",(char *) "dtype", NULL 
  };
  pycallback_object< float > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOOOO:new_RPC_get_float",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_float" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_float" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_float" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_float" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_RPC_get_float" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_RPC_get_float" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  ecode7 = SWIG_AsVal_float(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_RPC_get_float" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = static_cast< float >(val7);
  ecode8 = SWIG_AsVal_unsigned_SS_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_RPC_get_float" "', argument " "8"" of type '" "DisplayType""'");
  } 
  arg8 = static_cast< DisplayType >(val8);
  {
    try {
      result = (pycallback_object< float > *)new pycallback_object< float >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pycallback_objectT_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_float_add_rpc_variable(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  pycallback_object< float > *arg1 = (pycallback_object< float > *) 0 ;
  rpcbasic_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "s", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RPC_get_float_add_rpc_variable",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_float_add_rpc_variable" "', argument " "1"" of type '" "pycallback_object< float > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< float > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_rpcbasic_sptr,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RPC_get_float_add_rpc_variable" "', argument " "2"" of type '" "rpcbasic_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RPC_get_float_add_rpc_variable" "', argument " "2"" of type '" "rpcbasic_sptr""'");
    } else {
      rpcbasic_sptr * temp = reinterpret_cast< rpcbasic_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->add_rpc_variable(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_float_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pycallback_object< float > *arg1 = (pycallback_object< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RPC_get_float_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_float_get" "', argument " "1"" of type '" "pycallback_object< float > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< float > * >(argp1);
  {
    try {
      result = (float)(arg1)->get();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_float_set_callback(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  pycallback_object< float > *arg1 = (pycallback_object< float > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cb", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RPC_get_float_set_callback",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_float_set_callback" "', argument " "1"" of type '" "pycallback_object< float > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< float > * >(argp1);
  arg2 = obj1;
  {
    try {
      (arg1)->set_callback(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_float_setup_rpc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pycallback_object< float > *arg1 = (pycallback_object< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RPC_get_float_setup_rpc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_float_setup_rpc" "', argument " "1"" of type '" "pycallback_object< float > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< float > * >(argp1);
  {
    try {
      (arg1)->setup_rpc();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_float_activate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  pycallback_object< float > *arg1 = (pycallback_object< float > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "pyfunc", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RPC_get_float_activate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_float_activate" "', argument " "1"" of type '" "pycallback_object< float > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< float > * >(argp1);
  arg2 = obj1;
  {
    try {
      pycallback_object_Sl_float_Sg__activate(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RPC_get_float(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pycallback_object< float > *arg1 = (pycallback_object< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_RPC_get_float",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_float_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RPC_get_float" "', argument " "1"" of type '" "pycallback_object< float > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< float > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RPC_get_float_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pycallback_objectT_float_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RPC_get_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  DisplayType arg8 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  unsigned int val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  char *  kwnames[] = {
    (char *) "name",(char *) "functionbase",(char *) "units",(char *) "desc",(char *) "min",(char *) "max",(char *) "deflt",(char *) "dtype", NULL 
  };
  pycallback_object< double > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOOOO:new_RPC_get_double",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_double" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_double" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_double" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_double" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_RPC_get_double" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_RPC_get_double" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_RPC_get_double" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_unsigned_SS_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_RPC_get_double" "', argument " "8"" of type '" "DisplayType""'");
  } 
  arg8 = static_cast< DisplayType >(val8);
  {
    try {
      result = (pycallback_object< double > *)new pycallback_object< double >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pycallback_objectT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_double_add_rpc_variable(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  pycallback_object< double > *arg1 = (pycallback_object< double > *) 0 ;
  rpcbasic_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "s", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RPC_get_double_add_rpc_variable",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_double_add_rpc_variable" "', argument " "1"" of type '" "pycallback_object< double > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_rpcbasic_sptr,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RPC_get_double_add_rpc_variable" "', argument " "2"" of type '" "rpcbasic_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RPC_get_double_add_rpc_variable" "', argument " "2"" of type '" "rpcbasic_sptr""'");
    } else {
      rpcbasic_sptr * temp = reinterpret_cast< rpcbasic_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->add_rpc_variable(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_double_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pycallback_object< double > *arg1 = (pycallback_object< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RPC_get_double_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_double_get" "', argument " "1"" of type '" "pycallback_object< double > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< double > * >(argp1);
  {
    try {
      result = (double)(arg1)->get();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_double_set_callback(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  pycallback_object< double > *arg1 = (pycallback_object< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cb", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RPC_get_double_set_callback",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_double_set_callback" "', argument " "1"" of type '" "pycallback_object< double > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< double > * >(argp1);
  arg2 = obj1;
  {
    try {
      (arg1)->set_callback(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_double_setup_rpc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pycallback_object< double > *arg1 = (pycallback_object< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RPC_get_double_setup_rpc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_double_setup_rpc" "', argument " "1"" of type '" "pycallback_object< double > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< double > * >(argp1);
  {
    try {
      (arg1)->setup_rpc();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_double_activate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  pycallback_object< double > *arg1 = (pycallback_object< double > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "pyfunc", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RPC_get_double_activate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_double_activate" "', argument " "1"" of type '" "pycallback_object< double > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< double > * >(argp1);
  arg2 = obj1;
  {
    try {
      pycallback_object_Sl_double_Sg__activate(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RPC_get_double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pycallback_object< double > *arg1 = (pycallback_object< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_RPC_get_double",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RPC_get_double" "', argument " "1"" of type '" "pycallback_object< double > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< double > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RPC_get_double_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pycallback_objectT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RPC_get_complex(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::complex< float > arg5 ;
  std::complex< float > arg6 ;
  std::complex< float > arg7 ;
  DisplayType arg8 ;
  std::complex< float > val5 ;
  int ecode5 = 0 ;
  std::complex< float > val6 ;
  int ecode6 = 0 ;
  std::complex< float > val7 ;
  int ecode7 = 0 ;
  unsigned int val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  char *  kwnames[] = {
    (char *) "name",(char *) "functionbase",(char *) "units",(char *) "desc",(char *) "min",(char *) "max",(char *) "deflt",(char *) "dtype", NULL 
  };
  pycallback_object< gr_complex > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOOOO:new_RPC_get_complex",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_complex" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_complex" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_complex" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_complex" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode5 = SWIG_AsVal_std_complex_Sl_float_Sg_(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_RPC_get_complex" "', argument " "5"" of type '" "std::complex< float >""'");
  } 
  arg5 = static_cast< std::complex< float > >(val5);
  ecode6 = SWIG_AsVal_std_complex_Sl_float_Sg_(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_RPC_get_complex" "', argument " "6"" of type '" "std::complex< float >""'");
  } 
  arg6 = static_cast< std::complex< float > >(val6);
  ecode7 = SWIG_AsVal_std_complex_Sl_float_Sg_(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_RPC_get_complex" "', argument " "7"" of type '" "std::complex< float >""'");
  } 
  arg7 = static_cast< std::complex< float > >(val7);
  ecode8 = SWIG_AsVal_unsigned_SS_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_RPC_get_complex" "', argument " "8"" of type '" "DisplayType""'");
  } 
  arg8 = static_cast< DisplayType >(val8);
  {
    try {
      result = (pycallback_object< gr_complex > *)new pycallback_object< gr_complex >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pycallback_objectT_std__complexT_float_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_complex_add_rpc_variable(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  pycallback_object< gr_complex > *arg1 = (pycallback_object< gr_complex > *) 0 ;
  rpcbasic_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "s", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RPC_get_complex_add_rpc_variable",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__complexT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_complex_add_rpc_variable" "', argument " "1"" of type '" "pycallback_object< gr_complex > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< gr_complex > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_rpcbasic_sptr,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RPC_get_complex_add_rpc_variable" "', argument " "2"" of type '" "rpcbasic_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RPC_get_complex_add_rpc_variable" "', argument " "2"" of type '" "rpcbasic_sptr""'");
    } else {
      rpcbasic_sptr * temp = reinterpret_cast< rpcbasic_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->add_rpc_variable(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_complex_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pycallback_object< gr_complex > *arg1 = (pycallback_object< gr_complex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< float > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RPC_get_complex_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__complexT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_complex_get" "', argument " "1"" of type '" "pycallback_object< gr_complex > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< gr_complex > * >(argp1);
  {
    try {
      result = (arg1)->get();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_complex_Sl_float_Sg_(static_cast< std::complex<float> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_complex_set_callback(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  pycallback_object< gr_complex > *arg1 = (pycallback_object< gr_complex > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cb", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RPC_get_complex_set_callback",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__complexT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_complex_set_callback" "', argument " "1"" of type '" "pycallback_object< gr_complex > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< gr_complex > * >(argp1);
  arg2 = obj1;
  {
    try {
      (arg1)->set_callback(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_complex_setup_rpc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pycallback_object< gr_complex > *arg1 = (pycallback_object< gr_complex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RPC_get_complex_setup_rpc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__complexT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_complex_setup_rpc" "', argument " "1"" of type '" "pycallback_object< gr_complex > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< gr_complex > * >(argp1);
  {
    try {
      (arg1)->setup_rpc();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_complex_activate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  pycallback_object< gr_complex > *arg1 = (pycallback_object< gr_complex > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "pyfunc", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RPC_get_complex_activate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__complexT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_complex_activate" "', argument " "1"" of type '" "pycallback_object< gr_complex > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< gr_complex > * >(argp1);
  arg2 = obj1;
  {
    try {
      pycallback_object_Sl_gr_complex_Sg__activate(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RPC_get_complex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pycallback_object< gr_complex > *arg1 = (pycallback_object< gr_complex > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_RPC_get_complex",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__complexT_float_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RPC_get_complex" "', argument " "1"" of type '" "pycallback_object< gr_complex > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< gr_complex > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RPC_get_complex_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pycallback_objectT_std__complexT_float_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RPC_get_complexd(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::complex< double > arg5 ;
  std::complex< double > arg6 ;
  std::complex< double > arg7 ;
  DisplayType arg8 ;
  std::complex< double > val5 ;
  int ecode5 = 0 ;
  std::complex< double > val6 ;
  int ecode6 = 0 ;
  std::complex< double > val7 ;
  int ecode7 = 0 ;
  unsigned int val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  char *  kwnames[] = {
    (char *) "name",(char *) "functionbase",(char *) "units",(char *) "desc",(char *) "min",(char *) "max",(char *) "deflt",(char *) "dtype", NULL 
  };
  pycallback_object< gr_complexd > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOOOO:new_RPC_get_complexd",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_complexd" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_complexd" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_complexd" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_complexd" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode5 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_RPC_get_complexd" "', argument " "5"" of type '" "std::complex< double >""'");
  } 
  arg5 = static_cast< std::complex< double > >(val5);
  ecode6 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_RPC_get_complexd" "', argument " "6"" of type '" "std::complex< double >""'");
  } 
  arg6 = static_cast< std::complex< double > >(val6);
  ecode7 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_RPC_get_complexd" "', argument " "7"" of type '" "std::complex< double >""'");
  } 
  arg7 = static_cast< std::complex< double > >(val7);
  ecode8 = SWIG_AsVal_unsigned_SS_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_RPC_get_complexd" "', argument " "8"" of type '" "DisplayType""'");
  } 
  arg8 = static_cast< DisplayType >(val8);
  {
    try {
      result = (pycallback_object< gr_complexd > *)new pycallback_object< gr_complexd >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pycallback_objectT_std__complexT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_complexd_add_rpc_variable(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  pycallback_object< gr_complexd > *arg1 = (pycallback_object< gr_complexd > *) 0 ;
  rpcbasic_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "s", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RPC_get_complexd_add_rpc_variable",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__complexT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_complexd_add_rpc_variable" "', argument " "1"" of type '" "pycallback_object< gr_complexd > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< gr_complexd > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_rpcbasic_sptr,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RPC_get_complexd_add_rpc_variable" "', argument " "2"" of type '" "rpcbasic_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RPC_get_complexd_add_rpc_variable" "', argument " "2"" of type '" "rpcbasic_sptr""'");
    } else {
      rpcbasic_sptr * temp = reinterpret_cast< rpcbasic_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->add_rpc_variable(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_complexd_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pycallback_object< gr_complexd > *arg1 = (pycallback_object< gr_complexd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::complex< double > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RPC_get_complexd_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__complexT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_complexd_get" "', argument " "1"" of type '" "pycallback_object< gr_complexd > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< gr_complexd > * >(argp1);
  {
    try {
      result = (arg1)->get();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_complexd_set_callback(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  pycallback_object< gr_complexd > *arg1 = (pycallback_object< gr_complexd > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cb", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RPC_get_complexd_set_callback",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__complexT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_complexd_set_callback" "', argument " "1"" of type '" "pycallback_object< gr_complexd > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< gr_complexd > * >(argp1);
  arg2 = obj1;
  {
    try {
      (arg1)->set_callback(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_complexd_setup_rpc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pycallback_object< gr_complexd > *arg1 = (pycallback_object< gr_complexd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RPC_get_complexd_setup_rpc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__complexT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_complexd_setup_rpc" "', argument " "1"" of type '" "pycallback_object< gr_complexd > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< gr_complexd > * >(argp1);
  {
    try {
      (arg1)->setup_rpc();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_complexd_activate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  pycallback_object< gr_complexd > *arg1 = (pycallback_object< gr_complexd > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "pyfunc", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RPC_get_complexd_activate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__complexT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_complexd_activate" "', argument " "1"" of type '" "pycallback_object< gr_complexd > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< gr_complexd > * >(argp1);
  arg2 = obj1;
  {
    try {
      pycallback_object_Sl_gr_complexd_Sg__activate(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RPC_get_complexd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pycallback_object< gr_complexd > *arg1 = (pycallback_object< gr_complexd > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_RPC_get_complexd",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__complexT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RPC_get_complexd" "', argument " "1"" of type '" "pycallback_object< gr_complexd > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< gr_complexd > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RPC_get_complexd_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pycallback_objectT_std__complexT_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RPC_get_vector_float(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  SwigValueWrapper< std::vector< float,std::allocator< float > > > arg5 ;
  SwigValueWrapper< std::vector< float,std::allocator< float > > > arg6 ;
  SwigValueWrapper< std::vector< float,std::allocator< float > > > arg7 ;
  DisplayType arg8 ;
  unsigned int val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  char *  kwnames[] = {
    (char *) "name",(char *) "functionbase",(char *) "units",(char *) "desc",(char *) "min",(char *) "max",(char *) "deflt",(char *) "dtype", NULL 
  };
  pycallback_object< std::vector< float > > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOOOO:new_RPC_get_vector_float",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_vector_float" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_vector_float" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_vector_float" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_vector_float" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_vector_float" "', argument " "5"" of type '" "std::vector< float,std::allocator< float > >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_vector_float" "', argument " "6"" of type '" "std::vector< float,std::allocator< float > >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<float,std::allocator< float > > *ptr = (std::vector<float,std::allocator< float > > *)0;
    int res = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_vector_float" "', argument " "7"" of type '" "std::vector< float,std::allocator< float > >""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode8 = SWIG_AsVal_unsigned_SS_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_RPC_get_vector_float" "', argument " "8"" of type '" "DisplayType""'");
  } 
  arg8 = static_cast< DisplayType >(val8);
  {
    try {
      result = (pycallback_object< std::vector< float > > *)new pycallback_object< std::vector< float > >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pycallback_objectT_std__vectorT_float_std__allocatorT_float_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_vector_float_add_rpc_variable(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  pycallback_object< std::vector< float > > *arg1 = (pycallback_object< std::vector< float > > *) 0 ;
  rpcbasic_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "s", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RPC_get_vector_float_add_rpc_variable",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__vectorT_float_std__allocatorT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_vector_float_add_rpc_variable" "', argument " "1"" of type '" "pycallback_object< std::vector< float > > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< std::vector< float > > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_rpcbasic_sptr,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RPC_get_vector_float_add_rpc_variable" "', argument " "2"" of type '" "rpcbasic_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RPC_get_vector_float_add_rpc_variable" "', argument " "2"" of type '" "rpcbasic_sptr""'");
    } else {
      rpcbasic_sptr * temp = reinterpret_cast< rpcbasic_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->add_rpc_variable(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_vector_float_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pycallback_object< std::vector< float > > *arg1 = (pycallback_object< std::vector< float > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< float,std::allocator< float > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RPC_get_vector_float_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__vectorT_float_std__allocatorT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_vector_float_get" "', argument " "1"" of type '" "pycallback_object< std::vector< float > > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< std::vector< float > > * >(argp1);
  {
    try {
      result = (arg1)->get();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_vector_float_set_callback(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  pycallback_object< std::vector< float > > *arg1 = (pycallback_object< std::vector< float > > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cb", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RPC_get_vector_float_set_callback",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__vectorT_float_std__allocatorT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_vector_float_set_callback" "', argument " "1"" of type '" "pycallback_object< std::vector< float > > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< std::vector< float > > * >(argp1);
  arg2 = obj1;
  {
    try {
      (arg1)->set_callback(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_vector_float_setup_rpc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pycallback_object< std::vector< float > > *arg1 = (pycallback_object< std::vector< float > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RPC_get_vector_float_setup_rpc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__vectorT_float_std__allocatorT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_vector_float_setup_rpc" "', argument " "1"" of type '" "pycallback_object< std::vector< float > > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< std::vector< float > > * >(argp1);
  {
    try {
      (arg1)->setup_rpc();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_vector_float_activate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  pycallback_object< std::vector< float > > *arg1 = (pycallback_object< std::vector< float > > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "pyfunc", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RPC_get_vector_float_activate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__vectorT_float_std__allocatorT_float_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_vector_float_activate" "', argument " "1"" of type '" "pycallback_object< std::vector< float > > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< std::vector< float > > * >(argp1);
  arg2 = obj1;
  {
    try {
      pycallback_object_Sl_std_vector_Sl_float_Sg__Sg__activate(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RPC_get_vector_float(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pycallback_object< std::vector< float > > *arg1 = (pycallback_object< std::vector< float > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_RPC_get_vector_float",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__vectorT_float_std__allocatorT_float_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RPC_get_vector_float" "', argument " "1"" of type '" "pycallback_object< std::vector< float > > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< std::vector< float > > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RPC_get_vector_float_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pycallback_objectT_std__vectorT_float_std__allocatorT_float_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RPC_get_vector_gr_complex(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  SwigValueWrapper< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > arg5 ;
  SwigValueWrapper< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > arg6 ;
  SwigValueWrapper< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > arg7 ;
  DisplayType arg8 ;
  unsigned int val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  char *  kwnames[] = {
    (char *) "name",(char *) "functionbase",(char *) "units",(char *) "desc",(char *) "min",(char *) "max",(char *) "deflt",(char *) "dtype", NULL 
  };
  pycallback_object< std::vector< gr_complex > > *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOOOO:new_RPC_get_vector_gr_complex",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_vector_gr_complex" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_vector_gr_complex" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_vector_gr_complex" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_vector_gr_complex" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<std::complex< float >,std::allocator< std::complex< float > > > *ptr = (std::vector<std::complex< float >,std::allocator< std::complex< float > > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_vector_gr_complex" "', argument " "5"" of type '" "std::vector< std::complex< float >,std::allocator< std::complex< float > > >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<std::complex< float >,std::allocator< std::complex< float > > > *ptr = (std::vector<std::complex< float >,std::allocator< std::complex< float > > > *)0;
    int res = swig::asptr(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_vector_gr_complex" "', argument " "6"" of type '" "std::vector< std::complex< float >,std::allocator< std::complex< float > > >""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<std::complex< float >,std::allocator< std::complex< float > > > *ptr = (std::vector<std::complex< float >,std::allocator< std::complex< float > > > *)0;
    int res = swig::asptr(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RPC_get_vector_gr_complex" "', argument " "7"" of type '" "std::vector< std::complex< float >,std::allocator< std::complex< float > > >""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode8 = SWIG_AsVal_unsigned_SS_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_RPC_get_vector_gr_complex" "', argument " "8"" of type '" "DisplayType""'");
  } 
  arg8 = static_cast< DisplayType >(val8);
  {
    try {
      result = (pycallback_object< std::vector< gr_complex > > *)new pycallback_object< std::vector< gr_complex > >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pycallback_objectT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_vector_gr_complex_add_rpc_variable(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  pycallback_object< std::vector< gr_complex > > *arg1 = (pycallback_object< std::vector< gr_complex > > *) 0 ;
  rpcbasic_sptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "s", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RPC_get_vector_gr_complex_add_rpc_variable",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_vector_gr_complex_add_rpc_variable" "', argument " "1"" of type '" "pycallback_object< std::vector< gr_complex > > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< std::vector< gr_complex > > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_rpcbasic_sptr,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RPC_get_vector_gr_complex_add_rpc_variable" "', argument " "2"" of type '" "rpcbasic_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RPC_get_vector_gr_complex_add_rpc_variable" "', argument " "2"" of type '" "rpcbasic_sptr""'");
    } else {
      rpcbasic_sptr * temp = reinterpret_cast< rpcbasic_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->add_rpc_variable(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_vector_gr_complex_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pycallback_object< std::vector< gr_complex > > *arg1 = (pycallback_object< std::vector< gr_complex > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RPC_get_vector_gr_complex_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_vector_gr_complex_get" "', argument " "1"" of type '" "pycallback_object< std::vector< gr_complex > > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< std::vector< gr_complex > > * >(argp1);
  {
    try {
      result = (arg1)->get();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<std::complex< float >,std::allocator< std::complex< float > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_vector_gr_complex_set_callback(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  pycallback_object< std::vector< gr_complex > > *arg1 = (pycallback_object< std::vector< gr_complex > > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "cb", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RPC_get_vector_gr_complex_set_callback",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_vector_gr_complex_set_callback" "', argument " "1"" of type '" "pycallback_object< std::vector< gr_complex > > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< std::vector< gr_complex > > * >(argp1);
  arg2 = obj1;
  {
    try {
      (arg1)->set_callback(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_vector_gr_complex_setup_rpc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pycallback_object< std::vector< gr_complex > > *arg1 = (pycallback_object< std::vector< gr_complex > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RPC_get_vector_gr_complex_setup_rpc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_vector_gr_complex_setup_rpc" "', argument " "1"" of type '" "pycallback_object< std::vector< gr_complex > > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< std::vector< gr_complex > > * >(argp1);
  {
    try {
      (arg1)->setup_rpc();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RPC_get_vector_gr_complex_activate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  pycallback_object< std::vector< gr_complex > > *arg1 = (pycallback_object< std::vector< gr_complex > > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "pyfunc", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:RPC_get_vector_gr_complex_activate",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RPC_get_vector_gr_complex_activate" "', argument " "1"" of type '" "pycallback_object< std::vector< gr_complex > > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< std::vector< gr_complex > > * >(argp1);
  arg2 = obj1;
  {
    try {
      pycallback_object_Sl_std_vector_Sl_gr_complex_Sg__Sg__activate(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RPC_get_vector_gr_complex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pycallback_object< std::vector< gr_complex > > *arg1 = (pycallback_object< std::vector< gr_complex > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_RPC_get_vector_gr_complex",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pycallback_objectT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RPC_get_vector_gr_complex" "', argument " "1"" of type '" "pycallback_object< std::vector< gr_complex > > *""'"); 
  }
  arg1 = reinterpret_cast< pycallback_object< std::vector< gr_complex > > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RPC_get_vector_gr_complex_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pycallback_objectT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_is_power_of_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "x", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:is_power_of_2",kwnames,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "is_power_of_2" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    try {
      result = (bool)gr::is_power_of_2(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fast_atan2f__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fast_atan2f",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "fast_atan2f" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fast_atan2f" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (float)gr::fast_atan2f(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fast_atan2f__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr_complex arg1 ;
  std::complex< float > val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fast_atan2f",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_std_complex_Sl_float_Sg_(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "fast_atan2f" "', argument " "1"" of type '" "gr_complex""'");
  } 
  arg1 = static_cast< gr_complex >(val1);
  {
    try {
      result = (float)gr::fast_atan2f(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fast_atan2f(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_std_complex_Sl_float_Sg_(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_fast_atan2f__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_fast_atan2f__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'fast_atan2f'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::fast_atan2f(float,float)\n"
    "    gr::fast_atan2f(gr_complex)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_branchless_clip(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "x",(char *) "clip", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:branchless_clip",kwnames,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "branchless_clip" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "branchless_clip" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (float)gr::branchless_clip(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_clip(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "x",(char *) "clip", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:clip",kwnames,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "clip" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "clip" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (float)gr::clip(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_binary_slicer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "x", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:binary_slicer",kwnames,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "binary_slicer" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  {
    try {
      result = (unsigned int)gr::binary_slicer(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quad_45deg_slicer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"quad_45deg_slicer",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "quad_45deg_slicer" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "quad_45deg_slicer" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (unsigned int)gr::quad_45deg_slicer(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quad_0deg_slicer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"quad_0deg_slicer",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "quad_0deg_slicer" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "quad_0deg_slicer" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (unsigned int)gr::quad_0deg_slicer(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quad_45deg_slicer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr_complex arg1 ;
  std::complex< float > val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"quad_45deg_slicer",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_std_complex_Sl_float_Sg_(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "quad_45deg_slicer" "', argument " "1"" of type '" "gr_complex""'");
  } 
  arg1 = static_cast< gr_complex >(val1);
  {
    try {
      result = (unsigned int)gr::quad_45deg_slicer(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quad_45deg_slicer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_std_complex_Sl_float_Sg_(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_quad_45deg_slicer__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_quad_45deg_slicer__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'quad_45deg_slicer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::quad_45deg_slicer(float,float)\n"
    "    gr::quad_45deg_slicer(gr_complex)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_quad_0deg_slicer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr_complex arg1 ;
  std::complex< float > val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"quad_0deg_slicer",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_std_complex_Sl_float_Sg_(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "quad_0deg_slicer" "', argument " "1"" of type '" "gr_complex""'");
  } 
  arg1 = static_cast< gr_complex >(val1);
  {
    try {
      result = (unsigned int)gr::quad_0deg_slicer(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quad_0deg_slicer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_std_complex_Sl_float_Sg_(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_quad_0deg_slicer__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_quad_0deg_slicer__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'quad_0deg_slicer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::quad_0deg_slicer(float,float)\n"
    "    gr::quad_0deg_slicer(gr_complex)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_branchless_binary_slicer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "x", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:branchless_binary_slicer",kwnames,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "branchless_binary_slicer" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  {
    try {
      result = (unsigned int)gr::branchless_binary_slicer(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_branchless_quad_0deg_slicer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"branchless_quad_0deg_slicer",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "branchless_quad_0deg_slicer" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "branchless_quad_0deg_slicer" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (unsigned int)gr::branchless_quad_0deg_slicer(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_branchless_quad_0deg_slicer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr_complex arg1 ;
  std::complex< float > val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"branchless_quad_0deg_slicer",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_std_complex_Sl_float_Sg_(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "branchless_quad_0deg_slicer" "', argument " "1"" of type '" "gr_complex""'");
  } 
  arg1 = static_cast< gr_complex >(val1);
  {
    try {
      result = (unsigned int)gr::branchless_quad_0deg_slicer(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_branchless_quad_0deg_slicer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_std_complex_Sl_float_Sg_(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_branchless_quad_0deg_slicer__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_branchless_quad_0deg_slicer__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'branchless_quad_0deg_slicer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::branchless_quad_0deg_slicer(float,float)\n"
    "    gr::branchless_quad_0deg_slicer(gr_complex)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_branchless_quad_45deg_slicer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"branchless_quad_45deg_slicer",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "branchless_quad_45deg_slicer" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "branchless_quad_45deg_slicer" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (unsigned int)gr::branchless_quad_45deg_slicer(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_branchless_quad_45deg_slicer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr_complex arg1 ;
  std::complex< float > val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"branchless_quad_45deg_slicer",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_std_complex_Sl_float_Sg_(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "branchless_quad_45deg_slicer" "', argument " "1"" of type '" "gr_complex""'");
  } 
  arg1 = static_cast< gr_complex >(val1);
  {
    try {
      result = (unsigned int)gr::branchless_quad_45deg_slicer(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_branchless_quad_45deg_slicer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_std_complex_Sl_float_Sg_(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_branchless_quad_45deg_slicer__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_branchless_quad_45deg_slicer__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'branchless_quad_45deg_slicer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::branchless_quad_45deg_slicer(float,float)\n"
    "    gr::branchless_quad_45deg_slicer(gr_complex)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_p2_round_down(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t arg2 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "x",(char *) "pow2", NULL 
  };
  size_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:p2_round_down",kwnames,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "p2_round_down" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "p2_round_down" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = gr::p2_round_down(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_p2_round_up(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t arg2 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "x",(char *) "pow2", NULL 
  };
  size_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:p2_round_up",kwnames,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "p2_round_up" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "p2_round_up" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = gr::p2_round_up(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_p2_modulo(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t arg2 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "x",(char *) "pow2", NULL 
  };
  size_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:p2_modulo",kwnames,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "p2_modulo" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "p2_modulo" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = gr::p2_modulo(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_p2_modulo_neg(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  size_t arg1 ;
  size_t arg2 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "x",(char *) "pow2", NULL 
  };
  size_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:p2_modulo_neg",kwnames,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "p2_modulo_neg" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "p2_modulo_neg" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = gr::p2_modulo_neg(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_random(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  unsigned int arg1 = (unsigned int) 0 ;
  int arg2 = (int) 0 ;
  int arg3 = (int) 2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "seed",(char *) "min_integer",(char *) "max_integer", NULL 
  };
  gr::random *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OOO:new_random",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_random" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_random" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_random" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  {
    try {
      result = (gr::random *)new gr::random(arg1,arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__random, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_random(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::random *arg1 = (gr::random *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_random",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__random, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_random" "', argument " "1"" of type '" "gr::random *""'"); 
  }
  arg1 = reinterpret_cast< gr::random * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_random_reseed(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::random *arg1 = (gr::random *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "seed", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:random_reseed",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__random, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "random_reseed" "', argument " "1"" of type '" "gr::random *""'"); 
  }
  arg1 = reinterpret_cast< gr::random * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "random_reseed" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (arg1)->reseed(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_random_set_integer_limits(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::random *arg1 = (gr::random *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "minimum",(char *) "maximum", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:random_set_integer_limits",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__random, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "random_set_integer_limits" "', argument " "1"" of type '" "gr::random *""'"); 
  }
  arg1 = reinterpret_cast< gr::random * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "random_set_integer_limits" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "random_set_integer_limits" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->set_integer_limits(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_random_ran_int(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::random *arg1 = (gr::random *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"random_ran_int",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__random, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "random_ran_int" "', argument " "1"" of type '" "gr::random *""'"); 
  }
  arg1 = reinterpret_cast< gr::random * >(argp1);
  {
    try {
      result = (int)(arg1)->ran_int();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_random_ran1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::random *arg1 = (gr::random *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"random_ran1",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__random, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "random_ran1" "', argument " "1"" of type '" "gr::random *""'"); 
  }
  arg1 = reinterpret_cast< gr::random * >(argp1);
  {
    try {
      result = (float)(arg1)->ran1();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_random_gasdev(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::random *arg1 = (gr::random *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"random_gasdev",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__random, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "random_gasdev" "', argument " "1"" of type '" "gr::random *""'"); 
  }
  arg1 = reinterpret_cast< gr::random * >(argp1);
  {
    try {
      result = (float)(arg1)->gasdev();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_random_laplacian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::random *arg1 = (gr::random *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"random_laplacian",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__random, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "random_laplacian" "', argument " "1"" of type '" "gr::random *""'"); 
  }
  arg1 = reinterpret_cast< gr::random * >(argp1);
  {
    try {
      result = (float)(arg1)->laplacian();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_random_rayleigh(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::random *arg1 = (gr::random *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"random_rayleigh",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__random, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "random_rayleigh" "', argument " "1"" of type '" "gr::random *""'"); 
  }
  arg1 = reinterpret_cast< gr::random * >(argp1);
  {
    try {
      result = (float)(arg1)->rayleigh();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_random_impulse(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::random *arg1 = (gr::random *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "factor", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:random_impulse",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__random, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "random_impulse" "', argument " "1"" of type '" "gr::random *""'"); 
  }
  arg1 = reinterpret_cast< gr::random * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "random_impulse" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (float)(arg1)->impulse(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_random_rayleigh_complex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::random *arg1 = (gr::random *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr_complex result;
  
  if(!PyArg_UnpackTuple(args,(char *)"random_rayleigh_complex",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__random, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "random_rayleigh_complex" "', argument " "1"" of type '" "gr::random *""'"); 
  }
  arg1 = reinterpret_cast< gr::random * >(argp1);
  {
    try {
      result = (arg1)->rayleigh_complex();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_complex_Sl_float_Sg_(static_cast< std::complex<float> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *random_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__random, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_VARARGS, (char *)"delete_SwigPyIterator(SwigPyIterator self)"},
	 { (char *)"SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_VARARGS, (char *)"SwigPyIterator_value(SwigPyIterator self) -> PyObject *"},
	 { (char *)"SwigPyIterator_incr", (PyCFunction) _wrap_SwigPyIterator_incr, METH_VARARGS | METH_KEYWORDS, (char *)"SwigPyIterator_incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator_decr", (PyCFunction) _wrap_SwigPyIterator_decr, METH_VARARGS | METH_KEYWORDS, (char *)"SwigPyIterator_decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator_distance", (PyCFunction) _wrap_SwigPyIterator_distance, METH_VARARGS | METH_KEYWORDS, (char *)"SwigPyIterator_distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"},
	 { (char *)"SwigPyIterator_equal", (PyCFunction) _wrap_SwigPyIterator_equal, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"SwigPyIterator_equal(SwigPyIterator self, SwigPyIterator x) -> bool\n"
		"\n"
		"pmt::equal recursively compares the contents of pairs and vectors, applying pmt::eqv on other objects such as numbers and symbols. pmt::equal may fail to terminate if its arguments are circular data structures.\n"
		""},
	 { (char *)"SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_VARARGS, (char *)"SwigPyIterator_copy(SwigPyIterator self) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_VARARGS, (char *)"SwigPyIterator_next(SwigPyIterator self) -> PyObject *"},
	 { (char *)"SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_VARARGS, (char *)"SwigPyIterator___next__(SwigPyIterator self) -> PyObject *"},
	 { (char *)"SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_VARARGS, (char *)"SwigPyIterator_previous(SwigPyIterator self) -> PyObject *"},
	 { (char *)"SwigPyIterator_advance", (PyCFunction) _wrap_SwigPyIterator_advance, METH_VARARGS | METH_KEYWORDS, (char *)"SwigPyIterator_advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___eq__", (PyCFunction) _wrap_SwigPyIterator___eq__, METH_VARARGS | METH_KEYWORDS, (char *)"SwigPyIterator___eq__(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { (char *)"SwigPyIterator___ne__", (PyCFunction) _wrap_SwigPyIterator___ne__, METH_VARARGS | METH_KEYWORDS, (char *)"SwigPyIterator___ne__(SwigPyIterator self, SwigPyIterator x) -> bool"},
	 { (char *)"SwigPyIterator___iadd__", (PyCFunction) _wrap_SwigPyIterator___iadd__, METH_VARARGS | METH_KEYWORDS, (char *)"SwigPyIterator___iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___isub__", (PyCFunction) _wrap_SwigPyIterator___isub__, METH_VARARGS | METH_KEYWORDS, (char *)"SwigPyIterator___isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___add__", (PyCFunction) _wrap_SwigPyIterator___add__, METH_VARARGS | METH_KEYWORDS, (char *)"SwigPyIterator___add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, (char *)"\n"
		"__sub__(ptrdiff_t n) -> SwigPyIterator\n"
		"SwigPyIterator___sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t\n"
		""},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"gr_vsize_t_iterator", _wrap_gr_vsize_t_iterator, METH_VARARGS, (char *)"gr_vsize_t_iterator(gr_vsize_t self) -> SwigPyIterator"},
	 { (char *)"gr_vsize_t___nonzero__", _wrap_gr_vsize_t___nonzero__, METH_VARARGS, (char *)"gr_vsize_t___nonzero__(gr_vsize_t self) -> bool"},
	 { (char *)"gr_vsize_t___bool__", _wrap_gr_vsize_t___bool__, METH_VARARGS, (char *)"gr_vsize_t___bool__(gr_vsize_t self) -> bool"},
	 { (char *)"gr_vsize_t___len__", _wrap_gr_vsize_t___len__, METH_VARARGS, (char *)"gr_vsize_t___len__(gr_vsize_t self) -> std::vector< size_t >::size_type"},
	 { (char *)"gr_vsize_t_pop", _wrap_gr_vsize_t_pop, METH_VARARGS, (char *)"gr_vsize_t_pop(gr_vsize_t self) -> std::vector< size_t >::value_type"},
	 { (char *)"gr_vsize_t___getslice__", (PyCFunction) _wrap_gr_vsize_t___getslice__, METH_VARARGS | METH_KEYWORDS, (char *)"gr_vsize_t___getslice__(gr_vsize_t self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j) -> gr_vsize_t"},
	 { (char *)"gr_vsize_t___setslice__", (PyCFunction) _wrap_gr_vsize_t___setslice__, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"gr_vsize_t___setslice__(gr_vsize_t self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j, \n"
		"    gr_vsize_t v=std::vector< size_t,std::allocator< size_t > >())\n"
		""},
	 { (char *)"gr_vsize_t___delslice__", (PyCFunction) _wrap_gr_vsize_t___delslice__, METH_VARARGS | METH_KEYWORDS, (char *)"gr_vsize_t___delslice__(gr_vsize_t self, std::vector< size_t >::difference_type i, std::vector< size_t >::difference_type j)"},
	 { (char *)"gr_vsize_t___delitem__", _wrap_gr_vsize_t___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(std::vector< size_t >::difference_type i)\n"
		"gr_vsize_t___delitem__(gr_vsize_t self, PySliceObject * slice)\n"
		""},
	 { (char *)"gr_vsize_t___getitem__", _wrap_gr_vsize_t___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> gr_vsize_t\n"
		"gr_vsize_t___getitem__(gr_vsize_t self, std::vector< size_t >::difference_type i) -> std::vector< size_t >::value_type const &\n"
		""},
	 { (char *)"gr_vsize_t___setitem__", _wrap_gr_vsize_t___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, gr_vsize_t v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"gr_vsize_t___setitem__(gr_vsize_t self, std::vector< size_t >::difference_type i, std::vector< size_t >::value_type const & x)\n"
		""},
	 { (char *)"gr_vsize_t_append", (PyCFunction) _wrap_gr_vsize_t_append, METH_VARARGS | METH_KEYWORDS, (char *)"gr_vsize_t_append(gr_vsize_t self, std::vector< size_t >::value_type const & x)"},
	 { (char *)"gr_vsize_t_empty", _wrap_gr_vsize_t_empty, METH_VARARGS, (char *)"gr_vsize_t_empty(gr_vsize_t self) -> bool"},
	 { (char *)"gr_vsize_t_size", _wrap_gr_vsize_t_size, METH_VARARGS, (char *)"gr_vsize_t_size(gr_vsize_t self) -> std::vector< size_t >::size_type"},
	 { (char *)"gr_vsize_t_clear", _wrap_gr_vsize_t_clear, METH_VARARGS, (char *)"gr_vsize_t_clear(gr_vsize_t self)"},
	 { (char *)"gr_vsize_t_swap", (PyCFunction) _wrap_gr_vsize_t_swap, METH_VARARGS | METH_KEYWORDS, (char *)"gr_vsize_t_swap(gr_vsize_t self, gr_vsize_t v)"},
	 { (char *)"gr_vsize_t_get_allocator", _wrap_gr_vsize_t_get_allocator, METH_VARARGS, (char *)"gr_vsize_t_get_allocator(gr_vsize_t self) -> std::vector< size_t >::allocator_type"},
	 { (char *)"gr_vsize_t_begin", _wrap_gr_vsize_t_begin, METH_VARARGS, (char *)"gr_vsize_t_begin(gr_vsize_t self) -> std::vector< size_t >::iterator"},
	 { (char *)"gr_vsize_t_end", _wrap_gr_vsize_t_end, METH_VARARGS, (char *)"gr_vsize_t_end(gr_vsize_t self) -> std::vector< size_t >::iterator"},
	 { (char *)"gr_vsize_t_rbegin", _wrap_gr_vsize_t_rbegin, METH_VARARGS, (char *)"gr_vsize_t_rbegin(gr_vsize_t self) -> std::vector< size_t >::reverse_iterator"},
	 { (char *)"gr_vsize_t_rend", _wrap_gr_vsize_t_rend, METH_VARARGS, (char *)"gr_vsize_t_rend(gr_vsize_t self) -> std::vector< size_t >::reverse_iterator"},
	 { (char *)"gr_vsize_t_pop_back", _wrap_gr_vsize_t_pop_back, METH_VARARGS, (char *)"gr_vsize_t_pop_back(gr_vsize_t self)"},
	 { (char *)"gr_vsize_t_erase", _wrap_gr_vsize_t_erase, METH_VARARGS, (char *)"\n"
		"erase(std::vector< size_t >::iterator pos) -> std::vector< size_t >::iterator\n"
		"gr_vsize_t_erase(gr_vsize_t self, std::vector< size_t >::iterator first, std::vector< size_t >::iterator last) -> std::vector< size_t >::iterator\n"
		""},
	 { (char *)"new_gr_vsize_t", _wrap_new_gr_vsize_t, METH_VARARGS, (char *)"\n"
		"gr_vsize_t()\n"
		"gr_vsize_t(gr_vsize_t arg2)\n"
		"gr_vsize_t(std::vector< size_t >::size_type size)\n"
		"new_gr_vsize_t(std::vector< size_t >::size_type size, std::vector< size_t >::value_type const & value) -> gr_vsize_t\n"
		""},
	 { (char *)"gr_vsize_t_push_back", (PyCFunction) _wrap_gr_vsize_t_push_back, METH_VARARGS | METH_KEYWORDS, (char *)"gr_vsize_t_push_back(gr_vsize_t self, std::vector< size_t >::value_type const & x)"},
	 { (char *)"gr_vsize_t_front", _wrap_gr_vsize_t_front, METH_VARARGS, (char *)"gr_vsize_t_front(gr_vsize_t self) -> std::vector< size_t >::value_type const &"},
	 { (char *)"gr_vsize_t_back", _wrap_gr_vsize_t_back, METH_VARARGS, (char *)"gr_vsize_t_back(gr_vsize_t self) -> std::vector< size_t >::value_type const &"},
	 { (char *)"gr_vsize_t_assign", (PyCFunction) _wrap_gr_vsize_t_assign, METH_VARARGS | METH_KEYWORDS, (char *)"gr_vsize_t_assign(gr_vsize_t self, std::vector< size_t >::size_type n, std::vector< size_t >::value_type const & x)"},
	 { (char *)"gr_vsize_t_resize", _wrap_gr_vsize_t_resize, METH_VARARGS, (char *)"\n"
		"resize(std::vector< size_t >::size_type new_size)\n"
		"gr_vsize_t_resize(gr_vsize_t self, std::vector< size_t >::size_type new_size, std::vector< size_t >::value_type const & x)\n"
		""},
	 { (char *)"gr_vsize_t_insert", _wrap_gr_vsize_t_insert, METH_VARARGS, (char *)"\n"
		"insert(std::vector< size_t >::iterator pos, std::vector< size_t >::value_type const & x) -> std::vector< size_t >::iterator\n"
		"gr_vsize_t_insert(gr_vsize_t self, std::vector< size_t >::iterator pos, std::vector< size_t >::size_type n, \n"
		"    std::vector< size_t >::value_type const & x)\n"
		""},
	 { (char *)"gr_vsize_t_reserve", (PyCFunction) _wrap_gr_vsize_t_reserve, METH_VARARGS | METH_KEYWORDS, (char *)"gr_vsize_t_reserve(gr_vsize_t self, std::vector< size_t >::size_type n)"},
	 { (char *)"gr_vsize_t_capacity", _wrap_gr_vsize_t_capacity, METH_VARARGS, (char *)"gr_vsize_t_capacity(gr_vsize_t self) -> std::vector< size_t >::size_type"},
	 { (char *)"delete_gr_vsize_t", _wrap_delete_gr_vsize_t, METH_VARARGS, (char *)"delete_gr_vsize_t(gr_vsize_t self)"},
	 { (char *)"gr_vsize_t_swigregister", gr_vsize_t_swigregister, METH_VARARGS, NULL},
	 { (char *)"gr_vvvsize_t_iterator", _wrap_gr_vvvsize_t_iterator, METH_VARARGS, (char *)"gr_vvvsize_t_iterator(gr_vvvsize_t self) -> SwigPyIterator"},
	 { (char *)"gr_vvvsize_t___nonzero__", _wrap_gr_vvvsize_t___nonzero__, METH_VARARGS, (char *)"gr_vvvsize_t___nonzero__(gr_vvvsize_t self) -> bool"},
	 { (char *)"gr_vvvsize_t___bool__", _wrap_gr_vvvsize_t___bool__, METH_VARARGS, (char *)"gr_vvvsize_t___bool__(gr_vvvsize_t self) -> bool"},
	 { (char *)"gr_vvvsize_t___len__", _wrap_gr_vvvsize_t___len__, METH_VARARGS, (char *)"gr_vvvsize_t___len__(gr_vvvsize_t self) -> std::vector< std::vector< std::vector< size_t > > >::size_type"},
	 { (char *)"gr_vvvsize_t_pop", _wrap_gr_vvvsize_t_pop, METH_VARARGS, (char *)"gr_vvvsize_t_pop(gr_vvvsize_t self) -> std::vector< std::vector< std::vector< size_t > > >::value_type"},
	 { (char *)"gr_vvvsize_t___getslice__", (PyCFunction) _wrap_gr_vvvsize_t___getslice__, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"gr_vvvsize_t___getslice__(gr_vvvsize_t self, std::vector< std::vector< std::vector< size_t > > >::difference_type i, \n"
		"    std::vector< std::vector< std::vector< size_t > > >::difference_type j) -> gr_vvvsize_t\n"
		""},
	 { (char *)"gr_vvvsize_t___setslice__", (PyCFunction) _wrap_gr_vvvsize_t___setslice__, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"gr_vvvsize_t___setslice__(gr_vvvsize_t self, std::vector< std::vector< std::vector< size_t > > >::difference_type i, \n"
		"    std::vector< std::vector< std::vector< size_t > > >::difference_type j, \n"
		"    gr_vvvsize_t v=std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > >())\n"
		""},
	 { (char *)"gr_vvvsize_t___delslice__", (PyCFunction) _wrap_gr_vvvsize_t___delslice__, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"gr_vvvsize_t___delslice__(gr_vvvsize_t self, std::vector< std::vector< std::vector< size_t > > >::difference_type i, \n"
		"    std::vector< std::vector< std::vector< size_t > > >::difference_type j)\n"
		""},
	 { (char *)"gr_vvvsize_t___delitem__", _wrap_gr_vvvsize_t___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(std::vector< std::vector< std::vector< size_t > > >::difference_type i)\n"
		"gr_vvvsize_t___delitem__(gr_vvvsize_t self, PySliceObject * slice)\n"
		""},
	 { (char *)"gr_vvvsize_t___getitem__", _wrap_gr_vvvsize_t___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> gr_vvvsize_t\n"
		"gr_vvvsize_t___getitem__(gr_vvvsize_t self, std::vector< std::vector< std::vector< size_t > > >::difference_type i) -> std::vector< std::vector< std::vector< size_t > > >::value_type const &\n"
		""},
	 { (char *)"gr_vvvsize_t___setitem__", _wrap_gr_vvvsize_t___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, gr_vvvsize_t v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"gr_vvvsize_t___setitem__(gr_vvvsize_t self, std::vector< std::vector< std::vector< size_t > > >::difference_type i, \n"
		"    std::vector< std::vector< std::vector< size_t > > >::value_type const & x)\n"
		""},
	 { (char *)"gr_vvvsize_t_append", (PyCFunction) _wrap_gr_vvvsize_t_append, METH_VARARGS | METH_KEYWORDS, (char *)"gr_vvvsize_t_append(gr_vvvsize_t self, std::vector< std::vector< std::vector< size_t > > >::value_type const & x)"},
	 { (char *)"gr_vvvsize_t_empty", _wrap_gr_vvvsize_t_empty, METH_VARARGS, (char *)"gr_vvvsize_t_empty(gr_vvvsize_t self) -> bool"},
	 { (char *)"gr_vvvsize_t_size", _wrap_gr_vvvsize_t_size, METH_VARARGS, (char *)"gr_vvvsize_t_size(gr_vvvsize_t self) -> std::vector< std::vector< std::vector< size_t > > >::size_type"},
	 { (char *)"gr_vvvsize_t_clear", _wrap_gr_vvvsize_t_clear, METH_VARARGS, (char *)"gr_vvvsize_t_clear(gr_vvvsize_t self)"},
	 { (char *)"gr_vvvsize_t_swap", (PyCFunction) _wrap_gr_vvvsize_t_swap, METH_VARARGS | METH_KEYWORDS, (char *)"gr_vvvsize_t_swap(gr_vvvsize_t self, gr_vvvsize_t v)"},
	 { (char *)"gr_vvvsize_t_get_allocator", _wrap_gr_vvvsize_t_get_allocator, METH_VARARGS, (char *)"gr_vvvsize_t_get_allocator(gr_vvvsize_t self) -> std::vector< std::vector< std::vector< size_t > > >::allocator_type"},
	 { (char *)"gr_vvvsize_t_begin", _wrap_gr_vvvsize_t_begin, METH_VARARGS, (char *)"gr_vvvsize_t_begin(gr_vvvsize_t self) -> std::vector< std::vector< std::vector< size_t > > >::iterator"},
	 { (char *)"gr_vvvsize_t_end", _wrap_gr_vvvsize_t_end, METH_VARARGS, (char *)"gr_vvvsize_t_end(gr_vvvsize_t self) -> std::vector< std::vector< std::vector< size_t > > >::iterator"},
	 { (char *)"gr_vvvsize_t_rbegin", _wrap_gr_vvvsize_t_rbegin, METH_VARARGS, (char *)"gr_vvvsize_t_rbegin(gr_vvvsize_t self) -> std::vector< std::vector< std::vector< size_t > > >::reverse_iterator"},
	 { (char *)"gr_vvvsize_t_rend", _wrap_gr_vvvsize_t_rend, METH_VARARGS, (char *)"gr_vvvsize_t_rend(gr_vvvsize_t self) -> std::vector< std::vector< std::vector< size_t > > >::reverse_iterator"},
	 { (char *)"gr_vvvsize_t_pop_back", _wrap_gr_vvvsize_t_pop_back, METH_VARARGS, (char *)"gr_vvvsize_t_pop_back(gr_vvvsize_t self)"},
	 { (char *)"gr_vvvsize_t_erase", _wrap_gr_vvvsize_t_erase, METH_VARARGS, (char *)"\n"
		"erase(std::vector< std::vector< std::vector< size_t > > >::iterator pos) -> std::vector< std::vector< std::vector< size_t > > >::iterator\n"
		"gr_vvvsize_t_erase(gr_vvvsize_t self, std::vector< std::vector< std::vector< size_t > > >::iterator first, \n"
		"    std::vector< std::vector< std::vector< size_t > > >::iterator last) -> std::vector< std::vector< std::vector< size_t > > >::iterator\n"
		""},
	 { (char *)"new_gr_vvvsize_t", _wrap_new_gr_vvvsize_t, METH_VARARGS, (char *)"\n"
		"gr_vvvsize_t()\n"
		"gr_vvvsize_t(gr_vvvsize_t arg2)\n"
		"gr_vvvsize_t(std::vector< std::vector< std::vector< size_t > > >::size_type size)\n"
		"new_gr_vvvsize_t(std::vector< std::vector< std::vector< size_t > > >::size_type size, std::vector< std::vector< std::vector< size_t > > >::value_type const & value) -> gr_vvvsize_t\n"
		""},
	 { (char *)"gr_vvvsize_t_push_back", (PyCFunction) _wrap_gr_vvvsize_t_push_back, METH_VARARGS | METH_KEYWORDS, (char *)"gr_vvvsize_t_push_back(gr_vvvsize_t self, std::vector< std::vector< std::vector< size_t > > >::value_type const & x)"},
	 { (char *)"gr_vvvsize_t_front", _wrap_gr_vvvsize_t_front, METH_VARARGS, (char *)"gr_vvvsize_t_front(gr_vvvsize_t self) -> std::vector< std::vector< std::vector< size_t > > >::value_type const &"},
	 { (char *)"gr_vvvsize_t_back", _wrap_gr_vvvsize_t_back, METH_VARARGS, (char *)"gr_vvvsize_t_back(gr_vvvsize_t self) -> std::vector< std::vector< std::vector< size_t > > >::value_type const &"},
	 { (char *)"gr_vvvsize_t_assign", (PyCFunction) _wrap_gr_vvvsize_t_assign, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"gr_vvvsize_t_assign(gr_vvvsize_t self, std::vector< std::vector< std::vector< size_t > > >::size_type n, \n"
		"    std::vector< std::vector< std::vector< size_t > > >::value_type const & x)\n"
		""},
	 { (char *)"gr_vvvsize_t_resize", _wrap_gr_vvvsize_t_resize, METH_VARARGS, (char *)"\n"
		"resize(std::vector< std::vector< std::vector< size_t > > >::size_type new_size)\n"
		"gr_vvvsize_t_resize(gr_vvvsize_t self, std::vector< std::vector< std::vector< size_t > > >::size_type new_size, \n"
		"    std::vector< std::vector< std::vector< size_t > > >::value_type const & x)\n"
		""},
	 { (char *)"gr_vvvsize_t_insert", _wrap_gr_vvvsize_t_insert, METH_VARARGS, (char *)"\n"
		"insert(std::vector< std::vector< std::vector< size_t > > >::iterator pos, std::vector< std::vector< std::vector< size_t > > >::value_type const & x) -> std::vector< std::vector< std::vector< size_t > > >::iterator\n"
		"gr_vvvsize_t_insert(gr_vvvsize_t self, std::vector< std::vector< std::vector< size_t > > >::iterator pos, \n"
		"    std::vector< std::vector< std::vector< size_t > > >::size_type n, std::vector< std::vector< std::vector< size_t > > >::value_type const & x)\n"
		""},
	 { (char *)"gr_vvvsize_t_reserve", (PyCFunction) _wrap_gr_vvvsize_t_reserve, METH_VARARGS | METH_KEYWORDS, (char *)"gr_vvvsize_t_reserve(gr_vvvsize_t self, std::vector< std::vector< std::vector< size_t > > >::size_type n)"},
	 { (char *)"gr_vvvsize_t_capacity", _wrap_gr_vvvsize_t_capacity, METH_VARARGS, (char *)"gr_vvvsize_t_capacity(gr_vvvsize_t self) -> std::vector< std::vector< std::vector< size_t > > >::size_type"},
	 { (char *)"delete_gr_vvvsize_t", _wrap_delete_gr_vvvsize_t, METH_VARARGS, (char *)"delete_gr_vvvsize_t(gr_vvvsize_t self)"},
	 { (char *)"gr_vvvsize_t_swigregister", gr_vvvsize_t_swigregister, METH_VARARGS, NULL},
	 { (char *)"gr_vector_complexf_iterator", _wrap_gr_vector_complexf_iterator, METH_VARARGS, (char *)"gr_vector_complexf_iterator(gr_vector_complexf self) -> SwigPyIterator"},
	 { (char *)"gr_vector_complexf___nonzero__", _wrap_gr_vector_complexf___nonzero__, METH_VARARGS, (char *)"gr_vector_complexf___nonzero__(gr_vector_complexf self) -> bool"},
	 { (char *)"gr_vector_complexf___bool__", _wrap_gr_vector_complexf___bool__, METH_VARARGS, (char *)"gr_vector_complexf___bool__(gr_vector_complexf self) -> bool"},
	 { (char *)"gr_vector_complexf___len__", _wrap_gr_vector_complexf___len__, METH_VARARGS, (char *)"gr_vector_complexf___len__(gr_vector_complexf self) -> std::vector< std::complex< float > >::size_type"},
	 { (char *)"gr_vector_complexf_pop", _wrap_gr_vector_complexf_pop, METH_VARARGS, (char *)"gr_vector_complexf_pop(gr_vector_complexf self) -> std::vector< std::complex< float > >::value_type"},
	 { (char *)"gr_vector_complexf___getslice__", (PyCFunction) _wrap_gr_vector_complexf___getslice__, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"gr_vector_complexf___getslice__(gr_vector_complexf self, std::vector< std::complex< float > >::difference_type i, \n"
		"    std::vector< std::complex< float > >::difference_type j) -> std::vector< std::complex< float >,std::allocator< std::complex< float > > > *\n"
		""},
	 { (char *)"gr_vector_complexf___setslice__", (PyCFunction) _wrap_gr_vector_complexf___setslice__, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"gr_vector_complexf___setslice__(gr_vector_complexf self, std::vector< std::complex< float > >::difference_type i, \n"
		"    std::vector< std::complex< float > >::difference_type j, std::vector< std::complex< float >,std::allocator< std::complex< float > > > const & v=std::vector< std::complex< float >,std::allocator< std::complex< float > > >())\n"
		""},
	 { (char *)"gr_vector_complexf___delslice__", (PyCFunction) _wrap_gr_vector_complexf___delslice__, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"gr_vector_complexf___delslice__(gr_vector_complexf self, std::vector< std::complex< float > >::difference_type i, \n"
		"    std::vector< std::complex< float > >::difference_type j)\n"
		""},
	 { (char *)"gr_vector_complexf___delitem__", _wrap_gr_vector_complexf___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(std::vector< std::complex< float > >::difference_type i)\n"
		"gr_vector_complexf___delitem__(gr_vector_complexf self, PySliceObject * slice)\n"
		""},
	 { (char *)"gr_vector_complexf___getitem__", _wrap_gr_vector_complexf___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> std::vector< std::complex< float >,std::allocator< std::complex< float > > >\n"
		"gr_vector_complexf___getitem__(gr_vector_complexf self, std::vector< std::complex< float > >::difference_type i) -> std::vector< std::complex< float > >::value_type const &\n"
		""},
	 { (char *)"gr_vector_complexf___setitem__", _wrap_gr_vector_complexf___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, std::vector< std::complex< float >,std::allocator< std::complex< float > > > const & v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"gr_vector_complexf___setitem__(gr_vector_complexf self, std::vector< std::complex< float > >::difference_type i, \n"
		"    std::vector< std::complex< float > >::value_type const & x)\n"
		""},
	 { (char *)"gr_vector_complexf_append", (PyCFunction) _wrap_gr_vector_complexf_append, METH_VARARGS | METH_KEYWORDS, (char *)"gr_vector_complexf_append(gr_vector_complexf self, std::vector< std::complex< float > >::value_type const & x)"},
	 { (char *)"gr_vector_complexf_empty", _wrap_gr_vector_complexf_empty, METH_VARARGS, (char *)"gr_vector_complexf_empty(gr_vector_complexf self) -> bool"},
	 { (char *)"gr_vector_complexf_size", _wrap_gr_vector_complexf_size, METH_VARARGS, (char *)"gr_vector_complexf_size(gr_vector_complexf self) -> std::vector< std::complex< float > >::size_type"},
	 { (char *)"gr_vector_complexf_clear", _wrap_gr_vector_complexf_clear, METH_VARARGS, (char *)"gr_vector_complexf_clear(gr_vector_complexf self)"},
	 { (char *)"gr_vector_complexf_swap", (PyCFunction) _wrap_gr_vector_complexf_swap, METH_VARARGS | METH_KEYWORDS, (char *)"gr_vector_complexf_swap(gr_vector_complexf self, gr_vector_complexf v)"},
	 { (char *)"gr_vector_complexf_get_allocator", _wrap_gr_vector_complexf_get_allocator, METH_VARARGS, (char *)"gr_vector_complexf_get_allocator(gr_vector_complexf self) -> std::vector< std::complex< float > >::allocator_type"},
	 { (char *)"gr_vector_complexf_begin", _wrap_gr_vector_complexf_begin, METH_VARARGS, (char *)"gr_vector_complexf_begin(gr_vector_complexf self) -> std::vector< std::complex< float > >::iterator"},
	 { (char *)"gr_vector_complexf_end", _wrap_gr_vector_complexf_end, METH_VARARGS, (char *)"gr_vector_complexf_end(gr_vector_complexf self) -> std::vector< std::complex< float > >::iterator"},
	 { (char *)"gr_vector_complexf_rbegin", _wrap_gr_vector_complexf_rbegin, METH_VARARGS, (char *)"gr_vector_complexf_rbegin(gr_vector_complexf self) -> std::vector< std::complex< float > >::reverse_iterator"},
	 { (char *)"gr_vector_complexf_rend", _wrap_gr_vector_complexf_rend, METH_VARARGS, (char *)"gr_vector_complexf_rend(gr_vector_complexf self) -> std::vector< std::complex< float > >::reverse_iterator"},
	 { (char *)"gr_vector_complexf_pop_back", _wrap_gr_vector_complexf_pop_back, METH_VARARGS, (char *)"gr_vector_complexf_pop_back(gr_vector_complexf self)"},
	 { (char *)"gr_vector_complexf_erase", _wrap_gr_vector_complexf_erase, METH_VARARGS, (char *)"\n"
		"erase(std::vector< std::complex< float > >::iterator pos) -> std::vector< std::complex< float > >::iterator\n"
		"gr_vector_complexf_erase(gr_vector_complexf self, std::vector< std::complex< float > >::iterator first, std::vector< std::complex< float > >::iterator last) -> std::vector< std::complex< float > >::iterator\n"
		""},
	 { (char *)"new_gr_vector_complexf", _wrap_new_gr_vector_complexf, METH_VARARGS, (char *)"\n"
		"gr_vector_complexf()\n"
		"gr_vector_complexf(gr_vector_complexf arg2)\n"
		"gr_vector_complexf(std::vector< std::complex< float > >::size_type size)\n"
		"new_gr_vector_complexf(std::vector< std::complex< float > >::size_type size, std::vector< std::complex< float > >::value_type const & value) -> gr_vector_complexf\n"
		""},
	 { (char *)"gr_vector_complexf_push_back", (PyCFunction) _wrap_gr_vector_complexf_push_back, METH_VARARGS | METH_KEYWORDS, (char *)"gr_vector_complexf_push_back(gr_vector_complexf self, std::vector< std::complex< float > >::value_type const & x)"},
	 { (char *)"gr_vector_complexf_front", _wrap_gr_vector_complexf_front, METH_VARARGS, (char *)"gr_vector_complexf_front(gr_vector_complexf self) -> std::vector< std::complex< float > >::value_type const &"},
	 { (char *)"gr_vector_complexf_back", _wrap_gr_vector_complexf_back, METH_VARARGS, (char *)"gr_vector_complexf_back(gr_vector_complexf self) -> std::vector< std::complex< float > >::value_type const &"},
	 { (char *)"gr_vector_complexf_assign", (PyCFunction) _wrap_gr_vector_complexf_assign, METH_VARARGS | METH_KEYWORDS, (char *)"gr_vector_complexf_assign(gr_vector_complexf self, std::vector< std::complex< float > >::size_type n, std::vector< std::complex< float > >::value_type const & x)"},
	 { (char *)"gr_vector_complexf_resize", _wrap_gr_vector_complexf_resize, METH_VARARGS, (char *)"\n"
		"resize(std::vector< std::complex< float > >::size_type new_size)\n"
		"gr_vector_complexf_resize(gr_vector_complexf self, std::vector< std::complex< float > >::size_type new_size, \n"
		"    std::vector< std::complex< float > >::value_type const & x)\n"
		""},
	 { (char *)"gr_vector_complexf_insert", _wrap_gr_vector_complexf_insert, METH_VARARGS, (char *)"\n"
		"insert(std::vector< std::complex< float > >::iterator pos, std::vector< std::complex< float > >::value_type const & x) -> std::vector< std::complex< float > >::iterator\n"
		"gr_vector_complexf_insert(gr_vector_complexf self, std::vector< std::complex< float > >::iterator pos, std::vector< std::complex< float > >::size_type n, \n"
		"    std::vector< std::complex< float > >::value_type const & x)\n"
		""},
	 { (char *)"gr_vector_complexf_reserve", (PyCFunction) _wrap_gr_vector_complexf_reserve, METH_VARARGS | METH_KEYWORDS, (char *)"gr_vector_complexf_reserve(gr_vector_complexf self, std::vector< std::complex< float > >::size_type n)"},
	 { (char *)"gr_vector_complexf_capacity", _wrap_gr_vector_complexf_capacity, METH_VARARGS, (char *)"gr_vector_complexf_capacity(gr_vector_complexf self) -> std::vector< std::complex< float > >::size_type"},
	 { (char *)"delete_gr_vector_complexf", _wrap_delete_gr_vector_complexf, METH_VARARGS, (char *)"delete_gr_vector_complexf(gr_vector_complexf self)"},
	 { (char *)"gr_vector_complexf_swigregister", gr_vector_complexf_swigregister, METH_VARARGS, NULL},
	 { (char *)"gr_vector_complexd_iterator", _wrap_gr_vector_complexd_iterator, METH_VARARGS, (char *)"gr_vector_complexd_iterator(gr_vector_complexd self) -> SwigPyIterator"},
	 { (char *)"gr_vector_complexd___nonzero__", _wrap_gr_vector_complexd___nonzero__, METH_VARARGS, (char *)"gr_vector_complexd___nonzero__(gr_vector_complexd self) -> bool"},
	 { (char *)"gr_vector_complexd___bool__", _wrap_gr_vector_complexd___bool__, METH_VARARGS, (char *)"gr_vector_complexd___bool__(gr_vector_complexd self) -> bool"},
	 { (char *)"gr_vector_complexd___len__", _wrap_gr_vector_complexd___len__, METH_VARARGS, (char *)"gr_vector_complexd___len__(gr_vector_complexd self) -> std::vector< std::complex< double > >::size_type"},
	 { (char *)"gr_vector_complexd_pop", _wrap_gr_vector_complexd_pop, METH_VARARGS, (char *)"gr_vector_complexd_pop(gr_vector_complexd self) -> std::vector< std::complex< double > >::value_type"},
	 { (char *)"gr_vector_complexd___getslice__", (PyCFunction) _wrap_gr_vector_complexd___getslice__, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"gr_vector_complexd___getslice__(gr_vector_complexd self, std::vector< std::complex< double > >::difference_type i, \n"
		"    std::vector< std::complex< double > >::difference_type j) -> gr_vector_complexd\n"
		""},
	 { (char *)"gr_vector_complexd___setslice__", (PyCFunction) _wrap_gr_vector_complexd___setslice__, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"gr_vector_complexd___setslice__(gr_vector_complexd self, std::vector< std::complex< double > >::difference_type i, \n"
		"    std::vector< std::complex< double > >::difference_type j, gr_vector_complexd v=std::vector< std::complex< double >,std::allocator< std::complex< double > > >())\n"
		""},
	 { (char *)"gr_vector_complexd___delslice__", (PyCFunction) _wrap_gr_vector_complexd___delslice__, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"gr_vector_complexd___delslice__(gr_vector_complexd self, std::vector< std::complex< double > >::difference_type i, \n"
		"    std::vector< std::complex< double > >::difference_type j)\n"
		""},
	 { (char *)"gr_vector_complexd___delitem__", _wrap_gr_vector_complexd___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(std::vector< std::complex< double > >::difference_type i)\n"
		"gr_vector_complexd___delitem__(gr_vector_complexd self, PySliceObject * slice)\n"
		""},
	 { (char *)"gr_vector_complexd___getitem__", _wrap_gr_vector_complexd___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> gr_vector_complexd\n"
		"gr_vector_complexd___getitem__(gr_vector_complexd self, std::vector< std::complex< double > >::difference_type i) -> std::vector< std::complex< double > >::value_type const &\n"
		""},
	 { (char *)"gr_vector_complexd___setitem__", _wrap_gr_vector_complexd___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, gr_vector_complexd v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"gr_vector_complexd___setitem__(gr_vector_complexd self, std::vector< std::complex< double > >::difference_type i, \n"
		"    std::vector< std::complex< double > >::value_type const & x)\n"
		""},
	 { (char *)"gr_vector_complexd_append", (PyCFunction) _wrap_gr_vector_complexd_append, METH_VARARGS | METH_KEYWORDS, (char *)"gr_vector_complexd_append(gr_vector_complexd self, std::vector< std::complex< double > >::value_type const & x)"},
	 { (char *)"gr_vector_complexd_empty", _wrap_gr_vector_complexd_empty, METH_VARARGS, (char *)"gr_vector_complexd_empty(gr_vector_complexd self) -> bool"},
	 { (char *)"gr_vector_complexd_size", _wrap_gr_vector_complexd_size, METH_VARARGS, (char *)"gr_vector_complexd_size(gr_vector_complexd self) -> std::vector< std::complex< double > >::size_type"},
	 { (char *)"gr_vector_complexd_clear", _wrap_gr_vector_complexd_clear, METH_VARARGS, (char *)"gr_vector_complexd_clear(gr_vector_complexd self)"},
	 { (char *)"gr_vector_complexd_swap", (PyCFunction) _wrap_gr_vector_complexd_swap, METH_VARARGS | METH_KEYWORDS, (char *)"gr_vector_complexd_swap(gr_vector_complexd self, gr_vector_complexd v)"},
	 { (char *)"gr_vector_complexd_get_allocator", _wrap_gr_vector_complexd_get_allocator, METH_VARARGS, (char *)"gr_vector_complexd_get_allocator(gr_vector_complexd self) -> std::vector< std::complex< double > >::allocator_type"},
	 { (char *)"gr_vector_complexd_begin", _wrap_gr_vector_complexd_begin, METH_VARARGS, (char *)"gr_vector_complexd_begin(gr_vector_complexd self) -> std::vector< std::complex< double > >::iterator"},
	 { (char *)"gr_vector_complexd_end", _wrap_gr_vector_complexd_end, METH_VARARGS, (char *)"gr_vector_complexd_end(gr_vector_complexd self) -> std::vector< std::complex< double > >::iterator"},
	 { (char *)"gr_vector_complexd_rbegin", _wrap_gr_vector_complexd_rbegin, METH_VARARGS, (char *)"gr_vector_complexd_rbegin(gr_vector_complexd self) -> std::vector< std::complex< double > >::reverse_iterator"},
	 { (char *)"gr_vector_complexd_rend", _wrap_gr_vector_complexd_rend, METH_VARARGS, (char *)"gr_vector_complexd_rend(gr_vector_complexd self) -> std::vector< std::complex< double > >::reverse_iterator"},
	 { (char *)"gr_vector_complexd_pop_back", _wrap_gr_vector_complexd_pop_back, METH_VARARGS, (char *)"gr_vector_complexd_pop_back(gr_vector_complexd self)"},
	 { (char *)"gr_vector_complexd_erase", _wrap_gr_vector_complexd_erase, METH_VARARGS, (char *)"\n"
		"erase(std::vector< std::complex< double > >::iterator pos) -> std::vector< std::complex< double > >::iterator\n"
		"gr_vector_complexd_erase(gr_vector_complexd self, std::vector< std::complex< double > >::iterator first, std::vector< std::complex< double > >::iterator last) -> std::vector< std::complex< double > >::iterator\n"
		""},
	 { (char *)"new_gr_vector_complexd", _wrap_new_gr_vector_complexd, METH_VARARGS, (char *)"\n"
		"gr_vector_complexd()\n"
		"gr_vector_complexd(gr_vector_complexd arg2)\n"
		"gr_vector_complexd(std::vector< std::complex< double > >::size_type size)\n"
		"new_gr_vector_complexd(std::vector< std::complex< double > >::size_type size, std::vector< std::complex< double > >::value_type const & value) -> gr_vector_complexd\n"
		""},
	 { (char *)"gr_vector_complexd_push_back", (PyCFunction) _wrap_gr_vector_complexd_push_back, METH_VARARGS | METH_KEYWORDS, (char *)"gr_vector_complexd_push_back(gr_vector_complexd self, std::vector< std::complex< double > >::value_type const & x)"},
	 { (char *)"gr_vector_complexd_front", _wrap_gr_vector_complexd_front, METH_VARARGS, (char *)"gr_vector_complexd_front(gr_vector_complexd self) -> std::vector< std::complex< double > >::value_type const &"},
	 { (char *)"gr_vector_complexd_back", _wrap_gr_vector_complexd_back, METH_VARARGS, (char *)"gr_vector_complexd_back(gr_vector_complexd self) -> std::vector< std::complex< double > >::value_type const &"},
	 { (char *)"gr_vector_complexd_assign", (PyCFunction) _wrap_gr_vector_complexd_assign, METH_VARARGS | METH_KEYWORDS, (char *)"gr_vector_complexd_assign(gr_vector_complexd self, std::vector< std::complex< double > >::size_type n, std::vector< std::complex< double > >::value_type const & x)"},
	 { (char *)"gr_vector_complexd_resize", _wrap_gr_vector_complexd_resize, METH_VARARGS, (char *)"\n"
		"resize(std::vector< std::complex< double > >::size_type new_size)\n"
		"gr_vector_complexd_resize(gr_vector_complexd self, std::vector< std::complex< double > >::size_type new_size, \n"
		"    std::vector< std::complex< double > >::value_type const & x)\n"
		""},
	 { (char *)"gr_vector_complexd_insert", _wrap_gr_vector_complexd_insert, METH_VARARGS, (char *)"\n"
		"insert(std::vector< std::complex< double > >::iterator pos, std::vector< std::complex< double > >::value_type const & x) -> std::vector< std::complex< double > >::iterator\n"
		"gr_vector_complexd_insert(gr_vector_complexd self, std::vector< std::complex< double > >::iterator pos, std::vector< std::complex< double > >::size_type n, \n"
		"    std::vector< std::complex< double > >::value_type const & x)\n"
		""},
	 { (char *)"gr_vector_complexd_reserve", (PyCFunction) _wrap_gr_vector_complexd_reserve, METH_VARARGS | METH_KEYWORDS, (char *)"gr_vector_complexd_reserve(gr_vector_complexd self, std::vector< std::complex< double > >::size_type n)"},
	 { (char *)"gr_vector_complexd_capacity", _wrap_gr_vector_complexd_capacity, METH_VARARGS, (char *)"gr_vector_complexd_capacity(gr_vector_complexd self) -> std::vector< std::complex< double > >::size_type"},
	 { (char *)"delete_gr_vector_complexd", _wrap_delete_gr_vector_complexd, METH_VARARGS, (char *)"delete_gr_vector_complexd(gr_vector_complexd self)"},
	 { (char *)"gr_vector_complexd_swigregister", gr_vector_complexd_swigregister, METH_VARARGS, NULL},
	 { (char *)"gr_vector_vector_complexf_iterator", _wrap_gr_vector_vector_complexf_iterator, METH_VARARGS, (char *)"gr_vector_vector_complexf_iterator(gr_vector_vector_complexf self) -> SwigPyIterator"},
	 { (char *)"gr_vector_vector_complexf___nonzero__", _wrap_gr_vector_vector_complexf___nonzero__, METH_VARARGS, (char *)"gr_vector_vector_complexf___nonzero__(gr_vector_vector_complexf self) -> bool"},
	 { (char *)"gr_vector_vector_complexf___bool__", _wrap_gr_vector_vector_complexf___bool__, METH_VARARGS, (char *)"gr_vector_vector_complexf___bool__(gr_vector_vector_complexf self) -> bool"},
	 { (char *)"gr_vector_vector_complexf___len__", _wrap_gr_vector_vector_complexf___len__, METH_VARARGS, (char *)"gr_vector_vector_complexf___len__(gr_vector_vector_complexf self) -> std::vector< std::vector< std::complex< float > > >::size_type"},
	 { (char *)"gr_vector_vector_complexf_pop", _wrap_gr_vector_vector_complexf_pop, METH_VARARGS, (char *)"gr_vector_vector_complexf_pop(gr_vector_vector_complexf self) -> std::vector< std::vector< std::complex< float > > >::value_type"},
	 { (char *)"gr_vector_vector_complexf___getslice__", (PyCFunction) _wrap_gr_vector_vector_complexf___getslice__, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"gr_vector_vector_complexf___getslice__(gr_vector_vector_complexf self, std::vector< std::vector< std::complex< float > > >::difference_type i, \n"
		"    std::vector< std::vector< std::complex< float > > >::difference_type j) -> gr_vector_vector_complexf\n"
		""},
	 { (char *)"gr_vector_vector_complexf___setslice__", (PyCFunction) _wrap_gr_vector_vector_complexf___setslice__, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"gr_vector_vector_complexf___setslice__(gr_vector_vector_complexf self, std::vector< std::vector< std::complex< float > > >::difference_type i, \n"
		"    std::vector< std::vector< std::complex< float > > >::difference_type j, \n"
		"    gr_vector_vector_complexf v=std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > >())\n"
		""},
	 { (char *)"gr_vector_vector_complexf___delslice__", (PyCFunction) _wrap_gr_vector_vector_complexf___delslice__, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"gr_vector_vector_complexf___delslice__(gr_vector_vector_complexf self, std::vector< std::vector< std::complex< float > > >::difference_type i, \n"
		"    std::vector< std::vector< std::complex< float > > >::difference_type j)\n"
		""},
	 { (char *)"gr_vector_vector_complexf___delitem__", _wrap_gr_vector_vector_complexf___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(std::vector< std::vector< std::complex< float > > >::difference_type i)\n"
		"gr_vector_vector_complexf___delitem__(gr_vector_vector_complexf self, PySliceObject * slice)\n"
		""},
	 { (char *)"gr_vector_vector_complexf___getitem__", _wrap_gr_vector_vector_complexf___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> gr_vector_vector_complexf\n"
		"gr_vector_vector_complexf___getitem__(gr_vector_vector_complexf self, std::vector< std::vector< std::complex< float > > >::difference_type i) -> std::vector< std::vector< std::complex< float > > >::value_type const &\n"
		""},
	 { (char *)"gr_vector_vector_complexf___setitem__", _wrap_gr_vector_vector_complexf___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, gr_vector_vector_complexf v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"gr_vector_vector_complexf___setitem__(gr_vector_vector_complexf self, std::vector< std::vector< std::complex< float > > >::difference_type i, \n"
		"    std::vector< std::vector< std::complex< float > > >::value_type const & x)\n"
		""},
	 { (char *)"gr_vector_vector_complexf_append", (PyCFunction) _wrap_gr_vector_vector_complexf_append, METH_VARARGS | METH_KEYWORDS, (char *)"gr_vector_vector_complexf_append(gr_vector_vector_complexf self, std::vector< std::vector< std::complex< float > > >::value_type const & x)"},
	 { (char *)"gr_vector_vector_complexf_empty", _wrap_gr_vector_vector_complexf_empty, METH_VARARGS, (char *)"gr_vector_vector_complexf_empty(gr_vector_vector_complexf self) -> bool"},
	 { (char *)"gr_vector_vector_complexf_size", _wrap_gr_vector_vector_complexf_size, METH_VARARGS, (char *)"gr_vector_vector_complexf_size(gr_vector_vector_complexf self) -> std::vector< std::vector< std::complex< float > > >::size_type"},
	 { (char *)"gr_vector_vector_complexf_clear", _wrap_gr_vector_vector_complexf_clear, METH_VARARGS, (char *)"gr_vector_vector_complexf_clear(gr_vector_vector_complexf self)"},
	 { (char *)"gr_vector_vector_complexf_swap", (PyCFunction) _wrap_gr_vector_vector_complexf_swap, METH_VARARGS | METH_KEYWORDS, (char *)"gr_vector_vector_complexf_swap(gr_vector_vector_complexf self, gr_vector_vector_complexf v)"},
	 { (char *)"gr_vector_vector_complexf_get_allocator", _wrap_gr_vector_vector_complexf_get_allocator, METH_VARARGS, (char *)"gr_vector_vector_complexf_get_allocator(gr_vector_vector_complexf self) -> std::vector< std::vector< std::complex< float > > >::allocator_type"},
	 { (char *)"gr_vector_vector_complexf_begin", _wrap_gr_vector_vector_complexf_begin, METH_VARARGS, (char *)"gr_vector_vector_complexf_begin(gr_vector_vector_complexf self) -> std::vector< std::vector< std::complex< float > > >::iterator"},
	 { (char *)"gr_vector_vector_complexf_end", _wrap_gr_vector_vector_complexf_end, METH_VARARGS, (char *)"gr_vector_vector_complexf_end(gr_vector_vector_complexf self) -> std::vector< std::vector< std::complex< float > > >::iterator"},
	 { (char *)"gr_vector_vector_complexf_rbegin", _wrap_gr_vector_vector_complexf_rbegin, METH_VARARGS, (char *)"gr_vector_vector_complexf_rbegin(gr_vector_vector_complexf self) -> std::vector< std::vector< std::complex< float > > >::reverse_iterator"},
	 { (char *)"gr_vector_vector_complexf_rend", _wrap_gr_vector_vector_complexf_rend, METH_VARARGS, (char *)"gr_vector_vector_complexf_rend(gr_vector_vector_complexf self) -> std::vector< std::vector< std::complex< float > > >::reverse_iterator"},
	 { (char *)"gr_vector_vector_complexf_pop_back", _wrap_gr_vector_vector_complexf_pop_back, METH_VARARGS, (char *)"gr_vector_vector_complexf_pop_back(gr_vector_vector_complexf self)"},
	 { (char *)"gr_vector_vector_complexf_erase", _wrap_gr_vector_vector_complexf_erase, METH_VARARGS, (char *)"\n"
		"erase(std::vector< std::vector< std::complex< float > > >::iterator pos) -> std::vector< std::vector< std::complex< float > > >::iterator\n"
		"gr_vector_vector_complexf_erase(gr_vector_vector_complexf self, std::vector< std::vector< std::complex< float > > >::iterator first, \n"
		"    std::vector< std::vector< std::complex< float > > >::iterator last) -> std::vector< std::vector< std::complex< float > > >::iterator\n"
		""},
	 { (char *)"new_gr_vector_vector_complexf", _wrap_new_gr_vector_vector_complexf, METH_VARARGS, (char *)"\n"
		"gr_vector_vector_complexf()\n"
		"gr_vector_vector_complexf(gr_vector_vector_complexf arg2)\n"
		"gr_vector_vector_complexf(std::vector< std::vector< std::complex< float > > >::size_type size)\n"
		"new_gr_vector_vector_complexf(std::vector< std::vector< std::complex< float > > >::size_type size, std::vector< std::vector< std::complex< float > > >::value_type const & value) -> gr_vector_vector_complexf\n"
		""},
	 { (char *)"gr_vector_vector_complexf_push_back", (PyCFunction) _wrap_gr_vector_vector_complexf_push_back, METH_VARARGS | METH_KEYWORDS, (char *)"gr_vector_vector_complexf_push_back(gr_vector_vector_complexf self, std::vector< std::vector< std::complex< float > > >::value_type const & x)"},
	 { (char *)"gr_vector_vector_complexf_front", _wrap_gr_vector_vector_complexf_front, METH_VARARGS, (char *)"gr_vector_vector_complexf_front(gr_vector_vector_complexf self) -> std::vector< std::vector< std::complex< float > > >::value_type const &"},
	 { (char *)"gr_vector_vector_complexf_back", _wrap_gr_vector_vector_complexf_back, METH_VARARGS, (char *)"gr_vector_vector_complexf_back(gr_vector_vector_complexf self) -> std::vector< std::vector< std::complex< float > > >::value_type const &"},
	 { (char *)"gr_vector_vector_complexf_assign", (PyCFunction) _wrap_gr_vector_vector_complexf_assign, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"gr_vector_vector_complexf_assign(gr_vector_vector_complexf self, std::vector< std::vector< std::complex< float > > >::size_type n, \n"
		"    std::vector< std::vector< std::complex< float > > >::value_type const & x)\n"
		""},
	 { (char *)"gr_vector_vector_complexf_resize", _wrap_gr_vector_vector_complexf_resize, METH_VARARGS, (char *)"\n"
		"resize(std::vector< std::vector< std::complex< float > > >::size_type new_size)\n"
		"gr_vector_vector_complexf_resize(gr_vector_vector_complexf self, std::vector< std::vector< std::complex< float > > >::size_type new_size, \n"
		"    std::vector< std::vector< std::complex< float > > >::value_type const & x)\n"
		""},
	 { (char *)"gr_vector_vector_complexf_insert", _wrap_gr_vector_vector_complexf_insert, METH_VARARGS, (char *)"\n"
		"insert(std::vector< std::vector< std::complex< float > > >::iterator pos, std::vector< std::vector< std::complex< float > > >::value_type const & x) -> std::vector< std::vector< std::complex< float > > >::iterator\n"
		"gr_vector_vector_complexf_insert(gr_vector_vector_complexf self, std::vector< std::vector< std::complex< float > > >::iterator pos, \n"
		"    std::vector< std::vector< std::complex< float > > >::size_type n, \n"
		"    std::vector< std::vector< std::complex< float > > >::value_type const & x)\n"
		""},
	 { (char *)"gr_vector_vector_complexf_reserve", (PyCFunction) _wrap_gr_vector_vector_complexf_reserve, METH_VARARGS | METH_KEYWORDS, (char *)"gr_vector_vector_complexf_reserve(gr_vector_vector_complexf self, std::vector< std::vector< std::complex< float > > >::size_type n)"},
	 { (char *)"gr_vector_vector_complexf_capacity", _wrap_gr_vector_vector_complexf_capacity, METH_VARARGS, (char *)"gr_vector_vector_complexf_capacity(gr_vector_vector_complexf self) -> std::vector< std::vector< std::complex< float > > >::size_type"},
	 { (char *)"delete_gr_vector_vector_complexf", _wrap_delete_gr_vector_vector_complexf, METH_VARARGS, (char *)"delete_gr_vector_vector_complexf(gr_vector_vector_complexf self)"},
	 { (char *)"gr_vector_vector_complexf_swigregister", gr_vector_vector_complexf_swigregister, METH_VARARGS, NULL},
	 { (char *)"gr_vector_vector_complexd_iterator", _wrap_gr_vector_vector_complexd_iterator, METH_VARARGS, (char *)"gr_vector_vector_complexd_iterator(gr_vector_vector_complexd self) -> SwigPyIterator"},
	 { (char *)"gr_vector_vector_complexd___nonzero__", _wrap_gr_vector_vector_complexd___nonzero__, METH_VARARGS, (char *)"gr_vector_vector_complexd___nonzero__(gr_vector_vector_complexd self) -> bool"},
	 { (char *)"gr_vector_vector_complexd___bool__", _wrap_gr_vector_vector_complexd___bool__, METH_VARARGS, (char *)"gr_vector_vector_complexd___bool__(gr_vector_vector_complexd self) -> bool"},
	 { (char *)"gr_vector_vector_complexd___len__", _wrap_gr_vector_vector_complexd___len__, METH_VARARGS, (char *)"gr_vector_vector_complexd___len__(gr_vector_vector_complexd self) -> std::vector< std::vector< std::complex< double > > >::size_type"},
	 { (char *)"gr_vector_vector_complexd_pop", _wrap_gr_vector_vector_complexd_pop, METH_VARARGS, (char *)"gr_vector_vector_complexd_pop(gr_vector_vector_complexd self) -> gr_vector_complexd"},
	 { (char *)"gr_vector_vector_complexd___getslice__", (PyCFunction) _wrap_gr_vector_vector_complexd___getslice__, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"gr_vector_vector_complexd___getslice__(gr_vector_vector_complexd self, std::vector< std::vector< std::complex< double > > >::difference_type i, \n"
		"    std::vector< std::vector< std::complex< double > > >::difference_type j) -> gr_vector_vector_complexd\n"
		""},
	 { (char *)"gr_vector_vector_complexd___setslice__", (PyCFunction) _wrap_gr_vector_vector_complexd___setslice__, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"gr_vector_vector_complexd___setslice__(gr_vector_vector_complexd self, std::vector< std::vector< std::complex< double > > >::difference_type i, \n"
		"    std::vector< std::vector< std::complex< double > > >::difference_type j, \n"
		"    gr_vector_vector_complexd v=std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > >())\n"
		""},
	 { (char *)"gr_vector_vector_complexd___delslice__", (PyCFunction) _wrap_gr_vector_vector_complexd___delslice__, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"gr_vector_vector_complexd___delslice__(gr_vector_vector_complexd self, std::vector< std::vector< std::complex< double > > >::difference_type i, \n"
		"    std::vector< std::vector< std::complex< double > > >::difference_type j)\n"
		""},
	 { (char *)"gr_vector_vector_complexd___delitem__", _wrap_gr_vector_vector_complexd___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(std::vector< std::vector< std::complex< double > > >::difference_type i)\n"
		"gr_vector_vector_complexd___delitem__(gr_vector_vector_complexd self, PySliceObject * slice)\n"
		""},
	 { (char *)"gr_vector_vector_complexd___getitem__", _wrap_gr_vector_vector_complexd___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> gr_vector_vector_complexd\n"
		"gr_vector_vector_complexd___getitem__(gr_vector_vector_complexd self, std::vector< std::vector< std::complex< double > > >::difference_type i) -> gr_vector_complexd\n"
		""},
	 { (char *)"gr_vector_vector_complexd___setitem__", _wrap_gr_vector_vector_complexd___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, gr_vector_vector_complexd v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"gr_vector_vector_complexd___setitem__(gr_vector_vector_complexd self, std::vector< std::vector< std::complex< double > > >::difference_type i, \n"
		"    gr_vector_complexd x)\n"
		""},
	 { (char *)"gr_vector_vector_complexd_append", (PyCFunction) _wrap_gr_vector_vector_complexd_append, METH_VARARGS | METH_KEYWORDS, (char *)"gr_vector_vector_complexd_append(gr_vector_vector_complexd self, gr_vector_complexd x)"},
	 { (char *)"gr_vector_vector_complexd_empty", _wrap_gr_vector_vector_complexd_empty, METH_VARARGS, (char *)"gr_vector_vector_complexd_empty(gr_vector_vector_complexd self) -> bool"},
	 { (char *)"gr_vector_vector_complexd_size", _wrap_gr_vector_vector_complexd_size, METH_VARARGS, (char *)"gr_vector_vector_complexd_size(gr_vector_vector_complexd self) -> std::vector< std::vector< std::complex< double > > >::size_type"},
	 { (char *)"gr_vector_vector_complexd_clear", _wrap_gr_vector_vector_complexd_clear, METH_VARARGS, (char *)"gr_vector_vector_complexd_clear(gr_vector_vector_complexd self)"},
	 { (char *)"gr_vector_vector_complexd_swap", (PyCFunction) _wrap_gr_vector_vector_complexd_swap, METH_VARARGS | METH_KEYWORDS, (char *)"gr_vector_vector_complexd_swap(gr_vector_vector_complexd self, gr_vector_vector_complexd v)"},
	 { (char *)"gr_vector_vector_complexd_get_allocator", _wrap_gr_vector_vector_complexd_get_allocator, METH_VARARGS, (char *)"gr_vector_vector_complexd_get_allocator(gr_vector_vector_complexd self) -> std::vector< std::vector< std::complex< double > > >::allocator_type"},
	 { (char *)"gr_vector_vector_complexd_begin", _wrap_gr_vector_vector_complexd_begin, METH_VARARGS, (char *)"gr_vector_vector_complexd_begin(gr_vector_vector_complexd self) -> std::vector< std::vector< std::complex< double > > >::iterator"},
	 { (char *)"gr_vector_vector_complexd_end", _wrap_gr_vector_vector_complexd_end, METH_VARARGS, (char *)"gr_vector_vector_complexd_end(gr_vector_vector_complexd self) -> std::vector< std::vector< std::complex< double > > >::iterator"},
	 { (char *)"gr_vector_vector_complexd_rbegin", _wrap_gr_vector_vector_complexd_rbegin, METH_VARARGS, (char *)"gr_vector_vector_complexd_rbegin(gr_vector_vector_complexd self) -> std::vector< std::vector< std::complex< double > > >::reverse_iterator"},
	 { (char *)"gr_vector_vector_complexd_rend", _wrap_gr_vector_vector_complexd_rend, METH_VARARGS, (char *)"gr_vector_vector_complexd_rend(gr_vector_vector_complexd self) -> std::vector< std::vector< std::complex< double > > >::reverse_iterator"},
	 { (char *)"gr_vector_vector_complexd_pop_back", _wrap_gr_vector_vector_complexd_pop_back, METH_VARARGS, (char *)"gr_vector_vector_complexd_pop_back(gr_vector_vector_complexd self)"},
	 { (char *)"gr_vector_vector_complexd_erase", _wrap_gr_vector_vector_complexd_erase, METH_VARARGS, (char *)"\n"
		"erase(std::vector< std::vector< std::complex< double > > >::iterator pos) -> std::vector< std::vector< std::complex< double > > >::iterator\n"
		"gr_vector_vector_complexd_erase(gr_vector_vector_complexd self, std::vector< std::vector< std::complex< double > > >::iterator first, \n"
		"    std::vector< std::vector< std::complex< double > > >::iterator last) -> std::vector< std::vector< std::complex< double > > >::iterator\n"
		""},
	 { (char *)"new_gr_vector_vector_complexd", _wrap_new_gr_vector_vector_complexd, METH_VARARGS, (char *)"\n"
		"gr_vector_vector_complexd()\n"
		"gr_vector_vector_complexd(gr_vector_vector_complexd arg2)\n"
		"gr_vector_vector_complexd(std::vector< std::vector< std::complex< double > > >::size_type size)\n"
		"new_gr_vector_vector_complexd(std::vector< std::vector< std::complex< double > > >::size_type size, gr_vector_complexd value) -> gr_vector_vector_complexd\n"
		""},
	 { (char *)"gr_vector_vector_complexd_push_back", (PyCFunction) _wrap_gr_vector_vector_complexd_push_back, METH_VARARGS | METH_KEYWORDS, (char *)"gr_vector_vector_complexd_push_back(gr_vector_vector_complexd self, gr_vector_complexd x)"},
	 { (char *)"gr_vector_vector_complexd_front", _wrap_gr_vector_vector_complexd_front, METH_VARARGS, (char *)"gr_vector_vector_complexd_front(gr_vector_vector_complexd self) -> gr_vector_complexd"},
	 { (char *)"gr_vector_vector_complexd_back", _wrap_gr_vector_vector_complexd_back, METH_VARARGS, (char *)"gr_vector_vector_complexd_back(gr_vector_vector_complexd self) -> gr_vector_complexd"},
	 { (char *)"gr_vector_vector_complexd_assign", (PyCFunction) _wrap_gr_vector_vector_complexd_assign, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"gr_vector_vector_complexd_assign(gr_vector_vector_complexd self, std::vector< std::vector< std::complex< double > > >::size_type n, \n"
		"    gr_vector_complexd x)\n"
		""},
	 { (char *)"gr_vector_vector_complexd_resize", _wrap_gr_vector_vector_complexd_resize, METH_VARARGS, (char *)"\n"
		"resize(std::vector< std::vector< std::complex< double > > >::size_type new_size)\n"
		"gr_vector_vector_complexd_resize(gr_vector_vector_complexd self, std::vector< std::vector< std::complex< double > > >::size_type new_size, \n"
		"    gr_vector_complexd x)\n"
		""},
	 { (char *)"gr_vector_vector_complexd_insert", _wrap_gr_vector_vector_complexd_insert, METH_VARARGS, (char *)"\n"
		"insert(std::vector< std::vector< std::complex< double > > >::iterator pos, gr_vector_complexd x) -> std::vector< std::vector< std::complex< double > > >::iterator\n"
		"gr_vector_vector_complexd_insert(gr_vector_vector_complexd self, std::vector< std::vector< std::complex< double > > >::iterator pos, \n"
		"    std::vector< std::vector< std::complex< double > > >::size_type n, \n"
		"    gr_vector_complexd x)\n"
		""},
	 { (char *)"gr_vector_vector_complexd_reserve", (PyCFunction) _wrap_gr_vector_vector_complexd_reserve, METH_VARARGS | METH_KEYWORDS, (char *)"gr_vector_vector_complexd_reserve(gr_vector_vector_complexd self, std::vector< std::vector< std::complex< double > > >::size_type n)"},
	 { (char *)"gr_vector_vector_complexd_capacity", _wrap_gr_vector_vector_complexd_capacity, METH_VARARGS, (char *)"gr_vector_vector_complexd_capacity(gr_vector_vector_complexd self) -> std::vector< std::vector< std::complex< double > > >::size_type"},
	 { (char *)"delete_gr_vector_vector_complexd", _wrap_delete_gr_vector_vector_complexd, METH_VARARGS, (char *)"delete_gr_vector_vector_complexd(gr_vector_vector_complexd self)"},
	 { (char *)"gr_vector_vector_complexd_swigregister", gr_vector_vector_complexd_swigregister, METH_VARARGS, NULL},
	 { (char *)"high_res_timer_now", _wrap_high_res_timer_now, METH_VARARGS, (char *)"\n"
		"high_res_timer_now() -> gr::high_res_timer_type\n"
		"\n"
		"Get the current time in ticks.\n"
		""},
	 { (char *)"high_res_timer_now_perfmon", _wrap_high_res_timer_now_perfmon, METH_VARARGS, (char *)"\n"
		"high_res_timer_now_perfmon() -> gr::high_res_timer_type\n"
		"\n"
		"Get the current time in ticks - for performance monitoring.\n"
		""},
	 { (char *)"high_res_timer_tps", _wrap_high_res_timer_tps, METH_VARARGS, (char *)"\n"
		"high_res_timer_tps() -> gr::high_res_timer_type\n"
		"\n"
		"Get the number of ticks per second.\n"
		""},
	 { (char *)"high_res_timer_epoch", _wrap_high_res_timer_epoch, METH_VARARGS, (char *)"\n"
		"high_res_timer_epoch() -> gr::high_res_timer_type\n"
		"\n"
		"Get the tick count at the epoch.\n"
		""},
	 { (char *)"new_basic_block_sptr", _wrap_new_basic_block_sptr, METH_VARARGS, (char *)"\n"
		"basic_block_sptr()\n"
		"new_basic_block_sptr(basic_block p) -> basic_block_sptr\n"
		""},
	 { (char *)"basic_block_sptr___deref__", _wrap_basic_block_sptr___deref__, METH_VARARGS, (char *)"basic_block_sptr___deref__(basic_block_sptr self) -> basic_block"},
	 { (char *)"delete_basic_block_sptr", _wrap_delete_basic_block_sptr, METH_VARARGS, (char *)"delete_basic_block_sptr(basic_block_sptr self)"},
	 { (char *)"basic_block_sptr_name", _wrap_basic_block_sptr_name, METH_VARARGS, (char *)"\n"
		"basic_block_sptr_name(basic_block_sptr self) -> std::string\n"
		"\n"
		"The name of the block\n"
		""},
	 { (char *)"basic_block_sptr_symbol_name", _wrap_basic_block_sptr_symbol_name, METH_VARARGS, (char *)"\n"
		"basic_block_sptr_symbol_name(basic_block_sptr self) -> std::string\n"
		"\n"
		"The sybolic name of the block, which is used in the block_registry. The name is assigned by the block's constructor and never changes during the life of the block.\n"
		""},
	 { (char *)"basic_block_sptr_input_signature", _wrap_basic_block_sptr_input_signature, METH_VARARGS, (char *)"basic_block_sptr_input_signature(basic_block_sptr self) -> io_signature_sptr"},
	 { (char *)"basic_block_sptr_output_signature", _wrap_basic_block_sptr_output_signature, METH_VARARGS, (char *)"basic_block_sptr_output_signature(basic_block_sptr self) -> io_signature_sptr"},
	 { (char *)"basic_block_sptr_unique_id", _wrap_basic_block_sptr_unique_id, METH_VARARGS, (char *)"basic_block_sptr_unique_id(basic_block_sptr self) -> long"},
	 { (char *)"basic_block_sptr_to_basic_block", _wrap_basic_block_sptr_to_basic_block, METH_VARARGS, (char *)"basic_block_sptr_to_basic_block(basic_block_sptr self) -> basic_block_sptr"},
	 { (char *)"basic_block_sptr_check_topology", (PyCFunction) _wrap_basic_block_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"basic_block_sptr_check_topology(basic_block_sptr self, int ninputs, int noutputs) -> bool\n"
		"\n"
		"Confirm that ninputs and noutputs is an acceptable combination.\n"
		"\n"
		"This function is called by the runtime system whenever the topology changes. Most classes do not need to override this. This check is in addition to the constraints specified by the input and output gr::io_signatures.\n"
		""},
	 { (char *)"basic_block_sptr_alias", _wrap_basic_block_sptr_alias, METH_VARARGS, (char *)"\n"
		"basic_block_sptr_alias(basic_block_sptr self) -> std::string\n"
		"\n"
		"Returns the block's alias as a string.\n"
		""},
	 { (char *)"basic_block_sptr_set_block_alias", (PyCFunction) _wrap_basic_block_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"basic_block_sptr_set_block_alias(basic_block_sptr self, std::string name)\n"
		"\n"
		"Set's a new alias for the block; also adds an entry into the block_registry to get the block using either the alias or the original symbol name.\n"
		""},
	 { (char *)"basic_block_sptr__post", (PyCFunction) _wrap_basic_block_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"basic_block_sptr__post(basic_block_sptr self, swig_int_ptr which_port, swig_int_ptr msg)\n"
		"\n"
		"Accept msg, place in queue, arrange for thread to be awakened if it's not already.\n"
		""},
	 { (char *)"basic_block_sptr_message_ports_in", _wrap_basic_block_sptr_message_ports_in, METH_VARARGS, (char *)"\n"
		"basic_block_sptr_message_ports_in(basic_block_sptr self) -> swig_int_ptr\n"
		"\n"
		"Get input message port names.\n"
		"\n"
		"Returns the available input message ports for a block. The return object is a PMT vector that is filled with PMT symbols.\n"
		""},
	 { (char *)"basic_block_sptr_message_ports_out", _wrap_basic_block_sptr_message_ports_out, METH_VARARGS, (char *)"\n"
		"basic_block_sptr_message_ports_out(basic_block_sptr self) -> swig_int_ptr\n"
		"\n"
		"Get output message port names.\n"
		"\n"
		"Returns the available output message ports for a block. The return object is a PMT vector that is filled with PMT symbols.\n"
		""},
	 { (char *)"basic_block_sptr_message_subscribers", (PyCFunction) _wrap_basic_block_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"basic_block_sptr_message_subscribers(basic_block_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"basic_block_sptr_swigregister", basic_block_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"x_vector_basic_block_sptr_iterator", _wrap_x_vector_basic_block_sptr_iterator, METH_VARARGS, (char *)"x_vector_basic_block_sptr_iterator(x_vector_basic_block_sptr self) -> SwigPyIterator"},
	 { (char *)"x_vector_basic_block_sptr___nonzero__", _wrap_x_vector_basic_block_sptr___nonzero__, METH_VARARGS, (char *)"x_vector_basic_block_sptr___nonzero__(x_vector_basic_block_sptr self) -> bool"},
	 { (char *)"x_vector_basic_block_sptr___bool__", _wrap_x_vector_basic_block_sptr___bool__, METH_VARARGS, (char *)"x_vector_basic_block_sptr___bool__(x_vector_basic_block_sptr self) -> bool"},
	 { (char *)"x_vector_basic_block_sptr___len__", _wrap_x_vector_basic_block_sptr___len__, METH_VARARGS, (char *)"x_vector_basic_block_sptr___len__(x_vector_basic_block_sptr self) -> std::vector< boost::shared_ptr< gr::basic_block > >::size_type"},
	 { (char *)"x_vector_basic_block_sptr_pop", _wrap_x_vector_basic_block_sptr_pop, METH_VARARGS, (char *)"x_vector_basic_block_sptr_pop(x_vector_basic_block_sptr self) -> basic_block_sptr"},
	 { (char *)"x_vector_basic_block_sptr___getslice__", (PyCFunction) _wrap_x_vector_basic_block_sptr___getslice__, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"x_vector_basic_block_sptr___getslice__(x_vector_basic_block_sptr self, std::vector< boost::shared_ptr< gr::basic_block > >::difference_type i, \n"
		"    std::vector< boost::shared_ptr< gr::basic_block > >::difference_type j) -> x_vector_basic_block_sptr\n"
		""},
	 { (char *)"x_vector_basic_block_sptr___setslice__", (PyCFunction) _wrap_x_vector_basic_block_sptr___setslice__, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"x_vector_basic_block_sptr___setslice__(x_vector_basic_block_sptr self, std::vector< boost::shared_ptr< gr::basic_block > >::difference_type i, \n"
		"    std::vector< boost::shared_ptr< gr::basic_block > >::difference_type j, \n"
		"    x_vector_basic_block_sptr v=std::vector< boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > >())\n"
		""},
	 { (char *)"x_vector_basic_block_sptr___delslice__", (PyCFunction) _wrap_x_vector_basic_block_sptr___delslice__, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"x_vector_basic_block_sptr___delslice__(x_vector_basic_block_sptr self, std::vector< boost::shared_ptr< gr::basic_block > >::difference_type i, \n"
		"    std::vector< boost::shared_ptr< gr::basic_block > >::difference_type j)\n"
		""},
	 { (char *)"x_vector_basic_block_sptr___delitem__", _wrap_x_vector_basic_block_sptr___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(std::vector< boost::shared_ptr< gr::basic_block > >::difference_type i)\n"
		"x_vector_basic_block_sptr___delitem__(x_vector_basic_block_sptr self, PySliceObject * slice)\n"
		""},
	 { (char *)"x_vector_basic_block_sptr___getitem__", _wrap_x_vector_basic_block_sptr___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> x_vector_basic_block_sptr\n"
		"x_vector_basic_block_sptr___getitem__(x_vector_basic_block_sptr self, std::vector< boost::shared_ptr< gr::basic_block > >::difference_type i) -> basic_block_sptr\n"
		""},
	 { (char *)"x_vector_basic_block_sptr___setitem__", _wrap_x_vector_basic_block_sptr___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, x_vector_basic_block_sptr v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"x_vector_basic_block_sptr___setitem__(x_vector_basic_block_sptr self, std::vector< boost::shared_ptr< gr::basic_block > >::difference_type i, \n"
		"    basic_block_sptr x)\n"
		""},
	 { (char *)"x_vector_basic_block_sptr_append", (PyCFunction) _wrap_x_vector_basic_block_sptr_append, METH_VARARGS | METH_KEYWORDS, (char *)"x_vector_basic_block_sptr_append(x_vector_basic_block_sptr self, basic_block_sptr x)"},
	 { (char *)"x_vector_basic_block_sptr_empty", _wrap_x_vector_basic_block_sptr_empty, METH_VARARGS, (char *)"x_vector_basic_block_sptr_empty(x_vector_basic_block_sptr self) -> bool"},
	 { (char *)"x_vector_basic_block_sptr_size", _wrap_x_vector_basic_block_sptr_size, METH_VARARGS, (char *)"x_vector_basic_block_sptr_size(x_vector_basic_block_sptr self) -> std::vector< boost::shared_ptr< gr::basic_block > >::size_type"},
	 { (char *)"x_vector_basic_block_sptr_clear", _wrap_x_vector_basic_block_sptr_clear, METH_VARARGS, (char *)"x_vector_basic_block_sptr_clear(x_vector_basic_block_sptr self)"},
	 { (char *)"x_vector_basic_block_sptr_swap", (PyCFunction) _wrap_x_vector_basic_block_sptr_swap, METH_VARARGS | METH_KEYWORDS, (char *)"x_vector_basic_block_sptr_swap(x_vector_basic_block_sptr self, x_vector_basic_block_sptr v)"},
	 { (char *)"x_vector_basic_block_sptr_get_allocator", _wrap_x_vector_basic_block_sptr_get_allocator, METH_VARARGS, (char *)"x_vector_basic_block_sptr_get_allocator(x_vector_basic_block_sptr self) -> std::vector< boost::shared_ptr< gr::basic_block > >::allocator_type"},
	 { (char *)"x_vector_basic_block_sptr_begin", _wrap_x_vector_basic_block_sptr_begin, METH_VARARGS, (char *)"x_vector_basic_block_sptr_begin(x_vector_basic_block_sptr self) -> std::vector< boost::shared_ptr< gr::basic_block > >::iterator"},
	 { (char *)"x_vector_basic_block_sptr_end", _wrap_x_vector_basic_block_sptr_end, METH_VARARGS, (char *)"x_vector_basic_block_sptr_end(x_vector_basic_block_sptr self) -> std::vector< boost::shared_ptr< gr::basic_block > >::iterator"},
	 { (char *)"x_vector_basic_block_sptr_rbegin", _wrap_x_vector_basic_block_sptr_rbegin, METH_VARARGS, (char *)"x_vector_basic_block_sptr_rbegin(x_vector_basic_block_sptr self) -> std::vector< boost::shared_ptr< gr::basic_block > >::reverse_iterator"},
	 { (char *)"x_vector_basic_block_sptr_rend", _wrap_x_vector_basic_block_sptr_rend, METH_VARARGS, (char *)"x_vector_basic_block_sptr_rend(x_vector_basic_block_sptr self) -> std::vector< boost::shared_ptr< gr::basic_block > >::reverse_iterator"},
	 { (char *)"x_vector_basic_block_sptr_pop_back", _wrap_x_vector_basic_block_sptr_pop_back, METH_VARARGS, (char *)"x_vector_basic_block_sptr_pop_back(x_vector_basic_block_sptr self)"},
	 { (char *)"x_vector_basic_block_sptr_erase", _wrap_x_vector_basic_block_sptr_erase, METH_VARARGS, (char *)"\n"
		"erase(std::vector< boost::shared_ptr< gr::basic_block > >::iterator pos) -> std::vector< boost::shared_ptr< gr::basic_block > >::iterator\n"
		"x_vector_basic_block_sptr_erase(x_vector_basic_block_sptr self, std::vector< boost::shared_ptr< gr::basic_block > >::iterator first, \n"
		"    std::vector< boost::shared_ptr< gr::basic_block > >::iterator last) -> std::vector< boost::shared_ptr< gr::basic_block > >::iterator\n"
		""},
	 { (char *)"new_x_vector_basic_block_sptr", _wrap_new_x_vector_basic_block_sptr, METH_VARARGS, (char *)"\n"
		"x_vector_basic_block_sptr()\n"
		"x_vector_basic_block_sptr(x_vector_basic_block_sptr arg2)\n"
		"x_vector_basic_block_sptr(std::vector< boost::shared_ptr< gr::basic_block > >::size_type size)\n"
		"new_x_vector_basic_block_sptr(std::vector< boost::shared_ptr< gr::basic_block > >::size_type size, basic_block_sptr value) -> x_vector_basic_block_sptr\n"
		""},
	 { (char *)"x_vector_basic_block_sptr_push_back", (PyCFunction) _wrap_x_vector_basic_block_sptr_push_back, METH_VARARGS | METH_KEYWORDS, (char *)"x_vector_basic_block_sptr_push_back(x_vector_basic_block_sptr self, basic_block_sptr x)"},
	 { (char *)"x_vector_basic_block_sptr_front", _wrap_x_vector_basic_block_sptr_front, METH_VARARGS, (char *)"x_vector_basic_block_sptr_front(x_vector_basic_block_sptr self) -> basic_block_sptr"},
	 { (char *)"x_vector_basic_block_sptr_back", _wrap_x_vector_basic_block_sptr_back, METH_VARARGS, (char *)"x_vector_basic_block_sptr_back(x_vector_basic_block_sptr self) -> basic_block_sptr"},
	 { (char *)"x_vector_basic_block_sptr_assign", (PyCFunction) _wrap_x_vector_basic_block_sptr_assign, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"x_vector_basic_block_sptr_assign(x_vector_basic_block_sptr self, std::vector< boost::shared_ptr< gr::basic_block > >::size_type n, \n"
		"    basic_block_sptr x)\n"
		""},
	 { (char *)"x_vector_basic_block_sptr_resize", _wrap_x_vector_basic_block_sptr_resize, METH_VARARGS, (char *)"\n"
		"resize(std::vector< boost::shared_ptr< gr::basic_block > >::size_type new_size)\n"
		"x_vector_basic_block_sptr_resize(x_vector_basic_block_sptr self, std::vector< boost::shared_ptr< gr::basic_block > >::size_type new_size, \n"
		"    basic_block_sptr x)\n"
		""},
	 { (char *)"x_vector_basic_block_sptr_insert", _wrap_x_vector_basic_block_sptr_insert, METH_VARARGS, (char *)"\n"
		"insert(std::vector< boost::shared_ptr< gr::basic_block > >::iterator pos, basic_block_sptr x) -> std::vector< boost::shared_ptr< gr::basic_block > >::iterator\n"
		"x_vector_basic_block_sptr_insert(x_vector_basic_block_sptr self, std::vector< boost::shared_ptr< gr::basic_block > >::iterator pos, \n"
		"    std::vector< boost::shared_ptr< gr::basic_block > >::size_type n, \n"
		"    basic_block_sptr x)\n"
		""},
	 { (char *)"x_vector_basic_block_sptr_reserve", (PyCFunction) _wrap_x_vector_basic_block_sptr_reserve, METH_VARARGS | METH_KEYWORDS, (char *)"x_vector_basic_block_sptr_reserve(x_vector_basic_block_sptr self, std::vector< boost::shared_ptr< gr::basic_block > >::size_type n)"},
	 { (char *)"x_vector_basic_block_sptr_capacity", _wrap_x_vector_basic_block_sptr_capacity, METH_VARARGS, (char *)"x_vector_basic_block_sptr_capacity(x_vector_basic_block_sptr self) -> std::vector< boost::shared_ptr< gr::basic_block > >::size_type"},
	 { (char *)"delete_x_vector_basic_block_sptr", _wrap_delete_x_vector_basic_block_sptr, METH_VARARGS, (char *)"delete_x_vector_basic_block_sptr(x_vector_basic_block_sptr self)"},
	 { (char *)"x_vector_basic_block_sptr_swigregister", x_vector_basic_block_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_basic_block", _wrap_delete_basic_block, METH_VARARGS, (char *)"delete_basic_block(basic_block self)"},
	 { (char *)"basic_block_name", _wrap_basic_block_name, METH_VARARGS, (char *)"\n"
		"basic_block_name(basic_block self) -> std::string\n"
		"\n"
		"The name of the block\n"
		""},
	 { (char *)"basic_block_symbol_name", _wrap_basic_block_symbol_name, METH_VARARGS, (char *)"\n"
		"basic_block_symbol_name(basic_block self) -> std::string\n"
		"\n"
		"The sybolic name of the block, which is used in the block_registry. The name is assigned by the block's constructor and never changes during the life of the block.\n"
		""},
	 { (char *)"basic_block_input_signature", _wrap_basic_block_input_signature, METH_VARARGS, (char *)"basic_block_input_signature(basic_block self) -> io_signature_sptr"},
	 { (char *)"basic_block_output_signature", _wrap_basic_block_output_signature, METH_VARARGS, (char *)"basic_block_output_signature(basic_block self) -> io_signature_sptr"},
	 { (char *)"basic_block_unique_id", _wrap_basic_block_unique_id, METH_VARARGS, (char *)"basic_block_unique_id(basic_block self) -> long"},
	 { (char *)"basic_block_to_basic_block", _wrap_basic_block_to_basic_block, METH_VARARGS, (char *)"basic_block_to_basic_block(basic_block self) -> basic_block_sptr"},
	 { (char *)"basic_block_check_topology", (PyCFunction) _wrap_basic_block_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"basic_block_check_topology(basic_block self, int ninputs, int noutputs) -> bool\n"
		"\n"
		"Confirm that ninputs and noutputs is an acceptable combination.\n"
		"\n"
		"This function is called by the runtime system whenever the topology changes. Most classes do not need to override this. This check is in addition to the constraints specified by the input and output gr::io_signatures.\n"
		""},
	 { (char *)"basic_block_alias", _wrap_basic_block_alias, METH_VARARGS, (char *)"\n"
		"basic_block_alias(basic_block self) -> std::string\n"
		"\n"
		"Returns the block's alias as a string.\n"
		""},
	 { (char *)"basic_block_set_block_alias", (PyCFunction) _wrap_basic_block_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"basic_block_set_block_alias(basic_block self, std::string name)\n"
		"\n"
		"Set's a new alias for the block; also adds an entry into the block_registry to get the block using either the alias or the original symbol name.\n"
		""},
	 { (char *)"basic_block__post", (PyCFunction) _wrap_basic_block__post, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"basic_block__post(basic_block self, swig_int_ptr which_port, swig_int_ptr msg)\n"
		"\n"
		"Accept msg, place in queue, arrange for thread to be awakened if it's not already.\n"
		""},
	 { (char *)"basic_block_message_ports_in", _wrap_basic_block_message_ports_in, METH_VARARGS, (char *)"\n"
		"basic_block_message_ports_in(basic_block self) -> swig_int_ptr\n"
		"\n"
		"Get input message port names.\n"
		"\n"
		"Returns the available input message ports for a block. The return object is a PMT vector that is filled with PMT symbols.\n"
		""},
	 { (char *)"basic_block_message_ports_out", _wrap_basic_block_message_ports_out, METH_VARARGS, (char *)"\n"
		"basic_block_message_ports_out(basic_block self) -> swig_int_ptr\n"
		"\n"
		"Get output message port names.\n"
		"\n"
		"Returns the available output message ports for a block. The return object is a PMT vector that is filled with PMT symbols.\n"
		""},
	 { (char *)"basic_block_message_subscribers", (PyCFunction) _wrap_basic_block_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"basic_block_message_subscribers(basic_block self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"basic_block_swigregister", basic_block_swigregister, METH_VARARGS, NULL},
	 { (char *)"block_ncurrently_allocated", _wrap_block_ncurrently_allocated, METH_VARARGS, (char *)"block_ncurrently_allocated() -> long"},
	 { (char *)"new_block_sptr", _wrap_new_block_sptr, METH_VARARGS, (char *)"\n"
		"block_sptr()\n"
		"new_block_sptr(block p) -> block_sptr\n"
		""},
	 { (char *)"block_sptr___deref__", _wrap_block_sptr___deref__, METH_VARARGS, (char *)"block_sptr___deref__(block_sptr self) -> block"},
	 { (char *)"delete_block_sptr", _wrap_delete_block_sptr, METH_VARARGS, (char *)"delete_block_sptr(block_sptr self)"},
	 { (char *)"block_sptr_history", _wrap_block_sptr_history, METH_VARARGS, (char *)"\n"
		"block_sptr_history(block_sptr self) -> unsigned int\n"
		"\n"
		"Assume block computes y_i = f(x_i, x_i-1, x_i-2, x_i-3...) History is the number of x_i's that are examined to produce one y_i. This comes in handy for FIR filters, where we use history to ensure that our input contains the appropriate \"history\" for the filter. History should be equal to the number of filter taps. First history samples (when there are no previous samples) are initialized with zeroes.\n"
		""},
	 { (char *)"block_sptr_declare_sample_delay", _wrap_block_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"block_sptr_declare_sample_delay(block_sptr self, unsigned int delay)\n"
		"\n"
		"Declares the block's delay in samples. Since the delay of blocks like filters is derived from the taps and not the block itself, we cannot automatically calculate this value and so leave it as a user-defined property. It defaults to 0 is not set.\n"
		"\n"
		"This does not actively set the delay; it just tells the scheduler what the delay is.\n"
		"\n"
		"This delay is mostly used to adjust the placement of the tags and is not currently used for any signal processing. When a tag is passed through a block with internal delay, its location should be moved based on the delay of the block. This interface allows us to tell the scheduler this value.\n"
		""},
	 { (char *)"block_sptr_sample_delay", (PyCFunction) _wrap_block_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_sptr_sample_delay(block_sptr self, int which) -> unsigned int\n"
		"\n"
		"Gets the delay of the block. Since the delay of blocks like filters is derived from the taps and not the block itself, we cannot automatically calculate this value and so leave it as a user-defined property. It defaults to 0 is not set.\n"
		""},
	 { (char *)"block_sptr_output_multiple", _wrap_block_sptr_output_multiple, METH_VARARGS, (char *)"block_sptr_output_multiple(block_sptr self) -> int"},
	 { (char *)"block_sptr_relative_rate", _wrap_block_sptr_relative_rate, METH_VARARGS, (char *)"\n"
		"block_sptr_relative_rate(block_sptr self) -> double\n"
		"\n"
		"return the approximate output rate / input rate\n"
		""},
	 { (char *)"block_sptr_start", _wrap_block_sptr_start, METH_VARARGS, (char *)"\n"
		"block_sptr_start(block_sptr self) -> bool\n"
		"\n"
		"Called to enable drivers, etc for i/o devices.\n"
		"\n"
		"This allows a block to enable an associated driver to begin transferring data just before we start to execute the scheduler. The end result is that this reduces latency in the pipeline when dealing with audio devices, usrps, etc.\n"
		""},
	 { (char *)"block_sptr_stop", _wrap_block_sptr_stop, METH_VARARGS, (char *)"\n"
		"block_sptr_stop(block_sptr self) -> bool\n"
		"\n"
		"Called to disable drivers, etc for i/o devices.\n"
		""},
	 { (char *)"block_sptr_nitems_read", (PyCFunction) _wrap_block_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_sptr_nitems_read(block_sptr self, unsigned int which_input) -> uint64_t\n"
		"\n"
		"Return the number of items read on input stream which_input.\n"
		""},
	 { (char *)"block_sptr_nitems_written", (PyCFunction) _wrap_block_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_sptr_nitems_written(block_sptr self, unsigned int which_output) -> uint64_t\n"
		"\n"
		"Return the number of items written on output stream which_output.\n"
		""},
	 { (char *)"block_sptr_max_noutput_items", _wrap_block_sptr_max_noutput_items, METH_VARARGS, (char *)"\n"
		"block_sptr_max_noutput_items(block_sptr self) -> int\n"
		"\n"
		"Return the maximum number of output items this block will handle during a call to work.\n"
		""},
	 { (char *)"block_sptr_set_max_noutput_items", (PyCFunction) _wrap_block_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_sptr_set_max_noutput_items(block_sptr self, int m)\n"
		"\n"
		"Set the maximum number of output items this block will handle during a call to work.\n"
		""},
	 { (char *)"block_sptr_unset_max_noutput_items", _wrap_block_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"\n"
		"block_sptr_unset_max_noutput_items(block_sptr self)\n"
		"\n"
		"Clear the switch for using the max_noutput_items value of this block.\n"
		"\n"
		"When is_set_max_noutput_items() returns 'true', the scheduler will use the value returned by max_noutput_items() to limit the size of the number of items possible for this block's work function. If is_set_max_notput_items() returns 'false', then the scheduler ignores the internal value and uses the value set globally in the top_block.\n"
		"\n"
		"Use this value to clear the 'is_set' flag so the scheduler will ignore this. Use the set_max_noutput_items(m) call to both set a new value for max_noutput_items and to re-enable its use in the scheduler.\n"
		""},
	 { (char *)"block_sptr_is_set_max_noutput_items", _wrap_block_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"\n"
		"block_sptr_is_set_max_noutput_items(block_sptr self) -> bool\n"
		"\n"
		"Ask the block if the flag is or is not set to use the internal value of max_noutput_items during a call to work.\n"
		""},
	 { (char *)"block_sptr_set_min_noutput_items", (PyCFunction) _wrap_block_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_sptr_set_min_noutput_items(block_sptr self, int m)\n"
		"\n"
		"Set the minimum number of output items this block can produce during a call to work.\n"
		""},
	 { (char *)"block_sptr_min_noutput_items", _wrap_block_sptr_min_noutput_items, METH_VARARGS, (char *)"\n"
		"block_sptr_min_noutput_items(block_sptr self) -> int\n"
		"\n"
		"Return the minimum number of output items this block can produce during a call to work.\n"
		"\n"
		"Should be 0 for most blocks. Useful if we're dealing with packets and the block produces one packet per call to work.\n"
		""},
	 { (char *)"block_sptr_max_output_buffer", (PyCFunction) _wrap_block_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_sptr_max_output_buffer(block_sptr self, int i) -> long\n"
		"\n"
		"Returns max buffer size on output port .\n"
		""},
	 { (char *)"block_sptr_set_max_output_buffer", _wrap_block_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"block_sptr_set_max_output_buffer(block_sptr self, int port, long max_output_buffer)\n"
		"\n"
		"Request limit on max buffer size on all output ports.\n"
		"\n"
		"This is an advanced feature. Calling this can affect some fundamental assumptions about the system behavior and performance.\n"
		"\n"
		"The actual buffer size is determined by a number of other factors from the block and system. This function only provides a requested maximum. The buffers will always be a multiple of the system page size, which may be larger than the value asked for here.\n"
		""},
	 { (char *)"block_sptr_min_output_buffer", (PyCFunction) _wrap_block_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_sptr_min_output_buffer(block_sptr self, int i) -> long\n"
		"\n"
		"Returns min buffer size on output port .\n"
		""},
	 { (char *)"block_sptr_set_min_output_buffer", _wrap_block_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"block_sptr_set_min_output_buffer(block_sptr self, int port, long min_output_buffer)\n"
		"\n"
		"Request limit on the minimum buffer size on all output ports.\n"
		"\n"
		"This is an advanced feature. Calling this can affect some fundamental assumptions about the system behavior and performance.\n"
		"\n"
		"The actual buffer size is determined by a number of other factors from the block and system. This function only provides a requested minimum. The buffers will always be a multiple of the system page size, which may be larger than the value asked for here.\n"
		""},
	 { (char *)"block_sptr_pc_noutput_items", _wrap_block_sptr_pc_noutput_items, METH_VARARGS, (char *)"\n"
		"block_sptr_pc_noutput_items(block_sptr self) -> float\n"
		"\n"
		"Gets instantaneous noutput_items performance counter.\n"
		""},
	 { (char *)"block_sptr_pc_noutput_items_avg", _wrap_block_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"\n"
		"block_sptr_pc_noutput_items_avg(block_sptr self) -> float\n"
		"\n"
		"Gets average noutput_items performance counter.\n"
		""},
	 { (char *)"block_sptr_pc_noutput_items_var", _wrap_block_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"\n"
		"block_sptr_pc_noutput_items_var(block_sptr self) -> float\n"
		"\n"
		"Gets variance of noutput_items performance counter.\n"
		""},
	 { (char *)"block_sptr_pc_nproduced", _wrap_block_sptr_pc_nproduced, METH_VARARGS, (char *)"\n"
		"block_sptr_pc_nproduced(block_sptr self) -> float\n"
		"\n"
		"Gets instantaneous num items produced performance counter.\n"
		""},
	 { (char *)"block_sptr_pc_nproduced_avg", _wrap_block_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"\n"
		"block_sptr_pc_nproduced_avg(block_sptr self) -> float\n"
		"\n"
		"Gets average num items produced performance counter.\n"
		""},
	 { (char *)"block_sptr_pc_nproduced_var", _wrap_block_sptr_pc_nproduced_var, METH_VARARGS, (char *)"\n"
		"block_sptr_pc_nproduced_var(block_sptr self) -> float\n"
		"\n"
		"Gets variance of num items produced performance counter.\n"
		""},
	 { (char *)"block_sptr_pc_input_buffers_full", _wrap_block_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"block_sptr_pc_input_buffers_full(block_sptr self) -> std::vector< float,std::allocator< float > >\n"
		"\n"
		"Gets instantaneous fullness of  input buffer.\n"
		""},
	 { (char *)"block_sptr_pc_input_buffers_full_avg", _wrap_block_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"block_sptr_pc_input_buffers_full_avg(block_sptr self) -> std::vector< float,std::allocator< float > >\n"
		"\n"
		"Gets average fullness of  input buffer.\n"
		""},
	 { (char *)"block_sptr_pc_input_buffers_full_var", _wrap_block_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"block_sptr_pc_input_buffers_full_var(block_sptr self) -> std::vector< float,std::allocator< float > >\n"
		"\n"
		"Gets variance of fullness of  input buffer.\n"
		""},
	 { (char *)"block_sptr_pc_output_buffers_full", _wrap_block_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"block_sptr_pc_output_buffers_full(block_sptr self) -> std::vector< float,std::allocator< float > >\n"
		"\n"
		"Gets instantaneous fullness of  input buffer.\n"
		""},
	 { (char *)"block_sptr_pc_output_buffers_full_avg", _wrap_block_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"block_sptr_pc_output_buffers_full_avg(block_sptr self) -> std::vector< float,std::allocator< float > >\n"
		"\n"
		"Gets average fullness of  input buffer.\n"
		""},
	 { (char *)"block_sptr_pc_output_buffers_full_var", _wrap_block_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"block_sptr_pc_output_buffers_full_var(block_sptr self) -> std::vector< float,std::allocator< float > >\n"
		"\n"
		"Gets variance of fullness of  input buffer.\n"
		""},
	 { (char *)"block_sptr_pc_work_time", _wrap_block_sptr_pc_work_time, METH_VARARGS, (char *)"\n"
		"block_sptr_pc_work_time(block_sptr self) -> float\n"
		"\n"
		"Gets instantaneous clock cycles spent in work.\n"
		""},
	 { (char *)"block_sptr_pc_work_time_avg", _wrap_block_sptr_pc_work_time_avg, METH_VARARGS, (char *)"\n"
		"block_sptr_pc_work_time_avg(block_sptr self) -> float\n"
		"\n"
		"Gets average clock cycles spent in work.\n"
		""},
	 { (char *)"block_sptr_pc_work_time_var", _wrap_block_sptr_pc_work_time_var, METH_VARARGS, (char *)"\n"
		"block_sptr_pc_work_time_var(block_sptr self) -> float\n"
		"\n"
		"Gets average clock cycles spent in work.\n"
		""},
	 { (char *)"block_sptr_pc_work_time_total", _wrap_block_sptr_pc_work_time_total, METH_VARARGS, (char *)"\n"
		"block_sptr_pc_work_time_total(block_sptr self) -> float\n"
		"\n"
		"Gets total clock cycles spent in work.\n"
		""},
	 { (char *)"block_sptr_pc_throughput_avg", _wrap_block_sptr_pc_throughput_avg, METH_VARARGS, (char *)"\n"
		"block_sptr_pc_throughput_avg(block_sptr self) -> float\n"
		"\n"
		"Gets average throughput.\n"
		""},
	 { (char *)"block_sptr_set_processor_affinity", (PyCFunction) _wrap_block_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_sptr_set_processor_affinity(block_sptr self, std::vector< int,std::allocator< int > > const & mask)\n"
		"\n"
		"Set the thread's affinity to processor core .\n"
		""},
	 { (char *)"block_sptr_unset_processor_affinity", _wrap_block_sptr_unset_processor_affinity, METH_VARARGS, (char *)"\n"
		"block_sptr_unset_processor_affinity(block_sptr self)\n"
		"\n"
		"Remove processor affinity to a specific core.\n"
		""},
	 { (char *)"block_sptr_processor_affinity", _wrap_block_sptr_processor_affinity, METH_VARARGS, (char *)"\n"
		"block_sptr_processor_affinity(block_sptr self) -> std::vector< int,std::allocator< int > >\n"
		"\n"
		"Get the current processor affinity.\n"
		""},
	 { (char *)"block_sptr_active_thread_priority", _wrap_block_sptr_active_thread_priority, METH_VARARGS, (char *)"\n"
		"block_sptr_active_thread_priority(block_sptr self) -> int\n"
		"\n"
		"Get the current thread priority in use.\n"
		""},
	 { (char *)"block_sptr_thread_priority", _wrap_block_sptr_thread_priority, METH_VARARGS, (char *)"\n"
		"block_sptr_thread_priority(block_sptr self) -> int\n"
		"\n"
		"Get the current thread priority stored.\n"
		""},
	 { (char *)"block_sptr_set_thread_priority", (PyCFunction) _wrap_block_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_sptr_set_thread_priority(block_sptr self, int priority) -> int\n"
		"\n"
		"Set the current thread priority.\n"
		""},
	 { (char *)"block_sptr_name", _wrap_block_sptr_name, METH_VARARGS, (char *)"\n"
		"block_sptr_name(block_sptr self) -> std::string\n"
		"\n"
		"The name of the block\n"
		""},
	 { (char *)"block_sptr_symbol_name", _wrap_block_sptr_symbol_name, METH_VARARGS, (char *)"\n"
		"block_sptr_symbol_name(block_sptr self) -> std::string\n"
		"\n"
		"The sybolic name of the block, which is used in the block_registry. The name is assigned by the block's constructor and never changes during the life of the block.\n"
		""},
	 { (char *)"block_sptr_input_signature", _wrap_block_sptr_input_signature, METH_VARARGS, (char *)"block_sptr_input_signature(block_sptr self) -> io_signature_sptr"},
	 { (char *)"block_sptr_output_signature", _wrap_block_sptr_output_signature, METH_VARARGS, (char *)"block_sptr_output_signature(block_sptr self) -> io_signature_sptr"},
	 { (char *)"block_sptr_unique_id", _wrap_block_sptr_unique_id, METH_VARARGS, (char *)"block_sptr_unique_id(block_sptr self) -> long"},
	 { (char *)"block_sptr_to_basic_block", _wrap_block_sptr_to_basic_block, METH_VARARGS, (char *)"block_sptr_to_basic_block(block_sptr self) -> basic_block_sptr"},
	 { (char *)"block_sptr_check_topology", (PyCFunction) _wrap_block_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_sptr_check_topology(block_sptr self, int ninputs, int noutputs) -> bool\n"
		"\n"
		"Confirm that ninputs and noutputs is an acceptable combination.\n"
		"\n"
		"This function is called by the runtime system whenever the topology changes. Most classes do not need to override this. This check is in addition to the constraints specified by the input and output gr::io_signatures.\n"
		""},
	 { (char *)"block_sptr_alias", _wrap_block_sptr_alias, METH_VARARGS, (char *)"\n"
		"block_sptr_alias(block_sptr self) -> std::string\n"
		"\n"
		"Returns the block's alias as a string.\n"
		""},
	 { (char *)"block_sptr_set_block_alias", (PyCFunction) _wrap_block_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_sptr_set_block_alias(block_sptr self, std::string name)\n"
		"\n"
		"Set's a new alias for the block; also adds an entry into the block_registry to get the block using either the alias or the original symbol name.\n"
		""},
	 { (char *)"block_sptr__post", (PyCFunction) _wrap_block_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_sptr__post(block_sptr self, swig_int_ptr which_port, swig_int_ptr msg)\n"
		"\n"
		"Accept msg, place in queue, arrange for thread to be awakened if it's not already.\n"
		""},
	 { (char *)"block_sptr_message_ports_in", _wrap_block_sptr_message_ports_in, METH_VARARGS, (char *)"\n"
		"block_sptr_message_ports_in(block_sptr self) -> swig_int_ptr\n"
		"\n"
		"Get input message port names.\n"
		"\n"
		"Returns the available input message ports for a block. The return object is a PMT vector that is filled with PMT symbols.\n"
		""},
	 { (char *)"block_sptr_message_ports_out", _wrap_block_sptr_message_ports_out, METH_VARARGS, (char *)"\n"
		"block_sptr_message_ports_out(block_sptr self) -> swig_int_ptr\n"
		"\n"
		"Get output message port names.\n"
		"\n"
		"Returns the available output message ports for a block. The return object is a PMT vector that is filled with PMT symbols.\n"
		""},
	 { (char *)"block_sptr_message_subscribers", (PyCFunction) _wrap_block_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"block_sptr_message_subscribers(block_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"block_sptr_swigregister", block_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"x_vector_block_sptr_iterator", _wrap_x_vector_block_sptr_iterator, METH_VARARGS, (char *)"x_vector_block_sptr_iterator(x_vector_block_sptr self) -> SwigPyIterator"},
	 { (char *)"x_vector_block_sptr___nonzero__", _wrap_x_vector_block_sptr___nonzero__, METH_VARARGS, (char *)"x_vector_block_sptr___nonzero__(x_vector_block_sptr self) -> bool"},
	 { (char *)"x_vector_block_sptr___bool__", _wrap_x_vector_block_sptr___bool__, METH_VARARGS, (char *)"x_vector_block_sptr___bool__(x_vector_block_sptr self) -> bool"},
	 { (char *)"x_vector_block_sptr___len__", _wrap_x_vector_block_sptr___len__, METH_VARARGS, (char *)"x_vector_block_sptr___len__(x_vector_block_sptr self) -> std::vector< boost::shared_ptr< gr::block > >::size_type"},
	 { (char *)"x_vector_block_sptr_pop", _wrap_x_vector_block_sptr_pop, METH_VARARGS, (char *)"x_vector_block_sptr_pop(x_vector_block_sptr self) -> block_sptr"},
	 { (char *)"x_vector_block_sptr___getslice__", (PyCFunction) _wrap_x_vector_block_sptr___getslice__, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"x_vector_block_sptr___getslice__(x_vector_block_sptr self, std::vector< boost::shared_ptr< gr::block > >::difference_type i, \n"
		"    std::vector< boost::shared_ptr< gr::block > >::difference_type j) -> x_vector_block_sptr\n"
		""},
	 { (char *)"x_vector_block_sptr___setslice__", (PyCFunction) _wrap_x_vector_block_sptr___setslice__, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"x_vector_block_sptr___setslice__(x_vector_block_sptr self, std::vector< boost::shared_ptr< gr::block > >::difference_type i, \n"
		"    std::vector< boost::shared_ptr< gr::block > >::difference_type j, \n"
		"    x_vector_block_sptr v=std::vector< boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > >())\n"
		""},
	 { (char *)"x_vector_block_sptr___delslice__", (PyCFunction) _wrap_x_vector_block_sptr___delslice__, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"x_vector_block_sptr___delslice__(x_vector_block_sptr self, std::vector< boost::shared_ptr< gr::block > >::difference_type i, \n"
		"    std::vector< boost::shared_ptr< gr::block > >::difference_type j)\n"
		""},
	 { (char *)"x_vector_block_sptr___delitem__", _wrap_x_vector_block_sptr___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(std::vector< boost::shared_ptr< gr::block > >::difference_type i)\n"
		"x_vector_block_sptr___delitem__(x_vector_block_sptr self, PySliceObject * slice)\n"
		""},
	 { (char *)"x_vector_block_sptr___getitem__", _wrap_x_vector_block_sptr___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> x_vector_block_sptr\n"
		"x_vector_block_sptr___getitem__(x_vector_block_sptr self, std::vector< boost::shared_ptr< gr::block > >::difference_type i) -> block_sptr\n"
		""},
	 { (char *)"x_vector_block_sptr___setitem__", _wrap_x_vector_block_sptr___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, x_vector_block_sptr v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"x_vector_block_sptr___setitem__(x_vector_block_sptr self, std::vector< boost::shared_ptr< gr::block > >::difference_type i, \n"
		"    block_sptr x)\n"
		""},
	 { (char *)"x_vector_block_sptr_append", (PyCFunction) _wrap_x_vector_block_sptr_append, METH_VARARGS | METH_KEYWORDS, (char *)"x_vector_block_sptr_append(x_vector_block_sptr self, block_sptr x)"},
	 { (char *)"x_vector_block_sptr_empty", _wrap_x_vector_block_sptr_empty, METH_VARARGS, (char *)"x_vector_block_sptr_empty(x_vector_block_sptr self) -> bool"},
	 { (char *)"x_vector_block_sptr_size", _wrap_x_vector_block_sptr_size, METH_VARARGS, (char *)"x_vector_block_sptr_size(x_vector_block_sptr self) -> std::vector< boost::shared_ptr< gr::block > >::size_type"},
	 { (char *)"x_vector_block_sptr_clear", _wrap_x_vector_block_sptr_clear, METH_VARARGS, (char *)"x_vector_block_sptr_clear(x_vector_block_sptr self)"},
	 { (char *)"x_vector_block_sptr_swap", (PyCFunction) _wrap_x_vector_block_sptr_swap, METH_VARARGS | METH_KEYWORDS, (char *)"x_vector_block_sptr_swap(x_vector_block_sptr self, x_vector_block_sptr v)"},
	 { (char *)"x_vector_block_sptr_get_allocator", _wrap_x_vector_block_sptr_get_allocator, METH_VARARGS, (char *)"x_vector_block_sptr_get_allocator(x_vector_block_sptr self) -> std::vector< boost::shared_ptr< gr::block > >::allocator_type"},
	 { (char *)"x_vector_block_sptr_begin", _wrap_x_vector_block_sptr_begin, METH_VARARGS, (char *)"x_vector_block_sptr_begin(x_vector_block_sptr self) -> std::vector< boost::shared_ptr< gr::block > >::iterator"},
	 { (char *)"x_vector_block_sptr_end", _wrap_x_vector_block_sptr_end, METH_VARARGS, (char *)"x_vector_block_sptr_end(x_vector_block_sptr self) -> std::vector< boost::shared_ptr< gr::block > >::iterator"},
	 { (char *)"x_vector_block_sptr_rbegin", _wrap_x_vector_block_sptr_rbegin, METH_VARARGS, (char *)"x_vector_block_sptr_rbegin(x_vector_block_sptr self) -> std::vector< boost::shared_ptr< gr::block > >::reverse_iterator"},
	 { (char *)"x_vector_block_sptr_rend", _wrap_x_vector_block_sptr_rend, METH_VARARGS, (char *)"x_vector_block_sptr_rend(x_vector_block_sptr self) -> std::vector< boost::shared_ptr< gr::block > >::reverse_iterator"},
	 { (char *)"x_vector_block_sptr_pop_back", _wrap_x_vector_block_sptr_pop_back, METH_VARARGS, (char *)"x_vector_block_sptr_pop_back(x_vector_block_sptr self)"},
	 { (char *)"x_vector_block_sptr_erase", _wrap_x_vector_block_sptr_erase, METH_VARARGS, (char *)"\n"
		"erase(std::vector< boost::shared_ptr< gr::block > >::iterator pos) -> std::vector< boost::shared_ptr< gr::block > >::iterator\n"
		"x_vector_block_sptr_erase(x_vector_block_sptr self, std::vector< boost::shared_ptr< gr::block > >::iterator first, \n"
		"    std::vector< boost::shared_ptr< gr::block > >::iterator last) -> std::vector< boost::shared_ptr< gr::block > >::iterator\n"
		""},
	 { (char *)"new_x_vector_block_sptr", _wrap_new_x_vector_block_sptr, METH_VARARGS, (char *)"\n"
		"x_vector_block_sptr()\n"
		"x_vector_block_sptr(x_vector_block_sptr arg2)\n"
		"x_vector_block_sptr(std::vector< boost::shared_ptr< gr::block > >::size_type size)\n"
		"new_x_vector_block_sptr(std::vector< boost::shared_ptr< gr::block > >::size_type size, block_sptr value) -> x_vector_block_sptr\n"
		""},
	 { (char *)"x_vector_block_sptr_push_back", (PyCFunction) _wrap_x_vector_block_sptr_push_back, METH_VARARGS | METH_KEYWORDS, (char *)"x_vector_block_sptr_push_back(x_vector_block_sptr self, block_sptr x)"},
	 { (char *)"x_vector_block_sptr_front", _wrap_x_vector_block_sptr_front, METH_VARARGS, (char *)"x_vector_block_sptr_front(x_vector_block_sptr self) -> block_sptr"},
	 { (char *)"x_vector_block_sptr_back", _wrap_x_vector_block_sptr_back, METH_VARARGS, (char *)"x_vector_block_sptr_back(x_vector_block_sptr self) -> block_sptr"},
	 { (char *)"x_vector_block_sptr_assign", (PyCFunction) _wrap_x_vector_block_sptr_assign, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"x_vector_block_sptr_assign(x_vector_block_sptr self, std::vector< boost::shared_ptr< gr::block > >::size_type n, \n"
		"    block_sptr x)\n"
		""},
	 { (char *)"x_vector_block_sptr_resize", _wrap_x_vector_block_sptr_resize, METH_VARARGS, (char *)"\n"
		"resize(std::vector< boost::shared_ptr< gr::block > >::size_type new_size)\n"
		"x_vector_block_sptr_resize(x_vector_block_sptr self, std::vector< boost::shared_ptr< gr::block > >::size_type new_size, \n"
		"    block_sptr x)\n"
		""},
	 { (char *)"x_vector_block_sptr_insert", _wrap_x_vector_block_sptr_insert, METH_VARARGS, (char *)"\n"
		"insert(std::vector< boost::shared_ptr< gr::block > >::iterator pos, block_sptr x) -> std::vector< boost::shared_ptr< gr::block > >::iterator\n"
		"x_vector_block_sptr_insert(x_vector_block_sptr self, std::vector< boost::shared_ptr< gr::block > >::iterator pos, \n"
		"    std::vector< boost::shared_ptr< gr::block > >::size_type n, block_sptr x)\n"
		""},
	 { (char *)"x_vector_block_sptr_reserve", (PyCFunction) _wrap_x_vector_block_sptr_reserve, METH_VARARGS | METH_KEYWORDS, (char *)"x_vector_block_sptr_reserve(x_vector_block_sptr self, std::vector< boost::shared_ptr< gr::block > >::size_type n)"},
	 { (char *)"x_vector_block_sptr_capacity", _wrap_x_vector_block_sptr_capacity, METH_VARARGS, (char *)"x_vector_block_sptr_capacity(x_vector_block_sptr self) -> std::vector< boost::shared_ptr< gr::block > >::size_type"},
	 { (char *)"delete_x_vector_block_sptr", _wrap_delete_x_vector_block_sptr, METH_VARARGS, (char *)"delete_x_vector_block_sptr(x_vector_block_sptr self)"},
	 { (char *)"x_vector_block_sptr_swigregister", x_vector_block_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_block", _wrap_delete_block, METH_VARARGS, (char *)"delete_block(block self)"},
	 { (char *)"block_history", _wrap_block_history, METH_VARARGS, (char *)"\n"
		"block_history(block self) -> unsigned int\n"
		"\n"
		"Assume block computes y_i = f(x_i, x_i-1, x_i-2, x_i-3...) History is the number of x_i's that are examined to produce one y_i. This comes in handy for FIR filters, where we use history to ensure that our input contains the appropriate \"history\" for the filter. History should be equal to the number of filter taps. First history samples (when there are no previous samples) are initialized with zeroes.\n"
		""},
	 { (char *)"block_declare_sample_delay", _wrap_block_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"block_declare_sample_delay(block self, unsigned int delay)\n"
		"\n"
		"Declares the block's delay in samples. Since the delay of blocks like filters is derived from the taps and not the block itself, we cannot automatically calculate this value and so leave it as a user-defined property. It defaults to 0 is not set.\n"
		"\n"
		"This does not actively set the delay; it just tells the scheduler what the delay is.\n"
		"\n"
		"This delay is mostly used to adjust the placement of the tags and is not currently used for any signal processing. When a tag is passed through a block with internal delay, its location should be moved based on the delay of the block. This interface allows us to tell the scheduler this value.\n"
		""},
	 { (char *)"block_sample_delay", (PyCFunction) _wrap_block_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_sample_delay(block self, int which) -> unsigned int\n"
		"\n"
		"Gets the delay of the block. Since the delay of blocks like filters is derived from the taps and not the block itself, we cannot automatically calculate this value and so leave it as a user-defined property. It defaults to 0 is not set.\n"
		""},
	 { (char *)"block_output_multiple", _wrap_block_output_multiple, METH_VARARGS, (char *)"block_output_multiple(block self) -> int"},
	 { (char *)"block_relative_rate", _wrap_block_relative_rate, METH_VARARGS, (char *)"\n"
		"block_relative_rate(block self) -> double\n"
		"\n"
		"return the approximate output rate / input rate\n"
		""},
	 { (char *)"block_start", _wrap_block_start, METH_VARARGS, (char *)"\n"
		"block_start(block self) -> bool\n"
		"\n"
		"Called to enable drivers, etc for i/o devices.\n"
		"\n"
		"This allows a block to enable an associated driver to begin transferring data just before we start to execute the scheduler. The end result is that this reduces latency in the pipeline when dealing with audio devices, usrps, etc.\n"
		""},
	 { (char *)"block_stop", _wrap_block_stop, METH_VARARGS, (char *)"\n"
		"block_stop(block self) -> bool\n"
		"\n"
		"Called to disable drivers, etc for i/o devices.\n"
		""},
	 { (char *)"block_nitems_read", (PyCFunction) _wrap_block_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_nitems_read(block self, unsigned int which_input) -> uint64_t\n"
		"\n"
		"Return the number of items read on input stream which_input.\n"
		""},
	 { (char *)"block_nitems_written", (PyCFunction) _wrap_block_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_nitems_written(block self, unsigned int which_output) -> uint64_t\n"
		"\n"
		"Return the number of items written on output stream which_output.\n"
		""},
	 { (char *)"block_max_noutput_items", _wrap_block_max_noutput_items, METH_VARARGS, (char *)"\n"
		"block_max_noutput_items(block self) -> int\n"
		"\n"
		"Return the maximum number of output items this block will handle during a call to work.\n"
		""},
	 { (char *)"block_set_max_noutput_items", (PyCFunction) _wrap_block_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_set_max_noutput_items(block self, int m)\n"
		"\n"
		"Set the maximum number of output items this block will handle during a call to work.\n"
		""},
	 { (char *)"block_unset_max_noutput_items", _wrap_block_unset_max_noutput_items, METH_VARARGS, (char *)"\n"
		"block_unset_max_noutput_items(block self)\n"
		"\n"
		"Clear the switch for using the max_noutput_items value of this block.\n"
		"\n"
		"When is_set_max_noutput_items() returns 'true', the scheduler will use the value returned by max_noutput_items() to limit the size of the number of items possible for this block's work function. If is_set_max_notput_items() returns 'false', then the scheduler ignores the internal value and uses the value set globally in the top_block.\n"
		"\n"
		"Use this value to clear the 'is_set' flag so the scheduler will ignore this. Use the set_max_noutput_items(m) call to both set a new value for max_noutput_items and to re-enable its use in the scheduler.\n"
		""},
	 { (char *)"block_is_set_max_noutput_items", _wrap_block_is_set_max_noutput_items, METH_VARARGS, (char *)"\n"
		"block_is_set_max_noutput_items(block self) -> bool\n"
		"\n"
		"Ask the block if the flag is or is not set to use the internal value of max_noutput_items during a call to work.\n"
		""},
	 { (char *)"block_set_min_noutput_items", (PyCFunction) _wrap_block_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_set_min_noutput_items(block self, int m)\n"
		"\n"
		"Set the minimum number of output items this block can produce during a call to work.\n"
		""},
	 { (char *)"block_min_noutput_items", _wrap_block_min_noutput_items, METH_VARARGS, (char *)"\n"
		"block_min_noutput_items(block self) -> int\n"
		"\n"
		"Return the minimum number of output items this block can produce during a call to work.\n"
		"\n"
		"Should be 0 for most blocks. Useful if we're dealing with packets and the block produces one packet per call to work.\n"
		""},
	 { (char *)"block_max_output_buffer", (PyCFunction) _wrap_block_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_max_output_buffer(block self, int i) -> long\n"
		"\n"
		"Returns max buffer size on output port .\n"
		""},
	 { (char *)"block_set_max_output_buffer", _wrap_block_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"block_set_max_output_buffer(block self, int port, long max_output_buffer)\n"
		"\n"
		"Request limit on max buffer size on all output ports.\n"
		"\n"
		"This is an advanced feature. Calling this can affect some fundamental assumptions about the system behavior and performance.\n"
		"\n"
		"The actual buffer size is determined by a number of other factors from the block and system. This function only provides a requested maximum. The buffers will always be a multiple of the system page size, which may be larger than the value asked for here.\n"
		""},
	 { (char *)"block_min_output_buffer", (PyCFunction) _wrap_block_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_min_output_buffer(block self, int i) -> long\n"
		"\n"
		"Returns min buffer size on output port .\n"
		""},
	 { (char *)"block_set_min_output_buffer", _wrap_block_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"block_set_min_output_buffer(block self, int port, long min_output_buffer)\n"
		"\n"
		"Request limit on the minimum buffer size on all output ports.\n"
		"\n"
		"This is an advanced feature. Calling this can affect some fundamental assumptions about the system behavior and performance.\n"
		"\n"
		"The actual buffer size is determined by a number of other factors from the block and system. This function only provides a requested minimum. The buffers will always be a multiple of the system page size, which may be larger than the value asked for here.\n"
		""},
	 { (char *)"block_pc_noutput_items", _wrap_block_pc_noutput_items, METH_VARARGS, (char *)"\n"
		"block_pc_noutput_items(block self) -> float\n"
		"\n"
		"Gets instantaneous noutput_items performance counter.\n"
		""},
	 { (char *)"block_pc_noutput_items_avg", _wrap_block_pc_noutput_items_avg, METH_VARARGS, (char *)"\n"
		"block_pc_noutput_items_avg(block self) -> float\n"
		"\n"
		"Gets average noutput_items performance counter.\n"
		""},
	 { (char *)"block_pc_noutput_items_var", _wrap_block_pc_noutput_items_var, METH_VARARGS, (char *)"\n"
		"block_pc_noutput_items_var(block self) -> float\n"
		"\n"
		"Gets variance of noutput_items performance counter.\n"
		""},
	 { (char *)"block_pc_nproduced", _wrap_block_pc_nproduced, METH_VARARGS, (char *)"\n"
		"block_pc_nproduced(block self) -> float\n"
		"\n"
		"Gets instantaneous num items produced performance counter.\n"
		""},
	 { (char *)"block_pc_nproduced_avg", _wrap_block_pc_nproduced_avg, METH_VARARGS, (char *)"\n"
		"block_pc_nproduced_avg(block self) -> float\n"
		"\n"
		"Gets average num items produced performance counter.\n"
		""},
	 { (char *)"block_pc_nproduced_var", _wrap_block_pc_nproduced_var, METH_VARARGS, (char *)"\n"
		"block_pc_nproduced_var(block self) -> float\n"
		"\n"
		"Gets variance of num items produced performance counter.\n"
		""},
	 { (char *)"block_pc_input_buffers_full", _wrap_block_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"block_pc_input_buffers_full(block self) -> std::vector< float,std::allocator< float > >\n"
		"\n"
		"Gets instantaneous fullness of  input buffer.\n"
		""},
	 { (char *)"block_pc_input_buffers_full_avg", _wrap_block_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"block_pc_input_buffers_full_avg(block self) -> std::vector< float,std::allocator< float > >\n"
		"\n"
		"Gets average fullness of  input buffer.\n"
		""},
	 { (char *)"block_pc_input_buffers_full_var", _wrap_block_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"block_pc_input_buffers_full_var(block self) -> std::vector< float,std::allocator< float > >\n"
		"\n"
		"Gets variance of fullness of  input buffer.\n"
		""},
	 { (char *)"block_pc_output_buffers_full", _wrap_block_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"block_pc_output_buffers_full(block self) -> std::vector< float,std::allocator< float > >\n"
		"\n"
		"Gets instantaneous fullness of  input buffer.\n"
		""},
	 { (char *)"block_pc_output_buffers_full_avg", _wrap_block_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"block_pc_output_buffers_full_avg(block self) -> std::vector< float,std::allocator< float > >\n"
		"\n"
		"Gets average fullness of  input buffer.\n"
		""},
	 { (char *)"block_pc_output_buffers_full_var", _wrap_block_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"block_pc_output_buffers_full_var(block self) -> std::vector< float,std::allocator< float > >\n"
		"\n"
		"Gets variance of fullness of  input buffer.\n"
		""},
	 { (char *)"block_pc_work_time", _wrap_block_pc_work_time, METH_VARARGS, (char *)"\n"
		"block_pc_work_time(block self) -> float\n"
		"\n"
		"Gets instantaneous clock cycles spent in work.\n"
		""},
	 { (char *)"block_pc_work_time_avg", _wrap_block_pc_work_time_avg, METH_VARARGS, (char *)"\n"
		"block_pc_work_time_avg(block self) -> float\n"
		"\n"
		"Gets average clock cycles spent in work.\n"
		""},
	 { (char *)"block_pc_work_time_var", _wrap_block_pc_work_time_var, METH_VARARGS, (char *)"\n"
		"block_pc_work_time_var(block self) -> float\n"
		"\n"
		"Gets average clock cycles spent in work.\n"
		""},
	 { (char *)"block_pc_work_time_total", _wrap_block_pc_work_time_total, METH_VARARGS, (char *)"\n"
		"block_pc_work_time_total(block self) -> float\n"
		"\n"
		"Gets total clock cycles spent in work.\n"
		""},
	 { (char *)"block_pc_throughput_avg", _wrap_block_pc_throughput_avg, METH_VARARGS, (char *)"\n"
		"block_pc_throughput_avg(block self) -> float\n"
		"\n"
		"Gets average throughput.\n"
		""},
	 { (char *)"block_set_processor_affinity", (PyCFunction) _wrap_block_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_set_processor_affinity(block self, std::vector< int,std::allocator< int > > const & mask)\n"
		"\n"
		"Set the thread's affinity to processor core .\n"
		""},
	 { (char *)"block_unset_processor_affinity", _wrap_block_unset_processor_affinity, METH_VARARGS, (char *)"\n"
		"block_unset_processor_affinity(block self)\n"
		"\n"
		"Remove processor affinity to a specific core.\n"
		""},
	 { (char *)"block_processor_affinity", _wrap_block_processor_affinity, METH_VARARGS, (char *)"\n"
		"block_processor_affinity(block self) -> std::vector< int,std::allocator< int > >\n"
		"\n"
		"Get the current processor affinity.\n"
		""},
	 { (char *)"block_active_thread_priority", _wrap_block_active_thread_priority, METH_VARARGS, (char *)"\n"
		"block_active_thread_priority(block self) -> int\n"
		"\n"
		"Get the current thread priority in use.\n"
		""},
	 { (char *)"block_thread_priority", _wrap_block_thread_priority, METH_VARARGS, (char *)"\n"
		"block_thread_priority(block self) -> int\n"
		"\n"
		"Get the current thread priority stored.\n"
		""},
	 { (char *)"block_set_thread_priority", (PyCFunction) _wrap_block_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_set_thread_priority(block self, int priority) -> int\n"
		"\n"
		"Set the current thread priority.\n"
		""},
	 { (char *)"block_swigregister", block_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_block_detail_sptr", _wrap_new_block_detail_sptr, METH_VARARGS, (char *)"\n"
		"block_detail_sptr()\n"
		"new_block_detail_sptr(gr::block_detail * p) -> block_detail_sptr\n"
		""},
	 { (char *)"block_detail_sptr___deref__", _wrap_block_detail_sptr___deref__, METH_VARARGS, (char *)"block_detail_sptr___deref__(block_detail_sptr self) -> gr::block_detail *"},
	 { (char *)"delete_block_detail_sptr", _wrap_delete_block_detail_sptr, METH_VARARGS, (char *)"delete_block_detail_sptr(block_detail_sptr self)"},
	 { (char *)"block_detail_sptr_ninputs", _wrap_block_detail_sptr_ninputs, METH_VARARGS, (char *)"block_detail_sptr_ninputs(block_detail_sptr self) -> int"},
	 { (char *)"block_detail_sptr_noutputs", _wrap_block_detail_sptr_noutputs, METH_VARARGS, (char *)"block_detail_sptr_noutputs(block_detail_sptr self) -> int"},
	 { (char *)"block_detail_sptr_sink_p", _wrap_block_detail_sptr_sink_p, METH_VARARGS, (char *)"block_detail_sptr_sink_p(block_detail_sptr self) -> bool"},
	 { (char *)"block_detail_sptr_source_p", _wrap_block_detail_sptr_source_p, METH_VARARGS, (char *)"block_detail_sptr_source_p(block_detail_sptr self) -> bool"},
	 { (char *)"block_detail_sptr_set_input", (PyCFunction) _wrap_block_detail_sptr_set_input, METH_VARARGS | METH_KEYWORDS, (char *)"block_detail_sptr_set_input(block_detail_sptr self, unsigned int which, buffer_reader_sptr reader)"},
	 { (char *)"block_detail_sptr_input", (PyCFunction) _wrap_block_detail_sptr_input, METH_VARARGS | METH_KEYWORDS, (char *)"block_detail_sptr_input(block_detail_sptr self, unsigned int which) -> buffer_reader_sptr"},
	 { (char *)"block_detail_sptr_set_output", (PyCFunction) _wrap_block_detail_sptr_set_output, METH_VARARGS | METH_KEYWORDS, (char *)"block_detail_sptr_set_output(block_detail_sptr self, unsigned int which, buffer_sptr buffer)"},
	 { (char *)"block_detail_sptr_output", (PyCFunction) _wrap_block_detail_sptr_output, METH_VARARGS | METH_KEYWORDS, (char *)"block_detail_sptr_output(block_detail_sptr self, unsigned int which) -> buffer_sptr"},
	 { (char *)"block_detail_sptr_swigregister", block_detail_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"block_detail_ncurrently_allocated", _wrap_block_detail_ncurrently_allocated, METH_VARARGS, (char *)"block_detail_ncurrently_allocated() -> long"},
	 { (char *)"new_buffer_sptr", _wrap_new_buffer_sptr, METH_VARARGS, (char *)"\n"
		"buffer_sptr()\n"
		"new_buffer_sptr(gr::buffer * p) -> buffer_sptr\n"
		""},
	 { (char *)"buffer_sptr___deref__", _wrap_buffer_sptr___deref__, METH_VARARGS, (char *)"buffer_sptr___deref__(buffer_sptr self) -> gr::buffer *"},
	 { (char *)"delete_buffer_sptr", _wrap_delete_buffer_sptr, METH_VARARGS, (char *)"delete_buffer_sptr(buffer_sptr self)"},
	 { (char *)"buffer_sptr_swigregister", buffer_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_buffer_reader_sptr", _wrap_new_buffer_reader_sptr, METH_VARARGS, (char *)"\n"
		"buffer_reader_sptr()\n"
		"new_buffer_reader_sptr(gr::buffer_reader * p) -> buffer_reader_sptr\n"
		""},
	 { (char *)"buffer_reader_sptr___deref__", _wrap_buffer_reader_sptr___deref__, METH_VARARGS, (char *)"buffer_reader_sptr___deref__(buffer_reader_sptr self) -> gr::buffer_reader *"},
	 { (char *)"delete_buffer_reader_sptr", _wrap_delete_buffer_reader_sptr, METH_VARARGS, (char *)"delete_buffer_reader_sptr(buffer_reader_sptr self)"},
	 { (char *)"buffer_reader_sptr_swigregister", buffer_reader_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"buffer_ncurrently_allocated", _wrap_buffer_ncurrently_allocated, METH_VARARGS, (char *)"\n"
		"buffer_ncurrently_allocated() -> long\n"
		"\n"
		"returns # of buffers currently allocated\n"
		""},
	 { (char *)"buffer_reader_ncurrently_allocated", _wrap_buffer_reader_ncurrently_allocated, METH_VARARGS, (char *)"\n"
		"buffer_reader_ncurrently_allocated() -> long\n"
		"\n"
		"returns # of buffer_readers currently allocated\n"
		""},
	 { (char *)"prefix", _wrap_prefix, METH_VARARGS, (char *)"\n"
		"prefix() -> std::string const\n"
		"\n"
		"return SYSCONFDIR. Typically ${CMAKE_INSTALL_PREFIX}/etc or /etc\n"
		""},
	 { (char *)"sysconfdir", _wrap_sysconfdir, METH_VARARGS, (char *)"\n"
		"sysconfdir() -> std::string const\n"
		"\n"
		"return SYSCONFDIR. Typically ${CMAKE_INSTALL_PREFIX}/etc or /etc\n"
		""},
	 { (char *)"prefsdir", _wrap_prefsdir, METH_VARARGS, (char *)"\n"
		"prefsdir() -> std::string const\n"
		"\n"
		"return preferences file directory. Typically ${SYSCONFDIR}/etc/conf.d\n"
		""},
	 { (char *)"build_date", _wrap_build_date, METH_VARARGS, (char *)"\n"
		"build_date() -> std::string const\n"
		"\n"
		"return date/time of build, as set when 'cmake' is run\n"
		""},
	 { (char *)"version", _wrap_version, METH_VARARGS, (char *)"\n"
		"version() -> std::string const\n"
		"\n"
		"return version string defined by cmake (GrVersion.cmake)\n"
		""},
	 { (char *)"major_version", _wrap_major_version, METH_VARARGS, (char *)"\n"
		"major_version() -> std::string const\n"
		"\n"
		"return just the major version defined by cmake\n"
		""},
	 { (char *)"api_version", _wrap_api_version, METH_VARARGS, (char *)"\n"
		"api_version() -> std::string const\n"
		"\n"
		"return just the api version defined by cmake\n"
		""},
	 { (char *)"minor_version", _wrap_minor_version, METH_VARARGS, (char *)"\n"
		"minor_version() -> std::string const\n"
		"\n"
		"returnjust the minor version defined by cmake\n"
		""},
	 { (char *)"feval_dd_example", (PyCFunction) _wrap_feval_dd_example, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"feval_dd_example(gr::feval_dd * f, double x) -> double\n"
		"\n"
		"trivial examples / test cases showing C++ calling Python code\n"
		""},
	 { (char *)"feval_cc_example", (PyCFunction) _wrap_feval_cc_example, METH_VARARGS | METH_KEYWORDS, (char *)"feval_cc_example(gr::feval_cc * f, gr_complex x) -> gr_complex"},
	 { (char *)"feval_ll_example", (PyCFunction) _wrap_feval_ll_example, METH_VARARGS | METH_KEYWORDS, (char *)"feval_ll_example(gr::feval_ll * f, long x) -> long"},
	 { (char *)"feval_example", (PyCFunction) _wrap_feval_example, METH_VARARGS | METH_KEYWORDS, (char *)"feval_example(gr::feval * f)"},
	 { (char *)"new_ensure_py_gil_state", _wrap_new_ensure_py_gil_state, METH_VARARGS, (char *)"new_ensure_py_gil_state() -> ensure_py_gil_state"},
	 { (char *)"delete_ensure_py_gil_state", _wrap_delete_ensure_py_gil_state, METH_VARARGS, (char *)"delete_ensure_py_gil_state(ensure_py_gil_state self)"},
	 { (char *)"ensure_py_gil_state_swigregister", ensure_py_gil_state_swigregister, METH_VARARGS, NULL},
	 { (char *)"feval_dd_calleval", (PyCFunction) _wrap_feval_dd_calleval, METH_VARARGS | METH_KEYWORDS, (char *)"feval_dd_calleval(feval_dd self, double x) -> double"},
	 { (char *)"delete_feval_dd", _wrap_delete_feval_dd, METH_VARARGS, (char *)"delete_feval_dd(feval_dd self)"},
	 { (char *)"new_feval_dd", (PyCFunction) _wrap_new_feval_dd, METH_VARARGS | METH_KEYWORDS, (char *)"new_feval_dd(PyObject * self) -> feval_dd"},
	 { (char *)"disown_feval_dd", (PyCFunction) _wrap_disown_feval_dd, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"feval_dd_eval", (PyCFunction) _wrap_feval_dd_eval, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"feval_dd_eval(feval_dd self, double x) -> double\n"
		"\n"
		"override this to define the function\n"
		""},
	 { (char *)"feval_dd_swigregister", feval_dd_swigregister, METH_VARARGS, NULL},
	 { (char *)"feval_cc_calleval", (PyCFunction) _wrap_feval_cc_calleval, METH_VARARGS | METH_KEYWORDS, (char *)"feval_cc_calleval(feval_cc self, gr_complex x) -> gr_complex"},
	 { (char *)"delete_feval_cc", _wrap_delete_feval_cc, METH_VARARGS, (char *)"delete_feval_cc(feval_cc self)"},
	 { (char *)"new_feval_cc", (PyCFunction) _wrap_new_feval_cc, METH_VARARGS | METH_KEYWORDS, (char *)"new_feval_cc(PyObject * self) -> feval_cc"},
	 { (char *)"disown_feval_cc", (PyCFunction) _wrap_disown_feval_cc, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"feval_cc_eval", (PyCFunction) _wrap_feval_cc_eval, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"feval_cc_eval(feval_cc self, gr_complex x) -> gr_complex\n"
		"\n"
		"override this to define the function\n"
		""},
	 { (char *)"feval_cc_swigregister", feval_cc_swigregister, METH_VARARGS, NULL},
	 { (char *)"feval_ll_calleval", (PyCFunction) _wrap_feval_ll_calleval, METH_VARARGS | METH_KEYWORDS, (char *)"feval_ll_calleval(feval_ll self, long x) -> long"},
	 { (char *)"delete_feval_ll", _wrap_delete_feval_ll, METH_VARARGS, (char *)"delete_feval_ll(feval_ll self)"},
	 { (char *)"new_feval_ll", (PyCFunction) _wrap_new_feval_ll, METH_VARARGS | METH_KEYWORDS, (char *)"new_feval_ll(PyObject * self) -> feval_ll"},
	 { (char *)"disown_feval_ll", (PyCFunction) _wrap_disown_feval_ll, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"feval_ll_eval", (PyCFunction) _wrap_feval_ll_eval, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"feval_ll_eval(feval_ll self, long x) -> long\n"
		"\n"
		"override this to define the function\n"
		""},
	 { (char *)"feval_ll_swigregister", feval_ll_swigregister, METH_VARARGS, NULL},
	 { (char *)"feval_calleval", _wrap_feval_calleval, METH_VARARGS, (char *)"feval_calleval(feval self)"},
	 { (char *)"delete_feval", _wrap_delete_feval, METH_VARARGS, (char *)"delete_feval(feval self)"},
	 { (char *)"new_feval", (PyCFunction) _wrap_new_feval, METH_VARARGS | METH_KEYWORDS, (char *)"new_feval(PyObject * self) -> feval"},
	 { (char *)"disown_feval", (PyCFunction) _wrap_disown_feval, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"feval_eval", _wrap_feval_eval, METH_VARARGS, (char *)"\n"
		"feval_eval(feval self)\n"
		"\n"
		"override this to define the function\n"
		""},
	 { (char *)"feval_swigregister", feval_swigregister, METH_VARARGS, NULL},
	 { (char *)"feval_p_calleval", (PyCFunction) _wrap_feval_p_calleval, METH_VARARGS | METH_KEYWORDS, (char *)"feval_p_calleval(feval_p self, swig_int_ptr x)"},
	 { (char *)"delete_feval_p", _wrap_delete_feval_p, METH_VARARGS, (char *)"delete_feval_p(feval_p self)"},
	 { (char *)"new_feval_p", (PyCFunction) _wrap_new_feval_p, METH_VARARGS | METH_KEYWORDS, (char *)"new_feval_p(PyObject * self) -> feval_p"},
	 { (char *)"disown_feval_p", (PyCFunction) _wrap_disown_feval_p, METH_VARARGS | METH_KEYWORDS, NULL},
	 { (char *)"feval_p_eval", (PyCFunction) _wrap_feval_p_eval, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"feval_p_eval(feval_p self, swig_int_ptr x)\n"
		"\n"
		"override this to define the function\n"
		""},
	 { (char *)"feval_p_swigregister", feval_p_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_hier_block2_sptr", _wrap_new_hier_block2_sptr, METH_VARARGS, (char *)"\n"
		"hier_block2_sptr()\n"
		"new_hier_block2_sptr(hier_block2 p) -> hier_block2_sptr\n"
		""},
	 { (char *)"hier_block2_sptr___deref__", _wrap_hier_block2_sptr___deref__, METH_VARARGS, (char *)"hier_block2_sptr___deref__(hier_block2_sptr self) -> hier_block2"},
	 { (char *)"delete_hier_block2_sptr", _wrap_delete_hier_block2_sptr, METH_VARARGS, (char *)"delete_hier_block2_sptr(hier_block2_sptr self)"},
	 { (char *)"hier_block2_sptr_primitive_connect", _wrap_hier_block2_sptr_primitive_connect, METH_VARARGS, (char *)"\n"
		"primitive_connect(basic_block_sptr block)\n"
		"hier_block2_sptr_primitive_connect(hier_block2_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, \n"
		"    int dst_port)\n"
		"\n"
		"Add a stand-alone (possibly hierarchical) block to internal graph.\n"
		"\n"
		"This adds a gr-block or hierarchical block to the internal graph without wiring it to anything else.\n"
		""},
	 { (char *)"hier_block2_sptr_primitive_msg_connect", _wrap_hier_block2_sptr_primitive_msg_connect, METH_VARARGS, (char *)"\n"
		"primitive_msg_connect(basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)\n"
		"hier_block2_sptr_primitive_msg_connect(hier_block2_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, \n"
		"    std::string dstport)\n"
		"\n"
		"Add gr-blocks or hierarchical blocks to internal graph and wire together.\n"
		"\n"
		"This adds (if not done earlier by another connect) a pair of gr-blocks or hierarchical blocks to the internal message port subscription\n"
		""},
	 { (char *)"hier_block2_sptr_primitive_msg_disconnect", _wrap_hier_block2_sptr_primitive_msg_disconnect, METH_VARARGS, (char *)"\n"
		"primitive_msg_disconnect(basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)\n"
		"hier_block2_sptr_primitive_msg_disconnect(hier_block2_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, \n"
		"    std::string dstport)\n"
		""},
	 { (char *)"hier_block2_sptr_primitive_disconnect", _wrap_hier_block2_sptr_primitive_disconnect, METH_VARARGS, (char *)"\n"
		"primitive_disconnect(basic_block_sptr block)\n"
		"hier_block2_sptr_primitive_disconnect(hier_block2_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, \n"
		"    int dst_port)\n"
		"\n"
		"Remove a gr-block or hierarchical block from the internal flowgraph.\n"
		"\n"
		"This removes a gr-block or hierarchical block from the internal flowgraph, disconnecting it from other blocks as needed.\n"
		""},
	 { (char *)"hier_block2_sptr_disconnect_all", _wrap_hier_block2_sptr_disconnect_all, METH_VARARGS, (char *)"\n"
		"hier_block2_sptr_disconnect_all(hier_block2_sptr self)\n"
		"\n"
		"Disconnect all connections in the internal flowgraph.\n"
		"\n"
		"This call removes all output port to input port connections in the internal flowgraph.\n"
		""},
	 { (char *)"hier_block2_sptr_lock", _wrap_hier_block2_sptr_lock, METH_VARARGS, (char *)"\n"
		"hier_block2_sptr_lock(hier_block2_sptr self)\n"
		"\n"
		"Lock a flowgraph in preparation for reconfiguration. When an equal number of calls to lock() and unlock() have occurred, the flowgraph will be reconfigured.\n"
		"\n"
		"N.B. lock() and unlock() may not be called from a flowgraph thread (E.g., gr::block::work method) or deadlock will occur when reconfiguration happens.\n"
		""},
	 { (char *)"hier_block2_sptr_unlock", _wrap_hier_block2_sptr_unlock, METH_VARARGS, (char *)"\n"
		"hier_block2_sptr_unlock(hier_block2_sptr self)\n"
		"\n"
		"Unlock a flowgraph in preparation for reconfiguration. When an equal number of calls to lock() and unlock() have occurred, the flowgraph will be reconfigured.\n"
		"\n"
		"N.B. lock() and unlock() may not be called from a flowgraph thread (E.g., gr::block::work method) or deadlock will occur when reconfiguration happens.\n"
		""},
	 { (char *)"hier_block2_sptr_primitive_message_port_register_hier_in", (PyCFunction) _wrap_hier_block2_sptr_primitive_message_port_register_hier_in, METH_VARARGS | METH_KEYWORDS, (char *)"hier_block2_sptr_primitive_message_port_register_hier_in(hier_block2_sptr self, swig_int_ptr port_id)"},
	 { (char *)"hier_block2_sptr_primitive_message_port_register_hier_out", (PyCFunction) _wrap_hier_block2_sptr_primitive_message_port_register_hier_out, METH_VARARGS | METH_KEYWORDS, (char *)"hier_block2_sptr_primitive_message_port_register_hier_out(hier_block2_sptr self, swig_int_ptr port_id)"},
	 { (char *)"hier_block2_sptr_set_processor_affinity", (PyCFunction) _wrap_hier_block2_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"hier_block2_sptr_set_processor_affinity(hier_block2_sptr self, std::vector< int,std::allocator< int > > const & mask)\n"
		"\n"
		"Set the affinity of all blocks in hier_block2 to processor core .\n"
		""},
	 { (char *)"hier_block2_sptr_unset_processor_affinity", _wrap_hier_block2_sptr_unset_processor_affinity, METH_VARARGS, (char *)"\n"
		"hier_block2_sptr_unset_processor_affinity(hier_block2_sptr self)\n"
		"\n"
		"Remove processor affinity for all blocks in hier_block2.\n"
		""},
	 { (char *)"hier_block2_sptr_processor_affinity", _wrap_hier_block2_sptr_processor_affinity, METH_VARARGS, (char *)"\n"
		"hier_block2_sptr_processor_affinity(hier_block2_sptr self) -> std::vector< int,std::allocator< int > >\n"
		"\n"
		"Get the current processor affinity.\n"
		"\n"
		"This returns the processor affinity value for the first block in the hier_block2's list of blocks with the assumption that they have always only been set through the hier_block2's interface. If any block has been individually set, then this call could be misleading.\n"
		""},
	 { (char *)"hier_block2_sptr_max_output_buffer", (PyCFunction) _wrap_hier_block2_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"hier_block2_sptr_max_output_buffer(hier_block2_sptr self, int i) -> size_t\n"
		"\n"
		"Returns max buffer size (itemcount) on output port .\n"
		""},
	 { (char *)"hier_block2_sptr_set_max_output_buffer", _wrap_hier_block2_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(size_t max_output_buffer)\n"
		"hier_block2_sptr_set_max_output_buffer(hier_block2_sptr self, int port, size_t max_output_buffer)\n"
		"\n"
		"Sets max buffer size (itemcount) on all output ports.\n"
		""},
	 { (char *)"hier_block2_sptr_min_output_buffer", (PyCFunction) _wrap_hier_block2_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"hier_block2_sptr_min_output_buffer(hier_block2_sptr self, int i) -> size_t\n"
		"\n"
		"Returns min buffer size (itemcount) on output port .\n"
		""},
	 { (char *)"hier_block2_sptr_set_min_output_buffer", _wrap_hier_block2_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(size_t min_output_buffer)\n"
		"hier_block2_sptr_set_min_output_buffer(hier_block2_sptr self, int port, size_t min_output_buffer)\n"
		"\n"
		"Sets min buffer size (itemcount) on all output ports.\n"
		""},
	 { (char *)"hier_block2_sptr_to_hier_block2", _wrap_hier_block2_sptr_to_hier_block2, METH_VARARGS, (char *)"hier_block2_sptr_to_hier_block2(hier_block2_sptr self) -> hier_block2_sptr"},
	 { (char *)"hier_block2_sptr_name", _wrap_hier_block2_sptr_name, METH_VARARGS, (char *)"\n"
		"hier_block2_sptr_name(hier_block2_sptr self) -> std::string\n"
		"\n"
		"The name of the block\n"
		""},
	 { (char *)"hier_block2_sptr_symbol_name", _wrap_hier_block2_sptr_symbol_name, METH_VARARGS, (char *)"\n"
		"hier_block2_sptr_symbol_name(hier_block2_sptr self) -> std::string\n"
		"\n"
		"The sybolic name of the block, which is used in the block_registry. The name is assigned by the block's constructor and never changes during the life of the block.\n"
		""},
	 { (char *)"hier_block2_sptr_input_signature", _wrap_hier_block2_sptr_input_signature, METH_VARARGS, (char *)"hier_block2_sptr_input_signature(hier_block2_sptr self) -> io_signature_sptr"},
	 { (char *)"hier_block2_sptr_output_signature", _wrap_hier_block2_sptr_output_signature, METH_VARARGS, (char *)"hier_block2_sptr_output_signature(hier_block2_sptr self) -> io_signature_sptr"},
	 { (char *)"hier_block2_sptr_unique_id", _wrap_hier_block2_sptr_unique_id, METH_VARARGS, (char *)"hier_block2_sptr_unique_id(hier_block2_sptr self) -> long"},
	 { (char *)"hier_block2_sptr_to_basic_block", _wrap_hier_block2_sptr_to_basic_block, METH_VARARGS, (char *)"hier_block2_sptr_to_basic_block(hier_block2_sptr self) -> basic_block_sptr"},
	 { (char *)"hier_block2_sptr_check_topology", (PyCFunction) _wrap_hier_block2_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"hier_block2_sptr_check_topology(hier_block2_sptr self, int ninputs, int noutputs) -> bool\n"
		"\n"
		"Confirm that ninputs and noutputs is an acceptable combination.\n"
		"\n"
		"This function is called by the runtime system whenever the topology changes. Most classes do not need to override this. This check is in addition to the constraints specified by the input and output gr::io_signatures.\n"
		""},
	 { (char *)"hier_block2_sptr_alias", _wrap_hier_block2_sptr_alias, METH_VARARGS, (char *)"\n"
		"hier_block2_sptr_alias(hier_block2_sptr self) -> std::string\n"
		"\n"
		"Returns the block's alias as a string.\n"
		""},
	 { (char *)"hier_block2_sptr_set_block_alias", (PyCFunction) _wrap_hier_block2_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"hier_block2_sptr_set_block_alias(hier_block2_sptr self, std::string name)\n"
		"\n"
		"Set's a new alias for the block; also adds an entry into the block_registry to get the block using either the alias or the original symbol name.\n"
		""},
	 { (char *)"hier_block2_sptr__post", (PyCFunction) _wrap_hier_block2_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"hier_block2_sptr__post(hier_block2_sptr self, swig_int_ptr which_port, swig_int_ptr msg)\n"
		"\n"
		"Accept msg, place in queue, arrange for thread to be awakened if it's not already.\n"
		""},
	 { (char *)"hier_block2_sptr_message_ports_in", _wrap_hier_block2_sptr_message_ports_in, METH_VARARGS, (char *)"\n"
		"hier_block2_sptr_message_ports_in(hier_block2_sptr self) -> swig_int_ptr\n"
		"\n"
		"Get input message port names.\n"
		"\n"
		"Returns the available input message ports for a block. The return object is a PMT vector that is filled with PMT symbols.\n"
		""},
	 { (char *)"hier_block2_sptr_message_ports_out", _wrap_hier_block2_sptr_message_ports_out, METH_VARARGS, (char *)"\n"
		"hier_block2_sptr_message_ports_out(hier_block2_sptr self) -> swig_int_ptr\n"
		"\n"
		"Get output message port names.\n"
		"\n"
		"Returns the available output message ports for a block. The return object is a PMT vector that is filled with PMT symbols.\n"
		""},
	 { (char *)"hier_block2_sptr_message_subscribers", (PyCFunction) _wrap_hier_block2_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"hier_block2_sptr_message_subscribers(hier_block2_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"hier_block2_sptr_swigregister", hier_block2_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"hier_block2_swig", (PyCFunction) _wrap_hier_block2_swig, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"hier_block2_swig(std::string const name, io_signature_sptr input_signature, io_signature_sptr output_signature) -> hier_block2_sptr\n"
		"\n"
		"public constructor for hier_block2\n"
		""},
	 { (char *)"delete_hier_block2", _wrap_delete_hier_block2, METH_VARARGS, (char *)"delete_hier_block2(hier_block2 self)"},
	 { (char *)"hier_block2_primitive_connect", _wrap_hier_block2_primitive_connect, METH_VARARGS, (char *)"\n"
		"primitive_connect(basic_block_sptr block)\n"
		"hier_block2_primitive_connect(hier_block2 self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)\n"
		"\n"
		"Add a stand-alone (possibly hierarchical) block to internal graph.\n"
		"\n"
		"This adds a gr-block or hierarchical block to the internal graph without wiring it to anything else.\n"
		""},
	 { (char *)"hier_block2_primitive_msg_connect", _wrap_hier_block2_primitive_msg_connect, METH_VARARGS, (char *)"\n"
		"primitive_msg_connect(basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)\n"
		"hier_block2_primitive_msg_connect(hier_block2 self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, \n"
		"    std::string dstport)\n"
		"\n"
		"Add gr-blocks or hierarchical blocks to internal graph and wire together.\n"
		"\n"
		"This adds (if not done earlier by another connect) a pair of gr-blocks or hierarchical blocks to the internal message port subscription\n"
		""},
	 { (char *)"hier_block2_primitive_msg_disconnect", _wrap_hier_block2_primitive_msg_disconnect, METH_VARARGS, (char *)"\n"
		"primitive_msg_disconnect(basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)\n"
		"hier_block2_primitive_msg_disconnect(hier_block2 self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, \n"
		"    std::string dstport)\n"
		""},
	 { (char *)"hier_block2_primitive_disconnect", _wrap_hier_block2_primitive_disconnect, METH_VARARGS, (char *)"\n"
		"primitive_disconnect(basic_block_sptr block)\n"
		"hier_block2_primitive_disconnect(hier_block2 self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)\n"
		"\n"
		"Remove a gr-block or hierarchical block from the internal flowgraph.\n"
		"\n"
		"This removes a gr-block or hierarchical block from the internal flowgraph, disconnecting it from other blocks as needed.\n"
		""},
	 { (char *)"hier_block2_disconnect_all", _wrap_hier_block2_disconnect_all, METH_VARARGS, (char *)"\n"
		"hier_block2_disconnect_all(hier_block2 self)\n"
		"\n"
		"Disconnect all connections in the internal flowgraph.\n"
		"\n"
		"This call removes all output port to input port connections in the internal flowgraph.\n"
		""},
	 { (char *)"hier_block2_lock", _wrap_hier_block2_lock, METH_VARARGS, (char *)"\n"
		"hier_block2_lock(hier_block2 self)\n"
		"\n"
		"Lock a flowgraph in preparation for reconfiguration. When an equal number of calls to lock() and unlock() have occurred, the flowgraph will be reconfigured.\n"
		"\n"
		"N.B. lock() and unlock() may not be called from a flowgraph thread (E.g., gr::block::work method) or deadlock will occur when reconfiguration happens.\n"
		""},
	 { (char *)"hier_block2_unlock", _wrap_hier_block2_unlock, METH_VARARGS, (char *)"\n"
		"hier_block2_unlock(hier_block2 self)\n"
		"\n"
		"Unlock a flowgraph in preparation for reconfiguration. When an equal number of calls to lock() and unlock() have occurred, the flowgraph will be reconfigured.\n"
		"\n"
		"N.B. lock() and unlock() may not be called from a flowgraph thread (E.g., gr::block::work method) or deadlock will occur when reconfiguration happens.\n"
		""},
	 { (char *)"hier_block2_primitive_message_port_register_hier_in", (PyCFunction) _wrap_hier_block2_primitive_message_port_register_hier_in, METH_VARARGS | METH_KEYWORDS, (char *)"hier_block2_primitive_message_port_register_hier_in(hier_block2 self, swig_int_ptr port_id)"},
	 { (char *)"hier_block2_primitive_message_port_register_hier_out", (PyCFunction) _wrap_hier_block2_primitive_message_port_register_hier_out, METH_VARARGS | METH_KEYWORDS, (char *)"hier_block2_primitive_message_port_register_hier_out(hier_block2 self, swig_int_ptr port_id)"},
	 { (char *)"hier_block2_set_processor_affinity", (PyCFunction) _wrap_hier_block2_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"hier_block2_set_processor_affinity(hier_block2 self, std::vector< int,std::allocator< int > > const & mask)\n"
		"\n"
		"Set the affinity of all blocks in hier_block2 to processor core .\n"
		""},
	 { (char *)"hier_block2_unset_processor_affinity", _wrap_hier_block2_unset_processor_affinity, METH_VARARGS, (char *)"\n"
		"hier_block2_unset_processor_affinity(hier_block2 self)\n"
		"\n"
		"Remove processor affinity for all blocks in hier_block2.\n"
		""},
	 { (char *)"hier_block2_processor_affinity", _wrap_hier_block2_processor_affinity, METH_VARARGS, (char *)"\n"
		"hier_block2_processor_affinity(hier_block2 self) -> std::vector< int,std::allocator< int > >\n"
		"\n"
		"Get the current processor affinity.\n"
		"\n"
		"This returns the processor affinity value for the first block in the hier_block2's list of blocks with the assumption that they have always only been set through the hier_block2's interface. If any block has been individually set, then this call could be misleading.\n"
		""},
	 { (char *)"hier_block2_max_output_buffer", (PyCFunction) _wrap_hier_block2_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"hier_block2_max_output_buffer(hier_block2 self, int i) -> size_t\n"
		"\n"
		"Returns max buffer size (itemcount) on output port .\n"
		""},
	 { (char *)"hier_block2_set_max_output_buffer", _wrap_hier_block2_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(size_t max_output_buffer)\n"
		"hier_block2_set_max_output_buffer(hier_block2 self, int port, size_t max_output_buffer)\n"
		"\n"
		"Sets max buffer size (itemcount) on all output ports.\n"
		""},
	 { (char *)"hier_block2_min_output_buffer", (PyCFunction) _wrap_hier_block2_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"hier_block2_min_output_buffer(hier_block2 self, int i) -> size_t\n"
		"\n"
		"Returns min buffer size (itemcount) on output port .\n"
		""},
	 { (char *)"hier_block2_set_min_output_buffer", _wrap_hier_block2_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(size_t min_output_buffer)\n"
		"hier_block2_set_min_output_buffer(hier_block2 self, int port, size_t min_output_buffer)\n"
		"\n"
		"Sets min buffer size (itemcount) on all output ports.\n"
		""},
	 { (char *)"hier_block2_to_hier_block2", _wrap_hier_block2_to_hier_block2, METH_VARARGS, (char *)"hier_block2_to_hier_block2(hier_block2 self) -> hier_block2_sptr"},
	 { (char *)"hier_block2_swigregister", hier_block2_swigregister, METH_VARARGS, NULL},
	 { (char *)"dot_graph", (PyCFunction) _wrap_dot_graph, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"dot_graph(hier_block2_sptr hierblock2) -> std::string\n"
		"\n"
		"Return hierarchical block's flow graph represented in dot language.\n"
		""},
	 { (char *)"delete_io_signature", _wrap_delete_io_signature, METH_VARARGS, (char *)"delete_io_signature(io_signature self)"},
	 { (char *)"io_signature_make", (PyCFunction) _wrap_io_signature_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"io_signature_make(int min_streams, int max_streams, int sizeof_stream_item) -> io_signature_sptr\n"
		"\n"
		"i/o signature for input and output ports.\n"
		"\n"
		"misc\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Create an i/o signature.\n"
		"\n"
		"Args:\n"
		"    min_streams : specify minimum number of streams (>= 0)\n"
		"    max_streams : specify maximum number of streams (>= min_streams or -1 -> infinite)\n"
		"    sizeof_stream_item : specify the size of the items in each stream\n"
		""},
	 { (char *)"io_signature_make2", (PyCFunction) _wrap_io_signature_make2, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"io_signature_make2(int min_streams, int max_streams, int sizeof_stream_item1, int sizeof_stream_item2) -> io_signature_sptr\n"
		"\n"
		"Create an i/o signature.\n"
		""},
	 { (char *)"io_signature_make3", (PyCFunction) _wrap_io_signature_make3, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"io_signature_make3(int min_streams, int max_streams, int sizeof_stream_item1, int sizeof_stream_item2, \n"
		"    int sizeof_stream_item3) -> io_signature_sptr\n"
		"\n"
		"Create an i/o signature.\n"
		""},
	 { (char *)"io_signature_makev", (PyCFunction) _wrap_io_signature_makev, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"io_signature_makev(int min_streams, int max_streams, std::vector< int,std::allocator< int > > const & sizeof_stream_items) -> io_signature_sptr\n"
		"\n"
		"Create an i/o signature.\n"
		"\n"
		"If there are more streams than there are entries in sizeof_stream_items, the value of the last entry in sizeof_stream_items is used for the missing values. sizeof_stream_items must contain at least 1 entry.\n"
		""},
	 { (char *)"io_signature_min_streams", _wrap_io_signature_min_streams, METH_VARARGS, (char *)"io_signature_min_streams(io_signature self) -> int"},
	 { (char *)"io_signature_max_streams", _wrap_io_signature_max_streams, METH_VARARGS, (char *)"io_signature_max_streams(io_signature self) -> int"},
	 { (char *)"io_signature_sizeof_stream_item", (PyCFunction) _wrap_io_signature_sizeof_stream_item, METH_VARARGS | METH_KEYWORDS, (char *)"io_signature_sizeof_stream_item(io_signature self, int index) -> int"},
	 { (char *)"io_signature_sizeof_stream_items", _wrap_io_signature_sizeof_stream_items, METH_VARARGS, (char *)"io_signature_sizeof_stream_items(io_signature self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"io_signature_swigregister", io_signature_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_io_signature_sptr", _wrap_new_io_signature_sptr, METH_VARARGS, (char *)"\n"
		"io_signature_sptr()\n"
		"new_io_signature_sptr(io_signature p) -> io_signature_sptr\n"
		""},
	 { (char *)"io_signature_sptr___deref__", _wrap_io_signature_sptr___deref__, METH_VARARGS, (char *)"io_signature_sptr___deref__(io_signature_sptr self) -> io_signature"},
	 { (char *)"delete_io_signature_sptr", _wrap_delete_io_signature_sptr, METH_VARARGS, (char *)"delete_io_signature_sptr(io_signature_sptr self)"},
	 { (char *)"io_signature_sptr_make", (PyCFunction) _wrap_io_signature_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"io_signature_sptr_make(io_signature_sptr self, int min_streams, int max_streams, int sizeof_stream_item) -> io_signature_sptr\n"
		"\n"
		"i/o signature for input and output ports.\n"
		"\n"
		"misc\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Create an i/o signature.\n"
		"\n"
		"Args:\n"
		"    min_streams : specify minimum number of streams (>= 0)\n"
		"    max_streams : specify maximum number of streams (>= min_streams or -1 -> infinite)\n"
		"    sizeof_stream_item : specify the size of the items in each stream\n"
		""},
	 { (char *)"io_signature_sptr_make2", (PyCFunction) _wrap_io_signature_sptr_make2, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"io_signature_sptr_make2(io_signature_sptr self, int min_streams, int max_streams, int sizeof_stream_item1, \n"
		"    int sizeof_stream_item2) -> io_signature_sptr\n"
		"\n"
		"Create an i/o signature.\n"
		""},
	 { (char *)"io_signature_sptr_make3", (PyCFunction) _wrap_io_signature_sptr_make3, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"io_signature_sptr_make3(io_signature_sptr self, int min_streams, int max_streams, int sizeof_stream_item1, \n"
		"    int sizeof_stream_item2, int sizeof_stream_item3) -> io_signature_sptr\n"
		"\n"
		"Create an i/o signature.\n"
		""},
	 { (char *)"io_signature_sptr_makev", (PyCFunction) _wrap_io_signature_sptr_makev, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"io_signature_sptr_makev(io_signature_sptr self, int min_streams, int max_streams, std::vector< int,std::allocator< int > > const & sizeof_stream_items) -> io_signature_sptr\n"
		"\n"
		"Create an i/o signature.\n"
		"\n"
		"If there are more streams than there are entries in sizeof_stream_items, the value of the last entry in sizeof_stream_items is used for the missing values. sizeof_stream_items must contain at least 1 entry.\n"
		""},
	 { (char *)"io_signature_sptr_min_streams", _wrap_io_signature_sptr_min_streams, METH_VARARGS, (char *)"io_signature_sptr_min_streams(io_signature_sptr self) -> int"},
	 { (char *)"io_signature_sptr_max_streams", _wrap_io_signature_sptr_max_streams, METH_VARARGS, (char *)"io_signature_sptr_max_streams(io_signature_sptr self) -> int"},
	 { (char *)"io_signature_sptr_sizeof_stream_item", (PyCFunction) _wrap_io_signature_sptr_sizeof_stream_item, METH_VARARGS | METH_KEYWORDS, (char *)"io_signature_sptr_sizeof_stream_item(io_signature_sptr self, int index) -> int"},
	 { (char *)"io_signature_sptr_sizeof_stream_items", _wrap_io_signature_sptr_sizeof_stream_items, METH_VARARGS, (char *)"io_signature_sptr_sizeof_stream_items(io_signature_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"io_signature_sptr_swigregister", io_signature_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"message_make", (PyCFunction) _wrap_message_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"message_make(long type=0, double arg1=0, double arg2=0, size_t length=0) -> message_sptr\n"
		"\n"
		"Message class.\n"
		"\n"
		"The ideas and method names for adjustable message length were lifted from the click modular router \"Packet\" class.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"public constructor for message\n"
		"\n"
		"Args:\n"
		"    type : \n"
		"    arg1 : \n"
		"    arg2 : \n"
		"    length : \n"
		""},
	 { (char *)"message_make_from_string", (PyCFunction) _wrap_message_make_from_string, METH_VARARGS | METH_KEYWORDS, (char *)"message_make_from_string(std::string const s, long type=0, double arg1=0, double arg2=0) -> message_sptr"},
	 { (char *)"delete_message", _wrap_delete_message, METH_VARARGS, (char *)"delete_message(message self)"},
	 { (char *)"message_type", _wrap_message_type, METH_VARARGS, (char *)"message_type(message self) -> long"},
	 { (char *)"message_arg1", _wrap_message_arg1, METH_VARARGS, (char *)"message_arg1(message self) -> double"},
	 { (char *)"message_arg2", _wrap_message_arg2, METH_VARARGS, (char *)"message_arg2(message self) -> double"},
	 { (char *)"message_set_type", (PyCFunction) _wrap_message_set_type, METH_VARARGS | METH_KEYWORDS, (char *)"message_set_type(message self, long type)"},
	 { (char *)"message_set_arg1", (PyCFunction) _wrap_message_set_arg1, METH_VARARGS | METH_KEYWORDS, (char *)"message_set_arg1(message self, double arg1)"},
	 { (char *)"message_set_arg2", (PyCFunction) _wrap_message_set_arg2, METH_VARARGS | METH_KEYWORDS, (char *)"message_set_arg2(message self, double arg2)"},
	 { (char *)"message_length", _wrap_message_length, METH_VARARGS, (char *)"\n"
		"message_length(message self) -> size_t\n"
		"\n"
		"Return the number of elements in v.\n"
		""},
	 { (char *)"message_to_string", _wrap_message_to_string, METH_VARARGS, (char *)"message_to_string(message self) -> std::string"},
	 { (char *)"message_swigregister", message_swigregister, METH_VARARGS, NULL},
	 { (char *)"message_ncurrently_allocated", _wrap_message_ncurrently_allocated, METH_VARARGS, (char *)"message_ncurrently_allocated() -> long"},
	 { (char *)"new_message_sptr", _wrap_new_message_sptr, METH_VARARGS, (char *)"\n"
		"message_sptr()\n"
		"new_message_sptr(message p) -> message_sptr\n"
		""},
	 { (char *)"message_sptr___deref__", _wrap_message_sptr___deref__, METH_VARARGS, (char *)"message_sptr___deref__(message_sptr self) -> message"},
	 { (char *)"delete_message_sptr", _wrap_delete_message_sptr, METH_VARARGS, (char *)"delete_message_sptr(message_sptr self)"},
	 { (char *)"message_sptr_make", (PyCFunction) _wrap_message_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"message_sptr_make(message_sptr self, long type=0, double arg1=0, double arg2=0, size_t length=0) -> message_sptr\n"
		"\n"
		"Message class.\n"
		"\n"
		"The ideas and method names for adjustable message length were lifted from the click modular router \"Packet\" class.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"public constructor for message\n"
		"\n"
		"Args:\n"
		"    type : \n"
		"    arg1 : \n"
		"    arg2 : \n"
		"    length : \n"
		""},
	 { (char *)"message_sptr_make_from_string", (PyCFunction) _wrap_message_sptr_make_from_string, METH_VARARGS | METH_KEYWORDS, (char *)"message_sptr_make_from_string(message_sptr self, std::string const s, long type=0, double arg1=0, double arg2=0) -> message_sptr"},
	 { (char *)"message_sptr_type", _wrap_message_sptr_type, METH_VARARGS, (char *)"message_sptr_type(message_sptr self) -> long"},
	 { (char *)"message_sptr_arg1", _wrap_message_sptr_arg1, METH_VARARGS, (char *)"message_sptr_arg1(message_sptr self) -> double"},
	 { (char *)"message_sptr_arg2", _wrap_message_sptr_arg2, METH_VARARGS, (char *)"message_sptr_arg2(message_sptr self) -> double"},
	 { (char *)"message_sptr_set_type", (PyCFunction) _wrap_message_sptr_set_type, METH_VARARGS | METH_KEYWORDS, (char *)"message_sptr_set_type(message_sptr self, long type)"},
	 { (char *)"message_sptr_set_arg1", (PyCFunction) _wrap_message_sptr_set_arg1, METH_VARARGS | METH_KEYWORDS, (char *)"message_sptr_set_arg1(message_sptr self, double arg1)"},
	 { (char *)"message_sptr_set_arg2", (PyCFunction) _wrap_message_sptr_set_arg2, METH_VARARGS | METH_KEYWORDS, (char *)"message_sptr_set_arg2(message_sptr self, double arg2)"},
	 { (char *)"message_sptr_length", _wrap_message_sptr_length, METH_VARARGS, (char *)"\n"
		"message_sptr_length(message_sptr self) -> size_t\n"
		"\n"
		"Return the number of elements in v.\n"
		""},
	 { (char *)"message_sptr_to_string", _wrap_message_sptr_to_string, METH_VARARGS, (char *)"message_sptr_to_string(message_sptr self) -> std::string"},
	 { (char *)"message_sptr_swigregister", message_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_msg_handler", _wrap_delete_msg_handler, METH_VARARGS, (char *)"delete_msg_handler(msg_handler self)"},
	 { (char *)"msg_handler_handle", (PyCFunction) _wrap_msg_handler_handle, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"msg_handler_handle(msg_handler self, message_sptr msg)\n"
		"\n"
		"handle\n"
		""},
	 { (char *)"msg_handler_swigregister", msg_handler_swigregister, METH_VARARGS, NULL},
	 { (char *)"msg_queue_make", (PyCFunction) _wrap_msg_queue_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"msg_queue_make(unsigned int limit=0) -> msg_queue_sptr\n"
		"\n"
		"thread-safe message queue\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"\n"
		"\n"
		"Args:\n"
		"    limit : \n"
		""},
	 { (char *)"delete_msg_queue", _wrap_delete_msg_queue, METH_VARARGS, (char *)"delete_msg_queue(msg_queue self)"},
	 { (char *)"msg_queue_delete_head_nowait", _wrap_msg_queue_delete_head_nowait, METH_VARARGS, (char *)"\n"
		"msg_queue_delete_head_nowait(msg_queue self) -> message_sptr\n"
		"\n"
		"If there's a message in the q, delete it and return it. If no message is available, return 0.\n"
		""},
	 { (char *)"msg_queue_empty_p", _wrap_msg_queue_empty_p, METH_VARARGS, (char *)"\n"
		"msg_queue_empty_p(msg_queue self) -> bool\n"
		"\n"
		"is the queue empty?\n"
		""},
	 { (char *)"msg_queue_full_p", _wrap_msg_queue_full_p, METH_VARARGS, (char *)"\n"
		"msg_queue_full_p(msg_queue self) -> bool\n"
		"\n"
		"is the queue full?\n"
		""},
	 { (char *)"msg_queue_count", _wrap_msg_queue_count, METH_VARARGS, (char *)"\n"
		"msg_queue_count(msg_queue self) -> unsigned int\n"
		"\n"
		"return number of messages in queue\n"
		""},
	 { (char *)"msg_queue_flush", _wrap_msg_queue_flush, METH_VARARGS, (char *)"\n"
		"msg_queue_flush(msg_queue self)\n"
		"\n"
		"Delete all messages from the queue.\n"
		""},
	 { (char *)"msg_queue_swigregister", msg_queue_swigregister, METH_VARARGS, NULL},
	 { (char *)"py_msg_queue__delete_head", (PyCFunction) _wrap_py_msg_queue__delete_head, METH_VARARGS | METH_KEYWORDS, (char *)"py_msg_queue__delete_head(msg_queue_sptr q) -> message_sptr"},
	 { (char *)"py_msg_queue__insert_tail", (PyCFunction) _wrap_py_msg_queue__insert_tail, METH_VARARGS | METH_KEYWORDS, (char *)"py_msg_queue__insert_tail(msg_queue_sptr q, message_sptr msg)"},
	 { (char *)"new_msg_queue_sptr", _wrap_new_msg_queue_sptr, METH_VARARGS, (char *)"\n"
		"msg_queue_sptr()\n"
		"new_msg_queue_sptr(msg_queue p) -> msg_queue_sptr\n"
		""},
	 { (char *)"msg_queue_sptr___deref__", _wrap_msg_queue_sptr___deref__, METH_VARARGS, (char *)"msg_queue_sptr___deref__(msg_queue_sptr self) -> msg_queue"},
	 { (char *)"delete_msg_queue_sptr", _wrap_delete_msg_queue_sptr, METH_VARARGS, (char *)"delete_msg_queue_sptr(msg_queue_sptr self)"},
	 { (char *)"msg_queue_sptr_make", (PyCFunction) _wrap_msg_queue_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"msg_queue_sptr_make(msg_queue_sptr self, unsigned int limit=0) -> msg_queue_sptr\n"
		"\n"
		"thread-safe message queue\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"\n"
		"\n"
		"Args:\n"
		"    limit : \n"
		""},
	 { (char *)"msg_queue_sptr_delete_head_nowait", _wrap_msg_queue_sptr_delete_head_nowait, METH_VARARGS, (char *)"\n"
		"msg_queue_sptr_delete_head_nowait(msg_queue_sptr self) -> message_sptr\n"
		"\n"
		"If there's a message in the q, delete it and return it. If no message is available, return 0.\n"
		""},
	 { (char *)"msg_queue_sptr_empty_p", _wrap_msg_queue_sptr_empty_p, METH_VARARGS, (char *)"\n"
		"msg_queue_sptr_empty_p(msg_queue_sptr self) -> bool\n"
		"\n"
		"is the queue empty?\n"
		""},
	 { (char *)"msg_queue_sptr_full_p", _wrap_msg_queue_sptr_full_p, METH_VARARGS, (char *)"\n"
		"msg_queue_sptr_full_p(msg_queue_sptr self) -> bool\n"
		"\n"
		"is the queue full?\n"
		""},
	 { (char *)"msg_queue_sptr_count", _wrap_msg_queue_sptr_count, METH_VARARGS, (char *)"\n"
		"msg_queue_sptr_count(msg_queue_sptr self) -> unsigned int\n"
		"\n"
		"return number of messages in queue\n"
		""},
	 { (char *)"msg_queue_sptr_flush", _wrap_msg_queue_sptr_flush, METH_VARARGS, (char *)"\n"
		"msg_queue_sptr_flush(msg_queue_sptr self)\n"
		"\n"
		"Delete all messages from the queue.\n"
		""},
	 { (char *)"msg_queue_sptr_handle", (PyCFunction) _wrap_msg_queue_sptr_handle, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"msg_queue_sptr_handle(msg_queue_sptr self, message_sptr msg)\n"
		"\n"
		"handle\n"
		""},
	 { (char *)"msg_queue_sptr_swigregister", msg_queue_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"prefs_singleton", _wrap_prefs_singleton, METH_VARARGS, (char *)"prefs_singleton() -> prefs"},
	 { (char *)"prefs_add_config_file", (PyCFunction) _wrap_prefs_add_config_file, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"prefs_add_config_file(prefs self, std::string const & configfile)\n"
		"\n"
		"If specifying a file name, this opens that specific configuration file of the standard form containing sections and key-value pairs:\n"
		""},
	 { (char *)"delete_prefs", _wrap_delete_prefs, METH_VARARGS, (char *)"delete_prefs(prefs self)"},
	 { (char *)"prefs_to_string", _wrap_prefs_to_string, METH_VARARGS, (char *)"\n"
		"prefs_to_string(prefs self) -> std::string\n"
		"\n"
		"Returns the configuration options as a string.\n"
		""},
	 { (char *)"prefs_save", _wrap_prefs_save, METH_VARARGS, (char *)"\n"
		"prefs_save(prefs self)\n"
		"\n"
		"Saves the configuration settings to ${HOME}/.gnuradio/config.conf.\n"
		"\n"
		"WARNING: this will overwrite your current config.conf file.\n"
		""},
	 { (char *)"prefs_has_section", (PyCFunction) _wrap_prefs_has_section, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"prefs_has_section(prefs self, std::string const & section) -> bool\n"
		"\n"
		"Does  exist?\n"
		""},
	 { (char *)"prefs_has_option", (PyCFunction) _wrap_prefs_has_option, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"prefs_has_option(prefs self, std::string const & section, std::string const & option) -> bool\n"
		"\n"
		"Does  exist?\n"
		""},
	 { (char *)"prefs_get_string", (PyCFunction) _wrap_prefs_get_string, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"prefs_get_string(prefs self, std::string const & section, std::string const & option, std::string const & default_val) -> std::string const\n"
		"\n"
		"If option exists return associated value; else default_val.\n"
		""},
	 { (char *)"prefs_set_string", (PyCFunction) _wrap_prefs_set_string, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"prefs_set_string(prefs self, std::string const & section, std::string const & option, std::string const & val)\n"
		"\n"
		"Set or add a string  to  with value .\n"
		""},
	 { (char *)"prefs_get_bool", (PyCFunction) _wrap_prefs_get_bool, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"prefs_get_bool(prefs self, std::string const & section, std::string const & option, bool default_val) -> bool\n"
		"\n"
		"If option exists and value can be converted to bool, return it; else default_val.\n"
		""},
	 { (char *)"prefs_set_bool", (PyCFunction) _wrap_prefs_set_bool, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"prefs_set_bool(prefs self, std::string const & section, std::string const & option, bool val)\n"
		"\n"
		"Set or add a bool  to  with value .\n"
		""},
	 { (char *)"prefs_get_long", (PyCFunction) _wrap_prefs_get_long, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"prefs_get_long(prefs self, std::string const & section, std::string const & option, long default_val) -> long\n"
		"\n"
		"If option exists and value can be converted to long, return it; else default_val.\n"
		""},
	 { (char *)"prefs_set_long", (PyCFunction) _wrap_prefs_set_long, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"prefs_set_long(prefs self, std::string const & section, std::string const & option, long val)\n"
		"\n"
		"Set or add a long  to  with value .\n"
		""},
	 { (char *)"prefs_get_double", (PyCFunction) _wrap_prefs_get_double, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"prefs_get_double(prefs self, std::string const & section, std::string const & option, double default_val) -> double\n"
		"\n"
		"If option exists and value can be converted to double, return it; else default_val.\n"
		""},
	 { (char *)"prefs_set_double", (PyCFunction) _wrap_prefs_set_double, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"prefs_set_double(prefs self, std::string const & section, std::string const & option, double val)\n"
		"\n"
		"Set or add a double  to  with value .\n"
		""},
	 { (char *)"new_prefs", _wrap_new_prefs, METH_VARARGS, (char *)"\n"
		"new_prefs() -> prefs\n"
		"\n"
		"Creates an object to read preference files.\n"
		"\n"
		"If no file name is given (empty arg list or \"\"), this opens up the standard GNU Radio configuration files in prefix/etc/gnuradio/conf.d as well as ~/.gnuradio/config.conf.\n"
		"\n"
		"Only access this through the singleton defined here:\n"
		""},
	 { (char *)"prefs_swigregister", prefs_swigregister, METH_VARARGS, NULL},
	 { (char *)"enable_realtime_scheduling", _wrap_enable_realtime_scheduling, METH_VARARGS, (char *)"\n"
		"enable_realtime_scheduling() -> gr::rt_status_t\n"
		"\n"
		"If possible, enable \"realtime\" scheduling.\n"
		"\n"
		"In general, this means that the code will be scheduled before any non-realtime (normal) processes. Note that if your code contains an non-blocking infinite loop and you enable realtime scheduling, it's possible to hang the system.\n"
		""},
	 { (char *)"delete_sync_block", _wrap_delete_sync_block, METH_VARARGS, (char *)"delete_sync_block(sync_block self)"},
	 { (char *)"sync_block_swigregister", sync_block_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_sync_decimator", _wrap_delete_sync_decimator, METH_VARARGS, (char *)"delete_sync_decimator(sync_decimator self)"},
	 { (char *)"sync_decimator_swigregister", sync_decimator_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_sync_interpolator", _wrap_delete_sync_interpolator, METH_VARARGS, (char *)"delete_sync_interpolator(sync_interpolator self)"},
	 { (char *)"sync_interpolator_swigregister", sync_interpolator_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_tagged_stream_block", _wrap_delete_tagged_stream_block, METH_VARARGS, (char *)"delete_tagged_stream_block(tagged_stream_block self)"},
	 { (char *)"tagged_stream_block_swigregister", tagged_stream_block_swigregister, METH_VARARGS, NULL},
	 { (char *)"tag_t_offset_set", _wrap_tag_t_offset_set, METH_VARARGS, (char *)"tag_t_offset_set(tag_t self, uint64_t offset)"},
	 { (char *)"tag_t_offset_get", _wrap_tag_t_offset_get, METH_VARARGS, (char *)"tag_t_offset_get(tag_t self) -> uint64_t"},
	 { (char *)"tag_t_key_set", _wrap_tag_t_key_set, METH_VARARGS, (char *)"tag_t_key_set(tag_t self, swig_int_ptr key)"},
	 { (char *)"tag_t_key_get", _wrap_tag_t_key_get, METH_VARARGS, (char *)"tag_t_key_get(tag_t self) -> swig_int_ptr"},
	 { (char *)"tag_t_value_set", _wrap_tag_t_value_set, METH_VARARGS, (char *)"tag_t_value_set(tag_t self, swig_int_ptr value)"},
	 { (char *)"tag_t_value_get", _wrap_tag_t_value_get, METH_VARARGS, (char *)"tag_t_value_get(tag_t self) -> swig_int_ptr"},
	 { (char *)"tag_t_srcid_set", _wrap_tag_t_srcid_set, METH_VARARGS, (char *)"tag_t_srcid_set(tag_t self, swig_int_ptr srcid)"},
	 { (char *)"tag_t_srcid_get", _wrap_tag_t_srcid_get, METH_VARARGS, (char *)"tag_t_srcid_get(tag_t self) -> swig_int_ptr"},
	 { (char *)"tag_t_marked_deleted_set", _wrap_tag_t_marked_deleted_set, METH_VARARGS, (char *)"tag_t_marked_deleted_set(tag_t self, std::vector< long,std::allocator< long > > * marked_deleted)"},
	 { (char *)"tag_t_marked_deleted_get", _wrap_tag_t_marked_deleted_get, METH_VARARGS, (char *)"tag_t_marked_deleted_get(tag_t self) -> std::vector< long,std::allocator< long > > *"},
	 { (char *)"tag_t_offset_compare", (PyCFunction) _wrap_tag_t_offset_compare, METH_VARARGS | METH_KEYWORDS, (char *)"tag_t_offset_compare(tag_t x, tag_t y) -> bool"},
	 { (char *)"tag_t___eq__", (PyCFunction) _wrap_tag_t___eq__, METH_VARARGS | METH_KEYWORDS, (char *)"tag_t___eq__(tag_t self, tag_t t) -> bool"},
	 { (char *)"new_tag_t", _wrap_new_tag_t, METH_VARARGS, (char *)"\n"
		"tag_t()\n"
		"new_tag_t(tag_t rhs) -> tag_t\n"
		""},
	 { (char *)"delete_tag_t", _wrap_delete_tag_t, METH_VARARGS, (char *)"delete_tag_t(tag_t self)"},
	 { (char *)"tag_t_swigregister", tag_t_swigregister, METH_VARARGS, NULL},
	 { (char *)"tags_vector_t_iterator", _wrap_tags_vector_t_iterator, METH_VARARGS, (char *)"tags_vector_t_iterator(tags_vector_t self) -> SwigPyIterator"},
	 { (char *)"tags_vector_t___nonzero__", _wrap_tags_vector_t___nonzero__, METH_VARARGS, (char *)"tags_vector_t___nonzero__(tags_vector_t self) -> bool"},
	 { (char *)"tags_vector_t___bool__", _wrap_tags_vector_t___bool__, METH_VARARGS, (char *)"tags_vector_t___bool__(tags_vector_t self) -> bool"},
	 { (char *)"tags_vector_t___len__", _wrap_tags_vector_t___len__, METH_VARARGS, (char *)"tags_vector_t___len__(tags_vector_t self) -> std::vector< gr::tag_t >::size_type"},
	 { (char *)"tags_vector_t_pop", _wrap_tags_vector_t_pop, METH_VARARGS, (char *)"tags_vector_t_pop(tags_vector_t self) -> tag_t"},
	 { (char *)"tags_vector_t___getslice__", (PyCFunction) _wrap_tags_vector_t___getslice__, METH_VARARGS | METH_KEYWORDS, (char *)"tags_vector_t___getslice__(tags_vector_t self, std::vector< gr::tag_t >::difference_type i, std::vector< gr::tag_t >::difference_type j) -> tags_vector_t"},
	 { (char *)"tags_vector_t___setslice__", (PyCFunction) _wrap_tags_vector_t___setslice__, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tags_vector_t___setslice__(tags_vector_t self, std::vector< gr::tag_t >::difference_type i, std::vector< gr::tag_t >::difference_type j, \n"
		"    tags_vector_t v=std::vector< gr::tag_t,std::allocator< gr::tag_t > >())\n"
		""},
	 { (char *)"tags_vector_t___delslice__", (PyCFunction) _wrap_tags_vector_t___delslice__, METH_VARARGS | METH_KEYWORDS, (char *)"tags_vector_t___delslice__(tags_vector_t self, std::vector< gr::tag_t >::difference_type i, std::vector< gr::tag_t >::difference_type j)"},
	 { (char *)"tags_vector_t___delitem__", _wrap_tags_vector_t___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(std::vector< gr::tag_t >::difference_type i)\n"
		"tags_vector_t___delitem__(tags_vector_t self, PySliceObject * slice)\n"
		""},
	 { (char *)"tags_vector_t___getitem__", _wrap_tags_vector_t___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> tags_vector_t\n"
		"tags_vector_t___getitem__(tags_vector_t self, std::vector< gr::tag_t >::difference_type i) -> tag_t\n"
		""},
	 { (char *)"tags_vector_t___setitem__", _wrap_tags_vector_t___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, tags_vector_t v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"tags_vector_t___setitem__(tags_vector_t self, std::vector< gr::tag_t >::difference_type i, tag_t x)\n"
		""},
	 { (char *)"tags_vector_t_append", (PyCFunction) _wrap_tags_vector_t_append, METH_VARARGS | METH_KEYWORDS, (char *)"tags_vector_t_append(tags_vector_t self, tag_t x)"},
	 { (char *)"tags_vector_t_empty", _wrap_tags_vector_t_empty, METH_VARARGS, (char *)"tags_vector_t_empty(tags_vector_t self) -> bool"},
	 { (char *)"tags_vector_t_size", _wrap_tags_vector_t_size, METH_VARARGS, (char *)"tags_vector_t_size(tags_vector_t self) -> std::vector< gr::tag_t >::size_type"},
	 { (char *)"tags_vector_t_clear", _wrap_tags_vector_t_clear, METH_VARARGS, (char *)"tags_vector_t_clear(tags_vector_t self)"},
	 { (char *)"tags_vector_t_swap", (PyCFunction) _wrap_tags_vector_t_swap, METH_VARARGS | METH_KEYWORDS, (char *)"tags_vector_t_swap(tags_vector_t self, tags_vector_t v)"},
	 { (char *)"tags_vector_t_get_allocator", _wrap_tags_vector_t_get_allocator, METH_VARARGS, (char *)"tags_vector_t_get_allocator(tags_vector_t self) -> std::vector< gr::tag_t >::allocator_type"},
	 { (char *)"tags_vector_t_begin", _wrap_tags_vector_t_begin, METH_VARARGS, (char *)"tags_vector_t_begin(tags_vector_t self) -> std::vector< gr::tag_t >::iterator"},
	 { (char *)"tags_vector_t_end", _wrap_tags_vector_t_end, METH_VARARGS, (char *)"tags_vector_t_end(tags_vector_t self) -> std::vector< gr::tag_t >::iterator"},
	 { (char *)"tags_vector_t_rbegin", _wrap_tags_vector_t_rbegin, METH_VARARGS, (char *)"tags_vector_t_rbegin(tags_vector_t self) -> std::vector< gr::tag_t >::reverse_iterator"},
	 { (char *)"tags_vector_t_rend", _wrap_tags_vector_t_rend, METH_VARARGS, (char *)"tags_vector_t_rend(tags_vector_t self) -> std::vector< gr::tag_t >::reverse_iterator"},
	 { (char *)"tags_vector_t_pop_back", _wrap_tags_vector_t_pop_back, METH_VARARGS, (char *)"tags_vector_t_pop_back(tags_vector_t self)"},
	 { (char *)"tags_vector_t_erase", _wrap_tags_vector_t_erase, METH_VARARGS, (char *)"\n"
		"erase(std::vector< gr::tag_t >::iterator pos) -> std::vector< gr::tag_t >::iterator\n"
		"tags_vector_t_erase(tags_vector_t self, std::vector< gr::tag_t >::iterator first, std::vector< gr::tag_t >::iterator last) -> std::vector< gr::tag_t >::iterator\n"
		""},
	 { (char *)"new_tags_vector_t", _wrap_new_tags_vector_t, METH_VARARGS, (char *)"\n"
		"tags_vector_t()\n"
		"tags_vector_t(tags_vector_t arg2)\n"
		"tags_vector_t(std::vector< gr::tag_t >::size_type size)\n"
		"new_tags_vector_t(std::vector< gr::tag_t >::size_type size, tag_t value) -> tags_vector_t\n"
		""},
	 { (char *)"tags_vector_t_push_back", (PyCFunction) _wrap_tags_vector_t_push_back, METH_VARARGS | METH_KEYWORDS, (char *)"tags_vector_t_push_back(tags_vector_t self, tag_t x)"},
	 { (char *)"tags_vector_t_front", _wrap_tags_vector_t_front, METH_VARARGS, (char *)"tags_vector_t_front(tags_vector_t self) -> tag_t"},
	 { (char *)"tags_vector_t_back", _wrap_tags_vector_t_back, METH_VARARGS, (char *)"tags_vector_t_back(tags_vector_t self) -> tag_t"},
	 { (char *)"tags_vector_t_assign", (PyCFunction) _wrap_tags_vector_t_assign, METH_VARARGS | METH_KEYWORDS, (char *)"tags_vector_t_assign(tags_vector_t self, std::vector< gr::tag_t >::size_type n, tag_t x)"},
	 { (char *)"tags_vector_t_resize", _wrap_tags_vector_t_resize, METH_VARARGS, (char *)"\n"
		"resize(std::vector< gr::tag_t >::size_type new_size)\n"
		"tags_vector_t_resize(tags_vector_t self, std::vector< gr::tag_t >::size_type new_size, tag_t x)\n"
		""},
	 { (char *)"tags_vector_t_insert", _wrap_tags_vector_t_insert, METH_VARARGS, (char *)"\n"
		"insert(std::vector< gr::tag_t >::iterator pos, tag_t x) -> std::vector< gr::tag_t >::iterator\n"
		"tags_vector_t_insert(tags_vector_t self, std::vector< gr::tag_t >::iterator pos, std::vector< gr::tag_t >::size_type n, \n"
		"    tag_t x)\n"
		""},
	 { (char *)"tags_vector_t_reserve", (PyCFunction) _wrap_tags_vector_t_reserve, METH_VARARGS | METH_KEYWORDS, (char *)"tags_vector_t_reserve(tags_vector_t self, std::vector< gr::tag_t >::size_type n)"},
	 { (char *)"tags_vector_t_capacity", _wrap_tags_vector_t_capacity, METH_VARARGS, (char *)"tags_vector_t_capacity(tags_vector_t self) -> std::vector< gr::tag_t >::size_type"},
	 { (char *)"delete_tags_vector_t", _wrap_delete_tags_vector_t, METH_VARARGS, (char *)"delete_tags_vector_t(tags_vector_t self)"},
	 { (char *)"tags_vector_t_swigregister", tags_vector_t_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_top_block_sptr", _wrap_new_top_block_sptr, METH_VARARGS, (char *)"\n"
		"top_block_sptr()\n"
		"new_top_block_sptr(top_block p) -> top_block_sptr\n"
		""},
	 { (char *)"top_block_sptr___deref__", _wrap_top_block_sptr___deref__, METH_VARARGS, (char *)"top_block_sptr___deref__(top_block_sptr self) -> top_block"},
	 { (char *)"delete_top_block_sptr", _wrap_delete_top_block_sptr, METH_VARARGS, (char *)"delete_top_block_sptr(top_block_sptr self)"},
	 { (char *)"top_block_sptr_start", (PyCFunction) _wrap_top_block_sptr_start, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"top_block_sptr_start(top_block_sptr self, int max_noutput_items=100000000)\n"
		"\n"
		"Start the contained flowgraph. Creates one or more threads to execute the flow graph. Returns to the caller once the threads are created. Calling start() on a top_block that is already started IS an error.\n"
		""},
	 { (char *)"top_block_sptr_stop", _wrap_top_block_sptr_stop, METH_VARARGS, (char *)"\n"
		"top_block_sptr_stop(top_block_sptr self)\n"
		"\n"
		"Stop the running flowgraph. Notifies each thread created by the scheduler to shutdown, then returns to caller. Calling stop() on a top_block that is already stopped IS NOT an error.\n"
		""},
	 { (char *)"top_block_sptr_lock", _wrap_top_block_sptr_lock, METH_VARARGS, (char *)"\n"
		"top_block_sptr_lock(top_block_sptr self)\n"
		"\n"
		"Lock a flowgraph in preparation for reconfiguration. When an equal number of calls to lock() and unlock() have occurred, the flowgraph will be reconfigured.\n"
		"\n"
		"N.B. lock() and unlock() may not be called from a flowgraph thread (E.g., block::work method) or deadlock will occur when reconfiguration happens.\n"
		""},
	 { (char *)"top_block_sptr_unlock", _wrap_top_block_sptr_unlock, METH_VARARGS, (char *)"\n"
		"top_block_sptr_unlock(top_block_sptr self)\n"
		"\n"
		"Unlock a flowgraph in preparation for reconfiguration. When an equal number of calls to lock() and unlock() have occurred, the flowgraph will be reconfigured.\n"
		"\n"
		"N.B. lock() and unlock() may not be called from a flowgraph thread (E.g., block::work method) or deadlock will occur when reconfiguration happens.\n"
		""},
	 { (char *)"top_block_sptr_edge_list", _wrap_top_block_sptr_edge_list, METH_VARARGS, (char *)"\n"
		"top_block_sptr_edge_list(top_block_sptr self) -> std::string\n"
		"\n"
		"Returns a string that lists the edge connections in the flattened flowgraph.\n"
		""},
	 { (char *)"top_block_sptr_msg_edge_list", _wrap_top_block_sptr_msg_edge_list, METH_VARARGS, (char *)"\n"
		"top_block_sptr_msg_edge_list(top_block_sptr self) -> std::string\n"
		"\n"
		"Returns a string that lists the msg edge connections in the flattened flowgraph.\n"
		""},
	 { (char *)"top_block_sptr_dump", _wrap_top_block_sptr_dump, METH_VARARGS, (char *)"\n"
		"top_block_sptr_dump(top_block_sptr self)\n"
		"\n"
		"Displays flattened flowgraph edges and block connectivity\n"
		""},
	 { (char *)"top_block_sptr_max_noutput_items", _wrap_top_block_sptr_max_noutput_items, METH_VARARGS, (char *)"\n"
		"top_block_sptr_max_noutput_items(top_block_sptr self) -> int\n"
		"\n"
		"Get the number of max noutput_items in the flowgraph.\n"
		""},
	 { (char *)"top_block_sptr_set_max_noutput_items", (PyCFunction) _wrap_top_block_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"top_block_sptr_set_max_noutput_items(top_block_sptr self, int nmax)\n"
		"\n"
		"Set the maximum number of noutput_items in the flowgraph.\n"
		""},
	 { (char *)"top_block_sptr_to_top_block", _wrap_top_block_sptr_to_top_block, METH_VARARGS, (char *)"top_block_sptr_to_top_block(top_block_sptr self) -> top_block_sptr"},
	 { (char *)"top_block_sptr_primitive_connect", _wrap_top_block_sptr_primitive_connect, METH_VARARGS, (char *)"\n"
		"primitive_connect(basic_block_sptr block)\n"
		"top_block_sptr_primitive_connect(top_block_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)\n"
		"\n"
		"Add a stand-alone (possibly hierarchical) block to internal graph.\n"
		"\n"
		"This adds a gr-block or hierarchical block to the internal graph without wiring it to anything else.\n"
		""},
	 { (char *)"top_block_sptr_primitive_msg_connect", _wrap_top_block_sptr_primitive_msg_connect, METH_VARARGS, (char *)"\n"
		"primitive_msg_connect(basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)\n"
		"top_block_sptr_primitive_msg_connect(top_block_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, \n"
		"    std::string dstport)\n"
		"\n"
		"Add gr-blocks or hierarchical blocks to internal graph and wire together.\n"
		"\n"
		"This adds (if not done earlier by another connect) a pair of gr-blocks or hierarchical blocks to the internal message port subscription\n"
		""},
	 { (char *)"top_block_sptr_primitive_msg_disconnect", _wrap_top_block_sptr_primitive_msg_disconnect, METH_VARARGS, (char *)"\n"
		"primitive_msg_disconnect(basic_block_sptr src, swig_int_ptr srcport, basic_block_sptr dst, swig_int_ptr dstport)\n"
		"top_block_sptr_primitive_msg_disconnect(top_block_sptr self, basic_block_sptr src, std::string srcport, basic_block_sptr dst, \n"
		"    std::string dstport)\n"
		""},
	 { (char *)"top_block_sptr_primitive_disconnect", _wrap_top_block_sptr_primitive_disconnect, METH_VARARGS, (char *)"\n"
		"primitive_disconnect(basic_block_sptr block)\n"
		"top_block_sptr_primitive_disconnect(top_block_sptr self, basic_block_sptr src, int src_port, basic_block_sptr dst, int dst_port)\n"
		"\n"
		"Remove a gr-block or hierarchical block from the internal flowgraph.\n"
		"\n"
		"This removes a gr-block or hierarchical block from the internal flowgraph, disconnecting it from other blocks as needed.\n"
		""},
	 { (char *)"top_block_sptr_disconnect_all", _wrap_top_block_sptr_disconnect_all, METH_VARARGS, (char *)"\n"
		"top_block_sptr_disconnect_all(top_block_sptr self)\n"
		"\n"
		"Disconnect all connections in the internal flowgraph.\n"
		"\n"
		"This call removes all output port to input port connections in the internal flowgraph.\n"
		""},
	 { (char *)"top_block_sptr_primitive_message_port_register_hier_in", (PyCFunction) _wrap_top_block_sptr_primitive_message_port_register_hier_in, METH_VARARGS | METH_KEYWORDS, (char *)"top_block_sptr_primitive_message_port_register_hier_in(top_block_sptr self, swig_int_ptr port_id)"},
	 { (char *)"top_block_sptr_primitive_message_port_register_hier_out", (PyCFunction) _wrap_top_block_sptr_primitive_message_port_register_hier_out, METH_VARARGS | METH_KEYWORDS, (char *)"top_block_sptr_primitive_message_port_register_hier_out(top_block_sptr self, swig_int_ptr port_id)"},
	 { (char *)"top_block_sptr_set_processor_affinity", (PyCFunction) _wrap_top_block_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"top_block_sptr_set_processor_affinity(top_block_sptr self, std::vector< int,std::allocator< int > > const & mask)\n"
		"\n"
		"Set the affinity of all blocks in hier_block2 to processor core .\n"
		""},
	 { (char *)"top_block_sptr_unset_processor_affinity", _wrap_top_block_sptr_unset_processor_affinity, METH_VARARGS, (char *)"\n"
		"top_block_sptr_unset_processor_affinity(top_block_sptr self)\n"
		"\n"
		"Remove processor affinity for all blocks in hier_block2.\n"
		""},
	 { (char *)"top_block_sptr_processor_affinity", _wrap_top_block_sptr_processor_affinity, METH_VARARGS, (char *)"\n"
		"top_block_sptr_processor_affinity(top_block_sptr self) -> std::vector< int,std::allocator< int > >\n"
		"\n"
		"Get the current processor affinity.\n"
		"\n"
		"This returns the processor affinity value for the first block in the hier_block2's list of blocks with the assumption that they have always only been set through the hier_block2's interface. If any block has been individually set, then this call could be misleading.\n"
		""},
	 { (char *)"top_block_sptr_max_output_buffer", (PyCFunction) _wrap_top_block_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"top_block_sptr_max_output_buffer(top_block_sptr self, int i) -> size_t\n"
		"\n"
		"Returns max buffer size (itemcount) on output port .\n"
		""},
	 { (char *)"top_block_sptr_set_max_output_buffer", _wrap_top_block_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(size_t max_output_buffer)\n"
		"top_block_sptr_set_max_output_buffer(top_block_sptr self, int port, size_t max_output_buffer)\n"
		"\n"
		"Sets max buffer size (itemcount) on all output ports.\n"
		""},
	 { (char *)"top_block_sptr_min_output_buffer", (PyCFunction) _wrap_top_block_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"top_block_sptr_min_output_buffer(top_block_sptr self, int i) -> size_t\n"
		"\n"
		"Returns min buffer size (itemcount) on output port .\n"
		""},
	 { (char *)"top_block_sptr_set_min_output_buffer", _wrap_top_block_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(size_t min_output_buffer)\n"
		"top_block_sptr_set_min_output_buffer(top_block_sptr self, int port, size_t min_output_buffer)\n"
		"\n"
		"Sets min buffer size (itemcount) on all output ports.\n"
		""},
	 { (char *)"top_block_sptr_to_hier_block2", _wrap_top_block_sptr_to_hier_block2, METH_VARARGS, (char *)"top_block_sptr_to_hier_block2(top_block_sptr self) -> hier_block2_sptr"},
	 { (char *)"top_block_sptr_name", _wrap_top_block_sptr_name, METH_VARARGS, (char *)"\n"
		"top_block_sptr_name(top_block_sptr self) -> std::string\n"
		"\n"
		"The name of the block\n"
		""},
	 { (char *)"top_block_sptr_symbol_name", _wrap_top_block_sptr_symbol_name, METH_VARARGS, (char *)"\n"
		"top_block_sptr_symbol_name(top_block_sptr self) -> std::string\n"
		"\n"
		"The sybolic name of the block, which is used in the block_registry. The name is assigned by the block's constructor and never changes during the life of the block.\n"
		""},
	 { (char *)"top_block_sptr_input_signature", _wrap_top_block_sptr_input_signature, METH_VARARGS, (char *)"top_block_sptr_input_signature(top_block_sptr self) -> io_signature_sptr"},
	 { (char *)"top_block_sptr_output_signature", _wrap_top_block_sptr_output_signature, METH_VARARGS, (char *)"top_block_sptr_output_signature(top_block_sptr self) -> io_signature_sptr"},
	 { (char *)"top_block_sptr_unique_id", _wrap_top_block_sptr_unique_id, METH_VARARGS, (char *)"top_block_sptr_unique_id(top_block_sptr self) -> long"},
	 { (char *)"top_block_sptr_to_basic_block", _wrap_top_block_sptr_to_basic_block, METH_VARARGS, (char *)"top_block_sptr_to_basic_block(top_block_sptr self) -> basic_block_sptr"},
	 { (char *)"top_block_sptr_check_topology", (PyCFunction) _wrap_top_block_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"top_block_sptr_check_topology(top_block_sptr self, int ninputs, int noutputs) -> bool\n"
		"\n"
		"Confirm that ninputs and noutputs is an acceptable combination.\n"
		"\n"
		"This function is called by the runtime system whenever the topology changes. Most classes do not need to override this. This check is in addition to the constraints specified by the input and output gr::io_signatures.\n"
		""},
	 { (char *)"top_block_sptr_alias", _wrap_top_block_sptr_alias, METH_VARARGS, (char *)"\n"
		"top_block_sptr_alias(top_block_sptr self) -> std::string\n"
		"\n"
		"Returns the block's alias as a string.\n"
		""},
	 { (char *)"top_block_sptr_set_block_alias", (PyCFunction) _wrap_top_block_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"top_block_sptr_set_block_alias(top_block_sptr self, std::string name)\n"
		"\n"
		"Set's a new alias for the block; also adds an entry into the block_registry to get the block using either the alias or the original symbol name.\n"
		""},
	 { (char *)"top_block_sptr__post", (PyCFunction) _wrap_top_block_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"top_block_sptr__post(top_block_sptr self, swig_int_ptr which_port, swig_int_ptr msg)\n"
		"\n"
		"Accept msg, place in queue, arrange for thread to be awakened if it's not already.\n"
		""},
	 { (char *)"top_block_sptr_message_ports_in", _wrap_top_block_sptr_message_ports_in, METH_VARARGS, (char *)"\n"
		"top_block_sptr_message_ports_in(top_block_sptr self) -> swig_int_ptr\n"
		"\n"
		"Get input message port names.\n"
		"\n"
		"Returns the available input message ports for a block. The return object is a PMT vector that is filled with PMT symbols.\n"
		""},
	 { (char *)"top_block_sptr_message_ports_out", _wrap_top_block_sptr_message_ports_out, METH_VARARGS, (char *)"\n"
		"top_block_sptr_message_ports_out(top_block_sptr self) -> swig_int_ptr\n"
		"\n"
		"Get output message port names.\n"
		"\n"
		"Returns the available output message ports for a block. The return object is a PMT vector that is filled with PMT symbols.\n"
		""},
	 { (char *)"top_block_sptr_message_subscribers", (PyCFunction) _wrap_top_block_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"top_block_sptr_message_subscribers(top_block_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"top_block_sptr_swigregister", top_block_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"top_block_swig", (PyCFunction) _wrap_top_block_swig, METH_VARARGS | METH_KEYWORDS, (char *)"top_block_swig(std::string const name) -> top_block_sptr"},
	 { (char *)"delete_top_block", _wrap_delete_top_block, METH_VARARGS, (char *)"delete_top_block(top_block self)"},
	 { (char *)"top_block_start", (PyCFunction) _wrap_top_block_start, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"top_block_start(top_block self, int max_noutput_items=100000000)\n"
		"\n"
		"Start the contained flowgraph. Creates one or more threads to execute the flow graph. Returns to the caller once the threads are created. Calling start() on a top_block that is already started IS an error.\n"
		""},
	 { (char *)"top_block_stop", _wrap_top_block_stop, METH_VARARGS, (char *)"\n"
		"top_block_stop(top_block self)\n"
		"\n"
		"Stop the running flowgraph. Notifies each thread created by the scheduler to shutdown, then returns to caller. Calling stop() on a top_block that is already stopped IS NOT an error.\n"
		""},
	 { (char *)"top_block_lock", _wrap_top_block_lock, METH_VARARGS, (char *)"\n"
		"top_block_lock(top_block self)\n"
		"\n"
		"Lock a flowgraph in preparation for reconfiguration. When an equal number of calls to lock() and unlock() have occurred, the flowgraph will be reconfigured.\n"
		"\n"
		"N.B. lock() and unlock() may not be called from a flowgraph thread (E.g., block::work method) or deadlock will occur when reconfiguration happens.\n"
		""},
	 { (char *)"top_block_unlock", _wrap_top_block_unlock, METH_VARARGS, (char *)"\n"
		"top_block_unlock(top_block self)\n"
		"\n"
		"Unlock a flowgraph in preparation for reconfiguration. When an equal number of calls to lock() and unlock() have occurred, the flowgraph will be reconfigured.\n"
		"\n"
		"N.B. lock() and unlock() may not be called from a flowgraph thread (E.g., block::work method) or deadlock will occur when reconfiguration happens.\n"
		""},
	 { (char *)"top_block_edge_list", _wrap_top_block_edge_list, METH_VARARGS, (char *)"\n"
		"top_block_edge_list(top_block self) -> std::string\n"
		"\n"
		"Returns a string that lists the edge connections in the flattened flowgraph.\n"
		""},
	 { (char *)"top_block_msg_edge_list", _wrap_top_block_msg_edge_list, METH_VARARGS, (char *)"\n"
		"top_block_msg_edge_list(top_block self) -> std::string\n"
		"\n"
		"Returns a string that lists the msg edge connections in the flattened flowgraph.\n"
		""},
	 { (char *)"top_block_dump", _wrap_top_block_dump, METH_VARARGS, (char *)"\n"
		"top_block_dump(top_block self)\n"
		"\n"
		"Displays flattened flowgraph edges and block connectivity\n"
		""},
	 { (char *)"top_block_max_noutput_items", _wrap_top_block_max_noutput_items, METH_VARARGS, (char *)"\n"
		"top_block_max_noutput_items(top_block self) -> int\n"
		"\n"
		"Get the number of max noutput_items in the flowgraph.\n"
		""},
	 { (char *)"top_block_set_max_noutput_items", (PyCFunction) _wrap_top_block_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"top_block_set_max_noutput_items(top_block self, int nmax)\n"
		"\n"
		"Set the maximum number of noutput_items in the flowgraph.\n"
		""},
	 { (char *)"top_block_to_top_block", _wrap_top_block_to_top_block, METH_VARARGS, (char *)"top_block_to_top_block(top_block self) -> top_block_sptr"},
	 { (char *)"top_block_swigregister", top_block_swigregister, METH_VARARGS, NULL},
	 { (char *)"top_block_run_unlocked", (PyCFunction) _wrap_top_block_run_unlocked, METH_VARARGS | METH_KEYWORDS, (char *)"top_block_run_unlocked(top_block_sptr r)"},
	 { (char *)"top_block_start_unlocked", (PyCFunction) _wrap_top_block_start_unlocked, METH_VARARGS | METH_KEYWORDS, (char *)"top_block_start_unlocked(top_block_sptr r, int max_noutput_items)"},
	 { (char *)"top_block_wait_unlocked", (PyCFunction) _wrap_top_block_wait_unlocked, METH_VARARGS | METH_KEYWORDS, (char *)"top_block_wait_unlocked(top_block_sptr r)"},
	 { (char *)"top_block_stop_unlocked", (PyCFunction) _wrap_top_block_stop_unlocked, METH_VARARGS | METH_KEYWORDS, (char *)"top_block_stop_unlocked(top_block_sptr r)"},
	 { (char *)"top_block_unlock_unlocked", (PyCFunction) _wrap_top_block_unlock_unlocked, METH_VARARGS | METH_KEYWORDS, (char *)"top_block_unlock_unlocked(top_block_sptr r)"},
	 { (char *)"dot_graph_tb", (PyCFunction) _wrap_dot_graph_tb, METH_VARARGS | METH_KEYWORDS, (char *)"dot_graph_tb(top_block_sptr r) -> std::string"},
	 { (char *)"void_start_vector_t_iterator", _wrap_void_start_vector_t_iterator, METH_VARARGS, (char *)"void_start_vector_t_iterator(void_start_vector_t self) -> SwigPyIterator"},
	 { (char *)"void_start_vector_t___nonzero__", _wrap_void_start_vector_t___nonzero__, METH_VARARGS, (char *)"void_start_vector_t___nonzero__(void_start_vector_t self) -> bool"},
	 { (char *)"void_start_vector_t___bool__", _wrap_void_start_vector_t___bool__, METH_VARARGS, (char *)"void_start_vector_t___bool__(void_start_vector_t self) -> bool"},
	 { (char *)"void_start_vector_t___len__", _wrap_void_start_vector_t___len__, METH_VARARGS, (char *)"void_start_vector_t___len__(void_start_vector_t self) -> std::vector< void * >::size_type"},
	 { (char *)"void_start_vector_t_pop", _wrap_void_start_vector_t_pop, METH_VARARGS, (char *)"void_start_vector_t_pop(void_start_vector_t self) -> std::vector< void * >::value_type"},
	 { (char *)"void_start_vector_t___getslice__", (PyCFunction) _wrap_void_start_vector_t___getslice__, METH_VARARGS | METH_KEYWORDS, (char *)"void_start_vector_t___getslice__(void_start_vector_t self, std::vector< void * >::difference_type i, std::vector< void * >::difference_type j) -> void_start_vector_t"},
	 { (char *)"void_start_vector_t___setslice__", (PyCFunction) _wrap_void_start_vector_t___setslice__, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"void_start_vector_t___setslice__(void_start_vector_t self, std::vector< void * >::difference_type i, std::vector< void * >::difference_type j, \n"
		"    void_start_vector_t v=std::vector< void *,std::allocator< void * > >())\n"
		""},
	 { (char *)"void_start_vector_t___delslice__", (PyCFunction) _wrap_void_start_vector_t___delslice__, METH_VARARGS | METH_KEYWORDS, (char *)"void_start_vector_t___delslice__(void_start_vector_t self, std::vector< void * >::difference_type i, std::vector< void * >::difference_type j)"},
	 { (char *)"void_start_vector_t___delitem__", _wrap_void_start_vector_t___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(std::vector< void * >::difference_type i)\n"
		"void_start_vector_t___delitem__(void_start_vector_t self, PySliceObject * slice)\n"
		""},
	 { (char *)"void_start_vector_t___getitem__", _wrap_void_start_vector_t___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject * slice) -> void_start_vector_t\n"
		"void_start_vector_t___getitem__(void_start_vector_t self, std::vector< void * >::difference_type i) -> std::vector< void * >::value_type\n"
		""},
	 { (char *)"void_start_vector_t___setitem__", _wrap_void_start_vector_t___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject * slice, void_start_vector_t v)\n"
		"__setitem__(PySliceObject * slice)\n"
		"void_start_vector_t___setitem__(void_start_vector_t self, std::vector< void * >::difference_type i, std::vector< void * >::value_type x)\n"
		""},
	 { (char *)"void_start_vector_t_append", (PyCFunction) _wrap_void_start_vector_t_append, METH_VARARGS | METH_KEYWORDS, (char *)"void_start_vector_t_append(void_start_vector_t self, std::vector< void * >::value_type x)"},
	 { (char *)"void_start_vector_t_empty", _wrap_void_start_vector_t_empty, METH_VARARGS, (char *)"void_start_vector_t_empty(void_start_vector_t self) -> bool"},
	 { (char *)"void_start_vector_t_size", _wrap_void_start_vector_t_size, METH_VARARGS, (char *)"void_start_vector_t_size(void_start_vector_t self) -> std::vector< void * >::size_type"},
	 { (char *)"void_start_vector_t_clear", _wrap_void_start_vector_t_clear, METH_VARARGS, (char *)"void_start_vector_t_clear(void_start_vector_t self)"},
	 { (char *)"void_start_vector_t_swap", (PyCFunction) _wrap_void_start_vector_t_swap, METH_VARARGS | METH_KEYWORDS, (char *)"void_start_vector_t_swap(void_start_vector_t self, void_start_vector_t v)"},
	 { (char *)"void_start_vector_t_get_allocator", _wrap_void_start_vector_t_get_allocator, METH_VARARGS, (char *)"void_start_vector_t_get_allocator(void_start_vector_t self) -> std::vector< void * >::allocator_type"},
	 { (char *)"void_start_vector_t_begin", _wrap_void_start_vector_t_begin, METH_VARARGS, (char *)"void_start_vector_t_begin(void_start_vector_t self) -> std::vector< void * >::iterator"},
	 { (char *)"void_start_vector_t_end", _wrap_void_start_vector_t_end, METH_VARARGS, (char *)"void_start_vector_t_end(void_start_vector_t self) -> std::vector< void * >::iterator"},
	 { (char *)"void_start_vector_t_rbegin", _wrap_void_start_vector_t_rbegin, METH_VARARGS, (char *)"void_start_vector_t_rbegin(void_start_vector_t self) -> std::vector< void * >::reverse_iterator"},
	 { (char *)"void_start_vector_t_rend", _wrap_void_start_vector_t_rend, METH_VARARGS, (char *)"void_start_vector_t_rend(void_start_vector_t self) -> std::vector< void * >::reverse_iterator"},
	 { (char *)"void_start_vector_t_pop_back", _wrap_void_start_vector_t_pop_back, METH_VARARGS, (char *)"void_start_vector_t_pop_back(void_start_vector_t self)"},
	 { (char *)"void_start_vector_t_erase", _wrap_void_start_vector_t_erase, METH_VARARGS, (char *)"\n"
		"erase(std::vector< void * >::iterator pos) -> std::vector< void * >::iterator\n"
		"void_start_vector_t_erase(void_start_vector_t self, std::vector< void * >::iterator first, std::vector< void * >::iterator last) -> std::vector< void * >::iterator\n"
		""},
	 { (char *)"new_void_start_vector_t", _wrap_new_void_start_vector_t, METH_VARARGS, (char *)"\n"
		"void_start_vector_t()\n"
		"void_start_vector_t(void_start_vector_t arg2)\n"
		"void_start_vector_t(std::vector< void * >::size_type size)\n"
		"new_void_start_vector_t(std::vector< void * >::size_type size, std::vector< void * >::value_type value) -> void_start_vector_t\n"
		""},
	 { (char *)"void_start_vector_t_push_back", (PyCFunction) _wrap_void_start_vector_t_push_back, METH_VARARGS | METH_KEYWORDS, (char *)"void_start_vector_t_push_back(void_start_vector_t self, std::vector< void * >::value_type x)"},
	 { (char *)"void_start_vector_t_front", _wrap_void_start_vector_t_front, METH_VARARGS, (char *)"void_start_vector_t_front(void_start_vector_t self) -> std::vector< void * >::value_type"},
	 { (char *)"void_start_vector_t_back", _wrap_void_start_vector_t_back, METH_VARARGS, (char *)"void_start_vector_t_back(void_start_vector_t self) -> std::vector< void * >::value_type"},
	 { (char *)"void_start_vector_t_assign", (PyCFunction) _wrap_void_start_vector_t_assign, METH_VARARGS | METH_KEYWORDS, (char *)"void_start_vector_t_assign(void_start_vector_t self, std::vector< void * >::size_type n, std::vector< void * >::value_type x)"},
	 { (char *)"void_start_vector_t_resize", _wrap_void_start_vector_t_resize, METH_VARARGS, (char *)"\n"
		"resize(std::vector< void * >::size_type new_size)\n"
		"void_start_vector_t_resize(void_start_vector_t self, std::vector< void * >::size_type new_size, std::vector< void * >::value_type x)\n"
		""},
	 { (char *)"void_start_vector_t_insert", _wrap_void_start_vector_t_insert, METH_VARARGS, (char *)"\n"
		"insert(std::vector< void * >::iterator pos, std::vector< void * >::value_type x) -> std::vector< void * >::iterator\n"
		"void_start_vector_t_insert(void_start_vector_t self, std::vector< void * >::iterator pos, std::vector< void * >::size_type n, \n"
		"    std::vector< void * >::value_type x)\n"
		""},
	 { (char *)"void_start_vector_t_reserve", (PyCFunction) _wrap_void_start_vector_t_reserve, METH_VARARGS | METH_KEYWORDS, (char *)"void_start_vector_t_reserve(void_start_vector_t self, std::vector< void * >::size_type n)"},
	 { (char *)"void_start_vector_t_capacity", _wrap_void_start_vector_t_capacity, METH_VARARGS, (char *)"void_start_vector_t_capacity(void_start_vector_t self) -> std::vector< void * >::size_type"},
	 { (char *)"delete_void_start_vector_t", _wrap_delete_void_start_vector_t, METH_VARARGS, (char *)"delete_void_start_vector_t(void_start_vector_t self)"},
	 { (char *)"void_start_vector_t_swigregister", void_start_vector_t_swigregister, METH_VARARGS, NULL},
	 { (char *)"block_gw_message_type_action_set", _wrap_block_gw_message_type_action_set, METH_VARARGS, (char *)"block_gw_message_type_action_set(block_gw_message_type self, gr::block_gw_message_type::action_type action)"},
	 { (char *)"block_gw_message_type_action_get", _wrap_block_gw_message_type_action_get, METH_VARARGS, (char *)"block_gw_message_type_action_get(block_gw_message_type self) -> gr::block_gw_message_type::action_type"},
	 { (char *)"block_gw_message_type_general_work_args_noutput_items_set", _wrap_block_gw_message_type_general_work_args_noutput_items_set, METH_VARARGS, (char *)"block_gw_message_type_general_work_args_noutput_items_set(block_gw_message_type self, int general_work_args_noutput_items)"},
	 { (char *)"block_gw_message_type_general_work_args_noutput_items_get", _wrap_block_gw_message_type_general_work_args_noutput_items_get, METH_VARARGS, (char *)"block_gw_message_type_general_work_args_noutput_items_get(block_gw_message_type self) -> int"},
	 { (char *)"block_gw_message_type_general_work_args_ninput_items_set", _wrap_block_gw_message_type_general_work_args_ninput_items_set, METH_VARARGS, (char *)"block_gw_message_type_general_work_args_ninput_items_set(block_gw_message_type self, std::vector< int,std::allocator< int > > * general_work_args_ninput_items)"},
	 { (char *)"block_gw_message_type_general_work_args_ninput_items_get", _wrap_block_gw_message_type_general_work_args_ninput_items_get, METH_VARARGS, (char *)"block_gw_message_type_general_work_args_ninput_items_get(block_gw_message_type self) -> std::vector< int,std::allocator< int > > *"},
	 { (char *)"block_gw_message_type_general_work_args_input_items_set", _wrap_block_gw_message_type_general_work_args_input_items_set, METH_VARARGS, (char *)"block_gw_message_type_general_work_args_input_items_set(block_gw_message_type self, void_start_vector_t general_work_args_input_items)"},
	 { (char *)"block_gw_message_type_general_work_args_input_items_get", _wrap_block_gw_message_type_general_work_args_input_items_get, METH_VARARGS, (char *)"block_gw_message_type_general_work_args_input_items_get(block_gw_message_type self) -> void_start_vector_t"},
	 { (char *)"block_gw_message_type_general_work_args_output_items_set", _wrap_block_gw_message_type_general_work_args_output_items_set, METH_VARARGS, (char *)"block_gw_message_type_general_work_args_output_items_set(block_gw_message_type self, void_start_vector_t general_work_args_output_items)"},
	 { (char *)"block_gw_message_type_general_work_args_output_items_get", _wrap_block_gw_message_type_general_work_args_output_items_get, METH_VARARGS, (char *)"block_gw_message_type_general_work_args_output_items_get(block_gw_message_type self) -> void_start_vector_t"},
	 { (char *)"block_gw_message_type_general_work_args_return_value_set", _wrap_block_gw_message_type_general_work_args_return_value_set, METH_VARARGS, (char *)"block_gw_message_type_general_work_args_return_value_set(block_gw_message_type self, int general_work_args_return_value)"},
	 { (char *)"block_gw_message_type_general_work_args_return_value_get", _wrap_block_gw_message_type_general_work_args_return_value_get, METH_VARARGS, (char *)"block_gw_message_type_general_work_args_return_value_get(block_gw_message_type self) -> int"},
	 { (char *)"block_gw_message_type_work_args_ninput_items_set", _wrap_block_gw_message_type_work_args_ninput_items_set, METH_VARARGS, (char *)"block_gw_message_type_work_args_ninput_items_set(block_gw_message_type self, int work_args_ninput_items)"},
	 { (char *)"block_gw_message_type_work_args_ninput_items_get", _wrap_block_gw_message_type_work_args_ninput_items_get, METH_VARARGS, (char *)"block_gw_message_type_work_args_ninput_items_get(block_gw_message_type self) -> int"},
	 { (char *)"block_gw_message_type_work_args_noutput_items_set", _wrap_block_gw_message_type_work_args_noutput_items_set, METH_VARARGS, (char *)"block_gw_message_type_work_args_noutput_items_set(block_gw_message_type self, int work_args_noutput_items)"},
	 { (char *)"block_gw_message_type_work_args_noutput_items_get", _wrap_block_gw_message_type_work_args_noutput_items_get, METH_VARARGS, (char *)"block_gw_message_type_work_args_noutput_items_get(block_gw_message_type self) -> int"},
	 { (char *)"block_gw_message_type_work_args_input_items_set", _wrap_block_gw_message_type_work_args_input_items_set, METH_VARARGS, (char *)"block_gw_message_type_work_args_input_items_set(block_gw_message_type self, void_start_vector_t work_args_input_items)"},
	 { (char *)"block_gw_message_type_work_args_input_items_get", _wrap_block_gw_message_type_work_args_input_items_get, METH_VARARGS, (char *)"block_gw_message_type_work_args_input_items_get(block_gw_message_type self) -> void_start_vector_t"},
	 { (char *)"block_gw_message_type_work_args_output_items_set", _wrap_block_gw_message_type_work_args_output_items_set, METH_VARARGS, (char *)"block_gw_message_type_work_args_output_items_set(block_gw_message_type self, void_start_vector_t work_args_output_items)"},
	 { (char *)"block_gw_message_type_work_args_output_items_get", _wrap_block_gw_message_type_work_args_output_items_get, METH_VARARGS, (char *)"block_gw_message_type_work_args_output_items_get(block_gw_message_type self) -> void_start_vector_t"},
	 { (char *)"block_gw_message_type_work_args_return_value_set", _wrap_block_gw_message_type_work_args_return_value_set, METH_VARARGS, (char *)"block_gw_message_type_work_args_return_value_set(block_gw_message_type self, int work_args_return_value)"},
	 { (char *)"block_gw_message_type_work_args_return_value_get", _wrap_block_gw_message_type_work_args_return_value_get, METH_VARARGS, (char *)"block_gw_message_type_work_args_return_value_get(block_gw_message_type self) -> int"},
	 { (char *)"block_gw_message_type_forecast_args_noutput_items_set", _wrap_block_gw_message_type_forecast_args_noutput_items_set, METH_VARARGS, (char *)"block_gw_message_type_forecast_args_noutput_items_set(block_gw_message_type self, int forecast_args_noutput_items)"},
	 { (char *)"block_gw_message_type_forecast_args_noutput_items_get", _wrap_block_gw_message_type_forecast_args_noutput_items_get, METH_VARARGS, (char *)"block_gw_message_type_forecast_args_noutput_items_get(block_gw_message_type self) -> int"},
	 { (char *)"block_gw_message_type_forecast_args_ninput_items_required_set", _wrap_block_gw_message_type_forecast_args_ninput_items_required_set, METH_VARARGS, (char *)"block_gw_message_type_forecast_args_ninput_items_required_set(block_gw_message_type self, std::vector< int,std::allocator< int > > * forecast_args_ninput_items_required)"},
	 { (char *)"block_gw_message_type_forecast_args_ninput_items_required_get", _wrap_block_gw_message_type_forecast_args_ninput_items_required_get, METH_VARARGS, (char *)"block_gw_message_type_forecast_args_ninput_items_required_get(block_gw_message_type self) -> std::vector< int,std::allocator< int > > *"},
	 { (char *)"block_gw_message_type_start_args_return_value_set", _wrap_block_gw_message_type_start_args_return_value_set, METH_VARARGS, (char *)"block_gw_message_type_start_args_return_value_set(block_gw_message_type self, bool start_args_return_value)"},
	 { (char *)"block_gw_message_type_start_args_return_value_get", _wrap_block_gw_message_type_start_args_return_value_get, METH_VARARGS, (char *)"block_gw_message_type_start_args_return_value_get(block_gw_message_type self) -> bool"},
	 { (char *)"block_gw_message_type_stop_args_return_value_set", _wrap_block_gw_message_type_stop_args_return_value_set, METH_VARARGS, (char *)"block_gw_message_type_stop_args_return_value_set(block_gw_message_type self, bool stop_args_return_value)"},
	 { (char *)"block_gw_message_type_stop_args_return_value_get", _wrap_block_gw_message_type_stop_args_return_value_get, METH_VARARGS, (char *)"block_gw_message_type_stop_args_return_value_get(block_gw_message_type self) -> bool"},
	 { (char *)"new_block_gw_message_type", _wrap_new_block_gw_message_type, METH_VARARGS, (char *)"new_block_gw_message_type() -> block_gw_message_type"},
	 { (char *)"delete_block_gw_message_type", _wrap_delete_block_gw_message_type, METH_VARARGS, (char *)"delete_block_gw_message_type(block_gw_message_type self)"},
	 { (char *)"block_gw_message_type_swigregister", block_gw_message_type_swigregister, METH_VARARGS, NULL},
	 { (char *)"block_gateway_make", (PyCFunction) _wrap_block_gateway_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_gateway_make(gr::feval_ll * handler, std::string const & name, io_signature_sptr in_sig, io_signature_sptr out_sig, \n"
		"    gr::block_gw_work_type const work_type, unsigned int const factor) -> block_gateway_sptr\n"
		"\n"
		"The gateway block which performs all the magic.\n"
		"\n"
		"The gateway provides access to all the gr::block routines. The methods prefixed with gr::block__ are renamed to class methods without the prefix in python.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Make a new gateway block.\n"
		"\n"
		"Args:\n"
		"    handler : the swig director object with callback\n"
		"    name : the name of the block (Ex: \"Shirley\")\n"
		"    in_sig : the input signature for this block\n"
		"    out_sig : the output signature for this block\n"
		"    work_type : the type of block overload to implement\n"
		"    factor : the decimation or interpolation factor\n"
		""},
	 { (char *)"block_gateway_block_message", _wrap_block_gateway_block_message, METH_VARARGS, (char *)"\n"
		"block_gateway_block_message(block_gateway self) -> block_gw_message_type\n"
		"\n"
		"Provide access to the shared message object.\n"
		""},
	 { (char *)"block_gateway_block__unique_id", _wrap_block_gateway_block__unique_id, METH_VARARGS, (char *)"block_gateway_block__unique_id(block_gateway self) -> long"},
	 { (char *)"block_gateway_block__name", _wrap_block_gateway_block__name, METH_VARARGS, (char *)"block_gateway_block__name(block_gateway self) -> std::string"},
	 { (char *)"block_gateway_block__history", _wrap_block_gateway_block__history, METH_VARARGS, (char *)"block_gateway_block__history(block_gateway self) -> unsigned int"},
	 { (char *)"block_gateway_block__set_history", (PyCFunction) _wrap_block_gateway_block__set_history, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_block__set_history(block_gateway self, unsigned int history)"},
	 { (char *)"block_gateway_block__set_fixed_rate", (PyCFunction) _wrap_block_gateway_block__set_fixed_rate, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_block__set_fixed_rate(block_gateway self, bool fixed_rate)"},
	 { (char *)"block_gateway_block__fixed_rate", _wrap_block_gateway_block__fixed_rate, METH_VARARGS, (char *)"block_gateway_block__fixed_rate(block_gateway self) -> bool"},
	 { (char *)"block_gateway_block__set_output_multiple", (PyCFunction) _wrap_block_gateway_block__set_output_multiple, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_block__set_output_multiple(block_gateway self, int multiple)"},
	 { (char *)"block_gateway_block__set_min_output_buffer", _wrap_block_gateway_block__set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"block__set_min_output_buffer(int port, long size)\n"
		"block_gateway_block__set_min_output_buffer(block_gateway self, long size)\n"
		""},
	 { (char *)"block_gateway_block__output_multiple", _wrap_block_gateway_block__output_multiple, METH_VARARGS, (char *)"block_gateway_block__output_multiple(block_gateway self) -> int"},
	 { (char *)"block_gateway_block__consume", (PyCFunction) _wrap_block_gateway_block__consume, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_block__consume(block_gateway self, int which_input, int how_many_items)"},
	 { (char *)"block_gateway_block__consume_each", (PyCFunction) _wrap_block_gateway_block__consume_each, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_block__consume_each(block_gateway self, int how_many_items)"},
	 { (char *)"block_gateway_block__produce", (PyCFunction) _wrap_block_gateway_block__produce, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_block__produce(block_gateway self, int which_output, int how_many_items)"},
	 { (char *)"block_gateway_block__set_relative_rate", (PyCFunction) _wrap_block_gateway_block__set_relative_rate, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_block__set_relative_rate(block_gateway self, double relative_rate)"},
	 { (char *)"block_gateway_block__relative_rate", _wrap_block_gateway_block__relative_rate, METH_VARARGS, (char *)"block_gateway_block__relative_rate(block_gateway self) -> double"},
	 { (char *)"block_gateway_block__nitems_read", (PyCFunction) _wrap_block_gateway_block__nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_block__nitems_read(block_gateway self, unsigned int which_input) -> uint64_t"},
	 { (char *)"block_gateway_block__nitems_written", (PyCFunction) _wrap_block_gateway_block__nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_block__nitems_written(block_gateway self, unsigned int which_output) -> uint64_t"},
	 { (char *)"block_gateway_block__tag_propagation_policy", _wrap_block_gateway_block__tag_propagation_policy, METH_VARARGS, (char *)"block_gateway_block__tag_propagation_policy(block_gateway self) -> gr::block::tag_propagation_policy_t"},
	 { (char *)"block_gateway_block__set_tag_propagation_policy", (PyCFunction) _wrap_block_gateway_block__set_tag_propagation_policy, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_block__set_tag_propagation_policy(block_gateway self, gr::block::tag_propagation_policy_t p)"},
	 { (char *)"block_gateway_block__add_item_tag", _wrap_block_gateway_block__add_item_tag, METH_VARARGS, (char *)"\n"
		"block__add_item_tag(unsigned int which_output, tag_t tag)\n"
		"block_gateway_block__add_item_tag(block_gateway self, unsigned int which_output, uint64_t abs_offset, swig_int_ptr key, \n"
		"    swig_int_ptr value, swig_int_ptr srcid=pmt::get_PMT_F())\n"
		""},
	 { (char *)"block_gateway_block__get_tags_in_range", _wrap_block_gateway_block__get_tags_in_range, METH_VARARGS, (char *)"\n"
		"block__get_tags_in_range(unsigned int which_input, uint64_t abs_start, uint64_t abs_end) -> tags_vector_t\n"
		"block_gateway_block__get_tags_in_range(block_gateway self, unsigned int which_input, uint64_t abs_start, uint64_t abs_end, \n"
		"    swig_int_ptr key) -> tags_vector_t\n"
		""},
	 { (char *)"block_gateway_block__get_tags_in_window", _wrap_block_gateway_block__get_tags_in_window, METH_VARARGS, (char *)"\n"
		"block__get_tags_in_window(unsigned int which_input, uint64_t rel_start, uint64_t rel_end) -> tags_vector_t\n"
		"block_gateway_block__get_tags_in_window(block_gateway self, unsigned int which_input, uint64_t rel_start, uint64_t rel_end, \n"
		"    swig_int_ptr key) -> tags_vector_t\n"
		""},
	 { (char *)"block_gateway_block__message_port_register_in", (PyCFunction) _wrap_block_gateway_block__message_port_register_in, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_block__message_port_register_in(block_gateway self, swig_int_ptr port_id)"},
	 { (char *)"block_gateway_block__message_port_register_out", (PyCFunction) _wrap_block_gateway_block__message_port_register_out, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_block__message_port_register_out(block_gateway self, swig_int_ptr port_id)"},
	 { (char *)"block_gateway_block__message_port_pub", (PyCFunction) _wrap_block_gateway_block__message_port_pub, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_block__message_port_pub(block_gateway self, swig_int_ptr port_id, swig_int_ptr msg)"},
	 { (char *)"block_gateway_block__message_port_sub", (PyCFunction) _wrap_block_gateway_block__message_port_sub, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_block__message_port_sub(block_gateway self, swig_int_ptr port_id, swig_int_ptr target)"},
	 { (char *)"block_gateway_block__message_port_unsub", (PyCFunction) _wrap_block_gateway_block__message_port_unsub, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_block__message_port_unsub(block_gateway self, swig_int_ptr port_id, swig_int_ptr target)"},
	 { (char *)"block_gateway_block__message_subscribers", (PyCFunction) _wrap_block_gateway_block__message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_block__message_subscribers(block_gateway self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"block_gateway_block__message_ports_in", _wrap_block_gateway_block__message_ports_in, METH_VARARGS, (char *)"block_gateway_block__message_ports_in(block_gateway self) -> swig_int_ptr"},
	 { (char *)"block_gateway_block__message_ports_out", _wrap_block_gateway_block__message_ports_out, METH_VARARGS, (char *)"block_gateway_block__message_ports_out(block_gateway self) -> swig_int_ptr"},
	 { (char *)"block_gateway_set_msg_handler_feval", (PyCFunction) _wrap_block_gateway_set_msg_handler_feval, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_set_msg_handler_feval(block_gateway self, swig_int_ptr which_port, gr::feval_p * msg_handler)"},
	 { (char *)"delete_block_gateway", _wrap_delete_block_gateway, METH_VARARGS, (char *)"delete_block_gateway(block_gateway self)"},
	 { (char *)"block_gateway_swigregister", block_gateway_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_block_gateway_sptr", _wrap_new_block_gateway_sptr, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr()\n"
		"new_block_gateway_sptr(block_gateway p) -> block_gateway_sptr\n"
		""},
	 { (char *)"block_gateway_sptr___deref__", _wrap_block_gateway_sptr___deref__, METH_VARARGS, (char *)"block_gateway_sptr___deref__(block_gateway_sptr self) -> block_gateway"},
	 { (char *)"delete_block_gateway_sptr", _wrap_delete_block_gateway_sptr, METH_VARARGS, (char *)"delete_block_gateway_sptr(block_gateway_sptr self)"},
	 { (char *)"block_gateway_sptr_make", (PyCFunction) _wrap_block_gateway_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_gateway_sptr_make(block_gateway_sptr self, gr::feval_ll * handler, std::string const & name, io_signature_sptr in_sig, \n"
		"    io_signature_sptr out_sig, gr::block_gw_work_type const work_type, \n"
		"    unsigned int const factor) -> block_gateway_sptr\n"
		"\n"
		"The gateway block which performs all the magic.\n"
		"\n"
		"The gateway provides access to all the gr::block routines. The methods prefixed with gr::block__ are renamed to class methods without the prefix in python.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Make a new gateway block.\n"
		"\n"
		"Args:\n"
		"    handler : the swig director object with callback\n"
		"    name : the name of the block (Ex: \"Shirley\")\n"
		"    in_sig : the input signature for this block\n"
		"    out_sig : the output signature for this block\n"
		"    work_type : the type of block overload to implement\n"
		"    factor : the decimation or interpolation factor\n"
		""},
	 { (char *)"block_gateway_sptr_block_message", _wrap_block_gateway_sptr_block_message, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr_block_message(block_gateway_sptr self) -> block_gw_message_type\n"
		"\n"
		"Provide access to the shared message object.\n"
		""},
	 { (char *)"block_gateway_sptr_block__unique_id", _wrap_block_gateway_sptr_block__unique_id, METH_VARARGS, (char *)"block_gateway_sptr_block__unique_id(block_gateway_sptr self) -> long"},
	 { (char *)"block_gateway_sptr_block__name", _wrap_block_gateway_sptr_block__name, METH_VARARGS, (char *)"block_gateway_sptr_block__name(block_gateway_sptr self) -> std::string"},
	 { (char *)"block_gateway_sptr_block__history", _wrap_block_gateway_sptr_block__history, METH_VARARGS, (char *)"block_gateway_sptr_block__history(block_gateway_sptr self) -> unsigned int"},
	 { (char *)"block_gateway_sptr_block__set_history", (PyCFunction) _wrap_block_gateway_sptr_block__set_history, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_sptr_block__set_history(block_gateway_sptr self, unsigned int history)"},
	 { (char *)"block_gateway_sptr_block__set_fixed_rate", (PyCFunction) _wrap_block_gateway_sptr_block__set_fixed_rate, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_sptr_block__set_fixed_rate(block_gateway_sptr self, bool fixed_rate)"},
	 { (char *)"block_gateway_sptr_block__fixed_rate", _wrap_block_gateway_sptr_block__fixed_rate, METH_VARARGS, (char *)"block_gateway_sptr_block__fixed_rate(block_gateway_sptr self) -> bool"},
	 { (char *)"block_gateway_sptr_block__set_output_multiple", (PyCFunction) _wrap_block_gateway_sptr_block__set_output_multiple, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_sptr_block__set_output_multiple(block_gateway_sptr self, int multiple)"},
	 { (char *)"block_gateway_sptr_block__set_min_output_buffer", _wrap_block_gateway_sptr_block__set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"block__set_min_output_buffer(int port, long size)\n"
		"block_gateway_sptr_block__set_min_output_buffer(block_gateway_sptr self, long size)\n"
		""},
	 { (char *)"block_gateway_sptr_block__output_multiple", _wrap_block_gateway_sptr_block__output_multiple, METH_VARARGS, (char *)"block_gateway_sptr_block__output_multiple(block_gateway_sptr self) -> int"},
	 { (char *)"block_gateway_sptr_block__consume", (PyCFunction) _wrap_block_gateway_sptr_block__consume, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_sptr_block__consume(block_gateway_sptr self, int which_input, int how_many_items)"},
	 { (char *)"block_gateway_sptr_block__consume_each", (PyCFunction) _wrap_block_gateway_sptr_block__consume_each, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_sptr_block__consume_each(block_gateway_sptr self, int how_many_items)"},
	 { (char *)"block_gateway_sptr_block__produce", (PyCFunction) _wrap_block_gateway_sptr_block__produce, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_sptr_block__produce(block_gateway_sptr self, int which_output, int how_many_items)"},
	 { (char *)"block_gateway_sptr_block__set_relative_rate", (PyCFunction) _wrap_block_gateway_sptr_block__set_relative_rate, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_sptr_block__set_relative_rate(block_gateway_sptr self, double relative_rate)"},
	 { (char *)"block_gateway_sptr_block__relative_rate", _wrap_block_gateway_sptr_block__relative_rate, METH_VARARGS, (char *)"block_gateway_sptr_block__relative_rate(block_gateway_sptr self) -> double"},
	 { (char *)"block_gateway_sptr_block__nitems_read", (PyCFunction) _wrap_block_gateway_sptr_block__nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_sptr_block__nitems_read(block_gateway_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"block_gateway_sptr_block__nitems_written", (PyCFunction) _wrap_block_gateway_sptr_block__nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_sptr_block__nitems_written(block_gateway_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"block_gateway_sptr_block__tag_propagation_policy", _wrap_block_gateway_sptr_block__tag_propagation_policy, METH_VARARGS, (char *)"block_gateway_sptr_block__tag_propagation_policy(block_gateway_sptr self) -> gr::block::tag_propagation_policy_t"},
	 { (char *)"block_gateway_sptr_block__set_tag_propagation_policy", (PyCFunction) _wrap_block_gateway_sptr_block__set_tag_propagation_policy, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_sptr_block__set_tag_propagation_policy(block_gateway_sptr self, gr::block::tag_propagation_policy_t p)"},
	 { (char *)"block_gateway_sptr_block__add_item_tag", _wrap_block_gateway_sptr_block__add_item_tag, METH_VARARGS, (char *)"\n"
		"block__add_item_tag(unsigned int which_output, tag_t tag)\n"
		"block_gateway_sptr_block__add_item_tag(block_gateway_sptr self, unsigned int which_output, uint64_t abs_offset, swig_int_ptr key, \n"
		"    swig_int_ptr value, swig_int_ptr srcid=pmt::get_PMT_F())\n"
		""},
	 { (char *)"block_gateway_sptr_block__get_tags_in_range", _wrap_block_gateway_sptr_block__get_tags_in_range, METH_VARARGS, (char *)"\n"
		"block__get_tags_in_range(unsigned int which_input, uint64_t abs_start, uint64_t abs_end) -> tags_vector_t\n"
		"block_gateway_sptr_block__get_tags_in_range(block_gateway_sptr self, unsigned int which_input, uint64_t abs_start, uint64_t abs_end, \n"
		"    swig_int_ptr key) -> tags_vector_t\n"
		""},
	 { (char *)"block_gateway_sptr_block__get_tags_in_window", _wrap_block_gateway_sptr_block__get_tags_in_window, METH_VARARGS, (char *)"\n"
		"block__get_tags_in_window(unsigned int which_input, uint64_t rel_start, uint64_t rel_end) -> tags_vector_t\n"
		"block_gateway_sptr_block__get_tags_in_window(block_gateway_sptr self, unsigned int which_input, uint64_t rel_start, uint64_t rel_end, \n"
		"    swig_int_ptr key) -> tags_vector_t\n"
		""},
	 { (char *)"block_gateway_sptr_block__message_port_register_in", (PyCFunction) _wrap_block_gateway_sptr_block__message_port_register_in, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_sptr_block__message_port_register_in(block_gateway_sptr self, swig_int_ptr port_id)"},
	 { (char *)"block_gateway_sptr_block__message_port_register_out", (PyCFunction) _wrap_block_gateway_sptr_block__message_port_register_out, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_sptr_block__message_port_register_out(block_gateway_sptr self, swig_int_ptr port_id)"},
	 { (char *)"block_gateway_sptr_block__message_port_pub", (PyCFunction) _wrap_block_gateway_sptr_block__message_port_pub, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_sptr_block__message_port_pub(block_gateway_sptr self, swig_int_ptr port_id, swig_int_ptr msg)"},
	 { (char *)"block_gateway_sptr_block__message_port_sub", (PyCFunction) _wrap_block_gateway_sptr_block__message_port_sub, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_sptr_block__message_port_sub(block_gateway_sptr self, swig_int_ptr port_id, swig_int_ptr target)"},
	 { (char *)"block_gateway_sptr_block__message_port_unsub", (PyCFunction) _wrap_block_gateway_sptr_block__message_port_unsub, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_sptr_block__message_port_unsub(block_gateway_sptr self, swig_int_ptr port_id, swig_int_ptr target)"},
	 { (char *)"block_gateway_sptr_block__message_subscribers", (PyCFunction) _wrap_block_gateway_sptr_block__message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_sptr_block__message_subscribers(block_gateway_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"block_gateway_sptr_block__message_ports_in", _wrap_block_gateway_sptr_block__message_ports_in, METH_VARARGS, (char *)"block_gateway_sptr_block__message_ports_in(block_gateway_sptr self) -> swig_int_ptr"},
	 { (char *)"block_gateway_sptr_block__message_ports_out", _wrap_block_gateway_sptr_block__message_ports_out, METH_VARARGS, (char *)"block_gateway_sptr_block__message_ports_out(block_gateway_sptr self) -> swig_int_ptr"},
	 { (char *)"block_gateway_sptr_set_msg_handler_feval", (PyCFunction) _wrap_block_gateway_sptr_set_msg_handler_feval, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_sptr_set_msg_handler_feval(block_gateway_sptr self, swig_int_ptr which_port, gr::feval_p * msg_handler)"},
	 { (char *)"block_gateway_sptr_history", _wrap_block_gateway_sptr_history, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr_history(block_gateway_sptr self) -> unsigned int\n"
		"\n"
		"Assume block computes y_i = f(x_i, x_i-1, x_i-2, x_i-3...) History is the number of x_i's that are examined to produce one y_i. This comes in handy for FIR filters, where we use history to ensure that our input contains the appropriate \"history\" for the filter. History should be equal to the number of filter taps. First history samples (when there are no previous samples) are initialized with zeroes.\n"
		""},
	 { (char *)"block_gateway_sptr_declare_sample_delay", _wrap_block_gateway_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"block_gateway_sptr_declare_sample_delay(block_gateway_sptr self, unsigned int delay)\n"
		"\n"
		"Declares the block's delay in samples. Since the delay of blocks like filters is derived from the taps and not the block itself, we cannot automatically calculate this value and so leave it as a user-defined property. It defaults to 0 is not set.\n"
		"\n"
		"This does not actively set the delay; it just tells the scheduler what the delay is.\n"
		"\n"
		"This delay is mostly used to adjust the placement of the tags and is not currently used for any signal processing. When a tag is passed through a block with internal delay, its location should be moved based on the delay of the block. This interface allows us to tell the scheduler this value.\n"
		""},
	 { (char *)"block_gateway_sptr_sample_delay", (PyCFunction) _wrap_block_gateway_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_gateway_sptr_sample_delay(block_gateway_sptr self, int which) -> unsigned int\n"
		"\n"
		"Gets the delay of the block. Since the delay of blocks like filters is derived from the taps and not the block itself, we cannot automatically calculate this value and so leave it as a user-defined property. It defaults to 0 is not set.\n"
		""},
	 { (char *)"block_gateway_sptr_output_multiple", _wrap_block_gateway_sptr_output_multiple, METH_VARARGS, (char *)"block_gateway_sptr_output_multiple(block_gateway_sptr self) -> int"},
	 { (char *)"block_gateway_sptr_relative_rate", _wrap_block_gateway_sptr_relative_rate, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr_relative_rate(block_gateway_sptr self) -> double\n"
		"\n"
		"return the approximate output rate / input rate\n"
		""},
	 { (char *)"block_gateway_sptr_start", _wrap_block_gateway_sptr_start, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr_start(block_gateway_sptr self) -> bool\n"
		"\n"
		"Called to enable drivers, etc for i/o devices.\n"
		"\n"
		"This allows a block to enable an associated driver to begin transferring data just before we start to execute the scheduler. The end result is that this reduces latency in the pipeline when dealing with audio devices, usrps, etc.\n"
		""},
	 { (char *)"block_gateway_sptr_stop", _wrap_block_gateway_sptr_stop, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr_stop(block_gateway_sptr self) -> bool\n"
		"\n"
		"Called to disable drivers, etc for i/o devices.\n"
		""},
	 { (char *)"block_gateway_sptr_nitems_read", (PyCFunction) _wrap_block_gateway_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_gateway_sptr_nitems_read(block_gateway_sptr self, unsigned int which_input) -> uint64_t\n"
		"\n"
		"Return the number of items read on input stream which_input.\n"
		""},
	 { (char *)"block_gateway_sptr_nitems_written", (PyCFunction) _wrap_block_gateway_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_gateway_sptr_nitems_written(block_gateway_sptr self, unsigned int which_output) -> uint64_t\n"
		"\n"
		"Return the number of items written on output stream which_output.\n"
		""},
	 { (char *)"block_gateway_sptr_max_noutput_items", _wrap_block_gateway_sptr_max_noutput_items, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr_max_noutput_items(block_gateway_sptr self) -> int\n"
		"\n"
		"Return the maximum number of output items this block will handle during a call to work.\n"
		""},
	 { (char *)"block_gateway_sptr_set_max_noutput_items", (PyCFunction) _wrap_block_gateway_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_gateway_sptr_set_max_noutput_items(block_gateway_sptr self, int m)\n"
		"\n"
		"Set the maximum number of output items this block will handle during a call to work.\n"
		""},
	 { (char *)"block_gateway_sptr_unset_max_noutput_items", _wrap_block_gateway_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr_unset_max_noutput_items(block_gateway_sptr self)\n"
		"\n"
		"Clear the switch for using the max_noutput_items value of this block.\n"
		"\n"
		"When is_set_max_noutput_items() returns 'true', the scheduler will use the value returned by max_noutput_items() to limit the size of the number of items possible for this block's work function. If is_set_max_notput_items() returns 'false', then the scheduler ignores the internal value and uses the value set globally in the top_block.\n"
		"\n"
		"Use this value to clear the 'is_set' flag so the scheduler will ignore this. Use the set_max_noutput_items(m) call to both set a new value for max_noutput_items and to re-enable its use in the scheduler.\n"
		""},
	 { (char *)"block_gateway_sptr_is_set_max_noutput_items", _wrap_block_gateway_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr_is_set_max_noutput_items(block_gateway_sptr self) -> bool\n"
		"\n"
		"Ask the block if the flag is or is not set to use the internal value of max_noutput_items during a call to work.\n"
		""},
	 { (char *)"block_gateway_sptr_set_min_noutput_items", (PyCFunction) _wrap_block_gateway_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_gateway_sptr_set_min_noutput_items(block_gateway_sptr self, int m)\n"
		"\n"
		"Set the minimum number of output items this block can produce during a call to work.\n"
		""},
	 { (char *)"block_gateway_sptr_min_noutput_items", _wrap_block_gateway_sptr_min_noutput_items, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr_min_noutput_items(block_gateway_sptr self) -> int\n"
		"\n"
		"Return the minimum number of output items this block can produce during a call to work.\n"
		"\n"
		"Should be 0 for most blocks. Useful if we're dealing with packets and the block produces one packet per call to work.\n"
		""},
	 { (char *)"block_gateway_sptr_max_output_buffer", (PyCFunction) _wrap_block_gateway_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_gateway_sptr_max_output_buffer(block_gateway_sptr self, int i) -> long\n"
		"\n"
		"Returns max buffer size on output port .\n"
		""},
	 { (char *)"block_gateway_sptr_set_max_output_buffer", _wrap_block_gateway_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"block_gateway_sptr_set_max_output_buffer(block_gateway_sptr self, int port, long max_output_buffer)\n"
		"\n"
		"Request limit on max buffer size on all output ports.\n"
		"\n"
		"This is an advanced feature. Calling this can affect some fundamental assumptions about the system behavior and performance.\n"
		"\n"
		"The actual buffer size is determined by a number of other factors from the block and system. This function only provides a requested maximum. The buffers will always be a multiple of the system page size, which may be larger than the value asked for here.\n"
		""},
	 { (char *)"block_gateway_sptr_min_output_buffer", (PyCFunction) _wrap_block_gateway_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_gateway_sptr_min_output_buffer(block_gateway_sptr self, int i) -> long\n"
		"\n"
		"Returns min buffer size on output port .\n"
		""},
	 { (char *)"block_gateway_sptr_set_min_output_buffer", _wrap_block_gateway_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"block_gateway_sptr_set_min_output_buffer(block_gateway_sptr self, int port, long min_output_buffer)\n"
		"\n"
		"Request limit on the minimum buffer size on all output ports.\n"
		"\n"
		"This is an advanced feature. Calling this can affect some fundamental assumptions about the system behavior and performance.\n"
		"\n"
		"The actual buffer size is determined by a number of other factors from the block and system. This function only provides a requested minimum. The buffers will always be a multiple of the system page size, which may be larger than the value asked for here.\n"
		""},
	 { (char *)"block_gateway_sptr_pc_noutput_items", _wrap_block_gateway_sptr_pc_noutput_items, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr_pc_noutput_items(block_gateway_sptr self) -> float\n"
		"\n"
		"Gets instantaneous noutput_items performance counter.\n"
		""},
	 { (char *)"block_gateway_sptr_pc_noutput_items_avg", _wrap_block_gateway_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr_pc_noutput_items_avg(block_gateway_sptr self) -> float\n"
		"\n"
		"Gets average noutput_items performance counter.\n"
		""},
	 { (char *)"block_gateway_sptr_pc_noutput_items_var", _wrap_block_gateway_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr_pc_noutput_items_var(block_gateway_sptr self) -> float\n"
		"\n"
		"Gets variance of noutput_items performance counter.\n"
		""},
	 { (char *)"block_gateway_sptr_pc_nproduced", _wrap_block_gateway_sptr_pc_nproduced, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr_pc_nproduced(block_gateway_sptr self) -> float\n"
		"\n"
		"Gets instantaneous num items produced performance counter.\n"
		""},
	 { (char *)"block_gateway_sptr_pc_nproduced_avg", _wrap_block_gateway_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr_pc_nproduced_avg(block_gateway_sptr self) -> float\n"
		"\n"
		"Gets average num items produced performance counter.\n"
		""},
	 { (char *)"block_gateway_sptr_pc_nproduced_var", _wrap_block_gateway_sptr_pc_nproduced_var, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr_pc_nproduced_var(block_gateway_sptr self) -> float\n"
		"\n"
		"Gets variance of num items produced performance counter.\n"
		""},
	 { (char *)"block_gateway_sptr_pc_input_buffers_full", _wrap_block_gateway_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"block_gateway_sptr_pc_input_buffers_full(block_gateway_sptr self) -> std::vector< float,std::allocator< float > >\n"
		"\n"
		"Gets instantaneous fullness of  input buffer.\n"
		""},
	 { (char *)"block_gateway_sptr_pc_input_buffers_full_avg", _wrap_block_gateway_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"block_gateway_sptr_pc_input_buffers_full_avg(block_gateway_sptr self) -> std::vector< float,std::allocator< float > >\n"
		"\n"
		"Gets average fullness of  input buffer.\n"
		""},
	 { (char *)"block_gateway_sptr_pc_input_buffers_full_var", _wrap_block_gateway_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"block_gateway_sptr_pc_input_buffers_full_var(block_gateway_sptr self) -> std::vector< float,std::allocator< float > >\n"
		"\n"
		"Gets variance of fullness of  input buffer.\n"
		""},
	 { (char *)"block_gateway_sptr_pc_output_buffers_full", _wrap_block_gateway_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"block_gateway_sptr_pc_output_buffers_full(block_gateway_sptr self) -> std::vector< float,std::allocator< float > >\n"
		"\n"
		"Gets instantaneous fullness of  input buffer.\n"
		""},
	 { (char *)"block_gateway_sptr_pc_output_buffers_full_avg", _wrap_block_gateway_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"block_gateway_sptr_pc_output_buffers_full_avg(block_gateway_sptr self) -> std::vector< float,std::allocator< float > >\n"
		"\n"
		"Gets average fullness of  input buffer.\n"
		""},
	 { (char *)"block_gateway_sptr_pc_output_buffers_full_var", _wrap_block_gateway_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"block_gateway_sptr_pc_output_buffers_full_var(block_gateway_sptr self) -> std::vector< float,std::allocator< float > >\n"
		"\n"
		"Gets variance of fullness of  input buffer.\n"
		""},
	 { (char *)"block_gateway_sptr_pc_work_time", _wrap_block_gateway_sptr_pc_work_time, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr_pc_work_time(block_gateway_sptr self) -> float\n"
		"\n"
		"Gets instantaneous clock cycles spent in work.\n"
		""},
	 { (char *)"block_gateway_sptr_pc_work_time_avg", _wrap_block_gateway_sptr_pc_work_time_avg, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr_pc_work_time_avg(block_gateway_sptr self) -> float\n"
		"\n"
		"Gets average clock cycles spent in work.\n"
		""},
	 { (char *)"block_gateway_sptr_pc_work_time_var", _wrap_block_gateway_sptr_pc_work_time_var, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr_pc_work_time_var(block_gateway_sptr self) -> float\n"
		"\n"
		"Gets average clock cycles spent in work.\n"
		""},
	 { (char *)"block_gateway_sptr_pc_work_time_total", _wrap_block_gateway_sptr_pc_work_time_total, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr_pc_work_time_total(block_gateway_sptr self) -> float\n"
		"\n"
		"Gets total clock cycles spent in work.\n"
		""},
	 { (char *)"block_gateway_sptr_pc_throughput_avg", _wrap_block_gateway_sptr_pc_throughput_avg, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr_pc_throughput_avg(block_gateway_sptr self) -> float\n"
		"\n"
		"Gets average throughput.\n"
		""},
	 { (char *)"block_gateway_sptr_set_processor_affinity", (PyCFunction) _wrap_block_gateway_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_gateway_sptr_set_processor_affinity(block_gateway_sptr self, std::vector< int,std::allocator< int > > const & mask)\n"
		"\n"
		"Set the thread's affinity to processor core .\n"
		""},
	 { (char *)"block_gateway_sptr_unset_processor_affinity", _wrap_block_gateway_sptr_unset_processor_affinity, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr_unset_processor_affinity(block_gateway_sptr self)\n"
		"\n"
		"Remove processor affinity to a specific core.\n"
		""},
	 { (char *)"block_gateway_sptr_processor_affinity", _wrap_block_gateway_sptr_processor_affinity, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr_processor_affinity(block_gateway_sptr self) -> std::vector< int,std::allocator< int > >\n"
		"\n"
		"Get the current processor affinity.\n"
		""},
	 { (char *)"block_gateway_sptr_active_thread_priority", _wrap_block_gateway_sptr_active_thread_priority, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr_active_thread_priority(block_gateway_sptr self) -> int\n"
		"\n"
		"Get the current thread priority in use.\n"
		""},
	 { (char *)"block_gateway_sptr_thread_priority", _wrap_block_gateway_sptr_thread_priority, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr_thread_priority(block_gateway_sptr self) -> int\n"
		"\n"
		"Get the current thread priority stored.\n"
		""},
	 { (char *)"block_gateway_sptr_set_thread_priority", (PyCFunction) _wrap_block_gateway_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_gateway_sptr_set_thread_priority(block_gateway_sptr self, int priority) -> int\n"
		"\n"
		"Set the current thread priority.\n"
		""},
	 { (char *)"block_gateway_sptr_name", _wrap_block_gateway_sptr_name, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr_name(block_gateway_sptr self) -> std::string\n"
		"\n"
		"The name of the block\n"
		""},
	 { (char *)"block_gateway_sptr_symbol_name", _wrap_block_gateway_sptr_symbol_name, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr_symbol_name(block_gateway_sptr self) -> std::string\n"
		"\n"
		"The sybolic name of the block, which is used in the block_registry. The name is assigned by the block's constructor and never changes during the life of the block.\n"
		""},
	 { (char *)"block_gateway_sptr_input_signature", _wrap_block_gateway_sptr_input_signature, METH_VARARGS, (char *)"block_gateway_sptr_input_signature(block_gateway_sptr self) -> io_signature_sptr"},
	 { (char *)"block_gateway_sptr_output_signature", _wrap_block_gateway_sptr_output_signature, METH_VARARGS, (char *)"block_gateway_sptr_output_signature(block_gateway_sptr self) -> io_signature_sptr"},
	 { (char *)"block_gateway_sptr_unique_id", _wrap_block_gateway_sptr_unique_id, METH_VARARGS, (char *)"block_gateway_sptr_unique_id(block_gateway_sptr self) -> long"},
	 { (char *)"block_gateway_sptr_to_basic_block", _wrap_block_gateway_sptr_to_basic_block, METH_VARARGS, (char *)"block_gateway_sptr_to_basic_block(block_gateway_sptr self) -> basic_block_sptr"},
	 { (char *)"block_gateway_sptr_check_topology", (PyCFunction) _wrap_block_gateway_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_gateway_sptr_check_topology(block_gateway_sptr self, int ninputs, int noutputs) -> bool\n"
		"\n"
		"Confirm that ninputs and noutputs is an acceptable combination.\n"
		"\n"
		"This function is called by the runtime system whenever the topology changes. Most classes do not need to override this. This check is in addition to the constraints specified by the input and output gr::io_signatures.\n"
		""},
	 { (char *)"block_gateway_sptr_alias", _wrap_block_gateway_sptr_alias, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr_alias(block_gateway_sptr self) -> std::string\n"
		"\n"
		"Returns the block's alias as a string.\n"
		""},
	 { (char *)"block_gateway_sptr_set_block_alias", (PyCFunction) _wrap_block_gateway_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_gateway_sptr_set_block_alias(block_gateway_sptr self, std::string name)\n"
		"\n"
		"Set's a new alias for the block; also adds an entry into the block_registry to get the block using either the alias or the original symbol name.\n"
		""},
	 { (char *)"block_gateway_sptr__post", (PyCFunction) _wrap_block_gateway_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"block_gateway_sptr__post(block_gateway_sptr self, swig_int_ptr which_port, swig_int_ptr msg)\n"
		"\n"
		"Accept msg, place in queue, arrange for thread to be awakened if it's not already.\n"
		""},
	 { (char *)"block_gateway_sptr_message_ports_in", _wrap_block_gateway_sptr_message_ports_in, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr_message_ports_in(block_gateway_sptr self) -> swig_int_ptr\n"
		"\n"
		"Get input message port names.\n"
		"\n"
		"Returns the available input message ports for a block. The return object is a PMT vector that is filled with PMT symbols.\n"
		""},
	 { (char *)"block_gateway_sptr_message_ports_out", _wrap_block_gateway_sptr_message_ports_out, METH_VARARGS, (char *)"\n"
		"block_gateway_sptr_message_ports_out(block_gateway_sptr self) -> swig_int_ptr\n"
		"\n"
		"Get output message port names.\n"
		"\n"
		"Returns the available output message ports for a block. The return object is a PMT vector that is filled with PMT symbols.\n"
		""},
	 { (char *)"block_gateway_sptr_message_subscribers", (PyCFunction) _wrap_block_gateway_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"block_gateway_sptr_message_subscribers(block_gateway_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"block_gateway_sptr_swigregister", block_gateway_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"logger_config", (PyCFunction) _wrap_logger_config, METH_VARARGS | METH_KEYWORDS, (char *)"logger_config(std::string const config_filename, unsigned int watch_period=0)"},
	 { (char *)"logger_get_names", _wrap_logger_get_names, METH_VARARGS, (char *)"logger_get_names() -> std::vector< std::string,std::allocator< std::string > >"},
	 { (char *)"logger_reset_config", _wrap_logger_reset_config, METH_VARARGS, (char *)"logger_reset_config()"},
	 { (char *)"new_logger", (PyCFunction) _wrap_new_logger, METH_VARARGS | METH_KEYWORDS, (char *)"new_logger(std::string logger_name) -> logger"},
	 { (char *)"logger_set_level", (PyCFunction) _wrap_logger_set_level, METH_VARARGS | METH_KEYWORDS, (char *)"logger_set_level(logger self, std::string level)"},
	 { (char *)"logger_get_level", (PyCFunction) _wrap_logger_get_level, METH_VARARGS | METH_KEYWORDS, (char *)"logger_get_level(logger self, std::string & level)"},
	 { (char *)"logger_debug", (PyCFunction) _wrap_logger_debug, METH_VARARGS | METH_KEYWORDS, (char *)"logger_debug(logger self, std::string msg)"},
	 { (char *)"logger_info", (PyCFunction) _wrap_logger_info, METH_VARARGS | METH_KEYWORDS, (char *)"logger_info(logger self, std::string msg)"},
	 { (char *)"logger_notice", (PyCFunction) _wrap_logger_notice, METH_VARARGS | METH_KEYWORDS, (char *)"logger_notice(logger self, std::string msg)"},
	 { (char *)"logger_warn", (PyCFunction) _wrap_logger_warn, METH_VARARGS | METH_KEYWORDS, (char *)"logger_warn(logger self, std::string msg)"},
	 { (char *)"logger_error", (PyCFunction) _wrap_logger_error, METH_VARARGS | METH_KEYWORDS, (char *)"logger_error(logger self, std::string msg)"},
	 { (char *)"logger_crit", (PyCFunction) _wrap_logger_crit, METH_VARARGS | METH_KEYWORDS, (char *)"logger_crit(logger self, std::string msg)"},
	 { (char *)"logger_alert", (PyCFunction) _wrap_logger_alert, METH_VARARGS | METH_KEYWORDS, (char *)"logger_alert(logger self, std::string msg)"},
	 { (char *)"logger_fatal", (PyCFunction) _wrap_logger_fatal, METH_VARARGS | METH_KEYWORDS, (char *)"logger_fatal(logger self, std::string msg)"},
	 { (char *)"logger_emerg", (PyCFunction) _wrap_logger_emerg, METH_VARARGS | METH_KEYWORDS, (char *)"logger_emerg(logger self, std::string msg)"},
	 { (char *)"logger_errorIF", (PyCFunction) _wrap_logger_errorIF, METH_VARARGS | METH_KEYWORDS, (char *)"logger_errorIF(logger self, bool cond, std::string msg)"},
	 { (char *)"logger_log_assert", (PyCFunction) _wrap_logger_log_assert, METH_VARARGS | METH_KEYWORDS, (char *)"logger_log_assert(logger self, bool cond, std::string msg)"},
	 { (char *)"logger_add_console_appender", (PyCFunction) _wrap_logger_add_console_appender, METH_VARARGS | METH_KEYWORDS, (char *)"logger_add_console_appender(logger self, std::string target, std::string pattern)"},
	 { (char *)"logger_add_file_appender", (PyCFunction) _wrap_logger_add_file_appender, METH_VARARGS | METH_KEYWORDS, (char *)"logger_add_file_appender(logger self, std::string filename, bool append, std::string pattern)"},
	 { (char *)"logger_add_rollingfile_appender", (PyCFunction) _wrap_logger_add_rollingfile_appender, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"logger_add_rollingfile_appender(logger self, std::string filename, size_t filesize, int bkup_index, bool append, \n"
		"    mode_t mode, std::string pattern)\n"
		""},
	 { (char *)"delete_logger", _wrap_delete_logger, METH_VARARGS, (char *)"delete_logger(logger self)"},
	 { (char *)"logger_swigregister", logger_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_rpcserver_booter_base", _wrap_delete_rpcserver_booter_base, METH_VARARGS, (char *)"delete_rpcserver_booter_base(rpcserver_booter_base self)"},
	 { (char *)"rpcserver_booter_base_i", _wrap_rpcserver_booter_base_i, METH_VARARGS, (char *)"rpcserver_booter_base_i(rpcserver_booter_base self) -> rpcserver_base *"},
	 { (char *)"rpcserver_booter_base_endpoints", _wrap_rpcserver_booter_base_endpoints, METH_VARARGS, (char *)"rpcserver_booter_base_endpoints(rpcserver_booter_base self) -> std::vector< std::string,std::allocator< std::string > > const"},
	 { (char *)"rpcserver_booter_base_type", _wrap_rpcserver_booter_base_type, METH_VARARGS, (char *)"rpcserver_booter_base_type(rpcserver_booter_base self) -> std::string const &"},
	 { (char *)"rpcserver_booter_base_swigregister", rpcserver_booter_base_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_rpcserver_booter_aggregator", _wrap_new_rpcserver_booter_aggregator, METH_VARARGS, (char *)"new_rpcserver_booter_aggregator() -> rpcserver_booter_aggregator"},
	 { (char *)"delete_rpcserver_booter_aggregator", _wrap_delete_rpcserver_booter_aggregator, METH_VARARGS, (char *)"delete_rpcserver_booter_aggregator(rpcserver_booter_aggregator self)"},
	 { (char *)"rpcserver_booter_aggregator_registeredServers", _wrap_rpcserver_booter_aggregator_registeredServers, METH_VARARGS, (char *)"rpcserver_booter_aggregator_registeredServers(rpcserver_booter_aggregator self) -> std::vector< std::string,std::allocator< std::string > > const &"},
	 { (char *)"rpcserver_booter_aggregator_swigregister", rpcserver_booter_aggregator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_rpcmanager", _wrap_new_rpcmanager, METH_VARARGS, (char *)"new_rpcmanager() -> rpcmanager"},
	 { (char *)"delete_rpcmanager", _wrap_delete_rpcmanager, METH_VARARGS, (char *)"delete_rpcmanager(rpcmanager self)"},
	 { (char *)"rpcmanager_get", _wrap_rpcmanager_get, METH_VARARGS, (char *)"rpcmanager_get() -> rpcserver_booter_base"},
	 { (char *)"rpcmanager_register_booter", (PyCFunction) _wrap_rpcmanager_register_booter, METH_VARARGS | METH_KEYWORDS, (char *)"rpcmanager_register_booter(rpcserver_booter_base booter)"},
	 { (char *)"rpcmanager_swigregister", rpcmanager_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RPC_get_string", (PyCFunction) _wrap_new_RPC_get_string, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"new_RPC_get_string(std::string name, std::string functionbase, std::string units, std::string desc, \n"
		"    std::string min, std::string max, std::string deflt, DisplayType dtype) -> RPC_get_string\n"
		""},
	 { (char *)"RPC_get_string_add_rpc_variable", (PyCFunction) _wrap_RPC_get_string_add_rpc_variable, METH_VARARGS | METH_KEYWORDS, (char *)"RPC_get_string_add_rpc_variable(RPC_get_string self, rpcbasic_sptr s)"},
	 { (char *)"RPC_get_string_get", _wrap_RPC_get_string_get, METH_VARARGS, (char *)"RPC_get_string_get(RPC_get_string self) -> std::string"},
	 { (char *)"RPC_get_string_set_callback", (PyCFunction) _wrap_RPC_get_string_set_callback, METH_VARARGS | METH_KEYWORDS, (char *)"RPC_get_string_set_callback(RPC_get_string self, PyObject * cb)"},
	 { (char *)"RPC_get_string_setup_rpc", _wrap_RPC_get_string_setup_rpc, METH_VARARGS, (char *)"RPC_get_string_setup_rpc(RPC_get_string self)"},
	 { (char *)"RPC_get_string_activate", (PyCFunction) _wrap_RPC_get_string_activate, METH_VARARGS | METH_KEYWORDS, (char *)"RPC_get_string_activate(RPC_get_string self, PyObject * pyfunc)"},
	 { (char *)"delete_RPC_get_string", _wrap_delete_RPC_get_string, METH_VARARGS, (char *)"delete_RPC_get_string(RPC_get_string self)"},
	 { (char *)"RPC_get_string_swigregister", RPC_get_string_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RPC_get_int", (PyCFunction) _wrap_new_RPC_get_int, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"new_RPC_get_int(std::string name, std::string functionbase, std::string units, std::string desc, \n"
		"    int min, int max, int deflt, DisplayType dtype) -> RPC_get_int\n"
		""},
	 { (char *)"RPC_get_int_add_rpc_variable", (PyCFunction) _wrap_RPC_get_int_add_rpc_variable, METH_VARARGS | METH_KEYWORDS, (char *)"RPC_get_int_add_rpc_variable(RPC_get_int self, rpcbasic_sptr s)"},
	 { (char *)"RPC_get_int_get", _wrap_RPC_get_int_get, METH_VARARGS, (char *)"RPC_get_int_get(RPC_get_int self) -> int"},
	 { (char *)"RPC_get_int_set_callback", (PyCFunction) _wrap_RPC_get_int_set_callback, METH_VARARGS | METH_KEYWORDS, (char *)"RPC_get_int_set_callback(RPC_get_int self, PyObject * cb)"},
	 { (char *)"RPC_get_int_setup_rpc", _wrap_RPC_get_int_setup_rpc, METH_VARARGS, (char *)"RPC_get_int_setup_rpc(RPC_get_int self)"},
	 { (char *)"RPC_get_int_activate", (PyCFunction) _wrap_RPC_get_int_activate, METH_VARARGS | METH_KEYWORDS, (char *)"RPC_get_int_activate(RPC_get_int self, PyObject * pyfunc)"},
	 { (char *)"delete_RPC_get_int", _wrap_delete_RPC_get_int, METH_VARARGS, (char *)"delete_RPC_get_int(RPC_get_int self)"},
	 { (char *)"RPC_get_int_swigregister", RPC_get_int_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RPC_get_float", (PyCFunction) _wrap_new_RPC_get_float, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"new_RPC_get_float(std::string name, std::string functionbase, std::string units, std::string desc, \n"
		"    float min, float max, float deflt, DisplayType dtype) -> RPC_get_float\n"
		""},
	 { (char *)"RPC_get_float_add_rpc_variable", (PyCFunction) _wrap_RPC_get_float_add_rpc_variable, METH_VARARGS | METH_KEYWORDS, (char *)"RPC_get_float_add_rpc_variable(RPC_get_float self, rpcbasic_sptr s)"},
	 { (char *)"RPC_get_float_get", _wrap_RPC_get_float_get, METH_VARARGS, (char *)"RPC_get_float_get(RPC_get_float self) -> float"},
	 { (char *)"RPC_get_float_set_callback", (PyCFunction) _wrap_RPC_get_float_set_callback, METH_VARARGS | METH_KEYWORDS, (char *)"RPC_get_float_set_callback(RPC_get_float self, PyObject * cb)"},
	 { (char *)"RPC_get_float_setup_rpc", _wrap_RPC_get_float_setup_rpc, METH_VARARGS, (char *)"RPC_get_float_setup_rpc(RPC_get_float self)"},
	 { (char *)"RPC_get_float_activate", (PyCFunction) _wrap_RPC_get_float_activate, METH_VARARGS | METH_KEYWORDS, (char *)"RPC_get_float_activate(RPC_get_float self, PyObject * pyfunc)"},
	 { (char *)"delete_RPC_get_float", _wrap_delete_RPC_get_float, METH_VARARGS, (char *)"delete_RPC_get_float(RPC_get_float self)"},
	 { (char *)"RPC_get_float_swigregister", RPC_get_float_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RPC_get_double", (PyCFunction) _wrap_new_RPC_get_double, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"new_RPC_get_double(std::string name, std::string functionbase, std::string units, std::string desc, \n"
		"    double min, double max, double deflt, DisplayType dtype) -> RPC_get_double\n"
		""},
	 { (char *)"RPC_get_double_add_rpc_variable", (PyCFunction) _wrap_RPC_get_double_add_rpc_variable, METH_VARARGS | METH_KEYWORDS, (char *)"RPC_get_double_add_rpc_variable(RPC_get_double self, rpcbasic_sptr s)"},
	 { (char *)"RPC_get_double_get", _wrap_RPC_get_double_get, METH_VARARGS, (char *)"RPC_get_double_get(RPC_get_double self) -> double"},
	 { (char *)"RPC_get_double_set_callback", (PyCFunction) _wrap_RPC_get_double_set_callback, METH_VARARGS | METH_KEYWORDS, (char *)"RPC_get_double_set_callback(RPC_get_double self, PyObject * cb)"},
	 { (char *)"RPC_get_double_setup_rpc", _wrap_RPC_get_double_setup_rpc, METH_VARARGS, (char *)"RPC_get_double_setup_rpc(RPC_get_double self)"},
	 { (char *)"RPC_get_double_activate", (PyCFunction) _wrap_RPC_get_double_activate, METH_VARARGS | METH_KEYWORDS, (char *)"RPC_get_double_activate(RPC_get_double self, PyObject * pyfunc)"},
	 { (char *)"delete_RPC_get_double", _wrap_delete_RPC_get_double, METH_VARARGS, (char *)"delete_RPC_get_double(RPC_get_double self)"},
	 { (char *)"RPC_get_double_swigregister", RPC_get_double_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RPC_get_complex", (PyCFunction) _wrap_new_RPC_get_complex, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"new_RPC_get_complex(std::string name, std::string functionbase, std::string units, std::string desc, \n"
		"    std::complex< float > min, std::complex< float > max, std::complex< float > deflt, \n"
		"    DisplayType dtype) -> RPC_get_complex\n"
		""},
	 { (char *)"RPC_get_complex_add_rpc_variable", (PyCFunction) _wrap_RPC_get_complex_add_rpc_variable, METH_VARARGS | METH_KEYWORDS, (char *)"RPC_get_complex_add_rpc_variable(RPC_get_complex self, rpcbasic_sptr s)"},
	 { (char *)"RPC_get_complex_get", _wrap_RPC_get_complex_get, METH_VARARGS, (char *)"RPC_get_complex_get(RPC_get_complex self) -> std::complex< float >"},
	 { (char *)"RPC_get_complex_set_callback", (PyCFunction) _wrap_RPC_get_complex_set_callback, METH_VARARGS | METH_KEYWORDS, (char *)"RPC_get_complex_set_callback(RPC_get_complex self, PyObject * cb)"},
	 { (char *)"RPC_get_complex_setup_rpc", _wrap_RPC_get_complex_setup_rpc, METH_VARARGS, (char *)"RPC_get_complex_setup_rpc(RPC_get_complex self)"},
	 { (char *)"RPC_get_complex_activate", (PyCFunction) _wrap_RPC_get_complex_activate, METH_VARARGS | METH_KEYWORDS, (char *)"RPC_get_complex_activate(RPC_get_complex self, PyObject * pyfunc)"},
	 { (char *)"delete_RPC_get_complex", _wrap_delete_RPC_get_complex, METH_VARARGS, (char *)"delete_RPC_get_complex(RPC_get_complex self)"},
	 { (char *)"RPC_get_complex_swigregister", RPC_get_complex_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RPC_get_complexd", (PyCFunction) _wrap_new_RPC_get_complexd, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"new_RPC_get_complexd(std::string name, std::string functionbase, std::string units, std::string desc, \n"
		"    std::complex< double > min, std::complex< double > max, std::complex< double > deflt, \n"
		"    DisplayType dtype) -> RPC_get_complexd\n"
		""},
	 { (char *)"RPC_get_complexd_add_rpc_variable", (PyCFunction) _wrap_RPC_get_complexd_add_rpc_variable, METH_VARARGS | METH_KEYWORDS, (char *)"RPC_get_complexd_add_rpc_variable(RPC_get_complexd self, rpcbasic_sptr s)"},
	 { (char *)"RPC_get_complexd_get", _wrap_RPC_get_complexd_get, METH_VARARGS, (char *)"RPC_get_complexd_get(RPC_get_complexd self) -> std::complex< double >"},
	 { (char *)"RPC_get_complexd_set_callback", (PyCFunction) _wrap_RPC_get_complexd_set_callback, METH_VARARGS | METH_KEYWORDS, (char *)"RPC_get_complexd_set_callback(RPC_get_complexd self, PyObject * cb)"},
	 { (char *)"RPC_get_complexd_setup_rpc", _wrap_RPC_get_complexd_setup_rpc, METH_VARARGS, (char *)"RPC_get_complexd_setup_rpc(RPC_get_complexd self)"},
	 { (char *)"RPC_get_complexd_activate", (PyCFunction) _wrap_RPC_get_complexd_activate, METH_VARARGS | METH_KEYWORDS, (char *)"RPC_get_complexd_activate(RPC_get_complexd self, PyObject * pyfunc)"},
	 { (char *)"delete_RPC_get_complexd", _wrap_delete_RPC_get_complexd, METH_VARARGS, (char *)"delete_RPC_get_complexd(RPC_get_complexd self)"},
	 { (char *)"RPC_get_complexd_swigregister", RPC_get_complexd_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RPC_get_vector_float", (PyCFunction) _wrap_new_RPC_get_vector_float, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"new_RPC_get_vector_float(std::string name, std::string functionbase, std::string units, std::string desc, \n"
		"    std::vector< float,std::allocator< float > > min, std::vector< float,std::allocator< float > > max, \n"
		"    std::vector< float,std::allocator< float > > deflt, \n"
		"    DisplayType dtype) -> RPC_get_vector_float\n"
		""},
	 { (char *)"RPC_get_vector_float_add_rpc_variable", (PyCFunction) _wrap_RPC_get_vector_float_add_rpc_variable, METH_VARARGS | METH_KEYWORDS, (char *)"RPC_get_vector_float_add_rpc_variable(RPC_get_vector_float self, rpcbasic_sptr s)"},
	 { (char *)"RPC_get_vector_float_get", _wrap_RPC_get_vector_float_get, METH_VARARGS, (char *)"RPC_get_vector_float_get(RPC_get_vector_float self) -> std::vector< float,std::allocator< float > >"},
	 { (char *)"RPC_get_vector_float_set_callback", (PyCFunction) _wrap_RPC_get_vector_float_set_callback, METH_VARARGS | METH_KEYWORDS, (char *)"RPC_get_vector_float_set_callback(RPC_get_vector_float self, PyObject * cb)"},
	 { (char *)"RPC_get_vector_float_setup_rpc", _wrap_RPC_get_vector_float_setup_rpc, METH_VARARGS, (char *)"RPC_get_vector_float_setup_rpc(RPC_get_vector_float self)"},
	 { (char *)"RPC_get_vector_float_activate", (PyCFunction) _wrap_RPC_get_vector_float_activate, METH_VARARGS | METH_KEYWORDS, (char *)"RPC_get_vector_float_activate(RPC_get_vector_float self, PyObject * pyfunc)"},
	 { (char *)"delete_RPC_get_vector_float", _wrap_delete_RPC_get_vector_float, METH_VARARGS, (char *)"delete_RPC_get_vector_float(RPC_get_vector_float self)"},
	 { (char *)"RPC_get_vector_float_swigregister", RPC_get_vector_float_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RPC_get_vector_gr_complex", (PyCFunction) _wrap_new_RPC_get_vector_gr_complex, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"new_RPC_get_vector_gr_complex(std::string name, std::string functionbase, std::string units, std::string desc, \n"
		"    std::vector< std::complex< float >,std::allocator< std::complex< float > > > min, \n"
		"    std::vector< std::complex< float >,std::allocator< std::complex< float > > > max, \n"
		"    std::vector< std::complex< float >,std::allocator< std::complex< float > > > deflt, \n"
		"    DisplayType dtype) -> RPC_get_vector_gr_complex\n"
		""},
	 { (char *)"RPC_get_vector_gr_complex_add_rpc_variable", (PyCFunction) _wrap_RPC_get_vector_gr_complex_add_rpc_variable, METH_VARARGS | METH_KEYWORDS, (char *)"RPC_get_vector_gr_complex_add_rpc_variable(RPC_get_vector_gr_complex self, rpcbasic_sptr s)"},
	 { (char *)"RPC_get_vector_gr_complex_get", _wrap_RPC_get_vector_gr_complex_get, METH_VARARGS, (char *)"RPC_get_vector_gr_complex_get(RPC_get_vector_gr_complex self) -> std::vector< std::complex< float >,std::allocator< std::complex< float > > >"},
	 { (char *)"RPC_get_vector_gr_complex_set_callback", (PyCFunction) _wrap_RPC_get_vector_gr_complex_set_callback, METH_VARARGS | METH_KEYWORDS, (char *)"RPC_get_vector_gr_complex_set_callback(RPC_get_vector_gr_complex self, PyObject * cb)"},
	 { (char *)"RPC_get_vector_gr_complex_setup_rpc", _wrap_RPC_get_vector_gr_complex_setup_rpc, METH_VARARGS, (char *)"RPC_get_vector_gr_complex_setup_rpc(RPC_get_vector_gr_complex self)"},
	 { (char *)"RPC_get_vector_gr_complex_activate", (PyCFunction) _wrap_RPC_get_vector_gr_complex_activate, METH_VARARGS | METH_KEYWORDS, (char *)"RPC_get_vector_gr_complex_activate(RPC_get_vector_gr_complex self, PyObject * pyfunc)"},
	 { (char *)"delete_RPC_get_vector_gr_complex", _wrap_delete_RPC_get_vector_gr_complex, METH_VARARGS, (char *)"delete_RPC_get_vector_gr_complex(RPC_get_vector_gr_complex self)"},
	 { (char *)"RPC_get_vector_gr_complex_swigregister", RPC_get_vector_gr_complex_swigregister, METH_VARARGS, NULL},
	 { (char *)"is_power_of_2", (PyCFunction) _wrap_is_power_of_2, METH_VARARGS | METH_KEYWORDS, (char *)"is_power_of_2(long x) -> bool"},
	 { (char *)"fast_atan2f", _wrap_fast_atan2f, METH_VARARGS, (char *)"\n"
		"fast_atan2f(float y, float x) -> float\n"
		"fast_atan2f(gr_complex z) -> float\n"
		"\n"
		"Fast arc tangent using table lookup and linear interpolation.\n"
		"\n"
		"This function calculates the angle of the vector (x,y) based on a table lookup and linear interpolation. The table uses a 256 point table covering -45 to +45 degrees and uses symmetry to determine the final angle value in the range of -180 to 180 degrees. Note that this function uses the small angle approximation for values close to zero. This routine calculates the arc tangent with an average error of +/- 0.045 degrees.\n"
		""},
	 { (char *)"branchless_clip", (PyCFunction) _wrap_branchless_clip, METH_VARARGS | METH_KEYWORDS, (char *)"branchless_clip(float x, float clip) -> float"},
	 { (char *)"clip", (PyCFunction) _wrap_clip, METH_VARARGS | METH_KEYWORDS, (char *)"clip(float x, float clip) -> float"},
	 { (char *)"binary_slicer", (PyCFunction) _wrap_binary_slicer, METH_VARARGS | METH_KEYWORDS, (char *)"binary_slicer(float x) -> unsigned int"},
	 { (char *)"quad_45deg_slicer", _wrap_quad_45deg_slicer, METH_VARARGS, (char *)"\n"
		"quad_45deg_slicer(float r, float i) -> unsigned int\n"
		"quad_45deg_slicer(gr_complex x) -> unsigned int\n"
		""},
	 { (char *)"quad_0deg_slicer", _wrap_quad_0deg_slicer, METH_VARARGS, (char *)"\n"
		"quad_0deg_slicer(float r, float i) -> unsigned int\n"
		"quad_0deg_slicer(gr_complex x) -> unsigned int\n"
		""},
	 { (char *)"branchless_binary_slicer", (PyCFunction) _wrap_branchless_binary_slicer, METH_VARARGS | METH_KEYWORDS, (char *)"branchless_binary_slicer(float x) -> unsigned int"},
	 { (char *)"branchless_quad_0deg_slicer", _wrap_branchless_quad_0deg_slicer, METH_VARARGS, (char *)"\n"
		"branchless_quad_0deg_slicer(float r, float i) -> unsigned int\n"
		"branchless_quad_0deg_slicer(gr_complex x) -> unsigned int\n"
		""},
	 { (char *)"branchless_quad_45deg_slicer", _wrap_branchless_quad_45deg_slicer, METH_VARARGS, (char *)"\n"
		"branchless_quad_45deg_slicer(float r, float i) -> unsigned int\n"
		"branchless_quad_45deg_slicer(gr_complex x) -> unsigned int\n"
		""},
	 { (char *)"p2_round_down", (PyCFunction) _wrap_p2_round_down, METH_VARARGS | METH_KEYWORDS, (char *)"p2_round_down(size_t x, size_t pow2) -> size_t"},
	 { (char *)"p2_round_up", (PyCFunction) _wrap_p2_round_up, METH_VARARGS | METH_KEYWORDS, (char *)"p2_round_up(size_t x, size_t pow2) -> size_t"},
	 { (char *)"p2_modulo", (PyCFunction) _wrap_p2_modulo, METH_VARARGS | METH_KEYWORDS, (char *)"p2_modulo(size_t x, size_t pow2) -> size_t"},
	 { (char *)"p2_modulo_neg", (PyCFunction) _wrap_p2_modulo_neg, METH_VARARGS | METH_KEYWORDS, (char *)"p2_modulo_neg(size_t x, size_t pow2) -> size_t"},
	 { (char *)"new_random", (PyCFunction) _wrap_new_random, METH_VARARGS | METH_KEYWORDS, (char *)"new_random(unsigned int seed=0, int min_integer=0, int max_integer=2) -> random"},
	 { (char *)"delete_random", _wrap_delete_random, METH_VARARGS, (char *)"delete_random(random self)"},
	 { (char *)"random_reseed", (PyCFunction) _wrap_random_reseed, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"random_reseed(random self, unsigned int seed)\n"
		"\n"
		"Change the seed for the initialized number generator. seed = 0 initializes the random number generator with the system time. Note that a fast initialization of various instances can result in the same seed.\n"
		""},
	 { (char *)"random_set_integer_limits", (PyCFunction) _wrap_random_set_integer_limits, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"random_set_integer_limits(random self, int const minimum, int const maximum)\n"
		"\n"
		"set minimum and maximum for integer random number generator. Limits are [minimum, maximum) Default: [0, std::numeric_limits< IntType >::max)]\n"
		""},
	 { (char *)"random_ran_int", _wrap_random_ran_int, METH_VARARGS, (char *)"\n"
		"random_ran_int(random self) -> int\n"
		"\n"
		"Uniform random integers in the range set by 'set_integer_limits' [min, max).\n"
		""},
	 { (char *)"random_ran1", _wrap_random_ran1, METH_VARARGS, (char *)"\n"
		"random_ran1(random self) -> float\n"
		"\n"
		"Uniform random numbers in the range [0.0, 1.0)\n"
		""},
	 { (char *)"random_gasdev", _wrap_random_gasdev, METH_VARARGS, (char *)"\n"
		"random_gasdev(random self) -> float\n"
		"\n"
		"Normally distributed random numbers (Gaussian distribution with zero mean and variance 1)\n"
		""},
	 { (char *)"random_laplacian", _wrap_random_laplacian, METH_VARARGS, (char *)"\n"
		"random_laplacian(random self) -> float\n"
		"\n"
		"Laplacian distributed random numbers with zero mean and variance 1.\n"
		""},
	 { (char *)"random_rayleigh", _wrap_random_rayleigh, METH_VARARGS, (char *)"\n"
		"random_rayleigh(random self) -> float\n"
		"\n"
		"Rayleigh distributed random numbers (zero mean and variance 1 for the underlying Gaussian distributions)\n"
		""},
	 { (char *)"random_impulse", (PyCFunction) _wrap_random_impulse, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"random_impulse(random self, float factor) -> float\n"
		"\n"
		"FIXME: add description.\n"
		""},
	 { (char *)"random_rayleigh_complex", _wrap_random_rayleigh_complex, METH_VARARGS, (char *)"\n"
		"random_rayleigh_complex(random self) -> gr_complex\n"
		"\n"
		"Normally distributed random numbers with zero mean and variance 1 on real and imaginary part. This results in a Rayleigh distribution for the amplitude and an uniform distribution for the phase.\n"
		""},
	 { (char *)"random_swigregister", random_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_gr__py_feval_ddTo_p_gr__feval_dd(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::feval_dd *)  ((gr::py_feval_dd *) x));
}
static void *_p_gr__py_feval_pTo_p_gr__feval_p(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::feval_p *)  ((gr::py_feval_p *) x));
}
static void *_p_gr__py_fevalTo_p_gr__feval(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::feval *)  ((gr::py_feval *) x));
}
static void *_p_gr__sync_decimatorTo_p_gr__sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::sync_block *)  ((gr::sync_decimator *) x));
}
static void *_p_gr__sync_interpolatorTo_p_gr__sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::sync_block *)  ((gr::sync_interpolator *) x));
}
static void *_p_gr__blockTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *)  ((gr::block *) x));
}
static void *_p_gr__sync_decimatorTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *)(gr::sync_block *) ((gr::sync_decimator *) x));
}
static void *_p_gr__hier_block2To_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *)  ((gr::hier_block2 *) x));
}
static void *_p_gr__sync_blockTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *) ((gr::sync_block *) x));
}
static void *_p_gr__tagged_stream_blockTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *) ((gr::tagged_stream_block *) x));
}
static void *_p_gr__block_gatewayTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *) ((gr::block_gateway *) x));
}
static void *_p_gr__sync_interpolatorTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *)(gr::sync_block *) ((gr::sync_interpolator *) x));
}
static void *_p_gr__top_blockTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::hier_block2 *) ((gr::top_block *) x));
}
static void *_p_gr__py_feval_llTo_p_gr__feval_ll(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::feval_ll *)  ((gr::py_feval_ll *) x));
}
static void *_p_rpcserver_booter_aggregatorTo_p_rpcserver_booter_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((rpcserver_booter_base *)  ((rpcserver_booter_aggregator *) x));
}
static void *_p_gr__msg_queueTo_p_gr__msg_handler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::msg_handler *)  ((gr::msg_queue *) x));
}
static void *_p_gr__sync_decimatorTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *) (gr::sync_block *) ((gr::sync_decimator *) x));
}
static void *_p_gr__sync_blockTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *)  ((gr::sync_block *) x));
}
static void *_p_gr__tagged_stream_blockTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *)  ((gr::tagged_stream_block *) x));
}
static void *_p_gr__block_gatewayTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *)  ((gr::block_gateway *) x));
}
static void *_p_gr__sync_interpolatorTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *) (gr::sync_block *) ((gr::sync_interpolator *) x));
}
static void *_p_gr__py_feval_ccTo_p_gr__feval_cc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::feval_cc *)  ((gr::py_feval_cc *) x));
}
static void *_p_gr__top_blockTo_p_gr__hier_block2(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::hier_block2 *)  ((gr::top_block *) x));
}
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__intrusive_ptrT_pmt__pmt_base_t = {"_p_boost__intrusive_ptrT_pmt__pmt_base_t", "pmt::pmt_t *|boost::intrusive_ptr< pmt::pmt_base > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__basic_block_t = {"_p_boost__shared_ptrT_gr__basic_block_t", "std::vector< boost::shared_ptr< gr::basic_block > >::value_type *|boost::shared_ptr< gr::basic_block > *|gr::basic_block_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__block_detail_t = {"_p_boost__shared_ptrT_gr__block_detail_t", "boost::shared_ptr< gr::block_detail > *|gr::block_detail_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__block_gateway_t = {"_p_boost__shared_ptrT_gr__block_gateway_t", "boost::shared_ptr< gr::block_gateway > *|gr::block_gateway::sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__block_t = {"_p_boost__shared_ptrT_gr__block_t", "boost::shared_ptr< gr::block > *|std::vector< boost::shared_ptr< gr::block > >::value_type *|gr::block_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__buffer_reader_t = {"_p_boost__shared_ptrT_gr__buffer_reader_t", "boost::shared_ptr< gr::buffer_reader > *|gr::buffer_reader_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__buffer_t = {"_p_boost__shared_ptrT_gr__buffer_t", "boost::shared_ptr< gr::buffer > *|gr::buffer_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__flat_flowgraph_t = {"_p_boost__shared_ptrT_gr__flat_flowgraph_t", "boost::shared_ptr< gr::flat_flowgraph > *|gr::flat_flowgraph_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__flowgraph_t = {"_p_boost__shared_ptrT_gr__flowgraph_t", "boost::shared_ptr< gr::flowgraph > *|gr::flowgraph_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__hier_block2_t = {"_p_boost__shared_ptrT_gr__hier_block2_t", "boost::shared_ptr< gr::hier_block2 > *|gr::hier_block2_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__io_signature_t = {"_p_boost__shared_ptrT_gr__io_signature_t", "gr::io_signature::sptr *|boost::shared_ptr< gr::io_signature > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__message_t = {"_p_boost__shared_ptrT_gr__message_t", "gr::message::sptr *|boost::shared_ptr< gr::message > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__msg_queue_t = {"_p_boost__shared_ptrT_gr__msg_queue_t", "gr::msg_queue::sptr *|boost::shared_ptr< gr::msg_queue > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__top_block_t = {"_p_boost__shared_ptrT_gr__top_block_t", "boost::shared_ptr< gr::top_block > *|gr::top_block_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_reference = {"_p_const_reference", "const_reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ensure_py_gil_state = {"_p_ensure_py_gil_state", "ensure_py_gil_state *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__basic_block = {"_p_gr__basic_block", "gr::basic_block *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__block = {"_p_gr__block", "gr::block *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__block_detail = {"_p_gr__block_detail", "gr::block_detail *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__block_gateway = {"_p_gr__block_gateway", "gr::block_gateway *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__block_gw_message_type = {"_p_gr__block_gw_message_type", "gr::block_gw_message_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__buffer = {"_p_gr__buffer", "gr::buffer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__buffer_reader = {"_p_gr__buffer_reader", "gr::buffer_reader *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__endianness_t = {"_p_gr__endianness_t", "enum gr::endianness_t *|gr::endianness_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__feval = {"_p_gr__feval", "gr::feval *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__feval_cc = {"_p_gr__feval_cc", "gr::feval_cc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__feval_dd = {"_p_gr__feval_dd", "gr::feval_dd *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__feval_ll = {"_p_gr__feval_ll", "gr::feval_ll *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__feval_p = {"_p_gr__feval_p", "gr::feval_p *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__hier_block2 = {"_p_gr__hier_block2", "gr::hier_block2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__io_signature = {"_p_gr__io_signature", "gr::io_signature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__logger = {"_p_gr__logger", "gr::logger *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__message = {"_p_gr__message", "gr::message *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__msg_handler = {"_p_gr__msg_handler", "gr::msg_handler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__msg_queue = {"_p_gr__msg_queue", "gr::msg_queue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__prefs = {"_p_gr__prefs", "gr::prefs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__py_feval = {"_p_gr__py_feval", "gr::py_feval *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__py_feval_cc = {"_p_gr__py_feval_cc", "gr::py_feval_cc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__py_feval_dd = {"_p_gr__py_feval_dd", "gr::py_feval_dd *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__py_feval_ll = {"_p_gr__py_feval_ll", "gr::py_feval_ll *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__py_feval_p = {"_p_gr__py_feval_p", "gr::py_feval_p *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__random = {"_p_gr__random", "gr::random *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__rt_status_t = {"_p_gr__rt_status_t", "enum gr::rt_status_t *|gr::rt_status_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__sync_block = {"_p_gr__sync_block", "gr::sync_block *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__sync_decimator = {"_p_gr__sync_decimator", "gr::sync_decimator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__sync_interpolator = {"_p_gr__sync_interpolator", "gr::sync_interpolator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__tag_t = {"_p_gr__tag_t", "std::vector< gr::tag_t >::value_type *|gr::tag_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__tagged_stream_block = {"_p_gr__tagged_stream_block", "gr::tagged_stream_block *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__top_block = {"_p_gr__top_block", "gr::top_block *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "gr::high_res_timer_type *|int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mode_t = {"_p_mode_t", "mode_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pycallback_objectT_double_t = {"_p_pycallback_objectT_double_t", "pycallback_object< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pycallback_objectT_float_t = {"_p_pycallback_objectT_float_t", "pycallback_object< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pycallback_objectT_int_t = {"_p_pycallback_objectT_int_t", "pycallback_object< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pycallback_objectT_std__complexT_double_t_t = {"_p_pycallback_objectT_std__complexT_double_t_t", "pycallback_object< std::complex< double > > *|pycallback_object< gr_complexd > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pycallback_objectT_std__complexT_float_t_t = {"_p_pycallback_objectT_std__complexT_float_t_t", "pycallback_object< std::complex< float > > *|pycallback_object< gr_complex > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pycallback_objectT_std__string_t = {"_p_pycallback_objectT_std__string_t", "pycallback_object< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pycallback_objectT_std__vectorT_float_std__allocatorT_float_t_t_t = {"_p_pycallback_objectT_std__vectorT_float_std__allocatorT_float_t_t_t", "pycallback_object< std::vector< float > > *|pycallback_object< std::vector< float,std::allocator< float > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pycallback_objectT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t = {"_p_pycallback_objectT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t", "pycallback_object< std::vector< std::complex< float > > > *|pycallback_object< std::vector< gr_complex > > *|pycallback_object< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_reference = {"_p_reference", "reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_rpcbasic_sptr = {"_p_rpcbasic_sptr", "rpcbasic_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_rpcmanager = {"_p_rpcmanager", "rpcmanager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_rpcserver_base = {"_p_rpcserver_base", "rpcserver_base *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_rpcserver_booter_aggregator = {"_p_rpcserver_booter_aggregator", "rpcserver_booter_aggregator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_rpcserver_booter_base = {"_p_rpcserver_booter_base", "rpcserver_booter_base *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sptr = {"_p_sptr", "sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t = {"_p_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t", "std::vector< boost::shared_ptr< gr::basic_block > >::allocator_type *|std::allocator< boost::shared_ptr< gr::basic_block > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_boost__shared_ptrT_gr__block_t_t = {"_p_std__allocatorT_boost__shared_ptrT_gr__block_t_t", "std::allocator< boost::shared_ptr< gr::block > > *|std::vector< boost::shared_ptr< gr::block > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_gr__tag_t_t = {"_p_std__allocatorT_gr__tag_t_t", "std::vector< gr::tag_t >::allocator_type *|std::allocator< gr::tag_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_size_t_t = {"_p_std__allocatorT_size_t_t", "std::vector< size_t >::allocator_type *|std::allocator< size_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__complexT_double_t_t = {"_p_std__allocatorT_std__complexT_double_t_t", "std::allocator< std::complex< double > > *|std::vector< std::complex< double > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__complexT_float_t_t = {"_p_std__allocatorT_std__complexT_float_t_t", "std::allocator< std::complex< float > > *|std::vector< std::complex< float > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t = {"_p_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t", "std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > *|std::vector< std::vector< std::complex< double > > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t = {"_p_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t", "std::vector< std::vector< std::complex< float > > >::allocator_type *|std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t = {"_p_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t", "std::vector< std::vector< std::vector< size_t > > >::allocator_type *|std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_void_p_t = {"_p_std__allocatorT_void_p_t", "std::vector< void * >::allocator_type *|std::allocator< void * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_double_t = {"_p_std__complexT_double_t", "gr_complexd *|std::complex< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_float_t = {"_p_std__complexT_float_t", "std::complex< float > *|gr_complex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t = {"_p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t", "std::vector< boost::shared_ptr< gr::basic_block >,std::allocator< boost::shared_ptr< gr::basic_block > > > *|std::vector< boost::shared_ptr< gr::basic_block > > *|std::vector< gr::basic_block_sptr > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t = {"_p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t", "std::vector< boost::shared_ptr< gr::block > > *|std::vector< gr::block_sptr > *|std::vector< boost::shared_ptr< gr::block >,std::allocator< boost::shared_ptr< gr::block > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t = {"_p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t", "std::vector< gr::tag_t,std::allocator< gr::tag_t > > *|std::vector< gr::tag_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t = {"_p_std__vectorT_int_std__allocatorT_int_t_t", "std::vector< int,std::allocator< int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_long_std__allocatorT_long_t_t = {"_p_std__vectorT_long_std__allocatorT_long_t_t", "std::vector< long,std::allocator< long > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t = {"_p_std__vectorT_size_t_std__allocatorT_size_t_t_t", "std::vector< size_t,std::allocator< size_t > > *|std::vector< size_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t = {"_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t", "std::vector< std::complex< double > > *|std::vector< std::complex< double >,std::allocator< std::complex< double > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t = {"_p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t", "std::vector< std::complex< float > > *|std::vector< std::complex< float >,std::allocator< std::complex< float > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t = {"_p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t", "std::vector< std::vector< std::vector< size_t > > >::value_type *|std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t = {"_p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t", "std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > *|std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > *|std::vector< std::vector< std::complex< double > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t = {"_p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t", "std::vector< std::vector< std::complex< float > > > *|std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > >,std::allocator< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > > *|std::vector< std::vector< std::complex< float >,std::allocator< std::complex< float > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t = {"_p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t", "std::vector< std::vector< std::vector< size_t > > > *|std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > >,std::allocator< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > > *|std::vector< std::vector< std::vector< size_t,std::allocator< size_t > >,std::allocator< std::vector< size_t,std::allocator< size_t > > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_void_p_std__allocatorT_void_p_t_t = {"_p_std__vectorT_void_p_std__allocatorT_void_p_t_t", "std::vector< void *,std::allocator< void * > > *|std::vector< void * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|DisplayType *|uint32_t *|unsigned int *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "std::vector< void * >::value_type|void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_allocator_type,
  &_swigt__p_boost__intrusive_ptrT_pmt__pmt_base_t,
  &_swigt__p_boost__shared_ptrT_gr__basic_block_t,
  &_swigt__p_boost__shared_ptrT_gr__block_detail_t,
  &_swigt__p_boost__shared_ptrT_gr__block_gateway_t,
  &_swigt__p_boost__shared_ptrT_gr__block_t,
  &_swigt__p_boost__shared_ptrT_gr__buffer_reader_t,
  &_swigt__p_boost__shared_ptrT_gr__buffer_t,
  &_swigt__p_boost__shared_ptrT_gr__flat_flowgraph_t,
  &_swigt__p_boost__shared_ptrT_gr__flowgraph_t,
  &_swigt__p_boost__shared_ptrT_gr__hier_block2_t,
  &_swigt__p_boost__shared_ptrT_gr__io_signature_t,
  &_swigt__p_boost__shared_ptrT_gr__message_t,
  &_swigt__p_boost__shared_ptrT_gr__msg_queue_t,
  &_swigt__p_boost__shared_ptrT_gr__top_block_t,
  &_swigt__p_char,
  &_swigt__p_const_reference,
  &_swigt__p_difference_type,
  &_swigt__p_ensure_py_gil_state,
  &_swigt__p_gr__basic_block,
  &_swigt__p_gr__block,
  &_swigt__p_gr__block_detail,
  &_swigt__p_gr__block_gateway,
  &_swigt__p_gr__block_gw_message_type,
  &_swigt__p_gr__buffer,
  &_swigt__p_gr__buffer_reader,
  &_swigt__p_gr__endianness_t,
  &_swigt__p_gr__feval,
  &_swigt__p_gr__feval_cc,
  &_swigt__p_gr__feval_dd,
  &_swigt__p_gr__feval_ll,
  &_swigt__p_gr__feval_p,
  &_swigt__p_gr__hier_block2,
  &_swigt__p_gr__io_signature,
  &_swigt__p_gr__logger,
  &_swigt__p_gr__message,
  &_swigt__p_gr__msg_handler,
  &_swigt__p_gr__msg_queue,
  &_swigt__p_gr__prefs,
  &_swigt__p_gr__py_feval,
  &_swigt__p_gr__py_feval_cc,
  &_swigt__p_gr__py_feval_dd,
  &_swigt__p_gr__py_feval_ll,
  &_swigt__p_gr__py_feval_p,
  &_swigt__p_gr__random,
  &_swigt__p_gr__rt_status_t,
  &_swigt__p_gr__sync_block,
  &_swigt__p_gr__sync_decimator,
  &_swigt__p_gr__sync_interpolator,
  &_swigt__p_gr__tag_t,
  &_swigt__p_gr__tagged_stream_block,
  &_swigt__p_gr__top_block,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_mode_t,
  &_swigt__p_p_PyObject,
  &_swigt__p_pycallback_objectT_double_t,
  &_swigt__p_pycallback_objectT_float_t,
  &_swigt__p_pycallback_objectT_int_t,
  &_swigt__p_pycallback_objectT_std__complexT_double_t_t,
  &_swigt__p_pycallback_objectT_std__complexT_float_t_t,
  &_swigt__p_pycallback_objectT_std__string_t,
  &_swigt__p_pycallback_objectT_std__vectorT_float_std__allocatorT_float_t_t_t,
  &_swigt__p_pycallback_objectT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t,
  &_swigt__p_reference,
  &_swigt__p_rpcbasic_sptr,
  &_swigt__p_rpcmanager,
  &_swigt__p_rpcserver_base,
  &_swigt__p_rpcserver_booter_aggregator,
  &_swigt__p_rpcserver_booter_base,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_type,
  &_swigt__p_sptr,
  &_swigt__p_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t,
  &_swigt__p_std__allocatorT_boost__shared_ptrT_gr__block_t_t,
  &_swigt__p_std__allocatorT_gr__tag_t_t,
  &_swigt__p_std__allocatorT_size_t_t,
  &_swigt__p_std__allocatorT_std__complexT_double_t_t,
  &_swigt__p_std__allocatorT_std__complexT_float_t_t,
  &_swigt__p_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t,
  &_swigt__p_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t,
  &_swigt__p_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t,
  &_swigt__p_std__allocatorT_void_p_t,
  &_swigt__p_std__complexT_double_t,
  &_swigt__p_std__complexT_float_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t,
  &_swigt__p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t,
  &_swigt__p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t,
  &_swigt__p_std__vectorT_long_std__allocatorT_long_t_t,
  &_swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t,
  &_swigt__p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,
  &_swigt__p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t,
  &_swigt__p_std__vectorT_void_p_std__allocatorT_void_p_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__intrusive_ptrT_pmt__pmt_base_t[] = {  {&_swigt__p_boost__intrusive_ptrT_pmt__pmt_base_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__basic_block_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__basic_block_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__block_detail_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__block_detail_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__block_gateway_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__block_gateway_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__block_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__block_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__buffer_reader_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__buffer_reader_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__buffer_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__buffer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__flat_flowgraph_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__flat_flowgraph_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__flowgraph_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__flowgraph_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__hier_block2_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__hier_block2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__io_signature_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__io_signature_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__message_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__message_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__msg_queue_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__msg_queue_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__top_block_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__top_block_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_reference[] = {  {&_swigt__p_const_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ensure_py_gil_state[] = {  {&_swigt__p_ensure_py_gil_state, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__basic_block[] = {  {&_swigt__p_gr__sync_decimator, _p_gr__sync_decimatorTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__basic_block, 0, 0, 0},  {&_swigt__p_gr__block, _p_gr__blockTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__sync_block, _p_gr__sync_blockTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__tagged_stream_block, _p_gr__tagged_stream_blockTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__block_gateway, _p_gr__block_gatewayTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__hier_block2, _p_gr__hier_block2To_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__sync_interpolator, _p_gr__sync_interpolatorTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__top_block, _p_gr__top_blockTo_p_gr__basic_block, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__block[] = {  {&_swigt__p_gr__sync_decimator, _p_gr__sync_decimatorTo_p_gr__block, 0, 0},  {&_swigt__p_gr__block, 0, 0, 0},  {&_swigt__p_gr__sync_block, _p_gr__sync_blockTo_p_gr__block, 0, 0},  {&_swigt__p_gr__tagged_stream_block, _p_gr__tagged_stream_blockTo_p_gr__block, 0, 0},  {&_swigt__p_gr__block_gateway, _p_gr__block_gatewayTo_p_gr__block, 0, 0},  {&_swigt__p_gr__sync_interpolator, _p_gr__sync_interpolatorTo_p_gr__block, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__block_detail[] = {  {&_swigt__p_gr__block_detail, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__block_gateway[] = {  {&_swigt__p_gr__block_gateway, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__block_gw_message_type[] = {  {&_swigt__p_gr__block_gw_message_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__buffer[] = {  {&_swigt__p_gr__buffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__buffer_reader[] = {  {&_swigt__p_gr__buffer_reader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__endianness_t[] = {  {&_swigt__p_gr__endianness_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__feval[] = {  {&_swigt__p_gr__feval, 0, 0, 0},  {&_swigt__p_gr__py_feval, _p_gr__py_fevalTo_p_gr__feval, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__feval_cc[] = {  {&_swigt__p_gr__feval_cc, 0, 0, 0},  {&_swigt__p_gr__py_feval_cc, _p_gr__py_feval_ccTo_p_gr__feval_cc, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__feval_dd[] = {  {&_swigt__p_gr__feval_dd, 0, 0, 0},  {&_swigt__p_gr__py_feval_dd, _p_gr__py_feval_ddTo_p_gr__feval_dd, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__feval_ll[] = {  {&_swigt__p_gr__feval_ll, 0, 0, 0},  {&_swigt__p_gr__py_feval_ll, _p_gr__py_feval_llTo_p_gr__feval_ll, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__feval_p[] = {  {&_swigt__p_gr__feval_p, 0, 0, 0},  {&_swigt__p_gr__py_feval_p, _p_gr__py_feval_pTo_p_gr__feval_p, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__hier_block2[] = {  {&_swigt__p_gr__hier_block2, 0, 0, 0},  {&_swigt__p_gr__top_block, _p_gr__top_blockTo_p_gr__hier_block2, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__io_signature[] = {  {&_swigt__p_gr__io_signature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__logger[] = {  {&_swigt__p_gr__logger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__message[] = {  {&_swigt__p_gr__message, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__msg_handler[] = {  {&_swigt__p_gr__msg_queue, _p_gr__msg_queueTo_p_gr__msg_handler, 0, 0},  {&_swigt__p_gr__msg_handler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__msg_queue[] = {  {&_swigt__p_gr__msg_queue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__prefs[] = {  {&_swigt__p_gr__prefs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__py_feval[] = {  {&_swigt__p_gr__py_feval, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__py_feval_cc[] = {  {&_swigt__p_gr__py_feval_cc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__py_feval_dd[] = {  {&_swigt__p_gr__py_feval_dd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__py_feval_ll[] = {  {&_swigt__p_gr__py_feval_ll, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__py_feval_p[] = {  {&_swigt__p_gr__py_feval_p, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__random[] = {  {&_swigt__p_gr__random, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__rt_status_t[] = {  {&_swigt__p_gr__rt_status_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__sync_block[] = {  {&_swigt__p_gr__sync_decimator, _p_gr__sync_decimatorTo_p_gr__sync_block, 0, 0},  {&_swigt__p_gr__sync_block, 0, 0, 0},  {&_swigt__p_gr__sync_interpolator, _p_gr__sync_interpolatorTo_p_gr__sync_block, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__sync_decimator[] = {  {&_swigt__p_gr__sync_decimator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__sync_interpolator[] = {  {&_swigt__p_gr__sync_interpolator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__tag_t[] = {  {&_swigt__p_gr__tag_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__tagged_stream_block[] = {  {&_swigt__p_gr__tagged_stream_block, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__top_block[] = {  {&_swigt__p_gr__top_block, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mode_t[] = {  {&_swigt__p_mode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pycallback_objectT_double_t[] = {  {&_swigt__p_pycallback_objectT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pycallback_objectT_float_t[] = {  {&_swigt__p_pycallback_objectT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pycallback_objectT_int_t[] = {  {&_swigt__p_pycallback_objectT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pycallback_objectT_std__complexT_double_t_t[] = {  {&_swigt__p_pycallback_objectT_std__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pycallback_objectT_std__complexT_float_t_t[] = {  {&_swigt__p_pycallback_objectT_std__complexT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pycallback_objectT_std__string_t[] = {  {&_swigt__p_pycallback_objectT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pycallback_objectT_std__vectorT_float_std__allocatorT_float_t_t_t[] = {  {&_swigt__p_pycallback_objectT_std__vectorT_float_std__allocatorT_float_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pycallback_objectT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t[] = {  {&_swigt__p_pycallback_objectT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_reference[] = {  {&_swigt__p_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rpcbasic_sptr[] = {  {&_swigt__p_rpcbasic_sptr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rpcmanager[] = {  {&_swigt__p_rpcmanager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rpcserver_base[] = {  {&_swigt__p_rpcserver_base, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rpcserver_booter_aggregator[] = {  {&_swigt__p_rpcserver_booter_aggregator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_rpcserver_booter_base[] = {  {&_swigt__p_rpcserver_booter_aggregator, _p_rpcserver_booter_aggregatorTo_p_rpcserver_booter_base, 0, 0},  {&_swigt__p_rpcserver_booter_base, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sptr[] = {  {&_swigt__p_sptr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t[] = {  {&_swigt__p_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_boost__shared_ptrT_gr__block_t_t[] = {  {&_swigt__p_std__allocatorT_boost__shared_ptrT_gr__block_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_gr__tag_t_t[] = {  {&_swigt__p_std__allocatorT_gr__tag_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_size_t_t[] = {  {&_swigt__p_std__allocatorT_size_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__complexT_double_t_t[] = {  {&_swigt__p_std__allocatorT_std__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__complexT_float_t_t[] = {  {&_swigt__p_std__allocatorT_std__complexT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_void_p_t[] = {  {&_swigt__p_std__allocatorT_void_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_double_t[] = {  {&_swigt__p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_float_t[] = {  {&_swigt__p_std__complexT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t[] = {  {&_swigt__p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_long_std__allocatorT_long_t_t[] = {  {&_swigt__p_std__vectorT_long_std__allocatorT_long_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_size_t_std__allocatorT_size_t_t_t[] = {  {&_swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t[] = {  {&_swigt__p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t[] = {  {&_swigt__p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_void_p_std__allocatorT_void_p_t_t[] = {  {&_swigt__p_std__vectorT_void_p_std__allocatorT_void_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_allocator_type,
  _swigc__p_boost__intrusive_ptrT_pmt__pmt_base_t,
  _swigc__p_boost__shared_ptrT_gr__basic_block_t,
  _swigc__p_boost__shared_ptrT_gr__block_detail_t,
  _swigc__p_boost__shared_ptrT_gr__block_gateway_t,
  _swigc__p_boost__shared_ptrT_gr__block_t,
  _swigc__p_boost__shared_ptrT_gr__buffer_reader_t,
  _swigc__p_boost__shared_ptrT_gr__buffer_t,
  _swigc__p_boost__shared_ptrT_gr__flat_flowgraph_t,
  _swigc__p_boost__shared_ptrT_gr__flowgraph_t,
  _swigc__p_boost__shared_ptrT_gr__hier_block2_t,
  _swigc__p_boost__shared_ptrT_gr__io_signature_t,
  _swigc__p_boost__shared_ptrT_gr__message_t,
  _swigc__p_boost__shared_ptrT_gr__msg_queue_t,
  _swigc__p_boost__shared_ptrT_gr__top_block_t,
  _swigc__p_char,
  _swigc__p_const_reference,
  _swigc__p_difference_type,
  _swigc__p_ensure_py_gil_state,
  _swigc__p_gr__basic_block,
  _swigc__p_gr__block,
  _swigc__p_gr__block_detail,
  _swigc__p_gr__block_gateway,
  _swigc__p_gr__block_gw_message_type,
  _swigc__p_gr__buffer,
  _swigc__p_gr__buffer_reader,
  _swigc__p_gr__endianness_t,
  _swigc__p_gr__feval,
  _swigc__p_gr__feval_cc,
  _swigc__p_gr__feval_dd,
  _swigc__p_gr__feval_ll,
  _swigc__p_gr__feval_p,
  _swigc__p_gr__hier_block2,
  _swigc__p_gr__io_signature,
  _swigc__p_gr__logger,
  _swigc__p_gr__message,
  _swigc__p_gr__msg_handler,
  _swigc__p_gr__msg_queue,
  _swigc__p_gr__prefs,
  _swigc__p_gr__py_feval,
  _swigc__p_gr__py_feval_cc,
  _swigc__p_gr__py_feval_dd,
  _swigc__p_gr__py_feval_ll,
  _swigc__p_gr__py_feval_p,
  _swigc__p_gr__random,
  _swigc__p_gr__rt_status_t,
  _swigc__p_gr__sync_block,
  _swigc__p_gr__sync_decimator,
  _swigc__p_gr__sync_interpolator,
  _swigc__p_gr__tag_t,
  _swigc__p_gr__tagged_stream_block,
  _swigc__p_gr__top_block,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_mode_t,
  _swigc__p_p_PyObject,
  _swigc__p_pycallback_objectT_double_t,
  _swigc__p_pycallback_objectT_float_t,
  _swigc__p_pycallback_objectT_int_t,
  _swigc__p_pycallback_objectT_std__complexT_double_t_t,
  _swigc__p_pycallback_objectT_std__complexT_float_t_t,
  _swigc__p_pycallback_objectT_std__string_t,
  _swigc__p_pycallback_objectT_std__vectorT_float_std__allocatorT_float_t_t_t,
  _swigc__p_pycallback_objectT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t,
  _swigc__p_reference,
  _swigc__p_rpcbasic_sptr,
  _swigc__p_rpcmanager,
  _swigc__p_rpcserver_base,
  _swigc__p_rpcserver_booter_aggregator,
  _swigc__p_rpcserver_booter_base,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_type,
  _swigc__p_sptr,
  _swigc__p_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t,
  _swigc__p_std__allocatorT_boost__shared_ptrT_gr__block_t_t,
  _swigc__p_std__allocatorT_gr__tag_t_t,
  _swigc__p_std__allocatorT_size_t_t,
  _swigc__p_std__allocatorT_std__complexT_double_t_t,
  _swigc__p_std__allocatorT_std__complexT_float_t_t,
  _swigc__p_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t,
  _swigc__p_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t,
  _swigc__p_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t,
  _swigc__p_std__allocatorT_void_p_t,
  _swigc__p_std__complexT_double_t,
  _swigc__p_std__complexT_float_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_boost__shared_ptrT_gr__basic_block_t_std__allocatorT_boost__shared_ptrT_gr__basic_block_t_t_t,
  _swigc__p_std__vectorT_boost__shared_ptrT_gr__block_t_std__allocatorT_boost__shared_ptrT_gr__block_t_t_t,
  _swigc__p_std__vectorT_gr__tag_t_std__allocatorT_gr__tag_t_t_t,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t,
  _swigc__p_std__vectorT_long_std__allocatorT_long_t_t,
  _swigc__p_std__vectorT_size_t_std__allocatorT_size_t_t_t,
  _swigc__p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,
  _swigc__p_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_std__allocatorT_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_std__allocatorT_std__vectorT_std__complexT_float_t_std__allocatorT_std__complexT_float_t_t_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_std__allocatorT_std__vectorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_std__allocatorT_std__vectorT_size_t_std__allocatorT_size_t_t_t_t_t_t_t,
  _swigc__p_std__vectorT_void_p_std__allocatorT_void_p_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "sizeof_char",SWIG_From_int(static_cast< int >(sizeof(char))));
  SWIG_Python_SetConstant(d, "sizeof_short",SWIG_From_int(static_cast< int >(sizeof(short))));
  SWIG_Python_SetConstant(d, "sizeof_int",SWIG_From_int(static_cast< int >(sizeof(int))));
  SWIG_Python_SetConstant(d, "sizeof_float",SWIG_From_int(static_cast< int >(sizeof(float))));
  SWIG_Python_SetConstant(d, "sizeof_double",SWIG_From_int(static_cast< int >(sizeof(double))));
  SWIG_Python_SetConstant(d, "sizeof_gr_complex",SWIG_From_int(static_cast< int >(sizeof(gr_complex))));
  SWIG_Python_SetConstant(d, "GR_MSB_FIRST",SWIG_From_int(static_cast< int >(gr::GR_MSB_FIRST)));
  SWIG_Python_SetConstant(d, "GR_LSB_FIRST",SWIG_From_int(static_cast< int >(gr::GR_LSB_FIRST)));
  SWIG_Python_SetConstant(d, "RT_OK",SWIG_From_int(static_cast< int >(gr::RT_OK)));
  SWIG_Python_SetConstant(d, "RT_NOT_IMPLEMENTED",SWIG_From_int(static_cast< int >(gr::RT_NOT_IMPLEMENTED)));
  SWIG_Python_SetConstant(d, "RT_NO_PRIVS",SWIG_From_int(static_cast< int >(gr::RT_NO_PRIVS)));
  SWIG_Python_SetConstant(d, "RT_OTHER_ERROR",SWIG_From_int(static_cast< int >(gr::RT_OTHER_ERROR)));
  SWIG_Python_SetConstant(d, "GR_BLOCK_GW_WORK_GENERAL",SWIG_From_int(static_cast< int >(gr::GR_BLOCK_GW_WORK_GENERAL)));
  SWIG_Python_SetConstant(d, "GR_BLOCK_GW_WORK_SYNC",SWIG_From_int(static_cast< int >(gr::GR_BLOCK_GW_WORK_SYNC)));
  SWIG_Python_SetConstant(d, "GR_BLOCK_GW_WORK_DECIM",SWIG_From_int(static_cast< int >(gr::GR_BLOCK_GW_WORK_DECIM)));
  SWIG_Python_SetConstant(d, "GR_BLOCK_GW_WORK_INTERP",SWIG_From_int(static_cast< int >(gr::GR_BLOCK_GW_WORK_INTERP)));
  SWIG_Python_SetConstant(d, "WORK_CALLED_PRODUCE",SWIG_From_int(static_cast< int >(gr::WORK_CALLED_PRODUCE)));
  SWIG_Python_SetConstant(d, "WORK_DONE",SWIG_From_int(static_cast< int >(gr::WORK_DONE)));
  SWIG_Python_SetConstant(d, "TPP_DONT",SWIG_From_int(static_cast< int >(gr::TPP_DONT)));
  SWIG_Python_SetConstant(d, "TPP_ALL_TO_ALL",SWIG_From_int(static_cast< int >(gr::TPP_ALL_TO_ALL)));
  SWIG_Python_SetConstant(d, "TPP_ONE_TO_ONE",SWIG_From_int(static_cast< int >(gr::TPP_ONE_TO_ONE)));
  SWIG_Python_SetConstant(d, "TPP_CUSTOM",SWIG_From_int(static_cast< int >(gr::TPP_CUSTOM)));
  SWIG_Python_SetConstant(d, "block_gw_message_type_ACTION_GENERAL_WORK",SWIG_From_int(static_cast< int >(gr::block_gw_message_type::ACTION_GENERAL_WORK)));
  SWIG_Python_SetConstant(d, "block_gw_message_type_ACTION_WORK",SWIG_From_int(static_cast< int >(gr::block_gw_message_type::ACTION_WORK)));
  SWIG_Python_SetConstant(d, "block_gw_message_type_ACTION_FORECAST",SWIG_From_int(static_cast< int >(gr::block_gw_message_type::ACTION_FORECAST)));
  SWIG_Python_SetConstant(d, "block_gw_message_type_ACTION_START",SWIG_From_int(static_cast< int >(gr::block_gw_message_type::ACTION_START)));
  SWIG_Python_SetConstant(d, "block_gw_message_type_ACTION_STOP",SWIG_From_int(static_cast< int >(gr::block_gw_message_type::ACTION_STOP)));
  PyDict_SetItemString(md,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"DISPNULL",Swig_var_DISPNULL_get, Swig_var_DISPNULL_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DISPTIME",Swig_var_DISPTIME_get, Swig_var_DISPTIME_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DISPXY",Swig_var_DISPXY_get, Swig_var_DISPXY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DISPPSD",Swig_var_DISPPSD_get, Swig_var_DISPPSD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DISPSPEC",Swig_var_DISPSPEC_get, Swig_var_DISPSPEC_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DISPRAST",Swig_var_DISPRAST_get, Swig_var_DISPRAST_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DISPOPTCPLX",Swig_var_DISPOPTCPLX_get, Swig_var_DISPOPTCPLX_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DISPOPTLOG",Swig_var_DISPOPTLOG_get, Swig_var_DISPOPTLOG_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DISPOPTSTEM",Swig_var_DISPOPTSTEM_get, Swig_var_DISPOPTSTEM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DISPOPTSTRIP",Swig_var_DISPOPTSTRIP_get, Swig_var_DISPOPTSTRIP_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DISPOPTSCATTER",Swig_var_DISPOPTSCATTER_get, Swig_var_DISPOPTSCATTER_set);
  SWIG_Python_SetConstant(d, "RPC_PRIVLVL_ALL",SWIG_From_int(static_cast< int >(RPC_PRIVLVL_ALL)));
  SWIG_Python_SetConstant(d, "RPC_PRIVLVL_MIN",SWIG_From_int(static_cast< int >(RPC_PRIVLVL_MIN)));
  SWIG_Python_SetConstant(d, "RPC_PRIVLVL_NONE",SWIG_From_int(static_cast< int >(RPC_PRIVLVL_NONE)));
  SWIG_Python_SetConstant(d, "KNOBBOOL",SWIG_From_int(static_cast< int >(KNOBBOOL)));
  SWIG_Python_SetConstant(d, "KNOBCHAR",SWIG_From_int(static_cast< int >(KNOBCHAR)));
  SWIG_Python_SetConstant(d, "KNOBINT",SWIG_From_int(static_cast< int >(KNOBINT)));
  SWIG_Python_SetConstant(d, "KNOBFLOAT",SWIG_From_int(static_cast< int >(KNOBFLOAT)));
  SWIG_Python_SetConstant(d, "KNOBDOUBLE",SWIG_From_int(static_cast< int >(KNOBDOUBLE)));
  SWIG_Python_SetConstant(d, "KNOBSTRING",SWIG_From_int(static_cast< int >(KNOBSTRING)));
  SWIG_Python_SetConstant(d, "KNOBLONG",SWIG_From_int(static_cast< int >(KNOBLONG)));
  SWIG_Python_SetConstant(d, "KNOBVECBOOL",SWIG_From_int(static_cast< int >(KNOBVECBOOL)));
  SWIG_Python_SetConstant(d, "KNOBCOMPLEX",SWIG_From_int(static_cast< int >(KNOBCOMPLEX)));
  SWIG_Python_SetConstant(d, "KNOBCOMPLEXD",SWIG_From_int(static_cast< int >(KNOBCOMPLEXD)));
  SWIG_Python_SetConstant(d, "KNOBVECCHAR",SWIG_From_int(static_cast< int >(KNOBVECCHAR)));
  SWIG_Python_SetConstant(d, "KNOBVECINT",SWIG_From_int(static_cast< int >(KNOBVECINT)));
  SWIG_Python_SetConstant(d, "KNOBVECFLOAT",SWIG_From_int(static_cast< int >(KNOBVECFLOAT)));
  SWIG_Python_SetConstant(d, "KNOBVECDOUBLE",SWIG_From_int(static_cast< int >(KNOBVECDOUBLE)));
  SWIG_Python_SetConstant(d, "KNOBVECSTRING",SWIG_From_int(static_cast< int >(KNOBVECSTRING)));
  SWIG_Python_SetConstant(d, "KNOBVECLONG",SWIG_From_int(static_cast< int >(KNOBVECLONG)));
  SWIG_Python_SetConstant(d, "PYPORT_STRING",SWIG_From_int(static_cast< int >(PYPORT_STRING)));
  SWIG_Python_SetConstant(d, "PYPORT_FLOAT",SWIG_From_int(static_cast< int >(PYPORT_FLOAT)));
  SWIG_addvarlink(SWIG_globals(),(char*)"pycallback_object_count",Swig_var_pycallback_object_count_get, Swig_var_pycallback_object_count_set);
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}


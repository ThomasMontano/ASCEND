# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fft_swig', [dirname(__file__)])
        except ImportError:
            import _fft_swig
            return _fft_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_fft_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _fft_swig = swig_import_helper()
    del swig_import_helper
else:
    import _fft_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _fft_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _fft_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _fft_swig.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _fft_swig.high_res_timer_epoch()
class fft_vcc(object):
    """
    Compute forward or reverse FFT. complex vector in / complex vector out.

    Constructor Specific Documentation:



    Args:
        fft_size : 
        forward : 
        window : 
        shift : 
        nthreads : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int fft_size, bool forward, pmt_vector_float window, bool shift=False, int nthreads=1) -> fft_vcc_sptr

        Compute forward or reverse FFT. complex vector in / complex vector out.

        Constructor Specific Documentation:



        Args:
            fft_size : 
            forward : 
            window : 
            shift : 
            nthreads : 
        """
        return _fft_swig.fft_vcc_make(*args, **kwargs)

    make = staticmethod(make)
    def set_nthreads(self, *args, **kwargs):
        """set_nthreads(fft_vcc self, int n)"""
        return _fft_swig.fft_vcc_set_nthreads(self, *args, **kwargs)

    def nthreads(self):
        """nthreads(fft_vcc self) -> int"""
        return _fft_swig.fft_vcc_nthreads(self)

    def set_window(self, *args, **kwargs):
        """set_window(fft_vcc self, pmt_vector_float window) -> bool"""
        return _fft_swig.fft_vcc_set_window(self, *args, **kwargs)

    __swig_destroy__ = _fft_swig.delete_fft_vcc
    __del__ = lambda self : None;
fft_vcc_swigregister = _fft_swig.fft_vcc_swigregister
fft_vcc_swigregister(fft_vcc)

def fft_vcc_make(*args, **kwargs):
  """
    fft_vcc_make(int fft_size, bool forward, pmt_vector_float window, bool shift=False, int nthreads=1) -> fft_vcc_sptr

    Compute forward or reverse FFT. complex vector in / complex vector out.

    Constructor Specific Documentation:



    Args:
        fft_size : 
        forward : 
        window : 
        shift : 
        nthreads : 
    """
  return _fft_swig.fft_vcc_make(*args, **kwargs)

class fft_vfc(object):
    """
    Compute forward or reverse FFT. float vector in / complex vector out.

    Constructor Specific Documentation:



    Args:
        fft_size : 
        forward : 
        window : 
        nthreads : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int fft_size, bool forward, pmt_vector_float window, int nthreads=1) -> fft_vfc_sptr

        Compute forward or reverse FFT. float vector in / complex vector out.

        Constructor Specific Documentation:



        Args:
            fft_size : 
            forward : 
            window : 
            nthreads : 
        """
        return _fft_swig.fft_vfc_make(*args, **kwargs)

    make = staticmethod(make)
    def set_nthreads(self, *args, **kwargs):
        """set_nthreads(fft_vfc self, int n)"""
        return _fft_swig.fft_vfc_set_nthreads(self, *args, **kwargs)

    def nthreads(self):
        """nthreads(fft_vfc self) -> int"""
        return _fft_swig.fft_vfc_nthreads(self)

    def set_window(self, *args, **kwargs):
        """set_window(fft_vfc self, pmt_vector_float window) -> bool"""
        return _fft_swig.fft_vfc_set_window(self, *args, **kwargs)

    __swig_destroy__ = _fft_swig.delete_fft_vfc
    __del__ = lambda self : None;
fft_vfc_swigregister = _fft_swig.fft_vfc_swigregister
fft_vfc_swigregister(fft_vfc)

def fft_vfc_make(*args, **kwargs):
  """
    fft_vfc_make(int fft_size, bool forward, pmt_vector_float window, int nthreads=1) -> fft_vfc_sptr

    Compute forward or reverse FFT. float vector in / complex vector out.

    Constructor Specific Documentation:



    Args:
        fft_size : 
        forward : 
        window : 
        nthreads : 
    """
  return _fft_swig.fft_vfc_make(*args, **kwargs)

class goertzel_fc(object):
    """
    Goertzel single-bin DFT calculation.

    Constructor Specific Documentation:



    Args:
        rate : 
        len : 
        freq : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int rate, int len, float freq) -> goertzel_fc_sptr

        Goertzel single-bin DFT calculation.

        Constructor Specific Documentation:



        Args:
            rate : 
            len : 
            freq : 
        """
        return _fft_swig.goertzel_fc_make(*args, **kwargs)

    make = staticmethod(make)
    def set_freq(self, *args, **kwargs):
        """set_freq(goertzel_fc self, float freq)"""
        return _fft_swig.goertzel_fc_set_freq(self, *args, **kwargs)

    def set_rate(self, *args, **kwargs):
        """set_rate(goertzel_fc self, int rate)"""
        return _fft_swig.goertzel_fc_set_rate(self, *args, **kwargs)

    def freq(self):
        """freq(goertzel_fc self) -> float"""
        return _fft_swig.goertzel_fc_freq(self)

    def rate(self):
        """rate(goertzel_fc self) -> int"""
        return _fft_swig.goertzel_fc_rate(self)

    __swig_destroy__ = _fft_swig.delete_goertzel_fc
    __del__ = lambda self : None;
goertzel_fc_swigregister = _fft_swig.goertzel_fc_swigregister
goertzel_fc_swigregister(goertzel_fc)

def goertzel_fc_make(*args, **kwargs):
  """
    goertzel_fc_make(int rate, int len, float freq) -> goertzel_fc_sptr

    Goertzel single-bin DFT calculation.

    Constructor Specific Documentation:



    Args:
        rate : 
        len : 
        freq : 
    """
  return _fft_swig.goertzel_fc_make(*args, **kwargs)

class window(object):
    """Proxy of C++ gr::fft::window class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    WIN_HAMMING = _fft_swig.window_WIN_HAMMING
    WIN_HANN = _fft_swig.window_WIN_HANN
    WIN_BLACKMAN = _fft_swig.window_WIN_BLACKMAN
    WIN_RECTANGULAR = _fft_swig.window_WIN_RECTANGULAR
    WIN_KAISER = _fft_swig.window_WIN_KAISER
    WIN_BLACKMAN_hARRIS = _fft_swig.window_WIN_BLACKMAN_hARRIS
    WIN_BLACKMAN_HARRIS = _fft_swig.window_WIN_BLACKMAN_HARRIS
    WIN_BARTLETT = _fft_swig.window_WIN_BARTLETT
    WIN_FLATTOP = _fft_swig.window_WIN_FLATTOP
    def max_attenuation(*args, **kwargs):
        """
        max_attenuation(gr::fft::window::win_type type, double beta=6.76) -> double

        Given a window::win_type, this tells you the maximum attenuation you can expect.

        For most windows, this is a set value. For the Kaiser window, the attenuation is based on the value of beta. The actual relationship is a piece-wise exponential relationship to calculate beta from the desired attenuation and can be found on page 542 of Oppenheim and Schafer (Discrete-Time Signal Processing, 3rd edition). To simplify this function to solve for A given beta, we use a linear form that is exact for attenuation >= 50 dB.

        For an attenuation of 50 dB, beta = 4.55.

        For an attenuation of 70 dB, beta = 6.76.
        """
        return _fft_swig.window_max_attenuation(*args, **kwargs)

    max_attenuation = staticmethod(max_attenuation)
    def coswindow(*args):
        """
        coswindow(int ntaps, float c0, float c1, float c2) -> pmt_vector_float
        coswindow(int ntaps, float c0, float c1, float c2, float c3) -> pmt_vector_float
        coswindow(int ntaps, float c0, float c1, float c2, float c3, float c4) -> pmt_vector_float

        Helper function to build cosine-based windows. 3-coefficient version.
        """
        return _fft_swig.window_coswindow(*args)

    coswindow = staticmethod(coswindow)
    def rectangular(*args, **kwargs):
        """
        rectangular(int ntaps) -> pmt_vector_float

        Build a rectangular window.

        Taps are flat across the window.
        """
        return _fft_swig.window_rectangular(*args, **kwargs)

    rectangular = staticmethod(rectangular)
    def hamming(*args, **kwargs):
        """
        hamming(int ntaps) -> pmt_vector_float

        Build a Hamming window.

        See:
        """
        return _fft_swig.window_hamming(*args, **kwargs)

    hamming = staticmethod(hamming)
    def hann(*args, **kwargs):
        """
        hann(int ntaps) -> pmt_vector_float

        Build a Hann window (sometimes known as Hanning).

        See:
        """
        return _fft_swig.window_hann(*args, **kwargs)

    hann = staticmethod(hann)
    def hanning(*args, **kwargs):
        """
        hanning(int ntaps) -> pmt_vector_float

        Alias to build a Hann window.
        """
        return _fft_swig.window_hanning(*args, **kwargs)

    hanning = staticmethod(hanning)
    def blackman(*args, **kwargs):
        """
        blackman(int ntaps) -> pmt_vector_float

        Build an exact Blackman window.

        See:
        """
        return _fft_swig.window_blackman(*args, **kwargs)

    blackman = staticmethod(blackman)
    def blackman2(*args, **kwargs):
        """
        blackman2(int ntaps) -> pmt_vector_float

        Build Blackman window, variation 1.
        """
        return _fft_swig.window_blackman2(*args, **kwargs)

    blackman2 = staticmethod(blackman2)
    def blackman3(*args, **kwargs):
        """
        blackman3(int ntaps) -> pmt_vector_float

        Build Blackman window, variation 2.
        """
        return _fft_swig.window_blackman3(*args, **kwargs)

    blackman3 = staticmethod(blackman3)
    def blackman4(*args, **kwargs):
        """
        blackman4(int ntaps) -> pmt_vector_float

        Build Blackman window, variation 3.
        """
        return _fft_swig.window_blackman4(*args, **kwargs)

    blackman4 = staticmethod(blackman4)
    def blackman_harris(*args, **kwargs):
        """
        blackman_harris(int ntaps, int atten=92) -> pmt_vector_float

        Build a Blackman-harris window with a given attenuation.
        """
        return _fft_swig.window_blackman_harris(*args, **kwargs)

    blackman_harris = staticmethod(blackman_harris)
    def blackmanharris(*args, **kwargs):
        """
        blackmanharris(int ntaps, int atten=92) -> pmt_vector_float

        Alias to gr::fft::window::blakcman_harris.
        """
        return _fft_swig.window_blackmanharris(*args, **kwargs)

    blackmanharris = staticmethod(blackmanharris)
    def nuttall(*args, **kwargs):
        """
        nuttall(int ntaps) -> pmt_vector_float

        Build a Nuttall (or Blackman-Nuttall) window.

        See:
        """
        return _fft_swig.window_nuttall(*args, **kwargs)

    nuttall = staticmethod(nuttall)
    def nuttal(*args, **kwargs):
        """
        nuttal(int ntaps) -> pmt_vector_float

        Deprecated: use nuttall window instead.
        """
        return _fft_swig.window_nuttal(*args, **kwargs)

    nuttal = staticmethod(nuttal)
    def blackman_nuttall(*args, **kwargs):
        """
        blackman_nuttall(int ntaps) -> pmt_vector_float

        Alias to the Nuttall window.
        """
        return _fft_swig.window_blackman_nuttall(*args, **kwargs)

    blackman_nuttall = staticmethod(blackman_nuttall)
    def blackman_nuttal(*args, **kwargs):
        """
        blackman_nuttal(int ntaps) -> pmt_vector_float

        Deprecated: use blackman_nuttall window instead.
        """
        return _fft_swig.window_blackman_nuttal(*args, **kwargs)

    blackman_nuttal = staticmethod(blackman_nuttal)
    def nuttall_cfd(*args, **kwargs):
        """
        nuttall_cfd(int ntaps) -> pmt_vector_float

        Build a Nuttall continuous first derivative window.

        See:
        """
        return _fft_swig.window_nuttall_cfd(*args, **kwargs)

    nuttall_cfd = staticmethod(nuttall_cfd)
    def nuttal_cfd(*args, **kwargs):
        """
        nuttal_cfd(int ntaps) -> pmt_vector_float

        Deprecated: use nuttall_cfd window instead.
        """
        return _fft_swig.window_nuttal_cfd(*args, **kwargs)

    nuttal_cfd = staticmethod(nuttal_cfd)
    def flattop(*args, **kwargs):
        """
        flattop(int ntaps) -> pmt_vector_float

        Build a flat top window.

        See:
        """
        return _fft_swig.window_flattop(*args, **kwargs)

    flattop = staticmethod(flattop)
    def kaiser(*args, **kwargs):
        """
        kaiser(int ntaps, double beta) -> pmt_vector_float

        Build a Kaiser window with a given beta.

        See:
        """
        return _fft_swig.window_kaiser(*args, **kwargs)

    kaiser = staticmethod(kaiser)
    def bartlett(*args, **kwargs):
        """
        bartlett(int ntaps) -> pmt_vector_float

        Build a Barlett (triangular) window.

        See:
        """
        return _fft_swig.window_bartlett(*args, **kwargs)

    bartlett = staticmethod(bartlett)
    def welch(*args, **kwargs):
        """welch(int ntaps) -> pmt_vector_float"""
        return _fft_swig.window_welch(*args, **kwargs)

    welch = staticmethod(welch)
    def parzen(*args, **kwargs):
        """
        parzen(int ntaps) -> pmt_vector_float

        Build a Parzen (or de la Valle-Poussin) window.

        See:
        """
        return _fft_swig.window_parzen(*args, **kwargs)

    parzen = staticmethod(parzen)
    def exponential(*args, **kwargs):
        """
        exponential(int ntaps, double d) -> pmt_vector_float

        Build an exponential window with a given decay.

        See:
        """
        return _fft_swig.window_exponential(*args, **kwargs)

    exponential = staticmethod(exponential)
    def riemann(*args, **kwargs):
        """
        riemann(int ntaps) -> pmt_vector_float

        Build a Riemann window.

        See:
        """
        return _fft_swig.window_riemann(*args, **kwargs)

    riemann = staticmethod(riemann)
    def build(*args, **kwargs):
        """
        build(gr::fft::window::win_type type, int ntaps, double beta) -> pmt_vector_float

        Build a window using gr::fft::win_type to index the type of window desired.
        """
        return _fft_swig.window_build(*args, **kwargs)

    build = staticmethod(build)
    def __init__(self): 
        """__init__(gr::fft::window self) -> window"""
        this = _fft_swig.new_window()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fft_swig.delete_window
    __del__ = lambda self : None;
window_swigregister = _fft_swig.window_swigregister
window_swigregister(window)

def window_max_attenuation(*args, **kwargs):
  """
    window_max_attenuation(gr::fft::window::win_type type, double beta=6.76) -> double

    Given a window::win_type, this tells you the maximum attenuation you can expect.

    For most windows, this is a set value. For the Kaiser window, the attenuation is based on the value of beta. The actual relationship is a piece-wise exponential relationship to calculate beta from the desired attenuation and can be found on page 542 of Oppenheim and Schafer (Discrete-Time Signal Processing, 3rd edition). To simplify this function to solve for A given beta, we use a linear form that is exact for attenuation >= 50 dB.

    For an attenuation of 50 dB, beta = 4.55.

    For an attenuation of 70 dB, beta = 6.76.
    """
  return _fft_swig.window_max_attenuation(*args, **kwargs)

def window_coswindow(*args):
  """
    coswindow(int ntaps, float c0, float c1, float c2) -> pmt_vector_float
    coswindow(int ntaps, float c0, float c1, float c2, float c3) -> pmt_vector_float
    window_coswindow(int ntaps, float c0, float c1, float c2, float c3, float c4) -> pmt_vector_float

    Helper function to build cosine-based windows. 3-coefficient version.
    """
  return _fft_swig.window_coswindow(*args)

def window_rectangular(*args, **kwargs):
  """
    window_rectangular(int ntaps) -> pmt_vector_float

    Build a rectangular window.

    Taps are flat across the window.
    """
  return _fft_swig.window_rectangular(*args, **kwargs)

def window_hamming(*args, **kwargs):
  """
    window_hamming(int ntaps) -> pmt_vector_float

    Build a Hamming window.

    See:
    """
  return _fft_swig.window_hamming(*args, **kwargs)

def window_hann(*args, **kwargs):
  """
    window_hann(int ntaps) -> pmt_vector_float

    Build a Hann window (sometimes known as Hanning).

    See:
    """
  return _fft_swig.window_hann(*args, **kwargs)

def window_hanning(*args, **kwargs):
  """
    window_hanning(int ntaps) -> pmt_vector_float

    Alias to build a Hann window.
    """
  return _fft_swig.window_hanning(*args, **kwargs)

def window_blackman(*args, **kwargs):
  """
    window_blackman(int ntaps) -> pmt_vector_float

    Build an exact Blackman window.

    See:
    """
  return _fft_swig.window_blackman(*args, **kwargs)

def window_blackman2(*args, **kwargs):
  """
    window_blackman2(int ntaps) -> pmt_vector_float

    Build Blackman window, variation 1.
    """
  return _fft_swig.window_blackman2(*args, **kwargs)

def window_blackman3(*args, **kwargs):
  """
    window_blackman3(int ntaps) -> pmt_vector_float

    Build Blackman window, variation 2.
    """
  return _fft_swig.window_blackman3(*args, **kwargs)

def window_blackman4(*args, **kwargs):
  """
    window_blackman4(int ntaps) -> pmt_vector_float

    Build Blackman window, variation 3.
    """
  return _fft_swig.window_blackman4(*args, **kwargs)

def window_blackman_harris(*args, **kwargs):
  """
    window_blackman_harris(int ntaps, int atten=92) -> pmt_vector_float

    Build a Blackman-harris window with a given attenuation.
    """
  return _fft_swig.window_blackman_harris(*args, **kwargs)

def window_blackmanharris(*args, **kwargs):
  """
    window_blackmanharris(int ntaps, int atten=92) -> pmt_vector_float

    Alias to gr::fft::window::blakcman_harris.
    """
  return _fft_swig.window_blackmanharris(*args, **kwargs)

def window_nuttall(*args, **kwargs):
  """
    window_nuttall(int ntaps) -> pmt_vector_float

    Build a Nuttall (or Blackman-Nuttall) window.

    See:
    """
  return _fft_swig.window_nuttall(*args, **kwargs)

def window_nuttal(*args, **kwargs):
  """
    window_nuttal(int ntaps) -> pmt_vector_float

    Deprecated: use nuttall window instead.
    """
  return _fft_swig.window_nuttal(*args, **kwargs)

def window_blackman_nuttall(*args, **kwargs):
  """
    window_blackman_nuttall(int ntaps) -> pmt_vector_float

    Alias to the Nuttall window.
    """
  return _fft_swig.window_blackman_nuttall(*args, **kwargs)

def window_blackman_nuttal(*args, **kwargs):
  """
    window_blackman_nuttal(int ntaps) -> pmt_vector_float

    Deprecated: use blackman_nuttall window instead.
    """
  return _fft_swig.window_blackman_nuttal(*args, **kwargs)

def window_nuttall_cfd(*args, **kwargs):
  """
    window_nuttall_cfd(int ntaps) -> pmt_vector_float

    Build a Nuttall continuous first derivative window.

    See:
    """
  return _fft_swig.window_nuttall_cfd(*args, **kwargs)

def window_nuttal_cfd(*args, **kwargs):
  """
    window_nuttal_cfd(int ntaps) -> pmt_vector_float

    Deprecated: use nuttall_cfd window instead.
    """
  return _fft_swig.window_nuttal_cfd(*args, **kwargs)

def window_flattop(*args, **kwargs):
  """
    window_flattop(int ntaps) -> pmt_vector_float

    Build a flat top window.

    See:
    """
  return _fft_swig.window_flattop(*args, **kwargs)

def window_kaiser(*args, **kwargs):
  """
    window_kaiser(int ntaps, double beta) -> pmt_vector_float

    Build a Kaiser window with a given beta.

    See:
    """
  return _fft_swig.window_kaiser(*args, **kwargs)

def window_bartlett(*args, **kwargs):
  """
    window_bartlett(int ntaps) -> pmt_vector_float

    Build a Barlett (triangular) window.

    See:
    """
  return _fft_swig.window_bartlett(*args, **kwargs)

def window_welch(*args, **kwargs):
  """window_welch(int ntaps) -> pmt_vector_float"""
  return _fft_swig.window_welch(*args, **kwargs)

def window_parzen(*args, **kwargs):
  """
    window_parzen(int ntaps) -> pmt_vector_float

    Build a Parzen (or de la Valle-Poussin) window.

    See:
    """
  return _fft_swig.window_parzen(*args, **kwargs)

def window_exponential(*args, **kwargs):
  """
    window_exponential(int ntaps, double d) -> pmt_vector_float

    Build an exponential window with a given decay.

    See:
    """
  return _fft_swig.window_exponential(*args, **kwargs)

def window_riemann(*args, **kwargs):
  """
    window_riemann(int ntaps) -> pmt_vector_float

    Build a Riemann window.

    See:
    """
  return _fft_swig.window_riemann(*args, **kwargs)

def window_build(*args, **kwargs):
  """
    window_build(gr::fft::window::win_type type, int ntaps, double beta) -> pmt_vector_float

    Build a window using gr::fft::win_type to index the type of window desired.
    """
  return _fft_swig.window_build(*args, **kwargs)

class fft_vcc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::fft::fft_vcc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::fft::fft_vcc)> self) -> fft_vcc_sptr
        __init__(boost::shared_ptr<(gr::fft::fft_vcc)> self, fft_vcc p) -> fft_vcc_sptr
        """
        this = _fft_swig.new_fft_vcc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(fft_vcc_sptr self) -> fft_vcc"""
        return _fft_swig.fft_vcc_sptr___deref__(self)

    __swig_destroy__ = _fft_swig.delete_fft_vcc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(fft_vcc_sptr self, int fft_size, bool forward, pmt_vector_float window, bool shift=False, int nthreads=1) -> fft_vcc_sptr

        Compute forward or reverse FFT. complex vector in / complex vector out.

        Constructor Specific Documentation:



        Args:
            fft_size : 
            forward : 
            window : 
            shift : 
            nthreads : 
        """
        return _fft_swig.fft_vcc_sptr_make(self, *args, **kwargs)

    def set_nthreads(self, *args, **kwargs):
        """set_nthreads(fft_vcc_sptr self, int n)"""
        return _fft_swig.fft_vcc_sptr_set_nthreads(self, *args, **kwargs)

    def nthreads(self):
        """nthreads(fft_vcc_sptr self) -> int"""
        return _fft_swig.fft_vcc_sptr_nthreads(self)

    def set_window(self, *args, **kwargs):
        """set_window(fft_vcc_sptr self, pmt_vector_float window) -> bool"""
        return _fft_swig.fft_vcc_sptr_set_window(self, *args, **kwargs)

    def history(self):
        """history(fft_vcc_sptr self) -> unsigned int"""
        return _fft_swig.fft_vcc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(fft_vcc_sptr self, int which, int delay)
        declare_sample_delay(fft_vcc_sptr self, unsigned int delay)
        """
        return _fft_swig.fft_vcc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(fft_vcc_sptr self, int which) -> unsigned int"""
        return _fft_swig.fft_vcc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(fft_vcc_sptr self) -> int"""
        return _fft_swig.fft_vcc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(fft_vcc_sptr self) -> double"""
        return _fft_swig.fft_vcc_sptr_relative_rate(self)

    def start(self):
        """start(fft_vcc_sptr self) -> bool"""
        return _fft_swig.fft_vcc_sptr_start(self)

    def stop(self):
        """stop(fft_vcc_sptr self) -> bool"""
        return _fft_swig.fft_vcc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(fft_vcc_sptr self, unsigned int which_input) -> uint64_t"""
        return _fft_swig.fft_vcc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(fft_vcc_sptr self, unsigned int which_output) -> uint64_t"""
        return _fft_swig.fft_vcc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(fft_vcc_sptr self) -> int"""
        return _fft_swig.fft_vcc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(fft_vcc_sptr self, int m)"""
        return _fft_swig.fft_vcc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(fft_vcc_sptr self)"""
        return _fft_swig.fft_vcc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(fft_vcc_sptr self) -> bool"""
        return _fft_swig.fft_vcc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(fft_vcc_sptr self, int m)"""
        return _fft_swig.fft_vcc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(fft_vcc_sptr self) -> int"""
        return _fft_swig.fft_vcc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(fft_vcc_sptr self, int i) -> long"""
        return _fft_swig.fft_vcc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(fft_vcc_sptr self, long max_output_buffer)
        set_max_output_buffer(fft_vcc_sptr self, int port, long max_output_buffer)
        """
        return _fft_swig.fft_vcc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(fft_vcc_sptr self, int i) -> long"""
        return _fft_swig.fft_vcc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(fft_vcc_sptr self, long min_output_buffer)
        set_min_output_buffer(fft_vcc_sptr self, int port, long min_output_buffer)
        """
        return _fft_swig.fft_vcc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(fft_vcc_sptr self) -> float"""
        return _fft_swig.fft_vcc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(fft_vcc_sptr self) -> float"""
        return _fft_swig.fft_vcc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(fft_vcc_sptr self) -> float"""
        return _fft_swig.fft_vcc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(fft_vcc_sptr self) -> float"""
        return _fft_swig.fft_vcc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(fft_vcc_sptr self) -> float"""
        return _fft_swig.fft_vcc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(fft_vcc_sptr self) -> float"""
        return _fft_swig.fft_vcc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(fft_vcc_sptr self, int which) -> float
        pc_input_buffers_full(fft_vcc_sptr self) -> pmt_vector_float
        """
        return _fft_swig.fft_vcc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(fft_vcc_sptr self, int which) -> float
        pc_input_buffers_full_avg(fft_vcc_sptr self) -> pmt_vector_float
        """
        return _fft_swig.fft_vcc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(fft_vcc_sptr self, int which) -> float
        pc_input_buffers_full_var(fft_vcc_sptr self) -> pmt_vector_float
        """
        return _fft_swig.fft_vcc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(fft_vcc_sptr self, int which) -> float
        pc_output_buffers_full(fft_vcc_sptr self) -> pmt_vector_float
        """
        return _fft_swig.fft_vcc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(fft_vcc_sptr self, int which) -> float
        pc_output_buffers_full_avg(fft_vcc_sptr self) -> pmt_vector_float
        """
        return _fft_swig.fft_vcc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(fft_vcc_sptr self, int which) -> float
        pc_output_buffers_full_var(fft_vcc_sptr self) -> pmt_vector_float
        """
        return _fft_swig.fft_vcc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(fft_vcc_sptr self) -> float"""
        return _fft_swig.fft_vcc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(fft_vcc_sptr self) -> float"""
        return _fft_swig.fft_vcc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(fft_vcc_sptr self) -> float"""
        return _fft_swig.fft_vcc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(fft_vcc_sptr self) -> float"""
        return _fft_swig.fft_vcc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(fft_vcc_sptr self) -> float"""
        return _fft_swig.fft_vcc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(fft_vcc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _fft_swig.fft_vcc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(fft_vcc_sptr self)"""
        return _fft_swig.fft_vcc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(fft_vcc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _fft_swig.fft_vcc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(fft_vcc_sptr self) -> int"""
        return _fft_swig.fft_vcc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(fft_vcc_sptr self) -> int"""
        return _fft_swig.fft_vcc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(fft_vcc_sptr self, int priority) -> int"""
        return _fft_swig.fft_vcc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(fft_vcc_sptr self) -> std::string"""
        return _fft_swig.fft_vcc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(fft_vcc_sptr self) -> std::string"""
        return _fft_swig.fft_vcc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(fft_vcc_sptr self) -> io_signature_sptr"""
        return _fft_swig.fft_vcc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(fft_vcc_sptr self) -> io_signature_sptr"""
        return _fft_swig.fft_vcc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(fft_vcc_sptr self) -> long"""
        return _fft_swig.fft_vcc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(fft_vcc_sptr self) -> basic_block_sptr"""
        return _fft_swig.fft_vcc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(fft_vcc_sptr self, int ninputs, int noutputs) -> bool"""
        return _fft_swig.fft_vcc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(fft_vcc_sptr self) -> std::string"""
        return _fft_swig.fft_vcc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(fft_vcc_sptr self, std::string name)"""
        return _fft_swig.fft_vcc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(fft_vcc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _fft_swig.fft_vcc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(fft_vcc_sptr self) -> swig_int_ptr"""
        return _fft_swig.fft_vcc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(fft_vcc_sptr self) -> swig_int_ptr"""
        return _fft_swig.fft_vcc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(fft_vcc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _fft_swig.fft_vcc_sptr_message_subscribers(self, *args, **kwargs)

fft_vcc_sptr_swigregister = _fft_swig.fft_vcc_sptr_swigregister
fft_vcc_sptr_swigregister(fft_vcc_sptr)

fft_vcc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fft_vcc = fft_vcc.make;

class fft_vfc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::fft::fft_vfc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::fft::fft_vfc)> self) -> fft_vfc_sptr
        __init__(boost::shared_ptr<(gr::fft::fft_vfc)> self, fft_vfc p) -> fft_vfc_sptr
        """
        this = _fft_swig.new_fft_vfc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(fft_vfc_sptr self) -> fft_vfc"""
        return _fft_swig.fft_vfc_sptr___deref__(self)

    __swig_destroy__ = _fft_swig.delete_fft_vfc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(fft_vfc_sptr self, int fft_size, bool forward, pmt_vector_float window, int nthreads=1) -> fft_vfc_sptr

        Compute forward or reverse FFT. float vector in / complex vector out.

        Constructor Specific Documentation:



        Args:
            fft_size : 
            forward : 
            window : 
            nthreads : 
        """
        return _fft_swig.fft_vfc_sptr_make(self, *args, **kwargs)

    def set_nthreads(self, *args, **kwargs):
        """set_nthreads(fft_vfc_sptr self, int n)"""
        return _fft_swig.fft_vfc_sptr_set_nthreads(self, *args, **kwargs)

    def nthreads(self):
        """nthreads(fft_vfc_sptr self) -> int"""
        return _fft_swig.fft_vfc_sptr_nthreads(self)

    def set_window(self, *args, **kwargs):
        """set_window(fft_vfc_sptr self, pmt_vector_float window) -> bool"""
        return _fft_swig.fft_vfc_sptr_set_window(self, *args, **kwargs)

    def history(self):
        """history(fft_vfc_sptr self) -> unsigned int"""
        return _fft_swig.fft_vfc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(fft_vfc_sptr self, int which, int delay)
        declare_sample_delay(fft_vfc_sptr self, unsigned int delay)
        """
        return _fft_swig.fft_vfc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(fft_vfc_sptr self, int which) -> unsigned int"""
        return _fft_swig.fft_vfc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(fft_vfc_sptr self) -> int"""
        return _fft_swig.fft_vfc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(fft_vfc_sptr self) -> double"""
        return _fft_swig.fft_vfc_sptr_relative_rate(self)

    def start(self):
        """start(fft_vfc_sptr self) -> bool"""
        return _fft_swig.fft_vfc_sptr_start(self)

    def stop(self):
        """stop(fft_vfc_sptr self) -> bool"""
        return _fft_swig.fft_vfc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(fft_vfc_sptr self, unsigned int which_input) -> uint64_t"""
        return _fft_swig.fft_vfc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(fft_vfc_sptr self, unsigned int which_output) -> uint64_t"""
        return _fft_swig.fft_vfc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(fft_vfc_sptr self) -> int"""
        return _fft_swig.fft_vfc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(fft_vfc_sptr self, int m)"""
        return _fft_swig.fft_vfc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(fft_vfc_sptr self)"""
        return _fft_swig.fft_vfc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(fft_vfc_sptr self) -> bool"""
        return _fft_swig.fft_vfc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(fft_vfc_sptr self, int m)"""
        return _fft_swig.fft_vfc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(fft_vfc_sptr self) -> int"""
        return _fft_swig.fft_vfc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(fft_vfc_sptr self, int i) -> long"""
        return _fft_swig.fft_vfc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(fft_vfc_sptr self, long max_output_buffer)
        set_max_output_buffer(fft_vfc_sptr self, int port, long max_output_buffer)
        """
        return _fft_swig.fft_vfc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(fft_vfc_sptr self, int i) -> long"""
        return _fft_swig.fft_vfc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(fft_vfc_sptr self, long min_output_buffer)
        set_min_output_buffer(fft_vfc_sptr self, int port, long min_output_buffer)
        """
        return _fft_swig.fft_vfc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(fft_vfc_sptr self) -> float"""
        return _fft_swig.fft_vfc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(fft_vfc_sptr self) -> float"""
        return _fft_swig.fft_vfc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(fft_vfc_sptr self) -> float"""
        return _fft_swig.fft_vfc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(fft_vfc_sptr self) -> float"""
        return _fft_swig.fft_vfc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(fft_vfc_sptr self) -> float"""
        return _fft_swig.fft_vfc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(fft_vfc_sptr self) -> float"""
        return _fft_swig.fft_vfc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(fft_vfc_sptr self, int which) -> float
        pc_input_buffers_full(fft_vfc_sptr self) -> pmt_vector_float
        """
        return _fft_swig.fft_vfc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(fft_vfc_sptr self, int which) -> float
        pc_input_buffers_full_avg(fft_vfc_sptr self) -> pmt_vector_float
        """
        return _fft_swig.fft_vfc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(fft_vfc_sptr self, int which) -> float
        pc_input_buffers_full_var(fft_vfc_sptr self) -> pmt_vector_float
        """
        return _fft_swig.fft_vfc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(fft_vfc_sptr self, int which) -> float
        pc_output_buffers_full(fft_vfc_sptr self) -> pmt_vector_float
        """
        return _fft_swig.fft_vfc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(fft_vfc_sptr self, int which) -> float
        pc_output_buffers_full_avg(fft_vfc_sptr self) -> pmt_vector_float
        """
        return _fft_swig.fft_vfc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(fft_vfc_sptr self, int which) -> float
        pc_output_buffers_full_var(fft_vfc_sptr self) -> pmt_vector_float
        """
        return _fft_swig.fft_vfc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(fft_vfc_sptr self) -> float"""
        return _fft_swig.fft_vfc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(fft_vfc_sptr self) -> float"""
        return _fft_swig.fft_vfc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(fft_vfc_sptr self) -> float"""
        return _fft_swig.fft_vfc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(fft_vfc_sptr self) -> float"""
        return _fft_swig.fft_vfc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(fft_vfc_sptr self) -> float"""
        return _fft_swig.fft_vfc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(fft_vfc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _fft_swig.fft_vfc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(fft_vfc_sptr self)"""
        return _fft_swig.fft_vfc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(fft_vfc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _fft_swig.fft_vfc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(fft_vfc_sptr self) -> int"""
        return _fft_swig.fft_vfc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(fft_vfc_sptr self) -> int"""
        return _fft_swig.fft_vfc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(fft_vfc_sptr self, int priority) -> int"""
        return _fft_swig.fft_vfc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(fft_vfc_sptr self) -> std::string"""
        return _fft_swig.fft_vfc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(fft_vfc_sptr self) -> std::string"""
        return _fft_swig.fft_vfc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(fft_vfc_sptr self) -> io_signature_sptr"""
        return _fft_swig.fft_vfc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(fft_vfc_sptr self) -> io_signature_sptr"""
        return _fft_swig.fft_vfc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(fft_vfc_sptr self) -> long"""
        return _fft_swig.fft_vfc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(fft_vfc_sptr self) -> basic_block_sptr"""
        return _fft_swig.fft_vfc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(fft_vfc_sptr self, int ninputs, int noutputs) -> bool"""
        return _fft_swig.fft_vfc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(fft_vfc_sptr self) -> std::string"""
        return _fft_swig.fft_vfc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(fft_vfc_sptr self, std::string name)"""
        return _fft_swig.fft_vfc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(fft_vfc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _fft_swig.fft_vfc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(fft_vfc_sptr self) -> swig_int_ptr"""
        return _fft_swig.fft_vfc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(fft_vfc_sptr self) -> swig_int_ptr"""
        return _fft_swig.fft_vfc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(fft_vfc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _fft_swig.fft_vfc_sptr_message_subscribers(self, *args, **kwargs)

fft_vfc_sptr_swigregister = _fft_swig.fft_vfc_sptr_swigregister
fft_vfc_sptr_swigregister(fft_vfc_sptr)

fft_vfc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fft_vfc = fft_vfc.make;

class goertzel_fc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::fft::goertzel_fc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::fft::goertzel_fc)> self) -> goertzel_fc_sptr
        __init__(boost::shared_ptr<(gr::fft::goertzel_fc)> self, goertzel_fc p) -> goertzel_fc_sptr
        """
        this = _fft_swig.new_goertzel_fc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(goertzel_fc_sptr self) -> goertzel_fc"""
        return _fft_swig.goertzel_fc_sptr___deref__(self)

    __swig_destroy__ = _fft_swig.delete_goertzel_fc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(goertzel_fc_sptr self, int rate, int len, float freq) -> goertzel_fc_sptr

        Goertzel single-bin DFT calculation.

        Constructor Specific Documentation:



        Args:
            rate : 
            len : 
            freq : 
        """
        return _fft_swig.goertzel_fc_sptr_make(self, *args, **kwargs)

    def set_freq(self, *args, **kwargs):
        """set_freq(goertzel_fc_sptr self, float freq)"""
        return _fft_swig.goertzel_fc_sptr_set_freq(self, *args, **kwargs)

    def set_rate(self, *args, **kwargs):
        """set_rate(goertzel_fc_sptr self, int rate)"""
        return _fft_swig.goertzel_fc_sptr_set_rate(self, *args, **kwargs)

    def freq(self):
        """freq(goertzel_fc_sptr self) -> float"""
        return _fft_swig.goertzel_fc_sptr_freq(self)

    def rate(self):
        """rate(goertzel_fc_sptr self) -> int"""
        return _fft_swig.goertzel_fc_sptr_rate(self)

    def history(self):
        """history(goertzel_fc_sptr self) -> unsigned int"""
        return _fft_swig.goertzel_fc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(goertzel_fc_sptr self, int which, int delay)
        declare_sample_delay(goertzel_fc_sptr self, unsigned int delay)
        """
        return _fft_swig.goertzel_fc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(goertzel_fc_sptr self, int which) -> unsigned int"""
        return _fft_swig.goertzel_fc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(goertzel_fc_sptr self) -> int"""
        return _fft_swig.goertzel_fc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(goertzel_fc_sptr self) -> double"""
        return _fft_swig.goertzel_fc_sptr_relative_rate(self)

    def start(self):
        """start(goertzel_fc_sptr self) -> bool"""
        return _fft_swig.goertzel_fc_sptr_start(self)

    def stop(self):
        """stop(goertzel_fc_sptr self) -> bool"""
        return _fft_swig.goertzel_fc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(goertzel_fc_sptr self, unsigned int which_input) -> uint64_t"""
        return _fft_swig.goertzel_fc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(goertzel_fc_sptr self, unsigned int which_output) -> uint64_t"""
        return _fft_swig.goertzel_fc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(goertzel_fc_sptr self) -> int"""
        return _fft_swig.goertzel_fc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(goertzel_fc_sptr self, int m)"""
        return _fft_swig.goertzel_fc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(goertzel_fc_sptr self)"""
        return _fft_swig.goertzel_fc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(goertzel_fc_sptr self) -> bool"""
        return _fft_swig.goertzel_fc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(goertzel_fc_sptr self, int m)"""
        return _fft_swig.goertzel_fc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(goertzel_fc_sptr self) -> int"""
        return _fft_swig.goertzel_fc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(goertzel_fc_sptr self, int i) -> long"""
        return _fft_swig.goertzel_fc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(goertzel_fc_sptr self, long max_output_buffer)
        set_max_output_buffer(goertzel_fc_sptr self, int port, long max_output_buffer)
        """
        return _fft_swig.goertzel_fc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(goertzel_fc_sptr self, int i) -> long"""
        return _fft_swig.goertzel_fc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(goertzel_fc_sptr self, long min_output_buffer)
        set_min_output_buffer(goertzel_fc_sptr self, int port, long min_output_buffer)
        """
        return _fft_swig.goertzel_fc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(goertzel_fc_sptr self) -> float"""
        return _fft_swig.goertzel_fc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(goertzel_fc_sptr self) -> float"""
        return _fft_swig.goertzel_fc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(goertzel_fc_sptr self) -> float"""
        return _fft_swig.goertzel_fc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(goertzel_fc_sptr self) -> float"""
        return _fft_swig.goertzel_fc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(goertzel_fc_sptr self) -> float"""
        return _fft_swig.goertzel_fc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(goertzel_fc_sptr self) -> float"""
        return _fft_swig.goertzel_fc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(goertzel_fc_sptr self, int which) -> float
        pc_input_buffers_full(goertzel_fc_sptr self) -> pmt_vector_float
        """
        return _fft_swig.goertzel_fc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(goertzel_fc_sptr self, int which) -> float
        pc_input_buffers_full_avg(goertzel_fc_sptr self) -> pmt_vector_float
        """
        return _fft_swig.goertzel_fc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(goertzel_fc_sptr self, int which) -> float
        pc_input_buffers_full_var(goertzel_fc_sptr self) -> pmt_vector_float
        """
        return _fft_swig.goertzel_fc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(goertzel_fc_sptr self, int which) -> float
        pc_output_buffers_full(goertzel_fc_sptr self) -> pmt_vector_float
        """
        return _fft_swig.goertzel_fc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(goertzel_fc_sptr self, int which) -> float
        pc_output_buffers_full_avg(goertzel_fc_sptr self) -> pmt_vector_float
        """
        return _fft_swig.goertzel_fc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(goertzel_fc_sptr self, int which) -> float
        pc_output_buffers_full_var(goertzel_fc_sptr self) -> pmt_vector_float
        """
        return _fft_swig.goertzel_fc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(goertzel_fc_sptr self) -> float"""
        return _fft_swig.goertzel_fc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(goertzel_fc_sptr self) -> float"""
        return _fft_swig.goertzel_fc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(goertzel_fc_sptr self) -> float"""
        return _fft_swig.goertzel_fc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(goertzel_fc_sptr self) -> float"""
        return _fft_swig.goertzel_fc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(goertzel_fc_sptr self) -> float"""
        return _fft_swig.goertzel_fc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(goertzel_fc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _fft_swig.goertzel_fc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(goertzel_fc_sptr self)"""
        return _fft_swig.goertzel_fc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(goertzel_fc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _fft_swig.goertzel_fc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(goertzel_fc_sptr self) -> int"""
        return _fft_swig.goertzel_fc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(goertzel_fc_sptr self) -> int"""
        return _fft_swig.goertzel_fc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(goertzel_fc_sptr self, int priority) -> int"""
        return _fft_swig.goertzel_fc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(goertzel_fc_sptr self) -> std::string"""
        return _fft_swig.goertzel_fc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(goertzel_fc_sptr self) -> std::string"""
        return _fft_swig.goertzel_fc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(goertzel_fc_sptr self) -> io_signature_sptr"""
        return _fft_swig.goertzel_fc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(goertzel_fc_sptr self) -> io_signature_sptr"""
        return _fft_swig.goertzel_fc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(goertzel_fc_sptr self) -> long"""
        return _fft_swig.goertzel_fc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(goertzel_fc_sptr self) -> basic_block_sptr"""
        return _fft_swig.goertzel_fc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(goertzel_fc_sptr self, int ninputs, int noutputs) -> bool"""
        return _fft_swig.goertzel_fc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(goertzel_fc_sptr self) -> std::string"""
        return _fft_swig.goertzel_fc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(goertzel_fc_sptr self, std::string name)"""
        return _fft_swig.goertzel_fc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(goertzel_fc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _fft_swig.goertzel_fc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(goertzel_fc_sptr self) -> swig_int_ptr"""
        return _fft_swig.goertzel_fc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(goertzel_fc_sptr self) -> swig_int_ptr"""
        return _fft_swig.goertzel_fc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(goertzel_fc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _fft_swig.goertzel_fc_sptr_message_subscribers(self, *args, **kwargs)

goertzel_fc_sptr_swigregister = _fft_swig.goertzel_fc_sptr_swigregister
goertzel_fc_sptr_swigregister(goertzel_fc_sptr)

goertzel_fc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
goertzel_fc = goertzel_fc.make;

class ctrlport_probe_psd(object):
    """
    A ControlPort probe to export vectors of signals.

    This block acts as a sink in the flowgraph but also exports vectors of complex samples over ControlPort. This block holds the latest  number of complex samples so that every query by a ControlPort client will get the same length vector.

    Constructor Specific Documentation:

    Make a ControlPort probe block.

    Args:
        id : A string ID to name the probe over ControlPort.
        desc : A string describing the probe.
        len : Number of samples to transmit.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(std::string const & id, std::string const & desc, int len) -> ctrlport_probe_psd_sptr

        A ControlPort probe to export vectors of signals.

        This block acts as a sink in the flowgraph but also exports vectors of complex samples over ControlPort. This block holds the latest  number of complex samples so that every query by a ControlPort client will get the same length vector.

        Constructor Specific Documentation:

        Make a ControlPort probe block.

        Args:
            id : A string ID to name the probe over ControlPort.
            desc : A string describing the probe.
            len : Number of samples to transmit.
        """
        return _fft_swig.ctrlport_probe_psd_make(*args, **kwargs)

    make = staticmethod(make)
    def get(self):
        """get(ctrlport_probe_psd self) -> pmt_vector_cfloat"""
        return _fft_swig.ctrlport_probe_psd_get(self)

    def set_length(self, *args, **kwargs):
        """set_length(ctrlport_probe_psd self, int len)"""
        return _fft_swig.ctrlport_probe_psd_set_length(self, *args, **kwargs)

    def length(self):
        """
        length(ctrlport_probe_psd self) -> int

        Return the number of elements in v.
        """
        return _fft_swig.ctrlport_probe_psd_length(self)

    __swig_destroy__ = _fft_swig.delete_ctrlport_probe_psd
    __del__ = lambda self : None;
ctrlport_probe_psd_swigregister = _fft_swig.ctrlport_probe_psd_swigregister
ctrlport_probe_psd_swigregister(ctrlport_probe_psd)

def ctrlport_probe_psd_make(*args, **kwargs):
  """
    ctrlport_probe_psd_make(std::string const & id, std::string const & desc, int len) -> ctrlport_probe_psd_sptr

    A ControlPort probe to export vectors of signals.

    This block acts as a sink in the flowgraph but also exports vectors of complex samples over ControlPort. This block holds the latest  number of complex samples so that every query by a ControlPort client will get the same length vector.

    Constructor Specific Documentation:

    Make a ControlPort probe block.

    Args:
        id : A string ID to name the probe over ControlPort.
        desc : A string describing the probe.
        len : Number of samples to transmit.
    """
  return _fft_swig.ctrlport_probe_psd_make(*args, **kwargs)

class ctrlport_probe_psd_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::fft::ctrlport_probe_psd)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::fft::ctrlport_probe_psd)> self) -> ctrlport_probe_psd_sptr
        __init__(boost::shared_ptr<(gr::fft::ctrlport_probe_psd)> self, ctrlport_probe_psd p) -> ctrlport_probe_psd_sptr
        """
        this = _fft_swig.new_ctrlport_probe_psd_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(ctrlport_probe_psd_sptr self) -> ctrlport_probe_psd"""
        return _fft_swig.ctrlport_probe_psd_sptr___deref__(self)

    __swig_destroy__ = _fft_swig.delete_ctrlport_probe_psd_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(ctrlport_probe_psd_sptr self, std::string const & id, std::string const & desc, int len) -> ctrlport_probe_psd_sptr

        A ControlPort probe to export vectors of signals.

        This block acts as a sink in the flowgraph but also exports vectors of complex samples over ControlPort. This block holds the latest  number of complex samples so that every query by a ControlPort client will get the same length vector.

        Constructor Specific Documentation:

        Make a ControlPort probe block.

        Args:
            id : A string ID to name the probe over ControlPort.
            desc : A string describing the probe.
            len : Number of samples to transmit.
        """
        return _fft_swig.ctrlport_probe_psd_sptr_make(self, *args, **kwargs)

    def get(self):
        """get(ctrlport_probe_psd_sptr self) -> pmt_vector_cfloat"""
        return _fft_swig.ctrlport_probe_psd_sptr_get(self)

    def set_length(self, *args, **kwargs):
        """set_length(ctrlport_probe_psd_sptr self, int len)"""
        return _fft_swig.ctrlport_probe_psd_sptr_set_length(self, *args, **kwargs)

    def length(self):
        """
        length(ctrlport_probe_psd_sptr self) -> int

        Return the number of elements in v.
        """
        return _fft_swig.ctrlport_probe_psd_sptr_length(self)

    def history(self):
        """history(ctrlport_probe_psd_sptr self) -> unsigned int"""
        return _fft_swig.ctrlport_probe_psd_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(ctrlport_probe_psd_sptr self, int which, int delay)
        declare_sample_delay(ctrlport_probe_psd_sptr self, unsigned int delay)
        """
        return _fft_swig.ctrlport_probe_psd_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(ctrlport_probe_psd_sptr self, int which) -> unsigned int"""
        return _fft_swig.ctrlport_probe_psd_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(ctrlport_probe_psd_sptr self) -> int"""
        return _fft_swig.ctrlport_probe_psd_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(ctrlport_probe_psd_sptr self) -> double"""
        return _fft_swig.ctrlport_probe_psd_sptr_relative_rate(self)

    def start(self):
        """start(ctrlport_probe_psd_sptr self) -> bool"""
        return _fft_swig.ctrlport_probe_psd_sptr_start(self)

    def stop(self):
        """stop(ctrlport_probe_psd_sptr self) -> bool"""
        return _fft_swig.ctrlport_probe_psd_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(ctrlport_probe_psd_sptr self, unsigned int which_input) -> uint64_t"""
        return _fft_swig.ctrlport_probe_psd_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(ctrlport_probe_psd_sptr self, unsigned int which_output) -> uint64_t"""
        return _fft_swig.ctrlport_probe_psd_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(ctrlport_probe_psd_sptr self) -> int"""
        return _fft_swig.ctrlport_probe_psd_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(ctrlport_probe_psd_sptr self, int m)"""
        return _fft_swig.ctrlport_probe_psd_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ctrlport_probe_psd_sptr self)"""
        return _fft_swig.ctrlport_probe_psd_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ctrlport_probe_psd_sptr self) -> bool"""
        return _fft_swig.ctrlport_probe_psd_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(ctrlport_probe_psd_sptr self, int m)"""
        return _fft_swig.ctrlport_probe_psd_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(ctrlport_probe_psd_sptr self) -> int"""
        return _fft_swig.ctrlport_probe_psd_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(ctrlport_probe_psd_sptr self, int i) -> long"""
        return _fft_swig.ctrlport_probe_psd_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ctrlport_probe_psd_sptr self, long max_output_buffer)
        set_max_output_buffer(ctrlport_probe_psd_sptr self, int port, long max_output_buffer)
        """
        return _fft_swig.ctrlport_probe_psd_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(ctrlport_probe_psd_sptr self, int i) -> long"""
        return _fft_swig.ctrlport_probe_psd_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ctrlport_probe_psd_sptr self, long min_output_buffer)
        set_min_output_buffer(ctrlport_probe_psd_sptr self, int port, long min_output_buffer)
        """
        return _fft_swig.ctrlport_probe_psd_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(ctrlport_probe_psd_sptr self) -> float"""
        return _fft_swig.ctrlport_probe_psd_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(ctrlport_probe_psd_sptr self) -> float"""
        return _fft_swig.ctrlport_probe_psd_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ctrlport_probe_psd_sptr self) -> float"""
        return _fft_swig.ctrlport_probe_psd_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(ctrlport_probe_psd_sptr self) -> float"""
        return _fft_swig.ctrlport_probe_psd_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(ctrlport_probe_psd_sptr self) -> float"""
        return _fft_swig.ctrlport_probe_psd_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(ctrlport_probe_psd_sptr self) -> float"""
        return _fft_swig.ctrlport_probe_psd_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ctrlport_probe_psd_sptr self, int which) -> float
        pc_input_buffers_full(ctrlport_probe_psd_sptr self) -> pmt_vector_float
        """
        return _fft_swig.ctrlport_probe_psd_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(ctrlport_probe_psd_sptr self, int which) -> float
        pc_input_buffers_full_avg(ctrlport_probe_psd_sptr self) -> pmt_vector_float
        """
        return _fft_swig.ctrlport_probe_psd_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ctrlport_probe_psd_sptr self, int which) -> float
        pc_input_buffers_full_var(ctrlport_probe_psd_sptr self) -> pmt_vector_float
        """
        return _fft_swig.ctrlport_probe_psd_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ctrlport_probe_psd_sptr self, int which) -> float
        pc_output_buffers_full(ctrlport_probe_psd_sptr self) -> pmt_vector_float
        """
        return _fft_swig.ctrlport_probe_psd_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(ctrlport_probe_psd_sptr self, int which) -> float
        pc_output_buffers_full_avg(ctrlport_probe_psd_sptr self) -> pmt_vector_float
        """
        return _fft_swig.ctrlport_probe_psd_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ctrlport_probe_psd_sptr self, int which) -> float
        pc_output_buffers_full_var(ctrlport_probe_psd_sptr self) -> pmt_vector_float
        """
        return _fft_swig.ctrlport_probe_psd_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(ctrlport_probe_psd_sptr self) -> float"""
        return _fft_swig.ctrlport_probe_psd_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(ctrlport_probe_psd_sptr self) -> float"""
        return _fft_swig.ctrlport_probe_psd_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(ctrlport_probe_psd_sptr self) -> float"""
        return _fft_swig.ctrlport_probe_psd_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(ctrlport_probe_psd_sptr self) -> float"""
        return _fft_swig.ctrlport_probe_psd_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(ctrlport_probe_psd_sptr self) -> float"""
        return _fft_swig.ctrlport_probe_psd_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(ctrlport_probe_psd_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _fft_swig.ctrlport_probe_psd_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(ctrlport_probe_psd_sptr self)"""
        return _fft_swig.ctrlport_probe_psd_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(ctrlport_probe_psd_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _fft_swig.ctrlport_probe_psd_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(ctrlport_probe_psd_sptr self) -> int"""
        return _fft_swig.ctrlport_probe_psd_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(ctrlport_probe_psd_sptr self) -> int"""
        return _fft_swig.ctrlport_probe_psd_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(ctrlport_probe_psd_sptr self, int priority) -> int"""
        return _fft_swig.ctrlport_probe_psd_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(ctrlport_probe_psd_sptr self) -> std::string"""
        return _fft_swig.ctrlport_probe_psd_sptr_name(self)

    def symbol_name(self):
        """symbol_name(ctrlport_probe_psd_sptr self) -> std::string"""
        return _fft_swig.ctrlport_probe_psd_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(ctrlport_probe_psd_sptr self) -> io_signature_sptr"""
        return _fft_swig.ctrlport_probe_psd_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(ctrlport_probe_psd_sptr self) -> io_signature_sptr"""
        return _fft_swig.ctrlport_probe_psd_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(ctrlport_probe_psd_sptr self) -> long"""
        return _fft_swig.ctrlport_probe_psd_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(ctrlport_probe_psd_sptr self) -> basic_block_sptr"""
        return _fft_swig.ctrlport_probe_psd_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(ctrlport_probe_psd_sptr self, int ninputs, int noutputs) -> bool"""
        return _fft_swig.ctrlport_probe_psd_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(ctrlport_probe_psd_sptr self) -> std::string"""
        return _fft_swig.ctrlport_probe_psd_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(ctrlport_probe_psd_sptr self, std::string name)"""
        return _fft_swig.ctrlport_probe_psd_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(ctrlport_probe_psd_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _fft_swig.ctrlport_probe_psd_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(ctrlport_probe_psd_sptr self) -> swig_int_ptr"""
        return _fft_swig.ctrlport_probe_psd_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(ctrlport_probe_psd_sptr self) -> swig_int_ptr"""
        return _fft_swig.ctrlport_probe_psd_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(ctrlport_probe_psd_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _fft_swig.ctrlport_probe_psd_sptr_message_subscribers(self, *args, **kwargs)

ctrlport_probe_psd_sptr_swigregister = _fft_swig.ctrlport_probe_psd_sptr_swigregister
ctrlport_probe_psd_sptr_swigregister(ctrlport_probe_psd_sptr)

ctrlport_probe_psd_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ctrlport_probe_psd = ctrlport_probe_psd.make;




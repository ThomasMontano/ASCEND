/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      register int i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,				    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,				    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = PyBaseObject_Type.tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p__cc_mode_t swig_types[0]
#define SWIGTYPE_p_allocator_type swig_types[1]
#define SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t swig_types[2]
#define SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t swig_types[3]
#define SWIGTYPE_p_boost__shared_ptrT_gr__block_detail_t swig_types[4]
#define SWIGTYPE_p_boost__shared_ptrT_gr__block_t swig_types[5]
#define SWIGTYPE_p_boost__shared_ptrT_gr__buffer_reader_t swig_types[6]
#define SWIGTYPE_p_boost__shared_ptrT_gr__buffer_t swig_types[7]
#define SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t swig_types[8]
#define SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t swig_types[9]
#define SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t swig_types[10]
#define SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__fec_mtrx_t swig_types[11]
#define SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_G_matrix_t swig_types[12]
#define SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_H_matrix_t swig_types[13]
#define SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__matrix_t swig_types[14]
#define SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t swig_types[15]
#define SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t swig_types[16]
#define SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t swig_types[17]
#define SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t swig_types[18]
#define SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t swig_types[19]
#define SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t swig_types[20]
#define SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t swig_types[21]
#define SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t swig_types[22]
#define SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t swig_types[23]
#define SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t swig_types[24]
#define SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t swig_types[25]
#define SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t swig_types[26]
#define SWIGTYPE_p_boost__shared_ptrT_gr__flat_flowgraph_t swig_types[27]
#define SWIGTYPE_p_boost__shared_ptrT_gr__flowgraph_t swig_types[28]
#define SWIGTYPE_p_boost__shared_ptrT_gr__hier_block2_t swig_types[29]
#define SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t swig_types[30]
#define SWIGTYPE_p_boost__shared_ptrT_gr__top_block_t swig_types[31]
#define SWIGTYPE_p_buf_sptr swig_types[32]
#define SWIGTYPE_p_char swig_types[33]
#define SWIGTYPE_p_const_reference swig_types[34]
#define SWIGTYPE_p_decision_t swig_types[35]
#define SWIGTYPE_p_difference_type swig_types[36]
#define SWIGTYPE_p_double swig_types[37]
#define SWIGTYPE_p_float swig_types[38]
#define SWIGTYPE_p_gr__basic_block swig_types[39]
#define SWIGTYPE_p_gr__block swig_types[40]
#define SWIGTYPE_p_gr__block_gateway swig_types[41]
#define SWIGTYPE_p_gr__endianness_t swig_types[42]
#define SWIGTYPE_p_gr__fec__async_decoder swig_types[43]
#define SWIGTYPE_p_gr__fec__async_encoder swig_types[44]
#define SWIGTYPE_p_gr__fec__ber_bf swig_types[45]
#define SWIGTYPE_p_gr__fec__code__block_data swig_types[46]
#define SWIGTYPE_p_gr__fec__code__cc_decoder swig_types[47]
#define SWIGTYPE_p_gr__fec__code__cc_encoder swig_types[48]
#define SWIGTYPE_p_gr__fec__code__ccsds_encoder swig_types[49]
#define SWIGTYPE_p_gr__fec__code__dummy_decoder swig_types[50]
#define SWIGTYPE_p_gr__fec__code__dummy_encoder swig_types[51]
#define SWIGTYPE_p_gr__fec__code__fec_mtrx swig_types[52]
#define SWIGTYPE_p_gr__fec__code__ldpc_G_matrix swig_types[53]
#define SWIGTYPE_p_gr__fec__code__ldpc_H_matrix swig_types[54]
#define SWIGTYPE_p_gr__fec__code__ldpc_bit_flip_decoder swig_types[55]
#define SWIGTYPE_p_gr__fec__code__ldpc_gen_mtrx_encoder swig_types[56]
#define SWIGTYPE_p_gr__fec__code__ldpc_par_mtrx_encoder swig_types[57]
#define SWIGTYPE_p_gr__fec__code__matrix swig_types[58]
#define SWIGTYPE_p_gr__fec__code__polar_common swig_types[59]
#define SWIGTYPE_p_gr__fec__code__polar_decoder_common swig_types[60]
#define SWIGTYPE_p_gr__fec__code__polar_decoder_sc swig_types[61]
#define SWIGTYPE_p_gr__fec__code__polar_decoder_sc_list swig_types[62]
#define SWIGTYPE_p_gr__fec__code__polar_decoder_sc_systematic swig_types[63]
#define SWIGTYPE_p_gr__fec__code__polar_encoder swig_types[64]
#define SWIGTYPE_p_gr__fec__code__polar_encoder_systematic swig_types[65]
#define SWIGTYPE_p_gr__fec__code__repetition_decoder swig_types[66]
#define SWIGTYPE_p_gr__fec__code__repetition_encoder swig_types[67]
#define SWIGTYPE_p_gr__fec__conv_bit_corr_bb swig_types[68]
#define SWIGTYPE_p_gr__fec__decode_ccsds_27_fb swig_types[69]
#define SWIGTYPE_p_gr__fec__decoder swig_types[70]
#define SWIGTYPE_p_gr__fec__depuncture_bb swig_types[71]
#define SWIGTYPE_p_gr__fec__encode_ccsds_27_bb swig_types[72]
#define SWIGTYPE_p_gr__fec__encoder swig_types[73]
#define SWIGTYPE_p_gr__fec__generic_decoder swig_types[74]
#define SWIGTYPE_p_gr__fec__generic_encoder swig_types[75]
#define SWIGTYPE_p_gr__fec__ldpc_decoder swig_types[76]
#define SWIGTYPE_p_gr__fec__ldpc_encoder swig_types[77]
#define SWIGTYPE_p_gr__fec__puncture_bb swig_types[78]
#define SWIGTYPE_p_gr__fec__puncture_ff swig_types[79]
#define SWIGTYPE_p_gr__fec__tagged_decoder swig_types[80]
#define SWIGTYPE_p_gr__fec__tagged_encoder swig_types[81]
#define SWIGTYPE_p_gr__fec__tpc_decoder swig_types[82]
#define SWIGTYPE_p_gr__fec__tpc_encoder swig_types[83]
#define SWIGTYPE_p_gr__hier_block2 swig_types[84]
#define SWIGTYPE_p_gr__rt_status_t swig_types[85]
#define SWIGTYPE_p_gr__sync_block swig_types[86]
#define SWIGTYPE_p_gr__sync_decimator swig_types[87]
#define SWIGTYPE_p_gr__sync_interpolator swig_types[88]
#define SWIGTYPE_p_gr__tagged_stream_block swig_types[89]
#define SWIGTYPE_p_gr__top_block swig_types[90]
#define SWIGTYPE_p_gr_vector_const_void_star swig_types[91]
#define SWIGTYPE_p_gr_vector_int swig_types[92]
#define SWIGTYPE_p_gr_vector_void_star swig_types[93]
#define SWIGTYPE_p_int swig_types[94]
#define SWIGTYPE_p_long_long swig_types[95]
#define SWIGTYPE_p_metric_t swig_types[96]
#define SWIGTYPE_p_reference swig_types[97]
#define SWIGTYPE_p_short swig_types[98]
#define SWIGTYPE_p_signed_char swig_types[99]
#define SWIGTYPE_p_size_type swig_types[100]
#define SWIGTYPE_p_sptr swig_types[101]
#define SWIGTYPE_p_std__complexT_double_t swig_types[102]
#define SWIGTYPE_p_std__complexT_float_t swig_types[103]
#define SWIGTYPE_p_std__vectorT_unsigned_long_long_std__allocatorT_unsigned_long_long_t_t swig_types[104]
#define SWIGTYPE_p_unsigned_char swig_types[105]
#define SWIGTYPE_p_unsigned_int swig_types[106]
#define SWIGTYPE_p_unsigned_long_long swig_types[107]
#define SWIGTYPE_p_unsigned_short swig_types[108]
#define SWIGTYPE_p_v swig_types[109]
#define SWIGTYPE_p_value_type swig_types[110]
static swig_type_info *swig_types[112];
static swig_module_info swig_module = {swig_types, 111, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif
#if (PY_VERSION_HEX <= 0x02020000)
# error "This python version requires swig to be run with the '-nomodern' option"
#endif
#if (PY_VERSION_HEX <= 0x02020000)
# error "This python version requires swig to be run with the '-nomodernargs' option"
#endif

/*-----------------------------------------------
              @(target):= _fec_swig.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__fec_swig

#else
#  define SWIG_init    init_fec_swig

#endif
#define SWIG_name    "_fec_swig"

#define SWIGVERSION 0x020011 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <string>



#define GR_PYTHON_BLOCKING_CODE(code) {                                 \
    PyThreadState *_save;                                               \
    _save = PyEval_SaveThread();                                        \
    try{code}                                                           \
    catch(...){PyEval_RestoreThread(_save); throw;}                     \
    PyEval_RestoreThread(_save);                                        \
}



#include "gnuradio_swig_bug_workaround.h"	// mandatory bug fix


#include <cstddef>


#include <stdexcept>


  #include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if ( j < 0 ) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      if (ii > jj) {
        typename Sequence::const_reverse_iterator sb = self->rbegin();
        typename Sequence::const_reverse_iterator se = self->rbegin();
        std::advance(sb,size-ii-1);
        std::advance(se,size-jj-1);
        typename Sequence::const_reverse_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<-step && it!=se; ++c)
            it++;
        }
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj < ii)
        jj = ii;
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount; ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      if (jj > ii)
        jj = ii;
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount; ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj > ii) {
        typename Sequence::iterator sb = self->begin();
        std::advance(sb,ii);
        if (step == 1) {
          typename Sequence::iterator se = self->begin();
          std::advance(se,jj);
          self->erase(sb,se);
        } else {
          typename Sequence::iterator it = sb;
          size_t delcount = (jj - ii + step - 1) / step;
          while (delcount) {
            it = self->erase(it);
            for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
              it++;
            delcount--;
          }
        }
      }
    } else {
      if (ii > jj) {
        typename Sequence::reverse_iterator sb = self->rbegin();
        std::advance(sb,size-ii-1);
        typename Sequence::reverse_iterator it = sb;
        size_t delcount = (ii - jj - step - 1) / -step;
        while (delcount) {
          it = typename Sequence::reverse_iterator(self->erase((++it).base()));
          for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
            it++;
          delcount--;
        }
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


#include <gnuradio/block.h>
#include <gnuradio/sync_block.h>
#include <gnuradio/sync_decimator.h>
#include <gnuradio/sync_interpolator.h>
#include <gnuradio/tagged_stream_block.h>
#include <gnuradio/block_gateway.h>
#include <gnuradio/feval.h>
#include <gnuradio/py_feval.h>
#include <gnuradio/high_res_timer.h>


  #define SWIG_From_long   PyLong_FromLong 


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyLong_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
#if PY_VERSION_HEX >= 0x03000000
      {
        long v = PyLong_AsLong(obj);
        if (!PyErr_Occurred()) {
          if (v < 0) {
            return SWIG_OverflowError;
          }
        } else {
          PyErr_Clear();
        }
      }
#endif
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


#include "gnuradio/fec/generic_decoder.h"
#include "gnuradio/fec/generic_encoder.h"
#include "gnuradio/fec/decoder.h"
#include "gnuradio/fec/encoder.h"
#include "gnuradio/fec/tagged_decoder.h"
#include "gnuradio/fec/tagged_encoder.h"
#include "gnuradio/fec/async_decoder.h"
#include "gnuradio/fec/async_encoder.h"
#include "gnuradio/fec/cc_decoder.h"
#include "gnuradio/fec/cc_encoder.h"
#include "gnuradio/fec/ccsds_encoder.h"
#include "gnuradio/fec/dummy_decoder.h"
#include "gnuradio/fec/dummy_encoder.h"
#include "gnuradio/fec/repetition_decoder.h"
#include "gnuradio/fec/repetition_encoder.h"
#include "gnuradio/fec/decode_ccsds_27_fb.h"
#include "gnuradio/fec/encode_ccsds_27_bb.h"
#include "gnuradio/fec/ber_bf.h"
#include "gnuradio/fec/conv_bit_corr_bb.h"
#include "gnuradio/fec/puncture_bb.h"
#include "gnuradio/fec/puncture_ff.h"
#include "gnuradio/fec/depuncture_bb.h"
#include "gnuradio/fec/ldpc_encoder.h"
#include "gnuradio/fec/ldpc_decoder.h"
#include "gnuradio/fec/tpc_encoder.h"
#include "gnuradio/fec/tpc_decoder.h"
#include "gnuradio/fec/polar_encoder.h"
#include "gnuradio/fec/polar_decoder_sc.h"
#include "gnuradio/fec/polar_common.h"
#include "gnuradio/fec/polar_decoder_sc_list.h"
#include "gnuradio/fec/polar_decoder_common.h"
#include "gnuradio/fec/polar_encoder_systematic.h"
#include "gnuradio/fec/polar_decoder_sc_systematic.h"


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


namespace swig {
  template <> struct traits<int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };  
  template <>  struct traits_asval<int > {   
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_int (obj, val);
    }
  };
  template <>  struct traits_from<int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int  (val);
    }
  };
}


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<int, std::allocator< int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "int" "," "std::allocator< int >" " >";
	  }
	};
      }
    

/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (PyObject * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


namespace swig {
  template <> struct traits<char > {
    typedef value_category category;
    static const char* type_name() { return"char"; }
  };  
  template <>  struct traits_asval<char > {   
    typedef char value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_char (obj, val);
    }
  };
  template <>  struct traits_from<char > {
    typedef char value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_char  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<char, std::allocator< char > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "char" "," "std::allocator< char >" " >";
	  }
	};
      }
    

#include "gnuradio/fec/fec_mtrx.h"
#include "gnuradio/fec/ldpc_H_matrix.h"
#include "gnuradio/fec/ldpc_G_matrix.h"
#include "gnuradio/fec/ldpc_gen_mtrx_encoder.h"
#include "gnuradio/fec/ldpc_par_mtrx_encoder.h"
#include "gnuradio/fec/ldpc_bit_flip_decoder.h"
#include "gnuradio/fec/ldpc_decoder.h"


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyLong_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyLong_FromLong(static_cast< long >(value)); 
}


namespace swig {
  template <> struct traits<float > {
    typedef value_category category;
    static const char* type_name() { return"float"; }
  };  
  template <>  struct traits_asval<float > {   
    typedef float value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_float (obj, val);
    }
  };
  template <>  struct traits_from<float > {
    typedef float value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_float  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<float, std::allocator< float > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "float" "," "std::allocator< float >" " >";
	  }
	};
      }
    
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_high_res_timer_now(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::high_res_timer_type result;
  
  {
    try {
      result = (gr::high_res_timer_type)gr::high_res_timer_now();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_high_res_timer_now_perfmon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::high_res_timer_type result;
  
  {
    try {
      result = (gr::high_res_timer_type)gr::high_res_timer_now_perfmon();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_high_res_timer_tps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::high_res_timer_type result;
  
  {
    try {
      result = (gr::high_res_timer_type)gr::high_res_timer_tps();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_high_res_timer_epoch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::high_res_timer_type result;
  
  {
    try {
      result = (gr::high_res_timer_type)gr::high_res_timer_epoch();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decision_t_t_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  decision_t *arg1 = (decision_t *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"decision_t_t_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_decision_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decision_t_t_set" "', argument " "1"" of type '" "decision_t *""'"); 
  }
  arg1 = reinterpret_cast< decision_t * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "decision_t_t_set" "', argument " "2"" of type '" "unsigned char *""'"); 
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  if (arg1) (arg1)->t = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decision_t_t_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  decision_t *arg1 = (decision_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned char *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"decision_t_t_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_decision_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decision_t_t_get" "', argument " "1"" of type '" "decision_t *""'"); 
  }
  arg1 = reinterpret_cast< decision_t * >(argp1);
  result = (unsigned char *) ((arg1)->t);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decision_t_w_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  decision_t *arg1 = (decision_t *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"decision_t_w_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_decision_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decision_t_w_set" "', argument " "1"" of type '" "decision_t *""'"); 
  }
  arg1 = reinterpret_cast< decision_t * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_int, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "decision_t_w_set" "', argument " "2"" of type '" "unsigned int *""'"); 
  }
  arg2 = reinterpret_cast< unsigned int * >(argp2);
  if (arg1) (arg1)->w = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decision_t_w_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  decision_t *arg1 = (decision_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"decision_t_w_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_decision_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decision_t_w_get" "', argument " "1"" of type '" "decision_t *""'"); 
  }
  arg1 = reinterpret_cast< decision_t * >(argp1);
  result = (unsigned int *) ((arg1)->w);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decision_t_s_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  decision_t *arg1 = (decision_t *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"decision_t_s_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_decision_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decision_t_s_set" "', argument " "1"" of type '" "decision_t *""'"); 
  }
  arg1 = reinterpret_cast< decision_t * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_short, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "decision_t_s_set" "', argument " "2"" of type '" "unsigned short *""'"); 
  }
  arg2 = reinterpret_cast< unsigned short * >(argp2);
  if (arg1) (arg1)->s = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decision_t_s_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  decision_t *arg1 = (decision_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned short *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"decision_t_s_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_decision_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decision_t_s_get" "', argument " "1"" of type '" "decision_t *""'"); 
  }
  arg1 = reinterpret_cast< decision_t * >(argp1);
  result = (unsigned short *) ((arg1)->s);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_short, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decision_t_c_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  decision_t *arg1 = (decision_t *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"decision_t_c_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_decision_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decision_t_c_set" "', argument " "1"" of type '" "decision_t *""'"); 
  }
  arg1 = reinterpret_cast< decision_t * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "decision_t_c_set" "', argument " "2"" of type '" "unsigned char *""'"); 
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  if (arg1) (arg1)->c = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decision_t_c_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  decision_t *arg1 = (decision_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned char *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"decision_t_c_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_decision_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decision_t_c_get" "', argument " "1"" of type '" "decision_t *""'"); 
  }
  arg1 = reinterpret_cast< decision_t * >(argp1);
  result = (unsigned char *) ((arg1)->c);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_decision_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  decision_t *result = 0 ;
  
  {
    try {
      result = (decision_t *)new decision_t();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_decision_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_decision_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  decision_t *arg1 = (decision_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_decision_t",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_decision_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_decision_t" "', argument " "1"" of type '" "decision_t *""'"); 
  }
  arg1 = reinterpret_cast< decision_t * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *decision_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_decision_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_metric_t_t_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  metric_t *arg1 = (metric_t *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"metric_t_t_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_metric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "metric_t_t_set" "', argument " "1"" of type '" "metric_t *""'"); 
  }
  arg1 = reinterpret_cast< metric_t * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "metric_t_t_set" "', argument " "2"" of type '" "unsigned char *""'"); 
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  if (arg1) (arg1)->t = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_metric_t_t_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  metric_t *arg1 = (metric_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned char *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"metric_t_t_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_metric_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "metric_t_t_get" "', argument " "1"" of type '" "metric_t *""'"); 
  }
  arg1 = reinterpret_cast< metric_t * >(argp1);
  result = (unsigned char *) ((arg1)->t);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_metric_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  metric_t *result = 0 ;
  
  {
    try {
      result = (metric_t *)new metric_t();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_metric_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_metric_t(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  metric_t *arg1 = (metric_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_metric_t",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_metric_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_metric_t" "', argument " "1"" of type '" "metric_t *""'"); 
  }
  arg1 = reinterpret_cast< metric_t * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *metric_t_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_metric_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_v_metrics_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  v *arg1 = (v *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"v_metrics_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_v, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "v_metrics_set" "', argument " "1"" of type '" "v *""'"); 
  }
  arg1 = reinterpret_cast< v * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "v_metrics_set" "', argument " "2"" of type '" "unsigned char *""'"); 
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  if (arg1) (arg1)->metrics = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_v_metrics_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  v *arg1 = (v *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned char *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"v_metrics_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_v, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "v_metrics_get" "', argument " "1"" of type '" "v *""'"); 
  }
  arg1 = reinterpret_cast< v * >(argp1);
  result = (unsigned char *) ((arg1)->metrics);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_v_old_metrics_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  v *arg1 = (v *) 0 ;
  metric_t *arg2 = (metric_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"v_old_metrics_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_v, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "v_old_metrics_set" "', argument " "1"" of type '" "v *""'"); 
  }
  arg1 = reinterpret_cast< v * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_metric_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "v_old_metrics_set" "', argument " "2"" of type '" "metric_t *""'"); 
  }
  arg2 = reinterpret_cast< metric_t * >(argp2);
  if (arg1) (arg1)->old_metrics = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_v_old_metrics_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  v *arg1 = (v *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  metric_t *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"v_old_metrics_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_v, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "v_old_metrics_get" "', argument " "1"" of type '" "v *""'"); 
  }
  arg1 = reinterpret_cast< v * >(argp1);
  result = (metric_t *)& ((arg1)->old_metrics);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_metric_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_v_new_metrics_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  v *arg1 = (v *) 0 ;
  metric_t *arg2 = (metric_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"v_new_metrics_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_v, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "v_new_metrics_set" "', argument " "1"" of type '" "v *""'"); 
  }
  arg1 = reinterpret_cast< v * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_metric_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "v_new_metrics_set" "', argument " "2"" of type '" "metric_t *""'"); 
  }
  arg2 = reinterpret_cast< metric_t * >(argp2);
  if (arg1) (arg1)->new_metrics = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_v_new_metrics_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  v *arg1 = (v *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  metric_t *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"v_new_metrics_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_v, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "v_new_metrics_get" "', argument " "1"" of type '" "v *""'"); 
  }
  arg1 = reinterpret_cast< v * >(argp1);
  result = (metric_t *)& ((arg1)->new_metrics);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_metric_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_v_metrics1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  v *arg1 = (v *) 0 ;
  metric_t *arg2 = (metric_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"v_metrics1_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_v, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "v_metrics1_set" "', argument " "1"" of type '" "v *""'"); 
  }
  arg1 = reinterpret_cast< v * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_metric_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "v_metrics1_set" "', argument " "2"" of type '" "metric_t *""'"); 
  }
  arg2 = reinterpret_cast< metric_t * >(argp2);
  if (arg1) (arg1)->metrics1 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_v_metrics1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  v *arg1 = (v *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  metric_t *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"v_metrics1_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_v, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "v_metrics1_get" "', argument " "1"" of type '" "v *""'"); 
  }
  arg1 = reinterpret_cast< v * >(argp1);
  result = (metric_t *)& ((arg1)->metrics1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_metric_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_v_metrics2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  v *arg1 = (v *) 0 ;
  metric_t *arg2 = (metric_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"v_metrics2_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_v, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "v_metrics2_set" "', argument " "1"" of type '" "v *""'"); 
  }
  arg1 = reinterpret_cast< v * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_metric_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "v_metrics2_set" "', argument " "2"" of type '" "metric_t *""'"); 
  }
  arg2 = reinterpret_cast< metric_t * >(argp2);
  if (arg1) (arg1)->metrics2 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_v_metrics2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  v *arg1 = (v *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  metric_t *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"v_metrics2_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_v, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "v_metrics2_get" "', argument " "1"" of type '" "v *""'"); 
  }
  arg1 = reinterpret_cast< v * >(argp1);
  result = (metric_t *)& ((arg1)->metrics2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_metric_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_v_decisions_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  v *arg1 = (v *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"v_decisions_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_v, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "v_decisions_set" "', argument " "1"" of type '" "v *""'"); 
  }
  arg1 = reinterpret_cast< v * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "v_decisions_set" "', argument " "2"" of type '" "unsigned char *""'"); 
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  if (arg1) (arg1)->decisions = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_v_decisions_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  v *arg1 = (v *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned char *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"v_decisions_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_v, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "v_decisions_get" "', argument " "1"" of type '" "v *""'"); 
  }
  arg1 = reinterpret_cast< v * >(argp1);
  result = (unsigned char *) ((arg1)->decisions);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_v(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  v *result = 0 ;
  
  {
    try {
      result = (v *)new v();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_v, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_v(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  v *arg1 = (v *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_v",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_v, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_v" "', argument " "1"" of type '" "v *""'"); 
  }
  arg1 = reinterpret_cast< v * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *v_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_v, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_generic_encoder_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_encoder > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::fec::generic_encoder > *)new boost::shared_ptr< gr::fec::generic_encoder >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_generic_encoder_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_encoder *arg1 = (gr::fec::generic_encoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::fec::generic_encoder > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_generic_encoder_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_generic_encoder_sptr" "', argument " "1"" of type '" "gr::fec::generic_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_encoder * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::fec::generic_encoder > *)new boost::shared_ptr< gr::fec::generic_encoder >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_generic_encoder_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_generic_encoder_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__fec__generic_encoder, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_generic_encoder_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_generic_encoder_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::fec::generic_encoder >::shared_ptr()\n"
    "    boost::shared_ptr< gr::fec::generic_encoder >::shared_ptr(gr::fec::generic_encoder *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_generic_encoder_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_encoder > *arg1 = (boost::shared_ptr< gr::fec::generic_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::fec::generic_encoder *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_encoder_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_encoder_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_encoder > * >(argp1);
  {
    try {
      result = (gr::fec::generic_encoder *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__fec__generic_encoder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_generic_encoder_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_encoder > *arg1 = (boost::shared_ptr< gr::fec::generic_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_generic_encoder_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_generic_encoder_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_encoder > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_encoder_sptr_generic_work(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_encoder > *arg1 = (boost::shared_ptr< gr::fec::generic_encoder > *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "in_buffer",(char *) "out_buffer", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:generic_encoder_sptr_generic_work",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_encoder_sptr_generic_work" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_encoder > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "generic_encoder_sptr_generic_work" "', argument " "2"" of type '" "void *""'"); 
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "generic_encoder_sptr_generic_work" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      (*arg1)->generic_work(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_encoder_sptr_base_unique_id_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_encoder > *arg1 = (boost::shared_ptr< gr::fec::generic_encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_encoder_sptr_base_unique_id_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_encoder_sptr_base_unique_id_set" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "generic_encoder_sptr_base_unique_id_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      if (arg1) (*arg1)->base_unique_id = arg2;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_encoder_sptr_base_unique_id_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_encoder > *arg1 = (boost::shared_ptr< gr::fec::generic_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_encoder_sptr_base_unique_id_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_encoder_sptr_base_unique_id_get" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_encoder > * >(argp1);
  {
    try {
      result = (int) (gr::fec::generic_encoder::base_unique_id);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_encoder_sptr_my_id_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_encoder > *arg1 = (boost::shared_ptr< gr::fec::generic_encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_encoder_sptr_my_id_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_encoder_sptr_my_id_set" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "generic_encoder_sptr_my_id_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      if (arg1) (*arg1)->my_id = arg2;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_encoder_sptr_my_id_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_encoder > *arg1 = (boost::shared_ptr< gr::fec::generic_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_encoder_sptr_my_id_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_encoder_sptr_my_id_get" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_encoder > * >(argp1);
  {
    try {
      result = (int) ((*arg1)->my_id);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_encoder_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_encoder > *arg1 = (boost::shared_ptr< gr::fec::generic_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_encoder_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_encoder_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_encoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_encoder_sptr_d_name_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_encoder > *arg1 = (boost::shared_ptr< gr::fec::generic_encoder > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_encoder_sptr_d_name_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_encoder_sptr_d_name_set" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_encoder > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "generic_encoder_sptr_d_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "generic_encoder_sptr_d_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      if (arg1) (*arg1)->d_name = *arg2;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_encoder_sptr_d_name_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_encoder > *arg1 = (boost::shared_ptr< gr::fec::generic_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_encoder_sptr_d_name_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_encoder_sptr_d_name_get" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_encoder > * >(argp1);
  {
    try {
      result = (std::string *) & ((*arg1)->d_name);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_encoder_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_encoder > *arg1 = (boost::shared_ptr< gr::fec::generic_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_encoder_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_encoder_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_encoder_sptr_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_encoder > *arg1 = (boost::shared_ptr< gr::fec::generic_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_encoder_sptr_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_encoder_sptr_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_encoder > * >(argp1);
  {
    try {
      result = (double)(*arg1)->rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_encoder_sptr_get_input_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_encoder > *arg1 = (boost::shared_ptr< gr::fec::generic_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_encoder_sptr_get_input_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_encoder_sptr_get_input_size" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_encoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->get_input_size();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_encoder_sptr_get_output_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_encoder > *arg1 = (boost::shared_ptr< gr::fec::generic_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_encoder_sptr_get_output_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_encoder_sptr_get_output_size" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_encoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->get_output_size();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_encoder_sptr_get_input_conversion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_encoder > *arg1 = (boost::shared_ptr< gr::fec::generic_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_encoder_sptr_get_input_conversion",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_encoder_sptr_get_input_conversion" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_encoder > * >(argp1);
  {
    try {
      result = (char *)(*arg1)->get_input_conversion();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_encoder_sptr_get_output_conversion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_encoder > *arg1 = (boost::shared_ptr< gr::fec::generic_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_encoder_sptr_get_output_conversion",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_encoder_sptr_get_output_conversion" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_encoder > * >(argp1);
  {
    try {
      result = (char *)(*arg1)->get_output_conversion();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_encoder_sptr_set_frame_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_encoder > *arg1 = (boost::shared_ptr< gr::fec::generic_encoder > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_size", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:generic_encoder_sptr_set_frame_size",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_encoder_sptr_set_frame_size" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "generic_encoder_sptr_set_frame_size" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (bool)(*arg1)->set_frame_size(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *generic_encoder_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_generic_decoder_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_decoder > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::fec::generic_decoder > *)new boost::shared_ptr< gr::fec::generic_decoder >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_generic_decoder_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder *arg1 = (gr::fec::generic_decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::fec::generic_decoder > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_generic_decoder_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_generic_decoder_sptr" "', argument " "1"" of type '" "gr::fec::generic_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_decoder * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::fec::generic_decoder > *)new boost::shared_ptr< gr::fec::generic_decoder >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_generic_decoder_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_generic_decoder_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__fec__generic_decoder, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_generic_decoder_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_generic_decoder_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::fec::generic_decoder >::shared_ptr()\n"
    "    boost::shared_ptr< gr::fec::generic_decoder >::shared_ptr(gr::fec::generic_decoder *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_generic_decoder_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_decoder > *arg1 = (boost::shared_ptr< gr::fec::generic_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::fec::generic_decoder *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_decoder > * >(argp1);
  {
    try {
      result = (gr::fec::generic_decoder *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__fec__generic_decoder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_generic_decoder_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_decoder > *arg1 = (boost::shared_ptr< gr::fec::generic_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_generic_decoder_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_generic_decoder_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_decoder > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_sptr_generic_work(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_decoder > *arg1 = (boost::shared_ptr< gr::fec::generic_decoder > *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "inbuffer",(char *) "outbuffer", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:generic_decoder_sptr_generic_work",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_sptr_generic_work" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_decoder > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "generic_decoder_sptr_generic_work" "', argument " "2"" of type '" "void *""'"); 
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "generic_decoder_sptr_generic_work" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      (*arg1)->generic_work(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_sptr_base_unique_id_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_decoder > *arg1 = (boost::shared_ptr< gr::fec::generic_decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_sptr_base_unique_id_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_sptr_base_unique_id_set" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "generic_decoder_sptr_base_unique_id_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      if (arg1) (*arg1)->base_unique_id = arg2;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_sptr_base_unique_id_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_decoder > *arg1 = (boost::shared_ptr< gr::fec::generic_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_sptr_base_unique_id_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_sptr_base_unique_id_get" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_decoder > * >(argp1);
  {
    try {
      result = (int) (gr::fec::generic_decoder::base_unique_id);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_sptr_my_id_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_decoder > *arg1 = (boost::shared_ptr< gr::fec::generic_decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_sptr_my_id_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_sptr_my_id_set" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "generic_decoder_sptr_my_id_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      if (arg1) (*arg1)->my_id = arg2;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_sptr_my_id_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_decoder > *arg1 = (boost::shared_ptr< gr::fec::generic_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_sptr_my_id_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_sptr_my_id_get" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_decoder > * >(argp1);
  {
    try {
      result = (int) ((*arg1)->my_id);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_decoder > *arg1 = (boost::shared_ptr< gr::fec::generic_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_decoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_sptr_d_name_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_decoder > *arg1 = (boost::shared_ptr< gr::fec::generic_decoder > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_sptr_d_name_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_sptr_d_name_set" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_decoder > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "generic_decoder_sptr_d_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "generic_decoder_sptr_d_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      if (arg1) (*arg1)->d_name = *arg2;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_sptr_d_name_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_decoder > *arg1 = (boost::shared_ptr< gr::fec::generic_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_sptr_d_name_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_sptr_d_name_get" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_decoder > * >(argp1);
  {
    try {
      result = (std::string *) & ((*arg1)->d_name);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_decoder > *arg1 = (boost::shared_ptr< gr::fec::generic_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_sptr_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_decoder > *arg1 = (boost::shared_ptr< gr::fec::generic_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_sptr_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_sptr_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_decoder > * >(argp1);
  {
    try {
      result = (double)(*arg1)->rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_sptr_get_input_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_decoder > *arg1 = (boost::shared_ptr< gr::fec::generic_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_sptr_get_input_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_sptr_get_input_size" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_decoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->get_input_size();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_sptr_get_output_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_decoder > *arg1 = (boost::shared_ptr< gr::fec::generic_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_sptr_get_output_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_sptr_get_output_size" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_decoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->get_output_size();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_sptr_get_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_decoder > *arg1 = (boost::shared_ptr< gr::fec::generic_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_sptr_get_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_sptr_get_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_decoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->get_history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_sptr_get_shift(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_decoder > *arg1 = (boost::shared_ptr< gr::fec::generic_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_sptr_get_shift",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_sptr_get_shift" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->get_shift();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_sptr_get_input_item_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_decoder > *arg1 = (boost::shared_ptr< gr::fec::generic_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_sptr_get_input_item_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_sptr_get_input_item_size" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_decoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->get_input_item_size();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_sptr_get_output_item_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_decoder > *arg1 = (boost::shared_ptr< gr::fec::generic_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_sptr_get_output_item_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_sptr_get_output_item_size" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_decoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->get_output_item_size();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_sptr_get_input_conversion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_decoder > *arg1 = (boost::shared_ptr< gr::fec::generic_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_sptr_get_input_conversion",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_sptr_get_input_conversion" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_decoder > * >(argp1);
  {
    try {
      result = (char *)(*arg1)->get_input_conversion();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_sptr_get_output_conversion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_decoder > *arg1 = (boost::shared_ptr< gr::fec::generic_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_sptr_get_output_conversion",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_sptr_get_output_conversion" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_decoder > * >(argp1);
  {
    try {
      result = (char *)(*arg1)->get_output_conversion();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_sptr_set_frame_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_decoder > *arg1 = (boost::shared_ptr< gr::fec::generic_decoder > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_size", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:generic_decoder_sptr_set_frame_size",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_sptr_set_frame_size" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "generic_decoder_sptr_set_frame_size" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (bool)(*arg1)->set_frame_size(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_sptr_get_iterations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::generic_decoder > *arg1 = (boost::shared_ptr< gr::fec::generic_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_sptr_get_iterations",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_sptr_get_iterations" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::generic_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::generic_decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->get_iterations();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *generic_decoder_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_generic_decoder_generic_work(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder *arg1 = (gr::fec::generic_decoder *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "inbuffer",(char *) "outbuffer", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:generic_decoder_generic_work",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_generic_work" "', argument " "1"" of type '" "gr::fec::generic_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_decoder * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "generic_decoder_generic_work" "', argument " "2"" of type '" "void *""'"); 
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "generic_decoder_generic_work" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      (arg1)->generic_work(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_generic_decoder_base_unique_id_set(PyObject *_val) {
  {
    int val;
    int res = SWIG_AsVal_int(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""gr::fec::generic_decoder::base_unique_id""' of type '""int""'");
    }
    gr::fec::generic_decoder::base_unique_id = static_cast< int >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_generic_decoder_base_unique_id_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(gr::fec::generic_decoder::base_unique_id));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_generic_decoder_base_unique_id_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_generic_decoder_base_unique_id_get();
}


SWIGINTERN PyObject *_wrap_generic_decoder_base_unique_id_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_generic_decoder_base_unique_id_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_my_id_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder *arg1 = (gr::fec::generic_decoder *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_my_id_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_my_id_set" "', argument " "1"" of type '" "gr::fec::generic_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_decoder * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "generic_decoder_my_id_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->my_id = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_my_id_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder *arg1 = (gr::fec::generic_decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_my_id_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_my_id_get" "', argument " "1"" of type '" "gr::fec::generic_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_decoder * >(argp1);
  result = (int) ((arg1)->my_id);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder *arg1 = (gr::fec::generic_decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_unique_id" "', argument " "1"" of type '" "gr::fec::generic_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_decoder * >(argp1);
  {
    try {
      result = (int)(arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_d_name_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder *arg1 = (gr::fec::generic_decoder *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_d_name_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_d_name_set" "', argument " "1"" of type '" "gr::fec::generic_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_decoder * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "generic_decoder_d_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "generic_decoder_d_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->d_name = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_d_name_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder *arg1 = (gr::fec::generic_decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_d_name_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_d_name_get" "', argument " "1"" of type '" "gr::fec::generic_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_decoder * >(argp1);
  result = (std::string *) & ((arg1)->d_name);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder *arg1 = (gr::fec::generic_decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_alias" "', argument " "1"" of type '" "gr::fec::generic_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_decoder * >(argp1);
  {
    try {
      result = (arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_generic_decoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder *arg1 = (gr::fec::generic_decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_generic_decoder",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_decoder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_generic_decoder" "', argument " "1"" of type '" "gr::fec::generic_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_decoder * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder *arg1 = (gr::fec::generic_decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_rate" "', argument " "1"" of type '" "gr::fec::generic_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_decoder * >(argp1);
  {
    try {
      result = (double)(arg1)->rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_get_input_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder *arg1 = (gr::fec::generic_decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_get_input_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_get_input_size" "', argument " "1"" of type '" "gr::fec::generic_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_decoder * >(argp1);
  {
    try {
      result = (int)(arg1)->get_input_size();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_get_output_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder *arg1 = (gr::fec::generic_decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_get_output_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_get_output_size" "', argument " "1"" of type '" "gr::fec::generic_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_decoder * >(argp1);
  {
    try {
      result = (int)(arg1)->get_output_size();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_get_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder *arg1 = (gr::fec::generic_decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_get_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_get_history" "', argument " "1"" of type '" "gr::fec::generic_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_decoder * >(argp1);
  {
    try {
      result = (int)(arg1)->get_history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_get_shift(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder *arg1 = (gr::fec::generic_decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_get_shift",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_get_shift" "', argument " "1"" of type '" "gr::fec::generic_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_decoder * >(argp1);
  {
    try {
      result = (float)(arg1)->get_shift();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_get_input_item_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder *arg1 = (gr::fec::generic_decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_get_input_item_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_get_input_item_size" "', argument " "1"" of type '" "gr::fec::generic_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_decoder * >(argp1);
  {
    try {
      result = (int)(arg1)->get_input_item_size();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_get_output_item_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder *arg1 = (gr::fec::generic_decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_get_output_item_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_get_output_item_size" "', argument " "1"" of type '" "gr::fec::generic_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_decoder * >(argp1);
  {
    try {
      result = (int)(arg1)->get_output_item_size();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_get_input_conversion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder *arg1 = (gr::fec::generic_decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_get_input_conversion",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_get_input_conversion" "', argument " "1"" of type '" "gr::fec::generic_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_decoder * >(argp1);
  {
    try {
      result = (char *)(arg1)->get_input_conversion();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_get_output_conversion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder *arg1 = (gr::fec::generic_decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_get_output_conversion",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_get_output_conversion" "', argument " "1"" of type '" "gr::fec::generic_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_decoder * >(argp1);
  {
    try {
      result = (char *)(arg1)->get_output_conversion();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_set_frame_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder *arg1 = (gr::fec::generic_decoder *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_size", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:generic_decoder_set_frame_size",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_set_frame_size" "', argument " "1"" of type '" "gr::fec::generic_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_decoder * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "generic_decoder_set_frame_size" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (bool)(arg1)->set_frame_size(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_decoder_get_iterations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder *arg1 = (gr::fec::generic_decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_decoder_get_iterations",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_decoder_get_iterations" "', argument " "1"" of type '" "gr::fec::generic_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_decoder * >(argp1);
  {
    try {
      result = (float)(arg1)->get_iterations();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *generic_decoder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__generic_decoder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_get_decoder_output_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder::sptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "my_decoder", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:get_decoder_output_size",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_decoder_output_size" "', argument " "1"" of type '" "gr::fec::generic_decoder::sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_decoder_output_size" "', argument " "1"" of type '" "gr::fec::generic_decoder::sptr""'");
    } else {
      gr::fec::generic_decoder::sptr * temp = reinterpret_cast< gr::fec::generic_decoder::sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (int)gr::fec::get_decoder_output_size(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_decoder_input_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder::sptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "my_decoder", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:get_decoder_input_size",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_decoder_input_size" "', argument " "1"" of type '" "gr::fec::generic_decoder::sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_decoder_input_size" "', argument " "1"" of type '" "gr::fec::generic_decoder::sptr""'");
    } else {
      gr::fec::generic_decoder::sptr * temp = reinterpret_cast< gr::fec::generic_decoder::sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (int)gr::fec::get_decoder_input_size(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_shift(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder::sptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "my_decoder", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:get_shift",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_shift" "', argument " "1"" of type '" "gr::fec::generic_decoder::sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_shift" "', argument " "1"" of type '" "gr::fec::generic_decoder::sptr""'");
    } else {
      gr::fec::generic_decoder::sptr * temp = reinterpret_cast< gr::fec::generic_decoder::sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (float)gr::fec::get_shift(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder::sptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "my_decoder", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:get_history",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_history" "', argument " "1"" of type '" "gr::fec::generic_decoder::sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_history" "', argument " "1"" of type '" "gr::fec::generic_decoder::sptr""'");
    } else {
      gr::fec::generic_decoder::sptr * temp = reinterpret_cast< gr::fec::generic_decoder::sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (int)gr::fec::get_history(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_decoder_input_item_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder::sptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "my_decoder", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:get_decoder_input_item_size",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_decoder_input_item_size" "', argument " "1"" of type '" "gr::fec::generic_decoder::sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_decoder_input_item_size" "', argument " "1"" of type '" "gr::fec::generic_decoder::sptr""'");
    } else {
      gr::fec::generic_decoder::sptr * temp = reinterpret_cast< gr::fec::generic_decoder::sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (int)gr::fec::get_decoder_input_item_size(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_decoder_output_item_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder::sptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "my_decoder", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:get_decoder_output_item_size",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_decoder_output_item_size" "', argument " "1"" of type '" "gr::fec::generic_decoder::sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_decoder_output_item_size" "', argument " "1"" of type '" "gr::fec::generic_decoder::sptr""'");
    } else {
      gr::fec::generic_decoder::sptr * temp = reinterpret_cast< gr::fec::generic_decoder::sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (int)gr::fec::get_decoder_output_item_size(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_decoder_input_conversion(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder::sptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "my_decoder", NULL 
  };
  char *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:get_decoder_input_conversion",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_decoder_input_conversion" "', argument " "1"" of type '" "gr::fec::generic_decoder::sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_decoder_input_conversion" "', argument " "1"" of type '" "gr::fec::generic_decoder::sptr""'");
    } else {
      gr::fec::generic_decoder::sptr * temp = reinterpret_cast< gr::fec::generic_decoder::sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (char *)gr::fec::get_decoder_input_conversion(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_decoder_output_conversion(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder::sptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "my_decoder", NULL 
  };
  char *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:get_decoder_output_conversion",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_decoder_output_conversion" "', argument " "1"" of type '" "gr::fec::generic_decoder::sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_decoder_output_conversion" "', argument " "1"" of type '" "gr::fec::generic_decoder::sptr""'");
    } else {
      gr::fec::generic_decoder::sptr * temp = reinterpret_cast< gr::fec::generic_decoder::sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (char *)gr::fec::get_decoder_output_conversion(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_encoder_generic_work(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::generic_encoder *arg1 = (gr::fec::generic_encoder *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "in_buffer",(char *) "out_buffer", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:generic_encoder_generic_work",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_encoder_generic_work" "', argument " "1"" of type '" "gr::fec::generic_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_encoder * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "generic_encoder_generic_work" "', argument " "2"" of type '" "void *""'"); 
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "generic_encoder_generic_work" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      (arg1)->generic_work(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_generic_encoder_base_unique_id_set(PyObject *_val) {
  {
    int val;
    int res = SWIG_AsVal_int(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""gr::fec::generic_encoder::base_unique_id""' of type '""int""'");
    }
    gr::fec::generic_encoder::base_unique_id = static_cast< int >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_generic_encoder_base_unique_id_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(gr::fec::generic_encoder::base_unique_id));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_generic_encoder_base_unique_id_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_generic_encoder_base_unique_id_get();
}


SWIGINTERN PyObject *_wrap_generic_encoder_base_unique_id_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_generic_encoder_base_unique_id_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN PyObject *_wrap_generic_encoder_my_id_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_encoder *arg1 = (gr::fec::generic_encoder *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_encoder_my_id_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_encoder_my_id_set" "', argument " "1"" of type '" "gr::fec::generic_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_encoder * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "generic_encoder_my_id_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->my_id = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_encoder_my_id_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_encoder *arg1 = (gr::fec::generic_encoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_encoder_my_id_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_encoder_my_id_get" "', argument " "1"" of type '" "gr::fec::generic_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_encoder * >(argp1);
  result = (int) ((arg1)->my_id);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_encoder_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_encoder *arg1 = (gr::fec::generic_encoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_encoder_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_encoder_unique_id" "', argument " "1"" of type '" "gr::fec::generic_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_encoder * >(argp1);
  {
    try {
      result = (int)(arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_encoder_d_name_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_encoder *arg1 = (gr::fec::generic_encoder *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_encoder_d_name_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_encoder_d_name_set" "', argument " "1"" of type '" "gr::fec::generic_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_encoder * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "generic_encoder_d_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "generic_encoder_d_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->d_name = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_encoder_d_name_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_encoder *arg1 = (gr::fec::generic_encoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_encoder_d_name_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_encoder_d_name_get" "', argument " "1"" of type '" "gr::fec::generic_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_encoder * >(argp1);
  result = (std::string *) & ((arg1)->d_name);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_encoder_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_encoder *arg1 = (gr::fec::generic_encoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_encoder_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_encoder_alias" "', argument " "1"" of type '" "gr::fec::generic_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_encoder * >(argp1);
  {
    try {
      result = (arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_encoder_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_encoder *arg1 = (gr::fec::generic_encoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_encoder_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_encoder_rate" "', argument " "1"" of type '" "gr::fec::generic_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_encoder * >(argp1);
  {
    try {
      result = (double)(arg1)->rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_encoder_get_input_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_encoder *arg1 = (gr::fec::generic_encoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_encoder_get_input_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_encoder_get_input_size" "', argument " "1"" of type '" "gr::fec::generic_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_encoder * >(argp1);
  {
    try {
      result = (int)(arg1)->get_input_size();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_encoder_get_output_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_encoder *arg1 = (gr::fec::generic_encoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_encoder_get_output_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_encoder_get_output_size" "', argument " "1"" of type '" "gr::fec::generic_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_encoder * >(argp1);
  {
    try {
      result = (int)(arg1)->get_output_size();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_encoder_get_input_conversion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_encoder *arg1 = (gr::fec::generic_encoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_encoder_get_input_conversion",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_encoder_get_input_conversion" "', argument " "1"" of type '" "gr::fec::generic_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_encoder * >(argp1);
  {
    try {
      result = (char *)(arg1)->get_input_conversion();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_encoder_get_output_conversion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_encoder *arg1 = (gr::fec::generic_encoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"generic_encoder_get_output_conversion",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_encoder_get_output_conversion" "', argument " "1"" of type '" "gr::fec::generic_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_encoder * >(argp1);
  {
    try {
      result = (char *)(arg1)->get_output_conversion();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generic_encoder_set_frame_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::generic_encoder *arg1 = (gr::fec::generic_encoder *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "frame_size", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:generic_encoder_set_frame_size",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generic_encoder_set_frame_size" "', argument " "1"" of type '" "gr::fec::generic_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_encoder * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "generic_encoder_set_frame_size" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (bool)(arg1)->set_frame_size(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_generic_encoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::generic_encoder *arg1 = (gr::fec::generic_encoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_generic_encoder",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__generic_encoder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_generic_encoder" "', argument " "1"" of type '" "gr::fec::generic_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::generic_encoder * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *generic_encoder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__generic_encoder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_get_encoder_output_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::generic_encoder::sptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "my_encoder", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:get_encoder_output_size",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_encoder_output_size" "', argument " "1"" of type '" "gr::fec::generic_encoder::sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_encoder_output_size" "', argument " "1"" of type '" "gr::fec::generic_encoder::sptr""'");
    } else {
      gr::fec::generic_encoder::sptr * temp = reinterpret_cast< gr::fec::generic_encoder::sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (int)gr::fec::get_encoder_output_size(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_encoder_input_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::generic_encoder::sptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "my_encoder", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:get_encoder_input_size",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_encoder_input_size" "', argument " "1"" of type '" "gr::fec::generic_encoder::sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_encoder_input_size" "', argument " "1"" of type '" "gr::fec::generic_encoder::sptr""'");
    } else {
      gr::fec::generic_encoder::sptr * temp = reinterpret_cast< gr::fec::generic_encoder::sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (int)gr::fec::get_encoder_input_size(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_encoder_input_conversion(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::generic_encoder::sptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "my_encoder", NULL 
  };
  char *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:get_encoder_input_conversion",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_encoder_input_conversion" "', argument " "1"" of type '" "gr::fec::generic_encoder::sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_encoder_input_conversion" "', argument " "1"" of type '" "gr::fec::generic_encoder::sptr""'");
    } else {
      gr::fec::generic_encoder::sptr * temp = reinterpret_cast< gr::fec::generic_encoder::sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (char *)gr::fec::get_encoder_input_conversion(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_encoder_output_conversion(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::generic_encoder::sptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "my_encoder", NULL 
  };
  char *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:get_encoder_output_conversion",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_encoder_output_conversion" "', argument " "1"" of type '" "gr::fec::generic_encoder::sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "get_encoder_output_conversion" "', argument " "1"" of type '" "gr::fec::generic_encoder::sptr""'");
    } else {
      gr::fec::generic_encoder::sptr * temp = reinterpret_cast< gr::fec::generic_encoder::sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (char *)gr::fec::get_encoder_output_conversion(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder::sptr arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "my_decoder",(char *) "input_item_size",(char *) "output_item_size", NULL 
  };
  gr::fec::decoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:decoder_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_make" "', argument " "1"" of type '" "gr::fec::generic_decoder::sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "decoder_make" "', argument " "1"" of type '" "gr::fec::generic_decoder::sptr""'");
    } else {
      gr::fec::generic_decoder::sptr * temp = reinterpret_cast< gr::fec::generic_decoder::sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_make" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "decoder_make" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      result = gr::fec::decoder::make(arg1,arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::decoder::sptr(static_cast< const gr::fec::decoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_general_work(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::decoder *arg1 = (gr::fec::decoder *) 0 ;
  int arg2 ;
  gr_vector_int *arg3 = 0 ;
  gr_vector_const_void_star *arg4 = 0 ;
  gr_vector_void_star *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "noutput_items",(char *) "ninput_items",(char *) "input_items",(char *) "output_items", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:decoder_general_work",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_general_work" "', argument " "1"" of type '" "gr::fec::decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::decoder * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_general_work" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_gr_vector_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "decoder_general_work" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "decoder_general_work" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  arg3 = reinterpret_cast< gr_vector_int * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_gr_vector_const_void_star,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "decoder_general_work" "', argument " "4"" of type '" "gr_vector_const_void_star &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "decoder_general_work" "', argument " "4"" of type '" "gr_vector_const_void_star &""'"); 
  }
  arg4 = reinterpret_cast< gr_vector_const_void_star * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_gr_vector_void_star,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "decoder_general_work" "', argument " "5"" of type '" "gr_vector_void_star &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "decoder_general_work" "', argument " "5"" of type '" "gr_vector_void_star &""'"); 
  }
  arg5 = reinterpret_cast< gr_vector_void_star * >(argp5);
  {
    try {
      result = (int)(arg1)->general_work(arg2,*arg3,*arg4,*arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_fixed_rate_ninput_to_noutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::decoder *arg1 = (gr::fec::decoder *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninput", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:decoder_fixed_rate_ninput_to_noutput",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_fixed_rate_ninput_to_noutput" "', argument " "1"" of type '" "gr::fec::decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::decoder * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_fixed_rate_ninput_to_noutput" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(arg1)->fixed_rate_ninput_to_noutput(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_fixed_rate_noutput_to_ninput(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::decoder *arg1 = (gr::fec::decoder *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "noutput", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:decoder_fixed_rate_noutput_to_ninput",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_fixed_rate_noutput_to_ninput" "', argument " "1"" of type '" "gr::fec::decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::decoder * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_fixed_rate_noutput_to_ninput" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(arg1)->fixed_rate_noutput_to_ninput(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_forecast(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::decoder *arg1 = (gr::fec::decoder *) 0 ;
  int arg2 ;
  gr_vector_int *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "noutput_items",(char *) "ninput_items_required", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:decoder_forecast",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_forecast" "', argument " "1"" of type '" "gr::fec::decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::decoder * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_forecast" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_gr_vector_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "decoder_forecast" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "decoder_forecast" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  arg3 = reinterpret_cast< gr_vector_int * >(argp3);
  {
    try {
      (arg1)->forecast(arg2,*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_decoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::decoder *arg1 = (gr::fec::decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_decoder",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__decoder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_decoder" "', argument " "1"" of type '" "gr::fec::decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::decoder * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *decoder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__decoder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_encoder_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::generic_encoder::sptr arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "my_encoder",(char *) "input_item_size",(char *) "output_item_size", NULL 
  };
  gr::fec::encoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:encoder_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_make" "', argument " "1"" of type '" "gr::fec::generic_encoder::sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "encoder_make" "', argument " "1"" of type '" "gr::fec::generic_encoder::sptr""'");
    } else {
      gr::fec::generic_encoder::sptr * temp = reinterpret_cast< gr::fec::generic_encoder::sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_make" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "encoder_make" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    try {
      result = gr::fec::encoder::make(arg1,arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::encoder::sptr(static_cast< const gr::fec::encoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_general_work(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::encoder *arg1 = (gr::fec::encoder *) 0 ;
  int arg2 ;
  gr_vector_int *arg3 = 0 ;
  gr_vector_const_void_star *arg4 = 0 ;
  gr_vector_void_star *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "noutput_items",(char *) "ninput_items",(char *) "input_items",(char *) "output_items", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:encoder_general_work",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_general_work" "', argument " "1"" of type '" "gr::fec::encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::encoder * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_general_work" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_gr_vector_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "encoder_general_work" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "encoder_general_work" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  arg3 = reinterpret_cast< gr_vector_int * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_gr_vector_const_void_star,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "encoder_general_work" "', argument " "4"" of type '" "gr_vector_const_void_star &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "encoder_general_work" "', argument " "4"" of type '" "gr_vector_const_void_star &""'"); 
  }
  arg4 = reinterpret_cast< gr_vector_const_void_star * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_gr_vector_void_star,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "encoder_general_work" "', argument " "5"" of type '" "gr_vector_void_star &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "encoder_general_work" "', argument " "5"" of type '" "gr_vector_void_star &""'"); 
  }
  arg5 = reinterpret_cast< gr_vector_void_star * >(argp5);
  {
    try {
      result = (int)(arg1)->general_work(arg2,*arg3,*arg4,*arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_fixed_rate_ninput_to_noutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::encoder *arg1 = (gr::fec::encoder *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninput", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:encoder_fixed_rate_ninput_to_noutput",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_fixed_rate_ninput_to_noutput" "', argument " "1"" of type '" "gr::fec::encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::encoder * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_fixed_rate_ninput_to_noutput" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(arg1)->fixed_rate_ninput_to_noutput(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_fixed_rate_noutput_to_ninput(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::encoder *arg1 = (gr::fec::encoder *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "noutput", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:encoder_fixed_rate_noutput_to_ninput",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_fixed_rate_noutput_to_ninput" "', argument " "1"" of type '" "gr::fec::encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::encoder * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_fixed_rate_noutput_to_ninput" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(arg1)->fixed_rate_noutput_to_ninput(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_forecast(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::encoder *arg1 = (gr::fec::encoder *) 0 ;
  int arg2 ;
  gr_vector_int *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "noutput_items",(char *) "ninput_items_required", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:encoder_forecast",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_forecast" "', argument " "1"" of type '" "gr::fec::encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::encoder * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_forecast" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_gr_vector_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "encoder_forecast" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "encoder_forecast" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  arg3 = reinterpret_cast< gr_vector_int * >(argp3);
  {
    try {
      (arg1)->forecast(arg2,*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_encoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::encoder *arg1 = (gr::fec::encoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_encoder",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__encoder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_encoder" "', argument " "1"" of type '" "gr::fec::encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::encoder * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *encoder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__encoder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_tagged_decoder_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder::sptr arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  std::string const &arg4_defvalue = "packet_len" ;
  std::string *arg4 = (std::string *) &arg4_defvalue ;
  int arg5 = (int) 1500 ;
  void *argp1 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "my_decoder",(char *) "input_item_size",(char *) "output_item_size",(char *) "lengthtagname",(char *) "mtu", NULL 
  };
  gr::fec::tagged_decoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|OO:tagged_decoder_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_make" "', argument " "1"" of type '" "gr::fec::generic_decoder::sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_decoder_make" "', argument " "1"" of type '" "gr::fec::generic_decoder::sptr""'");
    } else {
      gr::fec::generic_decoder::sptr * temp = reinterpret_cast< gr::fec::generic_decoder::sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_decoder_make" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_decoder_make" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  if (obj3) {
    {
      std::string *ptr = (std::string *)0;
      res4 = SWIG_AsPtr_std_string(obj3, &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "tagged_decoder_make" "', argument " "4"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_decoder_make" "', argument " "4"" of type '" "std::string const &""'"); 
      }
      arg4 = ptr;
    }
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_int(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "tagged_decoder_make" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  {
    try {
      result = gr::fec::tagged_decoder::make(arg1,arg2,arg3,(std::string const &)*arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::tagged_decoder::sptr(static_cast< const gr::fec::tagged_decoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_work(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::tagged_decoder *arg1 = (gr::fec::tagged_decoder *) 0 ;
  int arg2 ;
  gr_vector_int *arg3 = 0 ;
  gr_vector_const_void_star *arg4 = 0 ;
  gr_vector_void_star *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "noutput_items",(char *) "ninput_items",(char *) "input_items",(char *) "output_items", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:tagged_decoder_work",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__tagged_decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_work" "', argument " "1"" of type '" "gr::fec::tagged_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::tagged_decoder * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_decoder_work" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_gr_vector_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tagged_decoder_work" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_decoder_work" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  arg3 = reinterpret_cast< gr_vector_int * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_gr_vector_const_void_star,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "tagged_decoder_work" "', argument " "4"" of type '" "gr_vector_const_void_star &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_decoder_work" "', argument " "4"" of type '" "gr_vector_const_void_star &""'"); 
  }
  arg4 = reinterpret_cast< gr_vector_const_void_star * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_gr_vector_void_star,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "tagged_decoder_work" "', argument " "5"" of type '" "gr_vector_void_star &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_decoder_work" "', argument " "5"" of type '" "gr_vector_void_star &""'"); 
  }
  arg5 = reinterpret_cast< gr_vector_void_star * >(argp5);
  {
    try {
      result = (int)(arg1)->work(arg2,*arg3,*arg4,*arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_calculate_output_stream_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::tagged_decoder *arg1 = (gr::fec::tagged_decoder *) 0 ;
  gr_vector_int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninput_items", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_decoder_calculate_output_stream_length",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__tagged_decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_calculate_output_stream_length" "', argument " "1"" of type '" "gr::fec::tagged_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::tagged_decoder * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gr_vector_int,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagged_decoder_calculate_output_stream_length" "', argument " "2"" of type '" "gr_vector_int const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_decoder_calculate_output_stream_length" "', argument " "2"" of type '" "gr_vector_int const &""'"); 
  }
  arg2 = reinterpret_cast< gr_vector_int * >(argp2);
  {
    try {
      result = (int)(arg1)->calculate_output_stream_length((gr_vector_int const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tagged_decoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::tagged_decoder *arg1 = (gr::fec::tagged_decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_tagged_decoder",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__tagged_decoder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tagged_decoder" "', argument " "1"" of type '" "gr::fec::tagged_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::tagged_decoder * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tagged_decoder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__tagged_decoder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_tagged_encoder_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::generic_encoder::sptr arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  std::string const &arg4_defvalue = "packet_len" ;
  std::string *arg4 = (std::string *) &arg4_defvalue ;
  int arg5 = (int) 1500 ;
  void *argp1 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "my_encoder",(char *) "input_item_size",(char *) "output_item_size",(char *) "lengthtagname",(char *) "mtu", NULL 
  };
  gr::fec::tagged_encoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|OO:tagged_encoder_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_make" "', argument " "1"" of type '" "gr::fec::generic_encoder::sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_encoder_make" "', argument " "1"" of type '" "gr::fec::generic_encoder::sptr""'");
    } else {
      gr::fec::generic_encoder::sptr * temp = reinterpret_cast< gr::fec::generic_encoder::sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_encoder_make" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_encoder_make" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  if (obj3) {
    {
      std::string *ptr = (std::string *)0;
      res4 = SWIG_AsPtr_std_string(obj3, &ptr);
      if (!SWIG_IsOK(res4)) {
        SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "tagged_encoder_make" "', argument " "4"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_encoder_make" "', argument " "4"" of type '" "std::string const &""'"); 
      }
      arg4 = ptr;
    }
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_int(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "tagged_encoder_make" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  {
    try {
      result = gr::fec::tagged_encoder::make(arg1,arg2,arg3,(std::string const &)*arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::tagged_encoder::sptr(static_cast< const gr::fec::tagged_encoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_work(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::tagged_encoder *arg1 = (gr::fec::tagged_encoder *) 0 ;
  int arg2 ;
  gr_vector_int *arg3 = 0 ;
  gr_vector_const_void_star *arg4 = 0 ;
  gr_vector_void_star *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "noutput_items",(char *) "ninput_items",(char *) "input_items",(char *) "output_items", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:tagged_encoder_work",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__tagged_encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_work" "', argument " "1"" of type '" "gr::fec::tagged_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::tagged_encoder * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_encoder_work" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_gr_vector_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tagged_encoder_work" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_encoder_work" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  arg3 = reinterpret_cast< gr_vector_int * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_gr_vector_const_void_star,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "tagged_encoder_work" "', argument " "4"" of type '" "gr_vector_const_void_star &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_encoder_work" "', argument " "4"" of type '" "gr_vector_const_void_star &""'"); 
  }
  arg4 = reinterpret_cast< gr_vector_const_void_star * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_gr_vector_void_star,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "tagged_encoder_work" "', argument " "5"" of type '" "gr_vector_void_star &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_encoder_work" "', argument " "5"" of type '" "gr_vector_void_star &""'"); 
  }
  arg5 = reinterpret_cast< gr_vector_void_star * >(argp5);
  {
    try {
      result = (int)(arg1)->work(arg2,*arg3,*arg4,*arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_calculate_output_stream_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::tagged_encoder *arg1 = (gr::fec::tagged_encoder *) 0 ;
  gr_vector_int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninput_items", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_encoder_calculate_output_stream_length",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__tagged_encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_calculate_output_stream_length" "', argument " "1"" of type '" "gr::fec::tagged_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::tagged_encoder * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gr_vector_int,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagged_encoder_calculate_output_stream_length" "', argument " "2"" of type '" "gr_vector_int const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_encoder_calculate_output_stream_length" "', argument " "2"" of type '" "gr_vector_int const &""'"); 
  }
  arg2 = reinterpret_cast< gr_vector_int * >(argp2);
  {
    try {
      result = (int)(arg1)->calculate_output_stream_length((gr_vector_int const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tagged_encoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::tagged_encoder *arg1 = (gr::fec::tagged_encoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_tagged_encoder",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__tagged_encoder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tagged_encoder" "', argument " "1"" of type '" "gr::fec::tagged_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::tagged_encoder * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tagged_encoder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__tagged_encoder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_async_decoder_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::generic_decoder::sptr arg1 ;
  bool arg2 = (bool) false ;
  bool arg3 = (bool) true ;
  int arg4 = (int) 1500 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "my_decoder",(char *) "packed",(char *) "rev_pack",(char *) "mtu", NULL 
  };
  gr::fec::async_decoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOO:async_decoder_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_make" "', argument " "1"" of type '" "gr::fec::generic_decoder::sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "async_decoder_make" "', argument " "1"" of type '" "gr::fec::generic_decoder::sptr""'");
    } else {
      gr::fec::generic_decoder::sptr * temp = reinterpret_cast< gr::fec::generic_decoder::sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_bool(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_decoder_make" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "async_decoder_make" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "async_decoder_make" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  {
    try {
      result = gr::fec::async_decoder::make(arg1,arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::async_decoder::sptr(static_cast< const gr::fec::async_decoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_general_work(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::async_decoder *arg1 = (gr::fec::async_decoder *) 0 ;
  int arg2 ;
  gr_vector_int *arg3 = 0 ;
  gr_vector_const_void_star *arg4 = 0 ;
  gr_vector_void_star *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "noutput_items",(char *) "ninput_items",(char *) "input_items",(char *) "output_items", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:async_decoder_general_work",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__async_decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_general_work" "', argument " "1"" of type '" "gr::fec::async_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::async_decoder * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_decoder_general_work" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_gr_vector_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "async_decoder_general_work" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "async_decoder_general_work" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  arg3 = reinterpret_cast< gr_vector_int * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_gr_vector_const_void_star,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "async_decoder_general_work" "', argument " "4"" of type '" "gr_vector_const_void_star &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "async_decoder_general_work" "', argument " "4"" of type '" "gr_vector_const_void_star &""'"); 
  }
  arg4 = reinterpret_cast< gr_vector_const_void_star * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_gr_vector_void_star,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "async_decoder_general_work" "', argument " "5"" of type '" "gr_vector_void_star &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "async_decoder_general_work" "', argument " "5"" of type '" "gr_vector_void_star &""'"); 
  }
  arg5 = reinterpret_cast< gr_vector_void_star * >(argp5);
  {
    try {
      result = (int)(arg1)->general_work(arg2,*arg3,*arg4,*arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_async_decoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::async_decoder *arg1 = (gr::fec::async_decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_async_decoder",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__async_decoder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_async_decoder" "', argument " "1"" of type '" "gr::fec::async_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::async_decoder * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *async_decoder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__async_decoder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_async_encoder_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::generic_encoder::sptr arg1 ;
  bool arg2 = (bool) false ;
  bool arg3 = (bool) true ;
  bool arg4 = (bool) true ;
  int arg5 = (int) 1500 ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "my_encoder",(char *) "packed",(char *) "rev_unpack",(char *) "rev_pack",(char *) "mtu", NULL 
  };
  gr::fec::async_encoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOOO:async_encoder_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_make" "', argument " "1"" of type '" "gr::fec::generic_encoder::sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "async_encoder_make" "', argument " "1"" of type '" "gr::fec::generic_encoder::sptr""'");
    } else {
      gr::fec::generic_encoder::sptr * temp = reinterpret_cast< gr::fec::generic_encoder::sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_bool(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_encoder_make" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "async_encoder_make" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "async_encoder_make" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_int(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "async_encoder_make" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  {
    try {
      result = gr::fec::async_encoder::make(arg1,arg2,arg3,arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::async_encoder::sptr(static_cast< const gr::fec::async_encoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_general_work(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::async_encoder *arg1 = (gr::fec::async_encoder *) 0 ;
  int arg2 ;
  gr_vector_int *arg3 = 0 ;
  gr_vector_const_void_star *arg4 = 0 ;
  gr_vector_void_star *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "noutput_items",(char *) "ninput_items",(char *) "input_items",(char *) "output_items", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:async_encoder_general_work",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__async_encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_general_work" "', argument " "1"" of type '" "gr::fec::async_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::async_encoder * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_encoder_general_work" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_gr_vector_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "async_encoder_general_work" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "async_encoder_general_work" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  arg3 = reinterpret_cast< gr_vector_int * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_gr_vector_const_void_star,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "async_encoder_general_work" "', argument " "4"" of type '" "gr_vector_const_void_star &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "async_encoder_general_work" "', argument " "4"" of type '" "gr_vector_const_void_star &""'"); 
  }
  arg4 = reinterpret_cast< gr_vector_const_void_star * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_gr_vector_void_star,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "async_encoder_general_work" "', argument " "5"" of type '" "gr_vector_void_star &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "async_encoder_general_work" "', argument " "5"" of type '" "gr_vector_void_star &""'"); 
  }
  arg5 = reinterpret_cast< gr_vector_void_star * >(argp5);
  {
    try {
      result = (int)(arg1)->general_work(arg2,*arg3,*arg4,*arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_async_encoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::async_encoder *arg1 = (gr::fec::async_encoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_async_encoder",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__async_encoder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_async_encoder" "', argument " "1"" of type '" "gr::fec::async_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::async_encoder * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *async_encoder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__async_encoder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_cc_decoder_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  std::vector< int,std::allocator< int > > arg4 ;
  int arg5 = (int) 0 ;
  int arg6 = (int) -1 ;
  cc_mode_t arg7 = (cc_mode_t) CC_STREAMING ;
  bool arg8 = (bool) false ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  char *  kwnames[] = {
    (char *) "frame_size",(char *) "k",(char *) "rate",(char *) "polys",(char *) "start_state",(char *) "end_state",(char *) "mode",(char *) "padded", NULL 
  };
  gr::fec::generic_decoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO|OOOO:cc_decoder_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cc_decoder_make" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cc_decoder_make" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cc_decoder_make" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "cc_decoder_make" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_int(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "cc_decoder_make" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  if (obj5) {
    ecode6 = SWIG_AsVal_int(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "cc_decoder_make" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
  }
  if (obj6) {
    ecode7 = SWIG_AsVal_int(obj6, &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "cc_decoder_make" "', argument " "7"" of type '" "cc_mode_t""'");
    } 
    arg7 = static_cast< cc_mode_t >(val7);
  }
  if (obj7) {
    ecode8 = SWIG_AsVal_bool(obj7, &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "cc_decoder_make" "', argument " "8"" of type '" "bool""'");
    } 
    arg8 = static_cast< bool >(val8);
  }
  {
    try {
      result = gr::fec::code::cc_decoder::make(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::generic_decoder::sptr(static_cast< const gr::fec::generic_decoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_cc_decoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::cc_decoder *arg1 = (gr::fec::code::cc_decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_cc_decoder",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__cc_decoder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cc_decoder" "', argument " "1"" of type '" "gr::fec::code::cc_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::cc_decoder * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *cc_decoder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__code__cc_decoder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_cc_encoder_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  std::vector< int,std::allocator< int > > arg4 ;
  int arg5 = (int) 0 ;
  cc_mode_t arg6 = (cc_mode_t) CC_STREAMING ;
  bool arg7 = (bool) false ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  char *  kwnames[] = {
    (char *) "frame_size",(char *) "k",(char *) "rate",(char *) "polys",(char *) "start_state",(char *) "mode",(char *) "padded", NULL 
  };
  gr::fec::generic_encoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO|OOO:cc_encoder_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cc_encoder_make" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cc_encoder_make" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cc_encoder_make" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "cc_encoder_make" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_int(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "cc_encoder_make" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  if (obj5) {
    ecode6 = SWIG_AsVal_int(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "cc_encoder_make" "', argument " "6"" of type '" "cc_mode_t""'");
    } 
    arg6 = static_cast< cc_mode_t >(val6);
  }
  if (obj6) {
    ecode7 = SWIG_AsVal_bool(obj6, &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "cc_encoder_make" "', argument " "7"" of type '" "bool""'");
    } 
    arg7 = static_cast< bool >(val7);
  }
  {
    try {
      result = gr::fec::code::cc_encoder::make(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::generic_encoder::sptr(static_cast< const gr::fec::generic_encoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_cc_encoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::cc_encoder *arg1 = (gr::fec::code::cc_encoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_cc_encoder",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__cc_encoder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cc_encoder" "', argument " "1"" of type '" "gr::fec::code::cc_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::cc_encoder * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *cc_encoder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__code__cc_encoder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ccsds_encoder_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 = (int) 0 ;
  cc_mode_t arg3 = (cc_mode_t) CC_STREAMING ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "frame_size",(char *) "start_state",(char *) "mode", NULL 
  };
  gr::fec::generic_encoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:ccsds_encoder_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ccsds_encoder_make" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ccsds_encoder_make" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ccsds_encoder_make" "', argument " "3"" of type '" "cc_mode_t""'");
    } 
    arg3 = static_cast< cc_mode_t >(val3);
  }
  {
    try {
      result = gr::fec::code::ccsds_encoder::make(arg1,arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::generic_encoder::sptr(static_cast< const gr::fec::generic_encoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ccsds_encoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::ccsds_encoder *arg1 = (gr::fec::code::ccsds_encoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_ccsds_encoder",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__ccsds_encoder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ccsds_encoder" "', argument " "1"" of type '" "gr::fec::code::ccsds_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::ccsds_encoder * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ccsds_encoder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__code__ccsds_encoder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_dummy_decoder_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "frame_size", NULL 
  };
  gr::fec::generic_decoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:dummy_decoder_make",kwnames,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "dummy_decoder_make" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = gr::fec::code::dummy_decoder::make(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::generic_decoder::sptr(static_cast< const gr::fec::generic_decoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_dummy_decoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::dummy_decoder *arg1 = (gr::fec::code::dummy_decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_dummy_decoder",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__dummy_decoder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_dummy_decoder" "', argument " "1"" of type '" "gr::fec::code::dummy_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::dummy_decoder * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *dummy_decoder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__code__dummy_decoder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_dummy_encoder_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  bool arg2 = (bool) false ;
  bool arg3 = (bool) false ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "frame_size",(char *) "pack",(char *) "packed_bits", NULL 
  };
  gr::fec::generic_encoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:dummy_encoder_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "dummy_encoder_make" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  if (obj1) {
    ecode2 = SWIG_AsVal_bool(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dummy_encoder_make" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "dummy_encoder_make" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  {
    try {
      result = gr::fec::code::dummy_encoder::make(arg1,arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::generic_encoder::sptr(static_cast< const gr::fec::generic_encoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_dummy_encoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::dummy_encoder *arg1 = (gr::fec::code::dummy_encoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_dummy_encoder",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__dummy_encoder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_dummy_encoder" "', argument " "1"" of type '" "gr::fec::code::dummy_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::dummy_encoder * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *dummy_encoder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__code__dummy_encoder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_repetition_decoder_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  float arg3 = (float) 0.5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "frame_size",(char *) "rep",(char *) "ap_prob", NULL 
  };
  gr::fec::generic_decoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:repetition_decoder_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "repetition_decoder_make" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "repetition_decoder_make" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (obj2) {
    ecode3 = SWIG_AsVal_float(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "repetition_decoder_make" "', argument " "3"" of type '" "float""'");
    } 
    arg3 = static_cast< float >(val3);
  }
  {
    try {
      result = gr::fec::code::repetition_decoder::make(arg1,arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::generic_decoder::sptr(static_cast< const gr::fec::generic_decoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_repetition_decoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::repetition_decoder *arg1 = (gr::fec::code::repetition_decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_repetition_decoder",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__repetition_decoder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_repetition_decoder" "', argument " "1"" of type '" "gr::fec::code::repetition_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::repetition_decoder * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *repetition_decoder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__code__repetition_decoder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_repetition_encoder_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "frame_size",(char *) "rep", NULL 
  };
  gr::fec::generic_encoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:repetition_encoder_make",kwnames,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "repetition_encoder_make" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "repetition_encoder_make" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = gr::fec::code::repetition_encoder::make(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::generic_encoder::sptr(static_cast< const gr::fec::generic_encoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_repetition_encoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::repetition_encoder *arg1 = (gr::fec::code::repetition_encoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_repetition_encoder",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__repetition_encoder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_repetition_encoder" "', argument " "1"" of type '" "gr::fec::code::repetition_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::repetition_encoder * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *repetition_encoder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__code__repetition_encoder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::decode_ccsds_27_fb::sptr result;
  
  {
    try {
      result = gr::fec::decode_ccsds_27_fb::make();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::decode_ccsds_27_fb::sptr(static_cast< const gr::fec::decode_ccsds_27_fb::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_decode_ccsds_27_fb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::decode_ccsds_27_fb *arg1 = (gr::fec::decode_ccsds_27_fb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_decode_ccsds_27_fb",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__decode_ccsds_27_fb, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_decode_ccsds_27_fb" "', argument " "1"" of type '" "gr::fec::decode_ccsds_27_fb *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::decode_ccsds_27_fb * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *decode_ccsds_27_fb_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__decode_ccsds_27_fb, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::encode_ccsds_27_bb::sptr result;
  
  {
    try {
      result = gr::fec::encode_ccsds_27_bb::make();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::encode_ccsds_27_bb::sptr(static_cast< const gr::fec::encode_ccsds_27_bb::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_encode_ccsds_27_bb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::encode_ccsds_27_bb *arg1 = (gr::fec::encode_ccsds_27_bb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_encode_ccsds_27_bb",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__encode_ccsds_27_bb, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_encode_ccsds_27_bb" "', argument " "1"" of type '" "gr::fec::encode_ccsds_27_bb *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::encode_ccsds_27_bb * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *encode_ccsds_27_bb_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__encode_ccsds_27_bb, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ber_bf_total_errors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::ber_bf *arg1 = (gr::fec::ber_bf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_total_errors",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__ber_bf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_total_errors" "', argument " "1"" of type '" "gr::fec::ber_bf *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::ber_bf * >(argp1);
  {
    try {
      result = (long)(arg1)->total_errors();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  bool arg1 = (bool) false ;
  int arg2 = (int) 100 ;
  float arg3 = (float) -7.0 ;
  bool val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "test_mode",(char *) "berminerrors",(char *) "ber_limit", NULL 
  };
  gr::fec::ber_bf::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"|OOO:ber_bf_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_bool(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ber_bf_make" "', argument " "1"" of type '" "bool""'");
    } 
    arg1 = static_cast< bool >(val1);
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ber_bf_make" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_float(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ber_bf_make" "', argument " "3"" of type '" "float""'");
    } 
    arg3 = static_cast< float >(val3);
  }
  {
    try {
      result = gr::fec::ber_bf::make(arg1,arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::ber_bf::sptr(static_cast< const gr::fec::ber_bf::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ber_bf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::ber_bf *arg1 = (gr::fec::ber_bf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_ber_bf",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__ber_bf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ber_bf" "', argument " "1"" of type '" "gr::fec::ber_bf *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::ber_bf * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ber_bf_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__ber_bf, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  SwigValueWrapper< std::vector< unsigned long long,std::allocator< unsigned long long > > > arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  float arg6 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char *  kwnames[] = {
    (char *) "correlator",(char *) "corr_sym",(char *) "corr_len",(char *) "cut",(char *) "flush",(char *) "thresh", NULL 
  };
  gr::fec::conv_bit_corr_bb::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOO:conv_bit_corr_bb_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_unsigned_long_long_std__allocatorT_unsigned_long_long_t_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_make" "', argument " "1"" of type '" "std::vector< unsigned long long,std::allocator< unsigned long long > >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "conv_bit_corr_bb_make" "', argument " "1"" of type '" "std::vector< unsigned long long,std::allocator< unsigned long long > >""'");
    } else {
      std::vector< unsigned long long,std::allocator< unsigned long long > > * temp = reinterpret_cast< std::vector< unsigned long long,std::allocator< unsigned long long > > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "conv_bit_corr_bb_make" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "conv_bit_corr_bb_make" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "conv_bit_corr_bb_make" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "conv_bit_corr_bb_make" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "conv_bit_corr_bb_make" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  {
    try {
      result = gr::fec::conv_bit_corr_bb::make(arg1,arg2,arg3,arg4,arg5,arg6);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::conv_bit_corr_bb::sptr(static_cast< const gr::fec::conv_bit_corr_bb::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_data_garble_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::conv_bit_corr_bb *arg1 = (gr::fec::conv_bit_corr_bb *) 0 ;
  int arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "taps",(char *) "syn_density", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:conv_bit_corr_bb_data_garble_rate",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__conv_bit_corr_bb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_data_garble_rate" "', argument " "1"" of type '" "gr::fec::conv_bit_corr_bb *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::conv_bit_corr_bb * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "conv_bit_corr_bb_data_garble_rate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "conv_bit_corr_bb_data_garble_rate" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  {
    try {
      result = (float)(arg1)->data_garble_rate(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_conv_bit_corr_bb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::conv_bit_corr_bb *arg1 = (gr::fec::conv_bit_corr_bb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_conv_bit_corr_bb",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__conv_bit_corr_bb, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_conv_bit_corr_bb" "', argument " "1"" of type '" "gr::fec::conv_bit_corr_bb *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::conv_bit_corr_bb * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *conv_bit_corr_bb_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__conv_bit_corr_bb, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_puncture_bb_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "puncsize",(char *) "puncpat",(char *) "delay", NULL 
  };
  gr::fec::puncture_bb::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|O:puncture_bb_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "puncture_bb_make" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_bb_make" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "puncture_bb_make" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  {
    try {
      result = gr::fec::puncture_bb::make(arg1,arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::puncture_bb::sptr(static_cast< const gr::fec::puncture_bb::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_puncture_bb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::puncture_bb *arg1 = (gr::fec::puncture_bb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_puncture_bb",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__puncture_bb, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_puncture_bb" "', argument " "1"" of type '" "gr::fec::puncture_bb *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::puncture_bb * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *puncture_bb_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__puncture_bb, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_puncture_ff_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "puncsize",(char *) "puncpat",(char *) "delay", NULL 
  };
  gr::fec::puncture_ff::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:puncture_ff_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "puncture_ff_make" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_ff_make" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "puncture_ff_make" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = gr::fec::puncture_ff::make(arg1,arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::puncture_ff::sptr(static_cast< const gr::fec::puncture_ff::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_puncture_ff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::puncture_ff *arg1 = (gr::fec::puncture_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_puncture_ff",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__puncture_ff, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_puncture_ff" "', argument " "1"" of type '" "gr::fec::puncture_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::puncture_ff * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *puncture_ff_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__puncture_ff, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_depuncture_bb_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 = (int) 0 ;
  char arg4 = (char) 127 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "puncsize",(char *) "puncpat",(char *) "delay",(char *) "symbol", NULL 
  };
  gr::fec::depuncture_bb::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OO:depuncture_bb_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "depuncture_bb_make" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "depuncture_bb_make" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "depuncture_bb_make" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_char(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "depuncture_bb_make" "', argument " "4"" of type '" "char""'");
    } 
    arg4 = static_cast< char >(val4);
  }
  {
    try {
      result = gr::fec::depuncture_bb::make(arg1,arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::depuncture_bb::sptr(static_cast< const gr::fec::depuncture_bb::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_depuncture_bb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::depuncture_bb *arg1 = (gr::fec::depuncture_bb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_depuncture_bb",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__depuncture_bb, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_depuncture_bb" "', argument " "1"" of type '" "gr::fec::depuncture_bb *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::depuncture_bb * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *depuncture_bb_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__depuncture_bb, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_tpc_encoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::tpc_encoder *arg1 = (gr::fec::tpc_encoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_tpc_encoder",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__tpc_encoder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tpc_encoder" "', argument " "1"" of type '" "gr::fec::tpc_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::tpc_encoder * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tpc_encoder_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< int,std::allocator< int > > arg1 ;
  std::vector< int,std::allocator< int > > arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char *  kwnames[] = {
    (char *) "row_poly",(char *) "col_poly",(char *) "krow",(char *) "kcol",(char *) "bval",(char *) "qval", NULL 
  };
  gr::fec::generic_encoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOO:tpc_encoder_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    int res = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "tpc_encoder_make" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > >""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "tpc_encoder_make" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tpc_encoder_make" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "tpc_encoder_make" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "tpc_encoder_make" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "tpc_encoder_make" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = gr::fec::tpc_encoder::make(arg1,arg2,arg3,arg4,arg5,arg6);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::generic_encoder::sptr(static_cast< const gr::fec::generic_encoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tpc_encoder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__tpc_encoder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_tpc_decoder_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< int,std::allocator< int > > arg1 ;
  std::vector< int,std::allocator< int > > arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  char *  kwnames[] = {
    (char *) "row_poly",(char *) "col_poly",(char *) "krow",(char *) "kcol",(char *) "bval",(char *) "qval",(char *) "max_iter",(char *) "decoder_type", NULL 
  };
  gr::fec::generic_decoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOOOO:tpc_decoder_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    int res = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "tpc_decoder_make" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > >""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "tpc_decoder_make" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tpc_decoder_make" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "tpc_decoder_make" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "tpc_decoder_make" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "tpc_decoder_make" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "tpc_decoder_make" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "tpc_decoder_make" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  {
    try {
      result = gr::fec::tpc_decoder::make(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::generic_decoder::sptr(static_cast< const gr::fec::generic_decoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tpc_decoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::tpc_decoder *arg1 = (gr::fec::tpc_decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_tpc_decoder",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__tpc_decoder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tpc_decoder" "', argument " "1"" of type '" "gr::fec::tpc_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::tpc_decoder * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tpc_decoder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__tpc_decoder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_polar_encoder_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::vector< int,std::allocator< int > > arg3 ;
  std::vector< char,std::allocator< char > > arg4 ;
  bool arg5 = (bool) false ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "block_size",(char *) "num_info_bits",(char *) "frozen_bit_positions",(char *) "frozen_bit_values",(char *) "is_packed", NULL 
  };
  gr::fec::generic_encoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO|O:polar_encoder_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "polar_encoder_make" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "polar_encoder_make" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "polar_encoder_make" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<char,std::allocator< char > > *ptr = (std::vector<char,std::allocator< char > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "polar_encoder_make" "', argument " "4"" of type '" "std::vector< char,std::allocator< char > >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_bool(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "polar_encoder_make" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
  }
  {
    try {
      result = gr::fec::code::polar_encoder::make(arg1,arg2,arg3,arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::generic_encoder::sptr(static_cast< const gr::fec::generic_encoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_polar_encoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::polar_encoder *arg1 = (gr::fec::code::polar_encoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_polar_encoder",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__polar_encoder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_polar_encoder" "', argument " "1"" of type '" "gr::fec::code::polar_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::polar_encoder * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *polar_encoder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__code__polar_encoder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_polar_decoder_sc_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::vector< int,std::allocator< int > > arg3 ;
  std::vector< char,std::allocator< char > > arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "block_size",(char *) "num_info_bits",(char *) "frozen_bit_positions",(char *) "frozen_bit_values", NULL 
  };
  gr::fec::generic_decoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:polar_decoder_sc_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "polar_decoder_sc_make" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "polar_decoder_sc_make" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "polar_decoder_sc_make" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<char,std::allocator< char > > *ptr = (std::vector<char,std::allocator< char > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "polar_decoder_sc_make" "', argument " "4"" of type '" "std::vector< char,std::allocator< char > >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = gr::fec::code::polar_decoder_sc::make(arg1,arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::generic_decoder::sptr(static_cast< const gr::fec::generic_decoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_polar_decoder_sc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::polar_decoder_sc *arg1 = (gr::fec::code::polar_decoder_sc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_polar_decoder_sc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__polar_decoder_sc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_polar_decoder_sc" "', argument " "1"" of type '" "gr::fec::code::polar_decoder_sc *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::polar_decoder_sc * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_polar_decoder_sc_generic_work(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::code::polar_decoder_sc *arg1 = (gr::fec::code::polar_decoder_sc *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "in_buffer",(char *) "out_buffer", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:polar_decoder_sc_generic_work",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__polar_decoder_sc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "polar_decoder_sc_generic_work" "', argument " "1"" of type '" "gr::fec::code::polar_decoder_sc *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::polar_decoder_sc * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "polar_decoder_sc_generic_work" "', argument " "2"" of type '" "void *""'"); 
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "polar_decoder_sc_generic_work" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      (arg1)->generic_work(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *polar_decoder_sc_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__code__polar_decoder_sc, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_polar_common(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::vector< int,std::allocator< int > > arg3 ;
  std::vector< char,std::allocator< char > > arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "block_size",(char *) "num_info_bits",(char *) "frozen_bit_positions",(char *) "frozen_bit_values", NULL 
  };
  gr::fec::code::polar_common *result = 0 ;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:new_polar_common",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_polar_common" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_polar_common" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_polar_common" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<char,std::allocator< char > > *ptr = (std::vector<char,std::allocator< char > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_polar_common" "', argument " "4"" of type '" "std::vector< char,std::allocator< char > >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (gr::fec::code::polar_common *)new gr::fec::code::polar_common(arg1,arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__fec__code__polar_common, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_polar_common(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::polar_common *arg1 = (gr::fec::code::polar_common *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_polar_common",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__polar_common, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_polar_common" "', argument " "1"" of type '" "gr::fec::code::polar_common *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::polar_common * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *polar_common_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__code__polar_common, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_polar_decoder_sc_list_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  std::vector< int,std::allocator< int > > arg4 ;
  std::vector< char,std::allocator< char > > arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "max_list_size",(char *) "block_size",(char *) "num_info_bits",(char *) "frozen_bit_positions",(char *) "frozen_bit_values", NULL 
  };
  gr::fec::generic_decoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:polar_decoder_sc_list_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "polar_decoder_sc_list_make" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "polar_decoder_sc_list_make" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "polar_decoder_sc_list_make" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "polar_decoder_sc_list_make" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<char,std::allocator< char > > *ptr = (std::vector<char,std::allocator< char > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "polar_decoder_sc_list_make" "', argument " "5"" of type '" "std::vector< char,std::allocator< char > >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = gr::fec::code::polar_decoder_sc_list::make(arg1,arg2,arg3,arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::generic_decoder::sptr(static_cast< const gr::fec::generic_decoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_polar_decoder_sc_list(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::polar_decoder_sc_list *arg1 = (gr::fec::code::polar_decoder_sc_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_polar_decoder_sc_list",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__polar_decoder_sc_list, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_polar_decoder_sc_list" "', argument " "1"" of type '" "gr::fec::code::polar_decoder_sc_list *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::polar_decoder_sc_list * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_polar_decoder_sc_list_generic_work(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::code::polar_decoder_sc_list *arg1 = (gr::fec::code::polar_decoder_sc_list *) 0 ;
  void *arg2 = (void *) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "in_buffer",(char *) "out_buffer", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:polar_decoder_sc_list_generic_work",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__polar_decoder_sc_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "polar_decoder_sc_list_generic_work" "', argument " "1"" of type '" "gr::fec::code::polar_decoder_sc_list *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::polar_decoder_sc_list * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "polar_decoder_sc_list_generic_work" "', argument " "2"" of type '" "void *""'"); 
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "polar_decoder_sc_list_generic_work" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try {
      (arg1)->generic_work(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *polar_decoder_sc_list_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__code__polar_decoder_sc_list, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_polar_decoder_common(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::polar_decoder_common *arg1 = (gr::fec::code::polar_decoder_common *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_polar_decoder_common",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__polar_decoder_common, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_polar_decoder_common" "', argument " "1"" of type '" "gr::fec::code::polar_decoder_common *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::polar_decoder_common * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *polar_decoder_common_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__code__polar_decoder_common, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_polar_encoder_systematic_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::vector< int,std::allocator< int > > arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "block_size",(char *) "num_info_bits",(char *) "frozen_bit_positions", NULL 
  };
  gr::fec::generic_encoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:polar_encoder_systematic_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "polar_encoder_systematic_make" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "polar_encoder_systematic_make" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "polar_encoder_systematic_make" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = gr::fec::code::polar_encoder_systematic::make(arg1,arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::generic_encoder::sptr(static_cast< const gr::fec::generic_encoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_polar_encoder_systematic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::polar_encoder_systematic *arg1 = (gr::fec::code::polar_encoder_systematic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_polar_encoder_systematic",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__polar_encoder_systematic, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_polar_encoder_systematic" "', argument " "1"" of type '" "gr::fec::code::polar_encoder_systematic *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::polar_encoder_systematic * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *polar_encoder_systematic_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__code__polar_encoder_systematic, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_polar_decoder_sc_systematic_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::vector< int,std::allocator< int > > arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "block_size",(char *) "num_info_bits",(char *) "frozen_bit_positions", NULL 
  };
  gr::fec::generic_decoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:polar_decoder_sc_systematic_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "polar_decoder_sc_systematic_make" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "polar_decoder_sc_systematic_make" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "polar_decoder_sc_systematic_make" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = gr::fec::code::polar_decoder_sc_systematic::make(arg1,arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::generic_decoder::sptr(static_cast< const gr::fec::generic_decoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_polar_decoder_sc_systematic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::polar_decoder_sc_systematic *arg1 = (gr::fec::code::polar_decoder_sc_systematic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_polar_decoder_sc_systematic",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__polar_decoder_sc_systematic, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_polar_decoder_sc_systematic" "', argument " "1"" of type '" "gr::fec::code::polar_decoder_sc_systematic *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::polar_decoder_sc_systematic * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *polar_decoder_sc_systematic_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__code__polar_decoder_sc_systematic, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ldpc_encoder_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "alist_file", NULL 
  };
  gr::fec::generic_encoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ldpc_encoder_make",kwnames,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ldpc_encoder_make" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = gr::fec::ldpc_encoder::make(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::generic_encoder::sptr(static_cast< const gr::fec::generic_encoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ldpc_encoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::ldpc_encoder *arg1 = (gr::fec::ldpc_encoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_ldpc_encoder",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__ldpc_encoder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ldpc_encoder" "', argument " "1"" of type '" "gr::fec::ldpc_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::ldpc_encoder * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ldpc_encoder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__ldpc_encoder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_block_data_size_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::block_data *arg1 = (gr::fec::code::block_data *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_data_size_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__block_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_data_size_set" "', argument " "1"" of type '" "gr::fec::code::block_data *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::block_data * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "block_data_size_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->size = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_data_size_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::block_data *arg1 = (gr::fec::code::block_data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_data_size_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__block_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_data_size_get" "', argument " "1"" of type '" "gr::fec::code::block_data *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::block_data * >(argp1);
  result =  ((arg1)->size);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_data_data_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::block_data *arg1 = (gr::fec::code::block_data *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_data_data_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__block_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_data_data_set" "', argument " "1"" of type '" "gr::fec::code::block_data *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::block_data * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "block_data_data_set" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->data = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_block_data_data_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::block_data *arg1 = (gr::fec::code::block_data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"block_data_data_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__block_data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "block_data_data_get" "', argument " "1"" of type '" "gr::fec::code::block_data *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::block_data * >(argp1);
  result = (double *) ((arg1)->data);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_block_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::block_data *result = 0 ;
  
  {
    try {
      result = (gr::fec::code::block_data *)new gr::fec::code::block_data();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__fec__code__block_data, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_block_data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::block_data *arg1 = (gr::fec::code::block_data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_block_data",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__block_data, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_block_data" "', argument " "1"" of type '" "gr::fec::code::block_data *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::block_data * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *block_data_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__code__block_data, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_matrix_size1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::matrix *arg1 = (gr::fec::code::matrix *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"matrix_size1_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "matrix_size1_set" "', argument " "1"" of type '" "gr::fec::code::matrix *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::matrix * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "matrix_size1_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->size1 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_matrix_size1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::matrix *arg1 = (gr::fec::code::matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"matrix_size1_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "matrix_size1_get" "', argument " "1"" of type '" "gr::fec::code::matrix *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::matrix * >(argp1);
  result =  ((arg1)->size1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_matrix_size2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::matrix *arg1 = (gr::fec::code::matrix *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"matrix_size2_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "matrix_size2_set" "', argument " "1"" of type '" "gr::fec::code::matrix *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::matrix * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "matrix_size2_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->size2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_matrix_size2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::matrix *arg1 = (gr::fec::code::matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"matrix_size2_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "matrix_size2_get" "', argument " "1"" of type '" "gr::fec::code::matrix *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::matrix * >(argp1);
  result =  ((arg1)->size2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_matrix_tda_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::matrix *arg1 = (gr::fec::code::matrix *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"matrix_tda_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "matrix_tda_set" "', argument " "1"" of type '" "gr::fec::code::matrix *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::matrix * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "matrix_tda_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (arg1)->tda = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_matrix_tda_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::matrix *arg1 = (gr::fec::code::matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"matrix_tda_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "matrix_tda_get" "', argument " "1"" of type '" "gr::fec::code::matrix *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::matrix * >(argp1);
  result =  ((arg1)->tda);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_matrix_data_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::matrix *arg1 = (gr::fec::code::matrix *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"matrix_data_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "matrix_data_set" "', argument " "1"" of type '" "gr::fec::code::matrix *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::matrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "matrix_data_set" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->data = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_matrix_data_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::matrix *arg1 = (gr::fec::code::matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"matrix_data_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "matrix_data_get" "', argument " "1"" of type '" "gr::fec::code::matrix *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::matrix * >(argp1);
  result = (double *) ((arg1)->data);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_matrix_block_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::matrix *arg1 = (gr::fec::code::matrix *) 0 ;
  gr::fec::code::block_data *arg2 = (gr::fec::code::block_data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"matrix_block_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "matrix_block_set" "', argument " "1"" of type '" "gr::fec::code::matrix *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::matrix * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_gr__fec__code__block_data, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "matrix_block_set" "', argument " "2"" of type '" "gr::fec::code::block_data *""'"); 
  }
  arg2 = reinterpret_cast< gr::fec::code::block_data * >(argp2);
  if (arg1) (arg1)->block = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_matrix_block_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::matrix *arg1 = (gr::fec::code::matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::fec::code::block_data *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"matrix_block_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "matrix_block_get" "', argument " "1"" of type '" "gr::fec::code::matrix *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::matrix * >(argp1);
  result = (gr::fec::code::block_data *) ((arg1)->block);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__fec__code__block_data, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_matrix_owner_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::matrix *arg1 = (gr::fec::code::matrix *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"matrix_owner_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "matrix_owner_set" "', argument " "1"" of type '" "gr::fec::code::matrix *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::matrix * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "matrix_owner_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->owner = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_matrix_owner_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::matrix *arg1 = (gr::fec::code::matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"matrix_owner_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "matrix_owner_get" "', argument " "1"" of type '" "gr::fec::code::matrix *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::matrix * >(argp1);
  result = (int) ((arg1)->owner);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_matrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::matrix *result = 0 ;
  
  {
    try {
      result = (gr::fec::code::matrix *)new gr::fec::code::matrix();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__fec__code__matrix, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_matrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::matrix *arg1 = (gr::fec::code::matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_matrix",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__matrix, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_matrix" "', argument " "1"" of type '" "gr::fec::code::matrix *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::matrix * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *matrix_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__code__matrix, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_matrix_free(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::code::matrix *arg1 = (gr::fec::code::matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "x", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:matrix_free",kwnames,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "matrix_free" "', argument " "1"" of type '" "gr::fec::code::matrix *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::matrix * >(argp1);
  {
    try {
      gr::fec::code::matrix_free(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_read_matrix_from_file(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "filename", NULL 
  };
  gr::fec::code::matrix_sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:read_matrix_from_file",kwnames,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "read_matrix_from_file" "', argument " "1"" of type '" "std::string const""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = gr::fec::code::read_matrix_from_file(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::code::matrix_sptr(static_cast< const gr::fec::code::matrix_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__matrix_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_write_matrix_to_file(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  gr::fec::code::matrix_sptr arg2 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "filename",(char *) "M", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:write_matrix_to_file",kwnames,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "write_matrix_to_file" "', argument " "1"" of type '" "std::string const""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__matrix_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "write_matrix_to_file" "', argument " "2"" of type '" "gr::fec::code::matrix_sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "write_matrix_to_file" "', argument " "2"" of type '" "gr::fec::code::matrix_sptr""'");
    } else {
      gr::fec::code::matrix_sptr * temp = reinterpret_cast< gr::fec::code::matrix_sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      gr::fec::code::write_matrix_to_file(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generate_G_transpose(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::code::matrix_sptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "H_obj", NULL 
  };
  gr::fec::code::matrix_sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:generate_G_transpose",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__matrix_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generate_G_transpose" "', argument " "1"" of type '" "gr::fec::code::matrix_sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "generate_G_transpose" "', argument " "1"" of type '" "gr::fec::code::matrix_sptr""'");
    } else {
      gr::fec::code::matrix_sptr * temp = reinterpret_cast< gr::fec::code::matrix_sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = gr::fec::code::generate_G_transpose(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::code::matrix_sptr(static_cast< const gr::fec::code::matrix_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__matrix_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generate_G(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::code::matrix_sptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "H_obj", NULL 
  };
  gr::fec::code::matrix_sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:generate_G",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__matrix_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generate_G" "', argument " "1"" of type '" "gr::fec::code::matrix_sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "generate_G" "', argument " "1"" of type '" "gr::fec::code::matrix_sptr""'");
    } else {
      gr::fec::code::matrix_sptr * temp = reinterpret_cast< gr::fec::code::matrix_sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = gr::fec::code::generate_G(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::code::matrix_sptr(static_cast< const gr::fec::code::matrix_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__matrix_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_generate_H(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::code::matrix_sptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "G_obj", NULL 
  };
  gr::fec::code::matrix_sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:generate_H",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__matrix_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generate_H" "', argument " "1"" of type '" "gr::fec::code::matrix_sptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "generate_H" "', argument " "1"" of type '" "gr::fec::code::matrix_sptr""'");
    } else {
      gr::fec::code::matrix_sptr * temp = reinterpret_cast< gr::fec::code::matrix_sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = gr::fec::code::generate_H(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::code::matrix_sptr(static_cast< const gr::fec::code::matrix_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__matrix_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_print_matrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::code::matrix_sptr arg1 ;
  bool arg2 = (bool) false ;
  void *argp1 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "M",(char *) "numpy", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:print_matrix",kwnames,&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__matrix_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "print_matrix" "', argument " "1"" of type '" "gr::fec::code::matrix_sptr const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "print_matrix" "', argument " "1"" of type '" "gr::fec::code::matrix_sptr const""'");
    } else {
      gr::fec::code::matrix_sptr * temp = reinterpret_cast< gr::fec::code::matrix_sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_bool(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "print_matrix" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  {
    try {
      gr::fec::code::print_matrix(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_fec_mtrx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::fec_mtrx *arg1 = (gr::fec::code::fec_mtrx *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_fec_mtrx",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__fec_mtrx, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_fec_mtrx" "', argument " "1"" of type '" "gr::fec::code::fec_mtrx *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::fec_mtrx * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fec_mtrx_encode(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::code::fec_mtrx *arg1 = (gr::fec::code::fec_mtrx *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "outbuffer",(char *) "inbuffer", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:fec_mtrx_encode",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__fec_mtrx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fec_mtrx_encode" "', argument " "1"" of type '" "gr::fec::code::fec_mtrx const *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::fec_mtrx * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fec_mtrx_encode" "', argument " "2"" of type '" "unsigned char *""'"); 
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fec_mtrx_encode" "', argument " "3"" of type '" "unsigned char const *""'"); 
  }
  arg3 = reinterpret_cast< unsigned char * >(argp3);
  {
    try {
      ((gr::fec::code::fec_mtrx const *)arg1)->encode(arg2,(unsigned char const *)arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fec_mtrx_decode(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::code::fec_mtrx *arg1 = (gr::fec::code::fec_mtrx *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "outbuffer",(char *) "inbuffer",(char *) "frame_size",(char *) "max_iterations", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:fec_mtrx_decode",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__fec_mtrx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fec_mtrx_decode" "', argument " "1"" of type '" "gr::fec::code::fec_mtrx const *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::fec_mtrx * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fec_mtrx_decode" "', argument " "2"" of type '" "unsigned char *""'"); 
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fec_mtrx_decode" "', argument " "3"" of type '" "float const *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fec_mtrx_decode" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fec_mtrx_decode" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  {
    try {
      ((gr::fec::code::fec_mtrx const *)arg1)->decode(arg2,(float const *)arg3,arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fec_mtrx_n(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::fec_mtrx *arg1 = (gr::fec::code::fec_mtrx *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fec_mtrx_n",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__fec_mtrx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fec_mtrx_n" "', argument " "1"" of type '" "gr::fec::code::fec_mtrx const *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::fec_mtrx * >(argp1);
  {
    try {
      result = (unsigned int)((gr::fec::code::fec_mtrx const *)arg1)->n();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fec_mtrx_k(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::fec_mtrx *arg1 = (gr::fec::code::fec_mtrx *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fec_mtrx_k",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__fec_mtrx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fec_mtrx_k" "', argument " "1"" of type '" "gr::fec::code::fec_mtrx const *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::fec_mtrx * >(argp1);
  {
    try {
      result = (unsigned int)((gr::fec::code::fec_mtrx const *)arg1)->k();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *fec_mtrx_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__code__fec_mtrx, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ldpc_H_matrix_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  unsigned int arg2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "filename",(char *) "gap", NULL 
  };
  gr::fec::code::ldpc_H_matrix::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ldpc_H_matrix_make",kwnames,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ldpc_H_matrix_make" "', argument " "1"" of type '" "std::string const""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ldpc_H_matrix_make" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = gr::fec::code::ldpc_H_matrix::make(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::code::ldpc_H_matrix::sptr(static_cast< const gr::fec::code::ldpc_H_matrix::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_H_matrix_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ldpc_H_matrix_get_base_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::ldpc_H_matrix *arg1 = (gr::fec::code::ldpc_H_matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::fec::code::fec_mtrx_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ldpc_H_matrix_get_base_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__ldpc_H_matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ldpc_H_matrix_get_base_sptr" "', argument " "1"" of type '" "gr::fec::code::ldpc_H_matrix *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::ldpc_H_matrix * >(argp1);
  {
    try {
      result = (arg1)->get_base_sptr();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::code::fec_mtrx_sptr(static_cast< const gr::fec::code::fec_mtrx_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__fec_mtrx_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ldpc_H_matrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::ldpc_H_matrix *arg1 = (gr::fec::code::ldpc_H_matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_ldpc_H_matrix",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__ldpc_H_matrix, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ldpc_H_matrix" "', argument " "1"" of type '" "gr::fec::code::ldpc_H_matrix *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::ldpc_H_matrix * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ldpc_H_matrix_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__code__ldpc_H_matrix, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ldpc_G_matrix_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "filename", NULL 
  };
  gr::fec::code::ldpc_G_matrix::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ldpc_G_matrix_make",kwnames,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ldpc_G_matrix_make" "', argument " "1"" of type '" "std::string const""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = gr::fec::code::ldpc_G_matrix::make(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::code::ldpc_G_matrix::sptr(static_cast< const gr::fec::code::ldpc_G_matrix::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_G_matrix_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ldpc_G_matrix_get_base_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::ldpc_G_matrix *arg1 = (gr::fec::code::ldpc_G_matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::fec::code::fec_mtrx_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ldpc_G_matrix_get_base_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__ldpc_G_matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ldpc_G_matrix_get_base_sptr" "', argument " "1"" of type '" "gr::fec::code::ldpc_G_matrix *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::ldpc_G_matrix * >(argp1);
  {
    try {
      result = (arg1)->get_base_sptr();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::code::fec_mtrx_sptr(static_cast< const gr::fec::code::fec_mtrx_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__fec_mtrx_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ldpc_G_matrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::ldpc_G_matrix *arg1 = (gr::fec::code::ldpc_G_matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_ldpc_G_matrix",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__ldpc_G_matrix, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ldpc_G_matrix" "', argument " "1"" of type '" "gr::fec::code::ldpc_G_matrix *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::ldpc_G_matrix * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ldpc_G_matrix_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__code__ldpc_G_matrix, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ldpc_gen_mtrx_encoder_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::code::ldpc_G_matrix::sptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "G_obj", NULL 
  };
  gr::fec::generic_encoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ldpc_gen_mtrx_encoder_make",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_G_matrix_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ldpc_gen_mtrx_encoder_make" "', argument " "1"" of type '" "gr::fec::code::ldpc_G_matrix::sptr const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ldpc_gen_mtrx_encoder_make" "', argument " "1"" of type '" "gr::fec::code::ldpc_G_matrix::sptr const""'");
    } else {
      gr::fec::code::ldpc_G_matrix::sptr * temp = reinterpret_cast< gr::fec::code::ldpc_G_matrix::sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = gr::fec::code::ldpc_gen_mtrx_encoder::make(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::generic_encoder::sptr(static_cast< const gr::fec::generic_encoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ldpc_gen_mtrx_encoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::ldpc_gen_mtrx_encoder *arg1 = (gr::fec::code::ldpc_gen_mtrx_encoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_ldpc_gen_mtrx_encoder",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__ldpc_gen_mtrx_encoder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ldpc_gen_mtrx_encoder" "', argument " "1"" of type '" "gr::fec::code::ldpc_gen_mtrx_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::ldpc_gen_mtrx_encoder * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ldpc_gen_mtrx_encoder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__code__ldpc_gen_mtrx_encoder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ldpc_par_mtrx_encoder_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  unsigned int arg2 = (unsigned int) 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "alist_file",(char *) "gap", NULL 
  };
  gr::fec::generic_encoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:ldpc_par_mtrx_encoder_make",kwnames,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ldpc_par_mtrx_encoder_make" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ldpc_par_mtrx_encoder_make" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
  }
  {
    try {
      result = gr::fec::code::ldpc_par_mtrx_encoder::make(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::generic_encoder::sptr(static_cast< const gr::fec::generic_encoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ldpc_par_mtrx_encoder_make_H(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::code::ldpc_H_matrix::sptr arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *  kwnames[] = {
    (char *) "H_obj", NULL 
  };
  gr::fec::generic_encoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:ldpc_par_mtrx_encoder_make_H",kwnames,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_H_matrix_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ldpc_par_mtrx_encoder_make_H" "', argument " "1"" of type '" "gr::fec::code::ldpc_H_matrix::sptr const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ldpc_par_mtrx_encoder_make_H" "', argument " "1"" of type '" "gr::fec::code::ldpc_H_matrix::sptr const""'");
    } else {
      gr::fec::code::ldpc_H_matrix::sptr * temp = reinterpret_cast< gr::fec::code::ldpc_H_matrix::sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = gr::fec::code::ldpc_par_mtrx_encoder::make_H(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::generic_encoder::sptr(static_cast< const gr::fec::generic_encoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ldpc_par_mtrx_encoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::ldpc_par_mtrx_encoder *arg1 = (gr::fec::code::ldpc_par_mtrx_encoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_ldpc_par_mtrx_encoder",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__ldpc_par_mtrx_encoder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ldpc_par_mtrx_encoder" "', argument " "1"" of type '" "gr::fec::code::ldpc_par_mtrx_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::ldpc_par_mtrx_encoder * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ldpc_par_mtrx_encoder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__code__ldpc_par_mtrx_encoder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ldpc_bit_flip_decoder_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  gr::fec::code::fec_mtrx_sptr arg1 ;
  unsigned int arg2 = (unsigned int) 100 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "mtrx_obj",(char *) "max_iter", NULL 
  };
  gr::fec::generic_decoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|O:ldpc_bit_flip_decoder_make",kwnames,&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__fec_mtrx_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ldpc_bit_flip_decoder_make" "', argument " "1"" of type '" "gr::fec::code::fec_mtrx_sptr const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ldpc_bit_flip_decoder_make" "', argument " "1"" of type '" "gr::fec::code::fec_mtrx_sptr const""'");
    } else {
      gr::fec::code::fec_mtrx_sptr * temp = reinterpret_cast< gr::fec::code::fec_mtrx_sptr * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ldpc_bit_flip_decoder_make" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
  }
  {
    try {
      result = gr::fec::code::ldpc_bit_flip_decoder::make(arg1,arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::generic_decoder::sptr(static_cast< const gr::fec::generic_decoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ldpc_bit_flip_decoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::ldpc_bit_flip_decoder *arg1 = (gr::fec::code::ldpc_bit_flip_decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_ldpc_bit_flip_decoder",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__ldpc_bit_flip_decoder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ldpc_bit_flip_decoder" "', argument " "1"" of type '" "gr::fec::code::ldpc_bit_flip_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::ldpc_bit_flip_decoder * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ldpc_bit_flip_decoder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__code__ldpc_bit_flip_decoder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_ldpc_decoder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::ldpc_decoder *arg1 = (gr::fec::ldpc_decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_ldpc_decoder",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__ldpc_decoder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ldpc_decoder" "', argument " "1"" of type '" "gr::fec::ldpc_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::ldpc_decoder * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ldpc_decoder_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  float arg2 = (float) 0.5 ;
  int arg3 = (int) 50 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "alist_file",(char *) "sigma",(char *) "max_iterations", NULL 
  };
  gr::fec::generic_decoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OO:ldpc_decoder_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ldpc_decoder_make" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_float(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ldpc_decoder_make" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ldpc_decoder_make" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  {
    try {
      result = gr::fec::ldpc_decoder::make(arg1,arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::generic_decoder::sptr(static_cast< const gr::fec::generic_decoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ldpc_decoder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_gr__fec__ldpc_decoder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_matrix_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::matrix > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::fec::code::matrix > *)new boost::shared_ptr< gr::fec::code::matrix >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__matrix_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_matrix_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::matrix *arg1 = (gr::fec::code::matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::fec::code::matrix > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_matrix_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_matrix_sptr" "', argument " "1"" of type '" "gr::fec::code::matrix *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::matrix * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::fec::code::matrix > *)new boost::shared_ptr< gr::fec::code::matrix >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__matrix_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_matrix_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_matrix_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__fec__code__matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_matrix_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_matrix_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::fec::code::matrix >::shared_ptr()\n"
    "    boost::shared_ptr< gr::fec::code::matrix >::shared_ptr(gr::fec::code::matrix *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_matrix_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::matrix > *arg1 = (boost::shared_ptr< gr::fec::code::matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::fec::code::matrix *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"matrix_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__matrix_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "matrix_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::matrix > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::matrix > * >(argp1);
  {
    try {
      result = (gr::fec::code::matrix *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__fec__code__matrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_matrix_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::matrix > *arg1 = (boost::shared_ptr< gr::fec::code::matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_matrix_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__matrix_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_matrix_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::matrix > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::matrix > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_matrix_sptr_size1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::matrix > *arg1 = (boost::shared_ptr< gr::fec::code::matrix > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"matrix_sptr_size1_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__matrix_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "matrix_sptr_size1_set" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::matrix > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::matrix > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "matrix_sptr_size1_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (*arg1)->size1 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_matrix_sptr_size1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::matrix > *arg1 = (boost::shared_ptr< gr::fec::code::matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"matrix_sptr_size1_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__matrix_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "matrix_sptr_size1_get" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::matrix > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::matrix > * >(argp1);
  result =  ((*arg1)->size1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_matrix_sptr_size2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::matrix > *arg1 = (boost::shared_ptr< gr::fec::code::matrix > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"matrix_sptr_size2_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__matrix_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "matrix_sptr_size2_set" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::matrix > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::matrix > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "matrix_sptr_size2_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (*arg1)->size2 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_matrix_sptr_size2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::matrix > *arg1 = (boost::shared_ptr< gr::fec::code::matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"matrix_sptr_size2_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__matrix_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "matrix_sptr_size2_get" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::matrix > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::matrix > * >(argp1);
  result =  ((*arg1)->size2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_matrix_sptr_tda_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::matrix > *arg1 = (boost::shared_ptr< gr::fec::code::matrix > *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"matrix_sptr_tda_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__matrix_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "matrix_sptr_tda_set" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::matrix > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::matrix > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "matrix_sptr_tda_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  if (arg1) (*arg1)->tda = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_matrix_sptr_tda_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::matrix > *arg1 = (boost::shared_ptr< gr::fec::code::matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"matrix_sptr_tda_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__matrix_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "matrix_sptr_tda_get" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::matrix > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::matrix > * >(argp1);
  result =  ((*arg1)->tda);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_matrix_sptr_data_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::matrix > *arg1 = (boost::shared_ptr< gr::fec::code::matrix > *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"matrix_sptr_data_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__matrix_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "matrix_sptr_data_set" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::matrix > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::matrix > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "matrix_sptr_data_set" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (*arg1)->data = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_matrix_sptr_data_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::matrix > *arg1 = (boost::shared_ptr< gr::fec::code::matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"matrix_sptr_data_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__matrix_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "matrix_sptr_data_get" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::matrix > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::matrix > * >(argp1);
  result = (double *) ((*arg1)->data);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_matrix_sptr_block_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::matrix > *arg1 = (boost::shared_ptr< gr::fec::code::matrix > *) 0 ;
  gr::fec::code::block_data *arg2 = (gr::fec::code::block_data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"matrix_sptr_block_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__matrix_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "matrix_sptr_block_set" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::matrix > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::matrix > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_gr__fec__code__block_data, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "matrix_sptr_block_set" "', argument " "2"" of type '" "gr::fec::code::block_data *""'"); 
  }
  arg2 = reinterpret_cast< gr::fec::code::block_data * >(argp2);
  if (arg1) (*arg1)->block = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_matrix_sptr_block_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::matrix > *arg1 = (boost::shared_ptr< gr::fec::code::matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::fec::code::block_data *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"matrix_sptr_block_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__matrix_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "matrix_sptr_block_get" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::matrix > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::matrix > * >(argp1);
  result = (gr::fec::code::block_data *) ((*arg1)->block);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__fec__code__block_data, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_matrix_sptr_owner_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::matrix > *arg1 = (boost::shared_ptr< gr::fec::code::matrix > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"matrix_sptr_owner_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__matrix_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "matrix_sptr_owner_set" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::matrix > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::matrix > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "matrix_sptr_owner_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (*arg1)->owner = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_matrix_sptr_owner_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::matrix > *arg1 = (boost::shared_ptr< gr::fec::code::matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"matrix_sptr_owner_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__matrix_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "matrix_sptr_owner_get" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::matrix > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::matrix > * >(argp1);
  result = (int) ((*arg1)->owner);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *matrix_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__matrix_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_fec_mtrx_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::fec_mtrx > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::fec::code::fec_mtrx > *)new boost::shared_ptr< gr::fec::code::fec_mtrx >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__fec_mtrx_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fec_mtrx_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::fec_mtrx *arg1 = (gr::fec::code::fec_mtrx *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::fec::code::fec_mtrx > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_fec_mtrx_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__fec_mtrx, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_fec_mtrx_sptr" "', argument " "1"" of type '" "gr::fec::code::fec_mtrx *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::fec_mtrx * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::fec::code::fec_mtrx > *)new boost::shared_ptr< gr::fec::code::fec_mtrx >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__fec_mtrx_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fec_mtrx_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_fec_mtrx_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__fec__code__fec_mtrx, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_fec_mtrx_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_fec_mtrx_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::fec::code::fec_mtrx >::shared_ptr()\n"
    "    boost::shared_ptr< gr::fec::code::fec_mtrx >::shared_ptr(gr::fec::code::fec_mtrx *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_fec_mtrx_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::fec_mtrx > *arg1 = (boost::shared_ptr< gr::fec::code::fec_mtrx > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::fec::code::fec_mtrx *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"fec_mtrx_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__fec_mtrx_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fec_mtrx_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::fec_mtrx > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::fec_mtrx > * >(argp1);
  {
    try {
      result = (gr::fec::code::fec_mtrx *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__fec__code__fec_mtrx, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_fec_mtrx_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::fec_mtrx > *arg1 = (boost::shared_ptr< gr::fec::code::fec_mtrx > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_fec_mtrx_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__fec_mtrx_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_fec_mtrx_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::fec_mtrx > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::fec_mtrx > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fec_mtrx_sptr_encode(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::fec_mtrx > *arg1 = (boost::shared_ptr< gr::fec::code::fec_mtrx > *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "outbuffer",(char *) "inbuffer", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:fec_mtrx_sptr_encode",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__fec_mtrx_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fec_mtrx_sptr_encode" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::fec_mtrx > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::fec_mtrx > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fec_mtrx_sptr_encode" "', argument " "2"" of type '" "unsigned char *""'"); 
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fec_mtrx_sptr_encode" "', argument " "3"" of type '" "unsigned char const *""'"); 
  }
  arg3 = reinterpret_cast< unsigned char * >(argp3);
  {
    try {
      (*arg1)->encode(arg2,(unsigned char const *)arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fec_mtrx_sptr_decode(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::fec_mtrx > *arg1 = (boost::shared_ptr< gr::fec::code::fec_mtrx > *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "outbuffer",(char *) "inbuffer",(char *) "frame_size",(char *) "max_iterations", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:fec_mtrx_sptr_decode",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__fec_mtrx_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fec_mtrx_sptr_decode" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::fec_mtrx > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::fec_mtrx > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fec_mtrx_sptr_decode" "', argument " "2"" of type '" "unsigned char *""'"); 
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fec_mtrx_sptr_decode" "', argument " "3"" of type '" "float const *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fec_mtrx_sptr_decode" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fec_mtrx_sptr_decode" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  {
    try {
      (*arg1)->decode(arg2,(float const *)arg3,arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fec_mtrx_sptr_n(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::fec_mtrx > *arg1 = (boost::shared_ptr< gr::fec::code::fec_mtrx > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fec_mtrx_sptr_n",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__fec_mtrx_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fec_mtrx_sptr_n" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::fec_mtrx > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::fec_mtrx > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->n();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fec_mtrx_sptr_k(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::fec_mtrx > *arg1 = (boost::shared_ptr< gr::fec::code::fec_mtrx > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"fec_mtrx_sptr_k",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__fec_mtrx_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fec_mtrx_sptr_k" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::fec_mtrx > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::fec_mtrx > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->k();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *fec_mtrx_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__fec_mtrx_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ldpc_H_matrix_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::ldpc_H_matrix > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::fec::code::ldpc_H_matrix > *)new boost::shared_ptr< gr::fec::code::ldpc_H_matrix >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_H_matrix_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ldpc_H_matrix_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::ldpc_H_matrix *arg1 = (gr::fec::code::ldpc_H_matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::fec::code::ldpc_H_matrix > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_ldpc_H_matrix_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__ldpc_H_matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ldpc_H_matrix_sptr" "', argument " "1"" of type '" "gr::fec::code::ldpc_H_matrix *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::ldpc_H_matrix * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::fec::code::ldpc_H_matrix > *)new boost::shared_ptr< gr::fec::code::ldpc_H_matrix >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_H_matrix_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ldpc_H_matrix_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ldpc_H_matrix_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__fec__code__ldpc_H_matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ldpc_H_matrix_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ldpc_H_matrix_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::fec::code::ldpc_H_matrix >::shared_ptr()\n"
    "    boost::shared_ptr< gr::fec::code::ldpc_H_matrix >::shared_ptr(gr::fec::code::ldpc_H_matrix *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ldpc_H_matrix_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::ldpc_H_matrix > *arg1 = (boost::shared_ptr< gr::fec::code::ldpc_H_matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::fec::code::ldpc_H_matrix *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"ldpc_H_matrix_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_H_matrix_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ldpc_H_matrix_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::ldpc_H_matrix > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::ldpc_H_matrix > * >(argp1);
  {
    try {
      result = (gr::fec::code::ldpc_H_matrix *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__fec__code__ldpc_H_matrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ldpc_H_matrix_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::ldpc_H_matrix > *arg1 = (boost::shared_ptr< gr::fec::code::ldpc_H_matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_ldpc_H_matrix_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_H_matrix_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ldpc_H_matrix_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::ldpc_H_matrix > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::ldpc_H_matrix > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ldpc_H_matrix_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::ldpc_H_matrix > *arg1 = (boost::shared_ptr< gr::fec::code::ldpc_H_matrix > *) 0 ;
  std::string arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "filename",(char *) "gap", NULL 
  };
  gr::fec::code::ldpc_H_matrix::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:ldpc_H_matrix_sptr_make",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_H_matrix_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ldpc_H_matrix_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::ldpc_H_matrix > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::ldpc_H_matrix > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ldpc_H_matrix_sptr_make" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ldpc_H_matrix_sptr_make" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = (*arg1)->make(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::code::ldpc_H_matrix::sptr(static_cast< const gr::fec::code::ldpc_H_matrix::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_H_matrix_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ldpc_H_matrix_sptr_get_base_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::ldpc_H_matrix > *arg1 = (boost::shared_ptr< gr::fec::code::ldpc_H_matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::fec::code::fec_mtrx_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ldpc_H_matrix_sptr_get_base_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_H_matrix_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ldpc_H_matrix_sptr_get_base_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::ldpc_H_matrix > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::ldpc_H_matrix > * >(argp1);
  {
    try {
      result = (*arg1)->get_base_sptr();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::code::fec_mtrx_sptr(static_cast< const gr::fec::code::fec_mtrx_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__fec_mtrx_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ldpc_H_matrix_sptr_encode(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::ldpc_H_matrix > *arg1 = (boost::shared_ptr< gr::fec::code::ldpc_H_matrix > *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "outbuffer",(char *) "inbuffer", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:ldpc_H_matrix_sptr_encode",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_H_matrix_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ldpc_H_matrix_sptr_encode" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::ldpc_H_matrix > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::ldpc_H_matrix > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ldpc_H_matrix_sptr_encode" "', argument " "2"" of type '" "unsigned char *""'"); 
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ldpc_H_matrix_sptr_encode" "', argument " "3"" of type '" "unsigned char const *""'"); 
  }
  arg3 = reinterpret_cast< unsigned char * >(argp3);
  {
    try {
      (*arg1)->encode(arg2,(unsigned char const *)arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ldpc_H_matrix_sptr_decode(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::ldpc_H_matrix > *arg1 = (boost::shared_ptr< gr::fec::code::ldpc_H_matrix > *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "outbuffer",(char *) "inbuffer",(char *) "frame_size",(char *) "max_iterations", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:ldpc_H_matrix_sptr_decode",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_H_matrix_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ldpc_H_matrix_sptr_decode" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::ldpc_H_matrix > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::ldpc_H_matrix > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ldpc_H_matrix_sptr_decode" "', argument " "2"" of type '" "unsigned char *""'"); 
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ldpc_H_matrix_sptr_decode" "', argument " "3"" of type '" "float const *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ldpc_H_matrix_sptr_decode" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ldpc_H_matrix_sptr_decode" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  {
    try {
      (*arg1)->decode(arg2,(float const *)arg3,arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ldpc_H_matrix_sptr_n(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::ldpc_H_matrix > *arg1 = (boost::shared_ptr< gr::fec::code::ldpc_H_matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ldpc_H_matrix_sptr_n",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_H_matrix_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ldpc_H_matrix_sptr_n" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::ldpc_H_matrix > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::ldpc_H_matrix > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->n();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ldpc_H_matrix_sptr_k(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::ldpc_H_matrix > *arg1 = (boost::shared_ptr< gr::fec::code::ldpc_H_matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ldpc_H_matrix_sptr_k",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_H_matrix_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ldpc_H_matrix_sptr_k" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::ldpc_H_matrix > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::ldpc_H_matrix > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->k();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ldpc_H_matrix_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_H_matrix_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ldpc_G_matrix_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::ldpc_G_matrix > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::fec::code::ldpc_G_matrix > *)new boost::shared_ptr< gr::fec::code::ldpc_G_matrix >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_G_matrix_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ldpc_G_matrix_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::code::ldpc_G_matrix *arg1 = (gr::fec::code::ldpc_G_matrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::fec::code::ldpc_G_matrix > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_ldpc_G_matrix_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__code__ldpc_G_matrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ldpc_G_matrix_sptr" "', argument " "1"" of type '" "gr::fec::code::ldpc_G_matrix *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::code::ldpc_G_matrix * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::fec::code::ldpc_G_matrix > *)new boost::shared_ptr< gr::fec::code::ldpc_G_matrix >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_G_matrix_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ldpc_G_matrix_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ldpc_G_matrix_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__fec__code__ldpc_G_matrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ldpc_G_matrix_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ldpc_G_matrix_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::fec::code::ldpc_G_matrix >::shared_ptr()\n"
    "    boost::shared_ptr< gr::fec::code::ldpc_G_matrix >::shared_ptr(gr::fec::code::ldpc_G_matrix *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ldpc_G_matrix_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::ldpc_G_matrix > *arg1 = (boost::shared_ptr< gr::fec::code::ldpc_G_matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::fec::code::ldpc_G_matrix *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"ldpc_G_matrix_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_G_matrix_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ldpc_G_matrix_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::ldpc_G_matrix > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::ldpc_G_matrix > * >(argp1);
  {
    try {
      result = (gr::fec::code::ldpc_G_matrix *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__fec__code__ldpc_G_matrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ldpc_G_matrix_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::ldpc_G_matrix > *arg1 = (boost::shared_ptr< gr::fec::code::ldpc_G_matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_ldpc_G_matrix_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_G_matrix_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ldpc_G_matrix_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::ldpc_G_matrix > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::ldpc_G_matrix > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ldpc_G_matrix_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::ldpc_G_matrix > *arg1 = (boost::shared_ptr< gr::fec::code::ldpc_G_matrix > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "filename", NULL 
  };
  gr::fec::code::ldpc_G_matrix::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ldpc_G_matrix_sptr_make",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_G_matrix_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ldpc_G_matrix_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::ldpc_G_matrix > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::ldpc_G_matrix > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ldpc_G_matrix_sptr_make" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (*arg1)->make(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::code::ldpc_G_matrix::sptr(static_cast< const gr::fec::code::ldpc_G_matrix::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_G_matrix_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ldpc_G_matrix_sptr_get_base_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::ldpc_G_matrix > *arg1 = (boost::shared_ptr< gr::fec::code::ldpc_G_matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::fec::code::fec_mtrx_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ldpc_G_matrix_sptr_get_base_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_G_matrix_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ldpc_G_matrix_sptr_get_base_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::ldpc_G_matrix > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::ldpc_G_matrix > * >(argp1);
  {
    try {
      result = (*arg1)->get_base_sptr();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::code::fec_mtrx_sptr(static_cast< const gr::fec::code::fec_mtrx_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__fec_mtrx_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ldpc_G_matrix_sptr_encode(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::ldpc_G_matrix > *arg1 = (boost::shared_ptr< gr::fec::code::ldpc_G_matrix > *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "outbuffer",(char *) "inbuffer", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:ldpc_G_matrix_sptr_encode",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_G_matrix_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ldpc_G_matrix_sptr_encode" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::ldpc_G_matrix > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::ldpc_G_matrix > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ldpc_G_matrix_sptr_encode" "', argument " "2"" of type '" "unsigned char *""'"); 
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ldpc_G_matrix_sptr_encode" "', argument " "3"" of type '" "unsigned char const *""'"); 
  }
  arg3 = reinterpret_cast< unsigned char * >(argp3);
  {
    try {
      (*arg1)->encode(arg2,(unsigned char const *)arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ldpc_G_matrix_sptr_decode(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::ldpc_G_matrix > *arg1 = (boost::shared_ptr< gr::fec::code::ldpc_G_matrix > *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "outbuffer",(char *) "inbuffer",(char *) "frame_size",(char *) "max_iterations", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:ldpc_G_matrix_sptr_decode",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_G_matrix_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ldpc_G_matrix_sptr_decode" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::ldpc_G_matrix > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::ldpc_G_matrix > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ldpc_G_matrix_sptr_decode" "', argument " "2"" of type '" "unsigned char *""'"); 
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ldpc_G_matrix_sptr_decode" "', argument " "3"" of type '" "float const *""'"); 
  }
  arg3 = reinterpret_cast< float * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ldpc_G_matrix_sptr_decode" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ldpc_G_matrix_sptr_decode" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  {
    try {
      (*arg1)->decode(arg2,(float const *)arg3,arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ldpc_G_matrix_sptr_n(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::ldpc_G_matrix > *arg1 = (boost::shared_ptr< gr::fec::code::ldpc_G_matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ldpc_G_matrix_sptr_n",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_G_matrix_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ldpc_G_matrix_sptr_n" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::ldpc_G_matrix > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::ldpc_G_matrix > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->n();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ldpc_G_matrix_sptr_k(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::code::ldpc_G_matrix > *arg1 = (boost::shared_ptr< gr::fec::code::ldpc_G_matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ldpc_G_matrix_sptr_k",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_G_matrix_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ldpc_G_matrix_sptr_k" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::code::ldpc_G_matrix > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::code::ldpc_G_matrix > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->k();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ldpc_G_matrix_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__fec__code__ldpc_G_matrix_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_decoder_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::fec::decoder > *)new boost::shared_ptr< gr::fec::decoder >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_decoder_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::decoder *arg1 = (gr::fec::decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::fec::decoder > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_decoder_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_decoder_sptr" "', argument " "1"" of type '" "gr::fec::decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::decoder * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::fec::decoder > *)new boost::shared_ptr< gr::fec::decoder >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_decoder_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_decoder_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__fec__decoder, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_decoder_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_decoder_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::fec::decoder >::shared_ptr()\n"
    "    boost::shared_ptr< gr::fec::decoder >::shared_ptr(gr::fec::decoder *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_decoder_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::fec::decoder *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (gr::fec::decoder *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__fec__decoder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_decoder_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_decoder_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_decoder_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  gr::fec::generic_decoder::sptr arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "my_decoder",(char *) "input_item_size",(char *) "output_item_size", NULL 
  };
  gr::fec::decoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:decoder_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "decoder_sptr_make" "', argument " "2"" of type '" "gr::fec::generic_decoder::sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "decoder_sptr_make" "', argument " "2"" of type '" "gr::fec::generic_decoder::sptr""'");
    } else {
      gr::fec::generic_decoder::sptr * temp = reinterpret_cast< gr::fec::generic_decoder::sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "decoder_sptr_make" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "decoder_sptr_make" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::decoder::sptr(static_cast< const gr::fec::decoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_general_work(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  int arg2 ;
  gr_vector_int *arg3 = 0 ;
  gr_vector_const_void_star *arg4 = 0 ;
  gr_vector_void_star *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "noutput_items",(char *) "ninput_items",(char *) "input_items",(char *) "output_items", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:decoder_sptr_general_work",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_general_work" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_sptr_general_work" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_gr_vector_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "decoder_sptr_general_work" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "decoder_sptr_general_work" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  arg3 = reinterpret_cast< gr_vector_int * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_gr_vector_const_void_star,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "decoder_sptr_general_work" "', argument " "4"" of type '" "gr_vector_const_void_star &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "decoder_sptr_general_work" "', argument " "4"" of type '" "gr_vector_const_void_star &""'"); 
  }
  arg4 = reinterpret_cast< gr_vector_const_void_star * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_gr_vector_void_star,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "decoder_sptr_general_work" "', argument " "5"" of type '" "gr_vector_void_star &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "decoder_sptr_general_work" "', argument " "5"" of type '" "gr_vector_void_star &""'"); 
  }
  arg5 = reinterpret_cast< gr_vector_void_star * >(argp5);
  {
    try {
      result = (int)(*arg1)->general_work(arg2,*arg3,*arg4,*arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_fixed_rate_ninput_to_noutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninput", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:decoder_sptr_fixed_rate_ninput_to_noutput",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_fixed_rate_ninput_to_noutput" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_sptr_fixed_rate_ninput_to_noutput" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->fixed_rate_ninput_to_noutput(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_fixed_rate_noutput_to_ninput(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "noutput", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:decoder_sptr_fixed_rate_noutput_to_ninput",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_fixed_rate_noutput_to_ninput" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_sptr_fixed_rate_noutput_to_ninput" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->fixed_rate_noutput_to_ninput(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_forecast(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  int arg2 ;
  gr_vector_int *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "noutput_items",(char *) "ninput_items_required", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:decoder_sptr_forecast",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_forecast" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_sptr_forecast" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_gr_vector_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "decoder_sptr_forecast" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "decoder_sptr_forecast" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  arg3 = reinterpret_cast< gr_vector_int * >(argp3);
  {
    try {
      (*arg1)->forecast(arg2,*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "decoder_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_decoder_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_decoder_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'decoder_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:decoder_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:decoder_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:decoder_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:decoder_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:decoder_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:decoder_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "decoder_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_decoder_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_decoder_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'decoder_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:decoder_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "decoder_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_decoder_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_decoder_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'decoder_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_decoder_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_decoder_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'decoder_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_decoder_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_decoder_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'decoder_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_decoder_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_decoder_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'decoder_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_decoder_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_decoder_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'decoder_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_decoder_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_decoder_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'decoder_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_decoder_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_decoder_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'decoder_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:decoder_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "decoder_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "decoder_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:decoder_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:decoder_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decoder_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "decoder_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:decoder_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "decoder_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:decoder_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "decoder_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "decoder_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "decoder_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "decoder_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decoder_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decoder_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decoder > *arg1 = (boost::shared_ptr< gr::fec::decoder > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:decoder_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decoder_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decoder > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "decoder_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "decoder_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *decoder_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__fec__decoder_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_encoder_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::fec::encoder > *)new boost::shared_ptr< gr::fec::encoder >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_encoder_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::encoder *arg1 = (gr::fec::encoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::fec::encoder > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_encoder_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_encoder_sptr" "', argument " "1"" of type '" "gr::fec::encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::encoder * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::fec::encoder > *)new boost::shared_ptr< gr::fec::encoder >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_encoder_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_encoder_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__fec__encoder, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_encoder_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_encoder_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::fec::encoder >::shared_ptr()\n"
    "    boost::shared_ptr< gr::fec::encoder >::shared_ptr(gr::fec::encoder *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_encoder_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::fec::encoder *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (gr::fec::encoder *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__fec__encoder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_encoder_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_encoder_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_encoder_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  gr::fec::generic_encoder::sptr arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "my_encoder",(char *) "input_item_size",(char *) "output_item_size", NULL 
  };
  gr::fec::encoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:encoder_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "encoder_sptr_make" "', argument " "2"" of type '" "gr::fec::generic_encoder::sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "encoder_sptr_make" "', argument " "2"" of type '" "gr::fec::generic_encoder::sptr""'");
    } else {
      gr::fec::generic_encoder::sptr * temp = reinterpret_cast< gr::fec::generic_encoder::sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "encoder_sptr_make" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "encoder_sptr_make" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::encoder::sptr(static_cast< const gr::fec::encoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_general_work(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  int arg2 ;
  gr_vector_int *arg3 = 0 ;
  gr_vector_const_void_star *arg4 = 0 ;
  gr_vector_void_star *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "noutput_items",(char *) "ninput_items",(char *) "input_items",(char *) "output_items", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:encoder_sptr_general_work",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_general_work" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_sptr_general_work" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_gr_vector_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "encoder_sptr_general_work" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "encoder_sptr_general_work" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  arg3 = reinterpret_cast< gr_vector_int * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_gr_vector_const_void_star,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "encoder_sptr_general_work" "', argument " "4"" of type '" "gr_vector_const_void_star &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "encoder_sptr_general_work" "', argument " "4"" of type '" "gr_vector_const_void_star &""'"); 
  }
  arg4 = reinterpret_cast< gr_vector_const_void_star * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_gr_vector_void_star,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "encoder_sptr_general_work" "', argument " "5"" of type '" "gr_vector_void_star &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "encoder_sptr_general_work" "', argument " "5"" of type '" "gr_vector_void_star &""'"); 
  }
  arg5 = reinterpret_cast< gr_vector_void_star * >(argp5);
  {
    try {
      result = (int)(*arg1)->general_work(arg2,*arg3,*arg4,*arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_fixed_rate_ninput_to_noutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninput", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:encoder_sptr_fixed_rate_ninput_to_noutput",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_fixed_rate_ninput_to_noutput" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_sptr_fixed_rate_ninput_to_noutput" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->fixed_rate_ninput_to_noutput(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_fixed_rate_noutput_to_ninput(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "noutput", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:encoder_sptr_fixed_rate_noutput_to_ninput",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_fixed_rate_noutput_to_ninput" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_sptr_fixed_rate_noutput_to_ninput" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->fixed_rate_noutput_to_ninput(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_forecast(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  int arg2 ;
  gr_vector_int *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "noutput_items",(char *) "ninput_items_required", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:encoder_sptr_forecast",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_forecast" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_sptr_forecast" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_gr_vector_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "encoder_sptr_forecast" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "encoder_sptr_forecast" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  arg3 = reinterpret_cast< gr_vector_int * >(argp3);
  {
    try {
      (*arg1)->forecast(arg2,*arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "encoder_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_encoder_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_encoder_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'encoder_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:encoder_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:encoder_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:encoder_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:encoder_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:encoder_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:encoder_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "encoder_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_encoder_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_encoder_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'encoder_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:encoder_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "encoder_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_encoder_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_encoder_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'encoder_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_encoder_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_encoder_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'encoder_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_encoder_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_encoder_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'encoder_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_encoder_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_encoder_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'encoder_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_encoder_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_encoder_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'encoder_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_encoder_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_encoder_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'encoder_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_encoder_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_encoder_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'encoder_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:encoder_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "encoder_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "encoder_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:encoder_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:encoder_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encoder_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "encoder_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:encoder_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "encoder_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:encoder_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "encoder_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "encoder_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "encoder_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "encoder_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encoder_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encoder_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encoder > *arg1 = (boost::shared_ptr< gr::fec::encoder > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:encoder_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encoder_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encoder > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "encoder_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "encoder_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *encoder_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__fec__encoder_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_tagged_decoder_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::fec::tagged_decoder > *)new boost::shared_ptr< gr::fec::tagged_decoder >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tagged_decoder_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::tagged_decoder *arg1 = (gr::fec::tagged_decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::fec::tagged_decoder > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_tagged_decoder_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__tagged_decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_tagged_decoder_sptr" "', argument " "1"" of type '" "gr::fec::tagged_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::tagged_decoder * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::fec::tagged_decoder > *)new boost::shared_ptr< gr::fec::tagged_decoder >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tagged_decoder_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_tagged_decoder_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__fec__tagged_decoder, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_tagged_decoder_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_tagged_decoder_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::fec::tagged_decoder >::shared_ptr()\n"
    "    boost::shared_ptr< gr::fec::tagged_decoder >::shared_ptr(gr::fec::tagged_decoder *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::fec::tagged_decoder *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (gr::fec::tagged_decoder *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__fec__tagged_decoder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tagged_decoder_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_tagged_decoder_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tagged_decoder_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  gr::fec::generic_decoder::sptr arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  std::string const &arg5_defvalue = "packet_len" ;
  std::string *arg5 = (std::string *) &arg5_defvalue ;
  int arg6 = (int) 1500 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "my_decoder",(char *) "input_item_size",(char *) "output_item_size",(char *) "lengthtagname",(char *) "mtu", NULL 
  };
  gr::fec::tagged_decoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO|OO:tagged_decoder_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagged_decoder_sptr_make" "', argument " "2"" of type '" "gr::fec::generic_decoder::sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_decoder_sptr_make" "', argument " "2"" of type '" "gr::fec::generic_decoder::sptr""'");
    } else {
      gr::fec::generic_decoder::sptr * temp = reinterpret_cast< gr::fec::generic_decoder::sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_decoder_sptr_make" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "tagged_decoder_sptr_make" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  if (obj4) {
    {
      std::string *ptr = (std::string *)0;
      res5 = SWIG_AsPtr_std_string(obj4, &ptr);
      if (!SWIG_IsOK(res5)) {
        SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "tagged_decoder_sptr_make" "', argument " "5"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_decoder_sptr_make" "', argument " "5"" of type '" "std::string const &""'"); 
      }
      arg5 = ptr;
    }
  }
  if (obj5) {
    ecode6 = SWIG_AsVal_int(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "tagged_decoder_sptr_make" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
  }
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4,(std::string const &)*arg5,arg6);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::tagged_decoder::sptr(static_cast< const gr::fec::tagged_decoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_work(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  int arg2 ;
  gr_vector_int *arg3 = 0 ;
  gr_vector_const_void_star *arg4 = 0 ;
  gr_vector_void_star *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "noutput_items",(char *) "ninput_items",(char *) "input_items",(char *) "output_items", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:tagged_decoder_sptr_work",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_work" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_decoder_sptr_work" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_gr_vector_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tagged_decoder_sptr_work" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_decoder_sptr_work" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  arg3 = reinterpret_cast< gr_vector_int * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_gr_vector_const_void_star,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "tagged_decoder_sptr_work" "', argument " "4"" of type '" "gr_vector_const_void_star &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_decoder_sptr_work" "', argument " "4"" of type '" "gr_vector_const_void_star &""'"); 
  }
  arg4 = reinterpret_cast< gr_vector_const_void_star * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_gr_vector_void_star,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "tagged_decoder_sptr_work" "', argument " "5"" of type '" "gr_vector_void_star &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_decoder_sptr_work" "', argument " "5"" of type '" "gr_vector_void_star &""'"); 
  }
  arg5 = reinterpret_cast< gr_vector_void_star * >(argp5);
  {
    try {
      result = (int)(*arg1)->work(arg2,*arg3,*arg4,*arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_calculate_output_stream_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  gr_vector_int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninput_items", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_decoder_sptr_calculate_output_stream_length",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_calculate_output_stream_length" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gr_vector_int,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagged_decoder_sptr_calculate_output_stream_length" "', argument " "2"" of type '" "gr_vector_int const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_decoder_sptr_calculate_output_stream_length" "', argument " "2"" of type '" "gr_vector_int const &""'"); 
  }
  arg2 = reinterpret_cast< gr_vector_int * >(argp2);
  {
    try {
      result = (int)(*arg1)->calculate_output_stream_length((gr_vector_int const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_decoder_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_decoder_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_decoder_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_decoder_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tagged_decoder_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_decoder_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_decoder_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_decoder_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_decoder_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_decoder_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_decoder_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_decoder_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_decoder_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_decoder_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_decoder_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_decoder_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_decoder_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_decoder_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_decoder_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_decoder_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_decoder_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_decoder_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tagged_decoder_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_decoder_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_decoder_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_decoder_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_decoder_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_decoder_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_decoder_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_decoder_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tagged_decoder_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_decoder_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_decoder_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_decoder_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_decoder_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_decoder_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_decoder_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_decoder_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_decoder_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_decoder_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_decoder_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_decoder_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_decoder_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_decoder_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_decoder_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_decoder_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_decoder_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_decoder_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_decoder_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_decoder_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_decoder_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_decoder_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_decoder_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_decoder_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_decoder_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_decoder_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_decoder_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagged_decoder_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_decoder_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_decoder_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_decoder_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:tagged_decoder_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_decoder_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_decoder_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_decoder_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "tagged_decoder_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:tagged_decoder_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagged_decoder_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_decoder_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tagged_decoder_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_decoder_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_decoder_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_decoder_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_decoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_decoder > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_decoder_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_decoder_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_decoder > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagged_decoder_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_decoder_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tagged_decoder_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_decoder_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_tagged_encoder_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::fec::tagged_encoder > *)new boost::shared_ptr< gr::fec::tagged_encoder >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tagged_encoder_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::tagged_encoder *arg1 = (gr::fec::tagged_encoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::fec::tagged_encoder > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_tagged_encoder_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__tagged_encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_tagged_encoder_sptr" "', argument " "1"" of type '" "gr::fec::tagged_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::tagged_encoder * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::fec::tagged_encoder > *)new boost::shared_ptr< gr::fec::tagged_encoder >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_tagged_encoder_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_tagged_encoder_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__fec__tagged_encoder, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_tagged_encoder_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_tagged_encoder_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::fec::tagged_encoder >::shared_ptr()\n"
    "    boost::shared_ptr< gr::fec::tagged_encoder >::shared_ptr(gr::fec::tagged_encoder *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::fec::tagged_encoder *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (gr::fec::tagged_encoder *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__fec__tagged_encoder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tagged_encoder_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_tagged_encoder_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tagged_encoder_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  gr::fec::generic_encoder::sptr arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  std::string const &arg5_defvalue = "packet_len" ;
  std::string *arg5 = (std::string *) &arg5_defvalue ;
  int arg6 = (int) 1500 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "my_encoder",(char *) "input_item_size",(char *) "output_item_size",(char *) "lengthtagname",(char *) "mtu", NULL 
  };
  gr::fec::tagged_encoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO|OO:tagged_encoder_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagged_encoder_sptr_make" "', argument " "2"" of type '" "gr::fec::generic_encoder::sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_encoder_sptr_make" "', argument " "2"" of type '" "gr::fec::generic_encoder::sptr""'");
    } else {
      gr::fec::generic_encoder::sptr * temp = reinterpret_cast< gr::fec::generic_encoder::sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_encoder_sptr_make" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "tagged_encoder_sptr_make" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  if (obj4) {
    {
      std::string *ptr = (std::string *)0;
      res5 = SWIG_AsPtr_std_string(obj4, &ptr);
      if (!SWIG_IsOK(res5)) {
        SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "tagged_encoder_sptr_make" "', argument " "5"" of type '" "std::string const &""'"); 
      }
      if (!ptr) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_encoder_sptr_make" "', argument " "5"" of type '" "std::string const &""'"); 
      }
      arg5 = ptr;
    }
  }
  if (obj5) {
    ecode6 = SWIG_AsVal_int(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "tagged_encoder_sptr_make" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
  }
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4,(std::string const &)*arg5,arg6);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::tagged_encoder::sptr(static_cast< const gr::fec::tagged_encoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_work(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  int arg2 ;
  gr_vector_int *arg3 = 0 ;
  gr_vector_const_void_star *arg4 = 0 ;
  gr_vector_void_star *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "noutput_items",(char *) "ninput_items",(char *) "input_items",(char *) "output_items", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:tagged_encoder_sptr_work",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_work" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_encoder_sptr_work" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_gr_vector_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tagged_encoder_sptr_work" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_encoder_sptr_work" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  arg3 = reinterpret_cast< gr_vector_int * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_gr_vector_const_void_star,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "tagged_encoder_sptr_work" "', argument " "4"" of type '" "gr_vector_const_void_star &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_encoder_sptr_work" "', argument " "4"" of type '" "gr_vector_const_void_star &""'"); 
  }
  arg4 = reinterpret_cast< gr_vector_const_void_star * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_gr_vector_void_star,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "tagged_encoder_sptr_work" "', argument " "5"" of type '" "gr_vector_void_star &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_encoder_sptr_work" "', argument " "5"" of type '" "gr_vector_void_star &""'"); 
  }
  arg5 = reinterpret_cast< gr_vector_void_star * >(argp5);
  {
    try {
      result = (int)(*arg1)->work(arg2,*arg3,*arg4,*arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_calculate_output_stream_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  gr_vector_int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninput_items", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_encoder_sptr_calculate_output_stream_length",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_calculate_output_stream_length" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_gr_vector_int,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagged_encoder_sptr_calculate_output_stream_length" "', argument " "2"" of type '" "gr_vector_int const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_encoder_sptr_calculate_output_stream_length" "', argument " "2"" of type '" "gr_vector_int const &""'"); 
  }
  arg2 = reinterpret_cast< gr_vector_int * >(argp2);
  {
    try {
      result = (int)(*arg1)->calculate_output_stream_length((gr_vector_int const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_encoder_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_encoder_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_encoder_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_encoder_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tagged_encoder_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_encoder_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_encoder_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_encoder_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_encoder_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_encoder_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_encoder_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_encoder_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_encoder_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_encoder_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_encoder_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_encoder_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_encoder_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_encoder_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_encoder_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_encoder_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_encoder_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_encoder_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tagged_encoder_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_encoder_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_encoder_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_encoder_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_encoder_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_encoder_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_encoder_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_encoder_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_tagged_encoder_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_encoder_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_encoder_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_encoder_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_encoder_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_encoder_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_encoder_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_encoder_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_encoder_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_encoder_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_encoder_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_encoder_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_encoder_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_encoder_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_encoder_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_encoder_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_encoder_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_encoder_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_encoder_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_encoder_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_encoder_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_encoder_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_encoder_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_tagged_encoder_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_tagged_encoder_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagged_encoder_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_encoder_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagged_encoder_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_encoder_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_encoder_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_encoder_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:tagged_encoder_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tagged_encoder_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tagged_encoder_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_encoder_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "tagged_encoder_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:tagged_encoder_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagged_encoder_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_encoder_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tagged_encoder_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_encoder_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"tagged_encoder_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagged_encoder_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::tagged_encoder > *arg1 = (boost::shared_ptr< gr::fec::tagged_encoder > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:tagged_encoder_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagged_encoder_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::tagged_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::tagged_encoder > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagged_encoder_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagged_encoder_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *tagged_encoder_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__fec__tagged_encoder_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_async_decoder_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::fec::async_decoder > *)new boost::shared_ptr< gr::fec::async_decoder >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_async_decoder_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::async_decoder *arg1 = (gr::fec::async_decoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::fec::async_decoder > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_async_decoder_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__async_decoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_async_decoder_sptr" "', argument " "1"" of type '" "gr::fec::async_decoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::async_decoder * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::fec::async_decoder > *)new boost::shared_ptr< gr::fec::async_decoder >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_async_decoder_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_async_decoder_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__fec__async_decoder, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_async_decoder_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_async_decoder_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::fec::async_decoder >::shared_ptr()\n"
    "    boost::shared_ptr< gr::fec::async_decoder >::shared_ptr(gr::fec::async_decoder *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::fec::async_decoder *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (gr::fec::async_decoder *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__fec__async_decoder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_async_decoder_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_async_decoder_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_async_decoder_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  gr::fec::generic_decoder::sptr arg2 ;
  bool arg3 = (bool) false ;
  bool arg4 = (bool) true ;
  int arg5 = (int) 1500 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "my_decoder",(char *) "packed",(char *) "rev_pack",(char *) "mtu", NULL 
  };
  gr::fec::async_decoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OOO:async_decoder_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_decoder_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "async_decoder_sptr_make" "', argument " "2"" of type '" "gr::fec::generic_decoder::sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "async_decoder_sptr_make" "', argument " "2"" of type '" "gr::fec::generic_decoder::sptr""'");
    } else {
      gr::fec::generic_decoder::sptr * temp = reinterpret_cast< gr::fec::generic_decoder::sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "async_decoder_sptr_make" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "async_decoder_sptr_make" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_int(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "async_decoder_sptr_make" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::async_decoder::sptr(static_cast< const gr::fec::async_decoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_general_work(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  int arg2 ;
  gr_vector_int *arg3 = 0 ;
  gr_vector_const_void_star *arg4 = 0 ;
  gr_vector_void_star *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "noutput_items",(char *) "ninput_items",(char *) "input_items",(char *) "output_items", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:async_decoder_sptr_general_work",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_general_work" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_decoder_sptr_general_work" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_gr_vector_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "async_decoder_sptr_general_work" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "async_decoder_sptr_general_work" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  arg3 = reinterpret_cast< gr_vector_int * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_gr_vector_const_void_star,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "async_decoder_sptr_general_work" "', argument " "4"" of type '" "gr_vector_const_void_star &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "async_decoder_sptr_general_work" "', argument " "4"" of type '" "gr_vector_const_void_star &""'"); 
  }
  arg4 = reinterpret_cast< gr_vector_const_void_star * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_gr_vector_void_star,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "async_decoder_sptr_general_work" "', argument " "5"" of type '" "gr_vector_void_star &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "async_decoder_sptr_general_work" "', argument " "5"" of type '" "gr_vector_void_star &""'"); 
  }
  arg5 = reinterpret_cast< gr_vector_void_star * >(argp5);
  {
    try {
      result = (int)(*arg1)->general_work(arg2,*arg3,*arg4,*arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_decoder_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "async_decoder_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_decoder_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_async_decoder_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_async_decoder_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'async_decoder_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:async_decoder_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_decoder_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:async_decoder_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_decoder_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:async_decoder_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_decoder_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:async_decoder_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_decoder_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:async_decoder_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_decoder_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:async_decoder_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_decoder_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_decoder_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_decoder_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "async_decoder_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_async_decoder_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_async_decoder_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'async_decoder_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:async_decoder_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_decoder_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_decoder_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_decoder_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "async_decoder_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_async_decoder_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_async_decoder_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'async_decoder_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_decoder_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_async_decoder_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_async_decoder_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'async_decoder_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_decoder_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_async_decoder_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_async_decoder_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'async_decoder_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_decoder_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_async_decoder_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_async_decoder_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'async_decoder_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_decoder_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_async_decoder_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_async_decoder_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'async_decoder_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_decoder_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_async_decoder_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_async_decoder_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'async_decoder_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_decoder_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_async_decoder_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_async_decoder_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'async_decoder_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:async_decoder_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "async_decoder_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "async_decoder_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:async_decoder_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_decoder_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:async_decoder_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_decoder_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "async_decoder_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:async_decoder_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "async_decoder_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:async_decoder_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "async_decoder_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "async_decoder_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "async_decoder_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "async_decoder_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_decoder_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_decoder_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_decoder > *arg1 = (boost::shared_ptr< gr::fec::async_decoder > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:async_decoder_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_decoder_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_decoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_decoder > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "async_decoder_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "async_decoder_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *async_decoder_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_decoder_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_async_encoder_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::fec::async_encoder > *)new boost::shared_ptr< gr::fec::async_encoder >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_async_encoder_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::async_encoder *arg1 = (gr::fec::async_encoder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::fec::async_encoder > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_async_encoder_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__async_encoder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_async_encoder_sptr" "', argument " "1"" of type '" "gr::fec::async_encoder *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::async_encoder * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::fec::async_encoder > *)new boost::shared_ptr< gr::fec::async_encoder >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_async_encoder_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_async_encoder_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__fec__async_encoder, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_async_encoder_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_async_encoder_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::fec::async_encoder >::shared_ptr()\n"
    "    boost::shared_ptr< gr::fec::async_encoder >::shared_ptr(gr::fec::async_encoder *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::fec::async_encoder *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (gr::fec::async_encoder *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__fec__async_encoder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_async_encoder_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_async_encoder_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_async_encoder_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  gr::fec::generic_encoder::sptr arg2 ;
  bool arg3 = (bool) false ;
  bool arg4 = (bool) true ;
  bool arg5 = (bool) true ;
  int arg6 = (int) 1500 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "my_encoder",(char *) "packed",(char *) "rev_unpack",(char *) "rev_pack",(char *) "mtu", NULL 
  };
  gr::fec::async_encoder::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|OOOO:async_encoder_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_gr__fec__generic_encoder_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "async_encoder_sptr_make" "', argument " "2"" of type '" "gr::fec::generic_encoder::sptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "async_encoder_sptr_make" "', argument " "2"" of type '" "gr::fec::generic_encoder::sptr""'");
    } else {
      gr::fec::generic_encoder::sptr * temp = reinterpret_cast< gr::fec::generic_encoder::sptr * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_bool(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "async_encoder_sptr_make" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "async_encoder_sptr_make" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_bool(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "async_encoder_sptr_make" "', argument " "5"" of type '" "bool""'");
    } 
    arg5 = static_cast< bool >(val5);
  }
  if (obj5) {
    ecode6 = SWIG_AsVal_int(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "async_encoder_sptr_make" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
  }
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4,arg5,arg6);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::async_encoder::sptr(static_cast< const gr::fec::async_encoder::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_general_work(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  int arg2 ;
  gr_vector_int *arg3 = 0 ;
  gr_vector_const_void_star *arg4 = 0 ;
  gr_vector_void_star *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "noutput_items",(char *) "ninput_items",(char *) "input_items",(char *) "output_items", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOO:async_encoder_sptr_general_work",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_general_work" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_encoder_sptr_general_work" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_gr_vector_int,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "async_encoder_sptr_general_work" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "async_encoder_sptr_general_work" "', argument " "3"" of type '" "gr_vector_int &""'"); 
  }
  arg3 = reinterpret_cast< gr_vector_int * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_gr_vector_const_void_star,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "async_encoder_sptr_general_work" "', argument " "4"" of type '" "gr_vector_const_void_star &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "async_encoder_sptr_general_work" "', argument " "4"" of type '" "gr_vector_const_void_star &""'"); 
  }
  arg4 = reinterpret_cast< gr_vector_const_void_star * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_gr_vector_void_star,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "async_encoder_sptr_general_work" "', argument " "5"" of type '" "gr_vector_void_star &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "async_encoder_sptr_general_work" "', argument " "5"" of type '" "gr_vector_void_star &""'"); 
  }
  arg5 = reinterpret_cast< gr_vector_void_star * >(argp5);
  {
    try {
      result = (int)(*arg1)->general_work(arg2,*arg3,*arg4,*arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_encoder_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "async_encoder_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_encoder_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_async_encoder_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_async_encoder_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'async_encoder_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:async_encoder_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_encoder_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:async_encoder_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_encoder_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:async_encoder_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_encoder_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:async_encoder_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_encoder_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:async_encoder_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_encoder_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:async_encoder_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_encoder_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_encoder_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_encoder_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "async_encoder_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_async_encoder_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_async_encoder_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'async_encoder_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:async_encoder_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_encoder_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_encoder_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_encoder_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "async_encoder_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_async_encoder_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_async_encoder_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'async_encoder_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_encoder_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_async_encoder_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_async_encoder_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'async_encoder_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_encoder_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_async_encoder_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_async_encoder_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'async_encoder_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_encoder_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_async_encoder_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_async_encoder_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'async_encoder_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_encoder_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_async_encoder_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_async_encoder_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'async_encoder_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_encoder_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_async_encoder_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_async_encoder_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'async_encoder_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_encoder_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_async_encoder_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_async_encoder_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'async_encoder_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:async_encoder_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "async_encoder_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "async_encoder_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:async_encoder_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_encoder_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:async_encoder_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "async_encoder_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "async_encoder_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:async_encoder_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "async_encoder_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:async_encoder_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "async_encoder_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "async_encoder_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "async_encoder_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "async_encoder_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"async_encoder_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_async_encoder_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::async_encoder > *arg1 = (boost::shared_ptr< gr::fec::async_encoder > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:async_encoder_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "async_encoder_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::async_encoder > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::async_encoder > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "async_encoder_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "async_encoder_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *async_encoder_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__fec__async_encoder_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_decode_ccsds_27_fb_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *)new boost::shared_ptr< gr::fec::decode_ccsds_27_fb >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_decode_ccsds_27_fb_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::decode_ccsds_27_fb *arg1 = (gr::fec::decode_ccsds_27_fb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_decode_ccsds_27_fb_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__decode_ccsds_27_fb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_decode_ccsds_27_fb_sptr" "', argument " "1"" of type '" "gr::fec::decode_ccsds_27_fb *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::decode_ccsds_27_fb * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *)new boost::shared_ptr< gr::fec::decode_ccsds_27_fb >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_decode_ccsds_27_fb_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_decode_ccsds_27_fb_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__fec__decode_ccsds_27_fb, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_decode_ccsds_27_fb_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_decode_ccsds_27_fb_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::fec::decode_ccsds_27_fb >::shared_ptr()\n"
    "    boost::shared_ptr< gr::fec::decode_ccsds_27_fb >::shared_ptr(gr::fec::decode_ccsds_27_fb *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::fec::decode_ccsds_27_fb *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (gr::fec::decode_ccsds_27_fb *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__fec__decode_ccsds_27_fb, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_decode_ccsds_27_fb_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_decode_ccsds_27_fb_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_decode_ccsds_27_fb_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::fec::decode_ccsds_27_fb::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_make",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (*arg1)->make();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::decode_ccsds_27_fb::sptr(static_cast< const gr::fec::decode_ccsds_27_fb::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decode_ccsds_27_fb_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "decode_ccsds_27_fb_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decode_ccsds_27_fb_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_decode_ccsds_27_fb_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_decode_ccsds_27_fb_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'decode_ccsds_27_fb_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:decode_ccsds_27_fb_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decode_ccsds_27_fb_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:decode_ccsds_27_fb_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decode_ccsds_27_fb_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:decode_ccsds_27_fb_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decode_ccsds_27_fb_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:decode_ccsds_27_fb_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decode_ccsds_27_fb_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:decode_ccsds_27_fb_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decode_ccsds_27_fb_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:decode_ccsds_27_fb_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decode_ccsds_27_fb_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decode_ccsds_27_fb_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decode_ccsds_27_fb_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "decode_ccsds_27_fb_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_decode_ccsds_27_fb_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_decode_ccsds_27_fb_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'decode_ccsds_27_fb_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:decode_ccsds_27_fb_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decode_ccsds_27_fb_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decode_ccsds_27_fb_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decode_ccsds_27_fb_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "decode_ccsds_27_fb_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_decode_ccsds_27_fb_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_decode_ccsds_27_fb_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'decode_ccsds_27_fb_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decode_ccsds_27_fb_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_decode_ccsds_27_fb_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_decode_ccsds_27_fb_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'decode_ccsds_27_fb_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decode_ccsds_27_fb_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_decode_ccsds_27_fb_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_decode_ccsds_27_fb_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'decode_ccsds_27_fb_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decode_ccsds_27_fb_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_decode_ccsds_27_fb_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_decode_ccsds_27_fb_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'decode_ccsds_27_fb_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decode_ccsds_27_fb_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_decode_ccsds_27_fb_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_decode_ccsds_27_fb_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'decode_ccsds_27_fb_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decode_ccsds_27_fb_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_decode_ccsds_27_fb_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_decode_ccsds_27_fb_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'decode_ccsds_27_fb_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decode_ccsds_27_fb_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_decode_ccsds_27_fb_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_decode_ccsds_27_fb_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'decode_ccsds_27_fb_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:decode_ccsds_27_fb_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "decode_ccsds_27_fb_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "decode_ccsds_27_fb_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:decode_ccsds_27_fb_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decode_ccsds_27_fb_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:decode_ccsds_27_fb_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "decode_ccsds_27_fb_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "decode_ccsds_27_fb_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:decode_ccsds_27_fb_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "decode_ccsds_27_fb_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:decode_ccsds_27_fb_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "decode_ccsds_27_fb_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "decode_ccsds_27_fb_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "decode_ccsds_27_fb_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "decode_ccsds_27_fb_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"decode_ccsds_27_fb_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_decode_ccsds_27_fb_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *arg1 = (boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:decode_ccsds_27_fb_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "decode_ccsds_27_fb_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::decode_ccsds_27_fb > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "decode_ccsds_27_fb_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "decode_ccsds_27_fb_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *decode_ccsds_27_fb_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_encode_ccsds_27_bb_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *)new boost::shared_ptr< gr::fec::encode_ccsds_27_bb >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_encode_ccsds_27_bb_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::encode_ccsds_27_bb *arg1 = (gr::fec::encode_ccsds_27_bb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_encode_ccsds_27_bb_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__encode_ccsds_27_bb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_encode_ccsds_27_bb_sptr" "', argument " "1"" of type '" "gr::fec::encode_ccsds_27_bb *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::encode_ccsds_27_bb * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *)new boost::shared_ptr< gr::fec::encode_ccsds_27_bb >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_encode_ccsds_27_bb_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_encode_ccsds_27_bb_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__fec__encode_ccsds_27_bb, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_encode_ccsds_27_bb_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_encode_ccsds_27_bb_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::fec::encode_ccsds_27_bb >::shared_ptr()\n"
    "    boost::shared_ptr< gr::fec::encode_ccsds_27_bb >::shared_ptr(gr::fec::encode_ccsds_27_bb *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::fec::encode_ccsds_27_bb *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (gr::fec::encode_ccsds_27_bb *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__fec__encode_ccsds_27_bb, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_encode_ccsds_27_bb_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_encode_ccsds_27_bb_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_encode_ccsds_27_bb_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::fec::encode_ccsds_27_bb::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_make",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (*arg1)->make();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::encode_ccsds_27_bb::sptr(static_cast< const gr::fec::encode_ccsds_27_bb::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encode_ccsds_27_bb_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "encode_ccsds_27_bb_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encode_ccsds_27_bb_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_encode_ccsds_27_bb_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_encode_ccsds_27_bb_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'encode_ccsds_27_bb_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:encode_ccsds_27_bb_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encode_ccsds_27_bb_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:encode_ccsds_27_bb_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encode_ccsds_27_bb_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:encode_ccsds_27_bb_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encode_ccsds_27_bb_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:encode_ccsds_27_bb_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encode_ccsds_27_bb_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:encode_ccsds_27_bb_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encode_ccsds_27_bb_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:encode_ccsds_27_bb_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encode_ccsds_27_bb_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encode_ccsds_27_bb_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encode_ccsds_27_bb_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "encode_ccsds_27_bb_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_encode_ccsds_27_bb_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_encode_ccsds_27_bb_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'encode_ccsds_27_bb_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:encode_ccsds_27_bb_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encode_ccsds_27_bb_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encode_ccsds_27_bb_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encode_ccsds_27_bb_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "encode_ccsds_27_bb_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_encode_ccsds_27_bb_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_encode_ccsds_27_bb_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'encode_ccsds_27_bb_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encode_ccsds_27_bb_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_encode_ccsds_27_bb_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_encode_ccsds_27_bb_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'encode_ccsds_27_bb_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encode_ccsds_27_bb_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_encode_ccsds_27_bb_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_encode_ccsds_27_bb_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'encode_ccsds_27_bb_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encode_ccsds_27_bb_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_encode_ccsds_27_bb_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_encode_ccsds_27_bb_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'encode_ccsds_27_bb_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encode_ccsds_27_bb_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_encode_ccsds_27_bb_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_encode_ccsds_27_bb_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'encode_ccsds_27_bb_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encode_ccsds_27_bb_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_encode_ccsds_27_bb_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_encode_ccsds_27_bb_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'encode_ccsds_27_bb_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encode_ccsds_27_bb_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_encode_ccsds_27_bb_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_encode_ccsds_27_bb_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'encode_ccsds_27_bb_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:encode_ccsds_27_bb_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "encode_ccsds_27_bb_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "encode_ccsds_27_bb_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:encode_ccsds_27_bb_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encode_ccsds_27_bb_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:encode_ccsds_27_bb_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "encode_ccsds_27_bb_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "encode_ccsds_27_bb_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:encode_ccsds_27_bb_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "encode_ccsds_27_bb_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:encode_ccsds_27_bb_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "encode_ccsds_27_bb_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "encode_ccsds_27_bb_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "encode_ccsds_27_bb_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "encode_ccsds_27_bb_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"encode_ccsds_27_bb_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_encode_ccsds_27_bb_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *arg1 = (boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:encode_ccsds_27_bb_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_ccsds_27_bb_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::encode_ccsds_27_bb > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "encode_ccsds_27_bb_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "encode_ccsds_27_bb_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *encode_ccsds_27_bb_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ber_bf_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::fec::ber_bf > *)new boost::shared_ptr< gr::fec::ber_bf >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ber_bf_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::ber_bf *arg1 = (gr::fec::ber_bf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::fec::ber_bf > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_ber_bf_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__ber_bf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ber_bf_sptr" "', argument " "1"" of type '" "gr::fec::ber_bf *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::ber_bf * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::fec::ber_bf > *)new boost::shared_ptr< gr::fec::ber_bf >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ber_bf_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ber_bf_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__fec__ber_bf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ber_bf_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ber_bf_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::fec::ber_bf >::shared_ptr()\n"
    "    boost::shared_ptr< gr::fec::ber_bf >::shared_ptr(gr::fec::ber_bf *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::fec::ber_bf *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (gr::fec::ber_bf *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__fec__ber_bf, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ber_bf_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_ber_bf_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ber_bf_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_total_errors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_total_errors",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_total_errors" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (long)(*arg1)->total_errors();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  bool arg2 = (bool) false ;
  int arg3 = (int) 100 ;
  float arg4 = (float) -7.0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "test_mode",(char *) "berminerrors",(char *) "ber_limit", NULL 
  };
  gr::fec::ber_bf::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O|OOO:ber_bf_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_bool(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ber_bf_sptr_make" "', argument " "2"" of type '" "bool""'");
    } 
    arg2 = static_cast< bool >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_int(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ber_bf_sptr_make" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_float(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ber_bf_sptr_make" "', argument " "4"" of type '" "float""'");
    } 
    arg4 = static_cast< float >(val4);
  }
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::ber_bf::sptr(static_cast< const gr::fec::ber_bf::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ber_bf_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ber_bf_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ber_bf_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ber_bf_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ber_bf_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ber_bf_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ber_bf_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ber_bf_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ber_bf_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ber_bf_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ber_bf_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ber_bf_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ber_bf_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ber_bf_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ber_bf_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ber_bf_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ber_bf_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ber_bf_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ber_bf_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ber_bf_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ber_bf_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ber_bf_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ber_bf_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ber_bf_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ber_bf_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ber_bf_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ber_bf_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ber_bf_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ber_bf_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ber_bf_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ber_bf_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ber_bf_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ber_bf_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ber_bf_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ber_bf_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ber_bf_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ber_bf_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ber_bf_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ber_bf_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ber_bf_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ber_bf_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ber_bf_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ber_bf_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ber_bf_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ber_bf_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ber_bf_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ber_bf_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ber_bf_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ber_bf_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ber_bf_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ber_bf_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ber_bf_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ber_bf_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ber_bf_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ber_bf_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ber_bf_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ber_bf_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ber_bf_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ber_bf_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ber_bf_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ber_bf_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:ber_bf_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ber_bf_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ber_bf_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ber_bf_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ber_bf_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:ber_bf_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ber_bf_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ber_bf_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ber_bf_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ber_bf_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ber_bf_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ber_bf_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::ber_bf > *arg1 = (boost::shared_ptr< gr::fec::ber_bf > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:ber_bf_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ber_bf_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::ber_bf > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::ber_bf > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ber_bf_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ber_bf_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ber_bf_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__fec__ber_bf_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_conv_bit_corr_bb_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *)new boost::shared_ptr< gr::fec::conv_bit_corr_bb >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_conv_bit_corr_bb_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::conv_bit_corr_bb *arg1 = (gr::fec::conv_bit_corr_bb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_conv_bit_corr_bb_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__conv_bit_corr_bb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_conv_bit_corr_bb_sptr" "', argument " "1"" of type '" "gr::fec::conv_bit_corr_bb *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::conv_bit_corr_bb * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *)new boost::shared_ptr< gr::fec::conv_bit_corr_bb >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_conv_bit_corr_bb_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_conv_bit_corr_bb_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__fec__conv_bit_corr_bb, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_conv_bit_corr_bb_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_conv_bit_corr_bb_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::fec::conv_bit_corr_bb >::shared_ptr()\n"
    "    boost::shared_ptr< gr::fec::conv_bit_corr_bb >::shared_ptr(gr::fec::conv_bit_corr_bb *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::fec::conv_bit_corr_bb *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (gr::fec::conv_bit_corr_bb *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__fec__conv_bit_corr_bb, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_conv_bit_corr_bb_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_conv_bit_corr_bb_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_conv_bit_corr_bb_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  SwigValueWrapper< std::vector< unsigned long long,std::allocator< unsigned long long > > > arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  float arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "correlator",(char *) "corr_sym",(char *) "corr_len",(char *) "cut",(char *) "flush",(char *) "thresh", NULL 
  };
  gr::fec::conv_bit_corr_bb::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOOOOO:conv_bit_corr_bb_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_unsigned_long_long_std__allocatorT_unsigned_long_long_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "conv_bit_corr_bb_sptr_make" "', argument " "2"" of type '" "std::vector< unsigned long long,std::allocator< unsigned long long > >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "conv_bit_corr_bb_sptr_make" "', argument " "2"" of type '" "std::vector< unsigned long long,std::allocator< unsigned long long > >""'");
    } else {
      std::vector< unsigned long long,std::allocator< unsigned long long > > * temp = reinterpret_cast< std::vector< unsigned long long,std::allocator< unsigned long long > > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "conv_bit_corr_bb_sptr_make" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "conv_bit_corr_bb_sptr_make" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "conv_bit_corr_bb_sptr_make" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "conv_bit_corr_bb_sptr_make" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_float(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "conv_bit_corr_bb_sptr_make" "', argument " "7"" of type '" "float""'");
  } 
  arg7 = static_cast< float >(val7);
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4,arg5,arg6,arg7);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::conv_bit_corr_bb::sptr(static_cast< const gr::fec::conv_bit_corr_bb::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_data_garble_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  int arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "taps",(char *) "syn_density", NULL 
  };
  float result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:conv_bit_corr_bb_sptr_data_garble_rate",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_data_garble_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "conv_bit_corr_bb_sptr_data_garble_rate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "conv_bit_corr_bb_sptr_data_garble_rate" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  {
    try {
      result = (float)(*arg1)->data_garble_rate(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "conv_bit_corr_bb_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "conv_bit_corr_bb_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "conv_bit_corr_bb_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_conv_bit_corr_bb_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_conv_bit_corr_bb_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'conv_bit_corr_bb_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:conv_bit_corr_bb_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "conv_bit_corr_bb_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:conv_bit_corr_bb_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "conv_bit_corr_bb_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:conv_bit_corr_bb_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "conv_bit_corr_bb_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:conv_bit_corr_bb_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "conv_bit_corr_bb_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:conv_bit_corr_bb_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "conv_bit_corr_bb_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:conv_bit_corr_bb_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "conv_bit_corr_bb_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "conv_bit_corr_bb_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "conv_bit_corr_bb_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "conv_bit_corr_bb_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_conv_bit_corr_bb_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_conv_bit_corr_bb_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'conv_bit_corr_bb_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:conv_bit_corr_bb_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "conv_bit_corr_bb_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "conv_bit_corr_bb_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "conv_bit_corr_bb_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "conv_bit_corr_bb_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_conv_bit_corr_bb_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_conv_bit_corr_bb_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'conv_bit_corr_bb_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "conv_bit_corr_bb_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_conv_bit_corr_bb_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_conv_bit_corr_bb_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'conv_bit_corr_bb_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "conv_bit_corr_bb_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_conv_bit_corr_bb_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_conv_bit_corr_bb_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'conv_bit_corr_bb_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "conv_bit_corr_bb_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_conv_bit_corr_bb_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_conv_bit_corr_bb_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'conv_bit_corr_bb_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "conv_bit_corr_bb_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_conv_bit_corr_bb_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_conv_bit_corr_bb_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'conv_bit_corr_bb_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "conv_bit_corr_bb_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_conv_bit_corr_bb_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_conv_bit_corr_bb_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'conv_bit_corr_bb_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "conv_bit_corr_bb_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_conv_bit_corr_bb_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_conv_bit_corr_bb_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'conv_bit_corr_bb_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:conv_bit_corr_bb_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "conv_bit_corr_bb_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "conv_bit_corr_bb_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:conv_bit_corr_bb_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "conv_bit_corr_bb_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:conv_bit_corr_bb_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "conv_bit_corr_bb_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "conv_bit_corr_bb_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:conv_bit_corr_bb_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "conv_bit_corr_bb_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:conv_bit_corr_bb_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "conv_bit_corr_bb_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "conv_bit_corr_bb_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "conv_bit_corr_bb_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "conv_bit_corr_bb_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"conv_bit_corr_bb_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_conv_bit_corr_bb_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::conv_bit_corr_bb > *arg1 = (boost::shared_ptr< gr::fec::conv_bit_corr_bb > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:conv_bit_corr_bb_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "conv_bit_corr_bb_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::conv_bit_corr_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::conv_bit_corr_bb > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "conv_bit_corr_bb_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "conv_bit_corr_bb_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *conv_bit_corr_bb_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_puncture_bb_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::fec::puncture_bb > *)new boost::shared_ptr< gr::fec::puncture_bb >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_puncture_bb_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::puncture_bb *arg1 = (gr::fec::puncture_bb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::fec::puncture_bb > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_puncture_bb_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__puncture_bb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_puncture_bb_sptr" "', argument " "1"" of type '" "gr::fec::puncture_bb *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::puncture_bb * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::fec::puncture_bb > *)new boost::shared_ptr< gr::fec::puncture_bb >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_puncture_bb_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_puncture_bb_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__fec__puncture_bb, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_puncture_bb_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_puncture_bb_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::fec::puncture_bb >::shared_ptr()\n"
    "    boost::shared_ptr< gr::fec::puncture_bb >::shared_ptr(gr::fec::puncture_bb *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::fec::puncture_bb *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (gr::fec::puncture_bb *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__fec__puncture_bb, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_puncture_bb_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_puncture_bb_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_puncture_bb_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "puncsize",(char *) "puncpat",(char *) "delay", NULL 
  };
  gr::fec::puncture_bb::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|O:puncture_bb_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_bb_sptr_make" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "puncture_bb_sptr_make" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "puncture_bb_sptr_make" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::puncture_bb::sptr(static_cast< const gr::fec::puncture_bb::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_bb_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "puncture_bb_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_bb_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_puncture_bb_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_puncture_bb_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'puncture_bb_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:puncture_bb_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_bb_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:puncture_bb_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_bb_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:puncture_bb_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_bb_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:puncture_bb_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_bb_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:puncture_bb_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_bb_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:puncture_bb_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_bb_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_bb_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_bb_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "puncture_bb_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_puncture_bb_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_puncture_bb_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'puncture_bb_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:puncture_bb_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_bb_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_bb_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_bb_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "puncture_bb_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_puncture_bb_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_puncture_bb_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'puncture_bb_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_bb_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_puncture_bb_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_puncture_bb_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'puncture_bb_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_bb_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_puncture_bb_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_puncture_bb_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'puncture_bb_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_bb_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_puncture_bb_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_puncture_bb_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'puncture_bb_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_bb_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_puncture_bb_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_puncture_bb_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'puncture_bb_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_bb_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_puncture_bb_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_puncture_bb_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'puncture_bb_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_bb_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_puncture_bb_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_puncture_bb_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'puncture_bb_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:puncture_bb_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "puncture_bb_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "puncture_bb_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:puncture_bb_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_bb_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:puncture_bb_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_bb_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "puncture_bb_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:puncture_bb_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "puncture_bb_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:puncture_bb_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "puncture_bb_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "puncture_bb_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "puncture_bb_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "puncture_bb_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_bb_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_bb_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_bb > *arg1 = (boost::shared_ptr< gr::fec::puncture_bb > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:puncture_bb_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_bb_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_bb > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "puncture_bb_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "puncture_bb_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *puncture_bb_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_bb_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_puncture_ff_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::fec::puncture_ff > *)new boost::shared_ptr< gr::fec::puncture_ff >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_puncture_ff_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::puncture_ff *arg1 = (gr::fec::puncture_ff *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::fec::puncture_ff > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_puncture_ff_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__puncture_ff, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_puncture_ff_sptr" "', argument " "1"" of type '" "gr::fec::puncture_ff *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::puncture_ff * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::fec::puncture_ff > *)new boost::shared_ptr< gr::fec::puncture_ff >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_puncture_ff_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_puncture_ff_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__fec__puncture_ff, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_puncture_ff_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_puncture_ff_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::fec::puncture_ff >::shared_ptr()\n"
    "    boost::shared_ptr< gr::fec::puncture_ff >::shared_ptr(gr::fec::puncture_ff *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::fec::puncture_ff *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (gr::fec::puncture_ff *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__fec__puncture_ff, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_puncture_ff_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_puncture_ff_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_puncture_ff_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "puncsize",(char *) "puncpat",(char *) "delay", NULL 
  };
  gr::fec::puncture_ff::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOOO:puncture_ff_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_ff_sptr_make" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "puncture_ff_sptr_make" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "puncture_ff_sptr_make" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::puncture_ff::sptr(static_cast< const gr::fec::puncture_ff::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_ff_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "puncture_ff_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_ff_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_puncture_ff_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_puncture_ff_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'puncture_ff_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:puncture_ff_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_ff_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:puncture_ff_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_ff_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:puncture_ff_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_ff_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:puncture_ff_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_ff_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:puncture_ff_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_ff_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:puncture_ff_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_ff_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_ff_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_ff_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "puncture_ff_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_puncture_ff_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_puncture_ff_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'puncture_ff_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:puncture_ff_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_ff_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_ff_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_ff_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "puncture_ff_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_puncture_ff_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_puncture_ff_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'puncture_ff_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_ff_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_puncture_ff_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_puncture_ff_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'puncture_ff_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_ff_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_puncture_ff_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_puncture_ff_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'puncture_ff_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_ff_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_puncture_ff_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_puncture_ff_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'puncture_ff_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_ff_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_puncture_ff_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_puncture_ff_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'puncture_ff_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_ff_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_puncture_ff_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_puncture_ff_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'puncture_ff_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_ff_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_puncture_ff_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_puncture_ff_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'puncture_ff_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:puncture_ff_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "puncture_ff_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "puncture_ff_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:puncture_ff_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_ff_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:puncture_ff_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "puncture_ff_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "puncture_ff_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:puncture_ff_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "puncture_ff_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:puncture_ff_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "puncture_ff_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "puncture_ff_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "puncture_ff_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "puncture_ff_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"puncture_ff_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_puncture_ff_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::puncture_ff > *arg1 = (boost::shared_ptr< gr::fec::puncture_ff > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:puncture_ff_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "puncture_ff_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::puncture_ff > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::puncture_ff > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "puncture_ff_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "puncture_ff_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *puncture_ff_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__fec__puncture_ff_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_depuncture_bb_sptr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *result = 0 ;
  
  {
    try {
      result = (boost::shared_ptr< gr::fec::depuncture_bb > *)new boost::shared_ptr< gr::fec::depuncture_bb >();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_depuncture_bb_sptr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  gr::fec::depuncture_bb *arg1 = (gr::fec::depuncture_bb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::shared_ptr< gr::fec::depuncture_bb > *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_depuncture_bb_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_gr__fec__depuncture_bb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_depuncture_bb_sptr" "', argument " "1"" of type '" "gr::fec::depuncture_bb *""'"); 
  }
  arg1 = reinterpret_cast< gr::fec::depuncture_bb * >(argp1);
  {
    try {
      result = (boost::shared_ptr< gr::fec::depuncture_bb > *)new boost::shared_ptr< gr::fec::depuncture_bb >(arg1);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_depuncture_bb_sptr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_depuncture_bb_sptr__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_gr__fec__depuncture_bb, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_depuncture_bb_sptr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_depuncture_bb_sptr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    boost::shared_ptr< gr::fec::depuncture_bb >::shared_ptr()\n"
    "    boost::shared_ptr< gr::fec::depuncture_bb >::shared_ptr(gr::fec::depuncture_bb *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::fec::depuncture_bb *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr___deref__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (gr::fec::depuncture_bb *)(arg1)->operator ->();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_gr__fec__depuncture_bb, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_depuncture_bb_sptr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_depuncture_bb_sptr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_depuncture_bb_sptr" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_make(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 = (int) 0 ;
  char arg5 = (char) 127 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  char val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "puncsize",(char *) "puncpat",(char *) "delay",(char *) "symbol", NULL 
  };
  gr::fec::depuncture_bb::sptr result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO|OO:depuncture_bb_sptr_make",kwnames,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_make" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "depuncture_bb_sptr_make" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "depuncture_bb_sptr_make" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "depuncture_bb_sptr_make" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_char(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "depuncture_bb_sptr_make" "', argument " "5"" of type '" "char""'");
    } 
    arg5 = static_cast< char >(val5);
  }
  {
    try {
      result = (*arg1)->make(arg2,arg3,arg4,arg5);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::fec::depuncture_bb::sptr(static_cast< const gr::fec::depuncture_bb::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_history(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_history",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_history" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (unsigned int)(*arg1)->history();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_declare_sample_delay__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_declare_sample_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "depuncture_bb_sptr_declare_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "depuncture_bb_sptr_declare_sample_delay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (*arg1)->declare_sample_delay(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_declare_sample_delay__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_declare_sample_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_declare_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "depuncture_bb_sptr_declare_sample_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (*arg1)->declare_sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_declare_sample_delay(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_depuncture_bb_sptr_declare_sample_delay__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_depuncture_bb_sptr_declare_sample_delay__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'depuncture_bb_sptr_declare_sample_delay'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::declare_sample_delay(int,int)\n"
    "    gr::block::declare_sample_delay(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_sample_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which", NULL 
  };
  unsigned int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:depuncture_bb_sptr_sample_delay",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_sample_delay" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "depuncture_bb_sptr_sample_delay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned int)(*arg1)->sample_delay(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_output_multiple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_output_multiple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_output_multiple" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->output_multiple();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_relative_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_relative_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_relative_rate" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (double)(*arg1)->relative_rate();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_start" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->start();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_stop" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->stop();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_nitems_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_input", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:depuncture_bb_sptr_nitems_read",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_nitems_read" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "depuncture_bb_sptr_nitems_read" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_read(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_nitems_written(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_output", NULL 
  };
  uint64_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:depuncture_bb_sptr_nitems_written",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_nitems_written" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "depuncture_bb_sptr_nitems_written" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (uint64_t)(*arg1)->nitems_written(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:depuncture_bb_sptr_set_max_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "depuncture_bb_sptr_set_max_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_max_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_unset_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_unset_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_unset_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      (*arg1)->unset_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_is_set_max_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_is_set_max_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_is_set_max_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (bool)(*arg1)->is_set_max_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_set_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "m", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:depuncture_bb_sptr_set_min_noutput_items",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_set_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "depuncture_bb_sptr_set_min_noutput_items" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (*arg1)->set_min_noutput_items(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_min_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_min_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_min_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->min_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_max_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:depuncture_bb_sptr_max_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "depuncture_bb_sptr_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_set_max_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_set_max_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "depuncture_bb_sptr_set_max_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_set_max_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_set_max_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_set_max_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "depuncture_bb_sptr_set_max_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "depuncture_bb_sptr_set_max_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_max_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_set_max_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_depuncture_bb_sptr_set_max_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_depuncture_bb_sptr_set_max_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'depuncture_bb_sptr_set_max_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_max_output_buffer(long)\n"
    "    gr::block::set_max_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_min_output_buffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "i", NULL 
  };
  long result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:depuncture_bb_sptr_min_output_buffer",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "depuncture_bb_sptr_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (long)(*arg1)->min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_set_min_output_buffer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_set_min_output_buffer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "depuncture_bb_sptr_set_min_output_buffer" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_set_min_output_buffer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  int arg2 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_set_min_output_buffer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_set_min_output_buffer" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "depuncture_bb_sptr_set_min_output_buffer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "depuncture_bb_sptr_set_min_output_buffer" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    try {
      (*arg1)->set_min_output_buffer(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_set_min_output_buffer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_depuncture_bb_sptr_set_min_output_buffer__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_depuncture_bb_sptr_set_min_output_buffer__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'depuncture_bb_sptr_set_min_output_buffer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::set_min_output_buffer(long)\n"
    "    gr::block::set_min_output_buffer(int,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_pc_noutput_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_pc_noutput_items",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_pc_noutput_items" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_pc_noutput_items_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_pc_noutput_items_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_pc_noutput_items_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_pc_noutput_items_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_pc_noutput_items_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_pc_noutput_items_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_noutput_items_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_pc_nproduced(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_pc_nproduced",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_pc_nproduced" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_pc_nproduced_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_pc_nproduced_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_pc_nproduced_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_pc_nproduced_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_pc_nproduced_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_pc_nproduced_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_nproduced_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_pc_input_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_pc_input_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "depuncture_bb_sptr_pc_input_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_pc_input_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_pc_input_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_pc_input_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_pc_input_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_depuncture_bb_sptr_pc_input_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_depuncture_bb_sptr_pc_input_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'depuncture_bb_sptr_pc_input_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full(int)\n"
    "    gr::block::pc_input_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_pc_input_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_pc_input_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "depuncture_bb_sptr_pc_input_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_pc_input_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_pc_input_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_pc_input_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_pc_input_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_depuncture_bb_sptr_pc_input_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_depuncture_bb_sptr_pc_input_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'depuncture_bb_sptr_pc_input_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_avg(int)\n"
    "    gr::block::pc_input_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_pc_input_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_pc_input_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "depuncture_bb_sptr_pc_input_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_input_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_pc_input_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_pc_input_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_pc_input_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_input_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_pc_input_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_depuncture_bb_sptr_pc_input_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_depuncture_bb_sptr_pc_input_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'depuncture_bb_sptr_pc_input_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_input_buffers_full_var(int)\n"
    "    gr::block::pc_input_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_pc_output_buffers_full__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_pc_output_buffers_full",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "depuncture_bb_sptr_pc_output_buffers_full" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_pc_output_buffers_full__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_pc_output_buffers_full",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_pc_output_buffers_full" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_pc_output_buffers_full(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_depuncture_bb_sptr_pc_output_buffers_full__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_depuncture_bb_sptr_pc_output_buffers_full__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'depuncture_bb_sptr_pc_output_buffers_full'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full(int)\n"
    "    gr::block::pc_output_buffers_full()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_pc_output_buffers_full_avg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_pc_output_buffers_full_avg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "depuncture_bb_sptr_pc_output_buffers_full_avg" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_avg(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_pc_output_buffers_full_avg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_pc_output_buffers_full_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_pc_output_buffers_full_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_pc_output_buffers_full_avg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_depuncture_bb_sptr_pc_output_buffers_full_avg__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_depuncture_bb_sptr_pc_output_buffers_full_avg__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'depuncture_bb_sptr_pc_output_buffers_full_avg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_avg(int)\n"
    "    gr::block::pc_output_buffers_full_avg()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_pc_output_buffers_full_var__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_pc_output_buffers_full_var",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "depuncture_bb_sptr_pc_output_buffers_full_var" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (float)(*arg1)->pc_output_buffers_full_var(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_pc_output_buffers_full_var__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float,std::allocator< float > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_pc_output_buffers_full_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_pc_output_buffers_full_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->pc_output_buffers_full_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<float,std::allocator< float > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_pc_output_buffers_full_var(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_depuncture_bb_sptr_pc_output_buffers_full_var__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_depuncture_bb_sptr_pc_output_buffers_full_var__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'depuncture_bb_sptr_pc_output_buffers_full_var'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    gr::block::pc_output_buffers_full_var(int)\n"
    "    gr::block::pc_output_buffers_full_var()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_pc_work_time(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_pc_work_time",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_pc_work_time" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_pc_work_time_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_pc_work_time_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_pc_work_time_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_pc_work_time_var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_pc_work_time_var",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_pc_work_time_var" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_var();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_pc_work_time_total(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_pc_work_time_total",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_pc_work_time_total" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_work_time_total();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_pc_throughput_avg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_pc_throughput_avg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_pc_throughput_avg" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (float)(*arg1)->pc_throughput_avg();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_set_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "mask", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:depuncture_bb_sptr_set_processor_affinity",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_set_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "depuncture_bb_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "depuncture_bb_sptr_set_processor_affinity" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (*arg1)->set_processor_affinity((std::vector< int,std::allocator< int > > const &)*arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_unset_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_unset_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_unset_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      (*arg1)->unset_processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_processor_affinity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int,std::allocator< int > > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_processor_affinity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_processor_affinity" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->processor_affinity();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = swig::from(static_cast< std::vector<int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_active_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_active_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_active_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->active_thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_thread_priority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (int)(*arg1)->thread_priority();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_set_thread_priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "priority", NULL 
  };
  int result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:depuncture_bb_sptr_set_thread_priority",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_set_thread_priority" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "depuncture_bb_sptr_set_thread_priority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(*arg1)->set_thread_priority(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_symbol_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_symbol_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_symbol_name" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->symbol_name();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_input_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_input_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_input_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->input_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_output_signature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::io_signature::sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_output_signature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_output_signature" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->output_signature();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::io_signature::sptr(static_cast< const gr::io_signature::sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__io_signature_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_unique_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_unique_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_unique_id" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (long)(*arg1)->unique_id();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_to_basic_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  gr::basic_block_sptr result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_to_basic_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_to_basic_block" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->to_basic_block();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new gr::basic_block_sptr(static_cast< const gr::basic_block_sptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_gr__basic_block_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_check_topology(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "ninputs",(char *) "noutputs", NULL 
  };
  bool result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:depuncture_bb_sptr_check_topology",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_check_topology" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "depuncture_bb_sptr_check_topology" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "depuncture_bb_sptr_check_topology" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)(*arg1)->check_topology(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_alias",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->alias();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_set_block_alias(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "name", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:depuncture_bb_sptr_set_block_alias",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_set_block_alias" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "depuncture_bb_sptr_set_block_alias" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (*arg1)->set_block_alias(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr__post(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  pmt::pmt_t arg2 ;
  pmt::pmt_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port",(char *) "msg", NULL 
  };
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OOO:depuncture_bb_sptr__post",kwnames,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr__post" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "depuncture_bb_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "depuncture_bb_sptr__post" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "depuncture_bb_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "depuncture_bb_sptr__post" "', argument " "3"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (*arg1)->_post(arg2,arg3);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_message_ports_in(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_message_ports_in",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_message_ports_in" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_in();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_message_ports_out(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  pmt::pmt_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"depuncture_bb_sptr_message_ports_out",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_message_ports_out" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    try {
      result = (*arg1)->message_ports_out();
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depuncture_bb_sptr_message_subscribers(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  boost::shared_ptr< gr::fec::depuncture_bb > *arg1 = (boost::shared_ptr< gr::fec::depuncture_bb > *) 0 ;
  pmt::pmt_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *  kwnames[] = {
    (char *) "self",(char *) "which_port", NULL 
  };
  pmt::pmt_t result;
  
  if (!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:depuncture_bb_sptr_message_subscribers",kwnames,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depuncture_bb_sptr_message_subscribers" "', argument " "1"" of type '" "boost::shared_ptr< gr::fec::depuncture_bb > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< gr::fec::depuncture_bb > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "depuncture_bb_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "depuncture_bb_sptr_message_subscribers" "', argument " "2"" of type '" "pmt::pmt_t""'");
    } else {
      pmt::pmt_t * temp = reinterpret_cast< pmt::pmt_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (*arg1)->message_subscribers(arg2);
    }
    catch(std::exception &e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
    catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
    
  }
  resultobj = SWIG_NewPointerObj((new pmt::pmt_t(static_cast< const pmt::pmt_t& >(result))), SWIGTYPE_p_boost__intrusive_ptrT_pmt__pmt_base_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *depuncture_bb_sptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_gr__fec__depuncture_bb_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"high_res_timer_now", _wrap_high_res_timer_now, METH_VARARGS, (char *)"high_res_timer_now() -> gr::high_res_timer_type"},
	 { (char *)"high_res_timer_now_perfmon", _wrap_high_res_timer_now_perfmon, METH_VARARGS, (char *)"high_res_timer_now_perfmon() -> gr::high_res_timer_type"},
	 { (char *)"high_res_timer_tps", _wrap_high_res_timer_tps, METH_VARARGS, (char *)"high_res_timer_tps() -> gr::high_res_timer_type"},
	 { (char *)"high_res_timer_epoch", _wrap_high_res_timer_epoch, METH_VARARGS, (char *)"high_res_timer_epoch() -> gr::high_res_timer_type"},
	 { (char *)"decision_t_t_set", _wrap_decision_t_t_set, METH_VARARGS, (char *)"decision_t_t_set(decision_t self, unsigned char * t)"},
	 { (char *)"decision_t_t_get", _wrap_decision_t_t_get, METH_VARARGS, (char *)"decision_t_t_get(decision_t self) -> unsigned char *"},
	 { (char *)"decision_t_w_set", _wrap_decision_t_w_set, METH_VARARGS, (char *)"decision_t_w_set(decision_t self, unsigned int * w)"},
	 { (char *)"decision_t_w_get", _wrap_decision_t_w_get, METH_VARARGS, (char *)"decision_t_w_get(decision_t self) -> unsigned int *"},
	 { (char *)"decision_t_s_set", _wrap_decision_t_s_set, METH_VARARGS, (char *)"decision_t_s_set(decision_t self, unsigned short * s)"},
	 { (char *)"decision_t_s_get", _wrap_decision_t_s_get, METH_VARARGS, (char *)"decision_t_s_get(decision_t self) -> unsigned short *"},
	 { (char *)"decision_t_c_set", _wrap_decision_t_c_set, METH_VARARGS, (char *)"decision_t_c_set(decision_t self, unsigned char * c)"},
	 { (char *)"decision_t_c_get", _wrap_decision_t_c_get, METH_VARARGS, (char *)"decision_t_c_get(decision_t self) -> unsigned char *"},
	 { (char *)"new_decision_t", _wrap_new_decision_t, METH_VARARGS, (char *)"new_decision_t() -> decision_t"},
	 { (char *)"delete_decision_t", _wrap_delete_decision_t, METH_VARARGS, (char *)"delete_decision_t(decision_t self)"},
	 { (char *)"decision_t_swigregister", decision_t_swigregister, METH_VARARGS, NULL},
	 { (char *)"metric_t_t_set", _wrap_metric_t_t_set, METH_VARARGS, (char *)"metric_t_t_set(metric_t self, unsigned char * t)"},
	 { (char *)"metric_t_t_get", _wrap_metric_t_t_get, METH_VARARGS, (char *)"metric_t_t_get(metric_t self) -> unsigned char *"},
	 { (char *)"new_metric_t", _wrap_new_metric_t, METH_VARARGS, (char *)"new_metric_t() -> metric_t"},
	 { (char *)"delete_metric_t", _wrap_delete_metric_t, METH_VARARGS, (char *)"delete_metric_t(metric_t self)"},
	 { (char *)"metric_t_swigregister", metric_t_swigregister, METH_VARARGS, NULL},
	 { (char *)"v_metrics_set", _wrap_v_metrics_set, METH_VARARGS, (char *)"v_metrics_set(v self, unsigned char * metrics)"},
	 { (char *)"v_metrics_get", _wrap_v_metrics_get, METH_VARARGS, (char *)"v_metrics_get(v self) -> unsigned char *"},
	 { (char *)"v_old_metrics_set", _wrap_v_old_metrics_set, METH_VARARGS, (char *)"v_old_metrics_set(v self, metric_t old_metrics)"},
	 { (char *)"v_old_metrics_get", _wrap_v_old_metrics_get, METH_VARARGS, (char *)"v_old_metrics_get(v self) -> metric_t"},
	 { (char *)"v_new_metrics_set", _wrap_v_new_metrics_set, METH_VARARGS, (char *)"v_new_metrics_set(v self, metric_t new_metrics)"},
	 { (char *)"v_new_metrics_get", _wrap_v_new_metrics_get, METH_VARARGS, (char *)"v_new_metrics_get(v self) -> metric_t"},
	 { (char *)"v_metrics1_set", _wrap_v_metrics1_set, METH_VARARGS, (char *)"v_metrics1_set(v self, metric_t metrics1)"},
	 { (char *)"v_metrics1_get", _wrap_v_metrics1_get, METH_VARARGS, (char *)"v_metrics1_get(v self) -> metric_t"},
	 { (char *)"v_metrics2_set", _wrap_v_metrics2_set, METH_VARARGS, (char *)"v_metrics2_set(v self, metric_t metrics2)"},
	 { (char *)"v_metrics2_get", _wrap_v_metrics2_get, METH_VARARGS, (char *)"v_metrics2_get(v self) -> metric_t"},
	 { (char *)"v_decisions_set", _wrap_v_decisions_set, METH_VARARGS, (char *)"v_decisions_set(v self, unsigned char * decisions)"},
	 { (char *)"v_decisions_get", _wrap_v_decisions_get, METH_VARARGS, (char *)"v_decisions_get(v self) -> unsigned char *"},
	 { (char *)"new_v", _wrap_new_v, METH_VARARGS, (char *)"new_v() -> v"},
	 { (char *)"delete_v", _wrap_delete_v, METH_VARARGS, (char *)"delete_v(v self)"},
	 { (char *)"v_swigregister", v_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_generic_encoder_sptr", _wrap_new_generic_encoder_sptr, METH_VARARGS, (char *)"\n"
		"generic_encoder_sptr()\n"
		"new_generic_encoder_sptr(generic_encoder p) -> generic_encoder_sptr\n"
		""},
	 { (char *)"generic_encoder_sptr___deref__", _wrap_generic_encoder_sptr___deref__, METH_VARARGS, (char *)"generic_encoder_sptr___deref__(generic_encoder_sptr self) -> generic_encoder"},
	 { (char *)"delete_generic_encoder_sptr", _wrap_delete_generic_encoder_sptr, METH_VARARGS, (char *)"delete_generic_encoder_sptr(generic_encoder_sptr self)"},
	 { (char *)"generic_encoder_sptr_generic_work", (PyCFunction) _wrap_generic_encoder_sptr_generic_work, METH_VARARGS | METH_KEYWORDS, (char *)"generic_encoder_sptr_generic_work(generic_encoder_sptr self, void * in_buffer, void * out_buffer)"},
	 { (char *)"generic_encoder_sptr_base_unique_id_set", _wrap_generic_encoder_sptr_base_unique_id_set, METH_VARARGS, (char *)"generic_encoder_sptr_base_unique_id_set(generic_encoder_sptr self, int base_unique_id)"},
	 { (char *)"generic_encoder_sptr_base_unique_id_get", _wrap_generic_encoder_sptr_base_unique_id_get, METH_VARARGS, (char *)"generic_encoder_sptr_base_unique_id_get(generic_encoder_sptr self) -> int"},
	 { (char *)"generic_encoder_sptr_my_id_set", _wrap_generic_encoder_sptr_my_id_set, METH_VARARGS, (char *)"generic_encoder_sptr_my_id_set(generic_encoder_sptr self, int my_id)"},
	 { (char *)"generic_encoder_sptr_my_id_get", _wrap_generic_encoder_sptr_my_id_get, METH_VARARGS, (char *)"generic_encoder_sptr_my_id_get(generic_encoder_sptr self) -> int"},
	 { (char *)"generic_encoder_sptr_unique_id", _wrap_generic_encoder_sptr_unique_id, METH_VARARGS, (char *)"generic_encoder_sptr_unique_id(generic_encoder_sptr self) -> int"},
	 { (char *)"generic_encoder_sptr_d_name_set", _wrap_generic_encoder_sptr_d_name_set, METH_VARARGS, (char *)"generic_encoder_sptr_d_name_set(generic_encoder_sptr self, std::string const & d_name)"},
	 { (char *)"generic_encoder_sptr_d_name_get", _wrap_generic_encoder_sptr_d_name_get, METH_VARARGS, (char *)"generic_encoder_sptr_d_name_get(generic_encoder_sptr self) -> std::string const &"},
	 { (char *)"generic_encoder_sptr_alias", _wrap_generic_encoder_sptr_alias, METH_VARARGS, (char *)"generic_encoder_sptr_alias(generic_encoder_sptr self) -> std::string"},
	 { (char *)"generic_encoder_sptr_rate", _wrap_generic_encoder_sptr_rate, METH_VARARGS, (char *)"\n"
		"generic_encoder_sptr_rate(generic_encoder_sptr self) -> double\n"
		"\n"
		"Returns the rate of the code. For every 1 input bit, there are r output bits, so the rate is 1/r. Used for setting things like the encoder block's relative rate.\n"
		"\n"
		"This function MUST be reimplemented by the child class.\n"
		""},
	 { (char *)"generic_encoder_sptr_get_input_size", _wrap_generic_encoder_sptr_get_input_size, METH_VARARGS, (char *)"\n"
		"generic_encoder_sptr_get_input_size(generic_encoder_sptr self) -> int\n"
		"\n"
		"Returns the input size in items that the encoder object uses to encode a full frame. Often, this number is the number of bits per frame if the input format is unpacked. If the block expects packed bytes, then this value should be the number of bytes (number of bits / 8) per input frame.\n"
		"\n"
		"The child class MUST implement this function.\n"
		""},
	 { (char *)"generic_encoder_sptr_get_output_size", _wrap_generic_encoder_sptr_get_output_size, METH_VARARGS, (char *)"\n"
		"generic_encoder_sptr_get_output_size(generic_encoder_sptr self) -> int\n"
		"\n"
		"Returns the output size in items that the encoder object produces after encoding a full frame. Often, this number is the number of bits in the outputted frame if the input format is unpacked. If the block produces packed bytes, then this value should be the number of bytes (number of bits / 8) per frame produced. This value is generally something like R*get_input_size() for a 1/R rate code.\n"
		"\n"
		"The child class MUST implement this function.\n"
		""},
	 { (char *)"generic_encoder_sptr_get_input_conversion", _wrap_generic_encoder_sptr_get_input_conversion, METH_VARARGS, (char *)"\n"
		"generic_encoder_sptr_get_input_conversion(generic_encoder_sptr self) -> char const *\n"
		"\n"
		"Set up a conversion type required to setup the data properly for this encoder. The encoder itself will not implement the conversion and expects an external wrapper (e.g., fec.extended_encoder) to read this value and \"do the right\n"
		"thing\" to format the data.\n"
		"\n"
		"The default behavior is 'none', which means no conversion is required. Whatever the get_input_item_size() value returns, the input is expected to conform directly to this. Generally, this means unpacked bytes.\n"
		"\n"
		"If 'pack', the block expects the inputs to be packed bytes. The wrapper should implement a gr::blocks::pack_k_bits_bb(8) block for this.\n"
		"\n"
		"The child class MAY implement this function. If not reimplemented, it returns \"none\".\n"
		""},
	 { (char *)"generic_encoder_sptr_get_output_conversion", _wrap_generic_encoder_sptr_get_output_conversion, METH_VARARGS, (char *)"\n"
		"generic_encoder_sptr_get_output_conversion(generic_encoder_sptr self) -> char const *\n"
		"\n"
		"Set up a conversion type required to understand the output style of this encoder. Generally an encoder will produce unpacked bytes with a bit set in the LSB.\n"
		"\n"
		"The default behavior is 'none', which means no conversion is required and the encoder produces unpacked bytes.\n"
		"\n"
		"If 'packed_bits', the block produces packed bits and the wrapper should unpack these (using, for instance, gr::block::unpack_k_bits_bb(8)).\n"
		"\n"
		"The child class MAY implement this function. If not reimplemented, it returns \"none\".\n"
		""},
	 { (char *)"generic_encoder_sptr_set_frame_size", (PyCFunction) _wrap_generic_encoder_sptr_set_frame_size, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"generic_encoder_sptr_set_frame_size(generic_encoder_sptr self, unsigned int frame_size) -> bool\n"
		"\n"
		"Updates the size of the frame to encode.\n"
		"\n"
		"The child class MUST implement this function and interpret how the  information affects the block's behavior. It should also provide bounds checks.\n"
		""},
	 { (char *)"generic_encoder_sptr_swigregister", generic_encoder_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_generic_decoder_sptr", _wrap_new_generic_decoder_sptr, METH_VARARGS, (char *)"\n"
		"generic_decoder_sptr()\n"
		"new_generic_decoder_sptr(generic_decoder p) -> generic_decoder_sptr\n"
		""},
	 { (char *)"generic_decoder_sptr___deref__", _wrap_generic_decoder_sptr___deref__, METH_VARARGS, (char *)"generic_decoder_sptr___deref__(generic_decoder_sptr self) -> generic_decoder"},
	 { (char *)"delete_generic_decoder_sptr", _wrap_delete_generic_decoder_sptr, METH_VARARGS, (char *)"delete_generic_decoder_sptr(generic_decoder_sptr self)"},
	 { (char *)"generic_decoder_sptr_generic_work", (PyCFunction) _wrap_generic_decoder_sptr_generic_work, METH_VARARGS | METH_KEYWORDS, (char *)"generic_decoder_sptr_generic_work(generic_decoder_sptr self, void * inbuffer, void * outbuffer)"},
	 { (char *)"generic_decoder_sptr_base_unique_id_set", _wrap_generic_decoder_sptr_base_unique_id_set, METH_VARARGS, (char *)"generic_decoder_sptr_base_unique_id_set(generic_decoder_sptr self, int base_unique_id)"},
	 { (char *)"generic_decoder_sptr_base_unique_id_get", _wrap_generic_decoder_sptr_base_unique_id_get, METH_VARARGS, (char *)"generic_decoder_sptr_base_unique_id_get(generic_decoder_sptr self) -> int"},
	 { (char *)"generic_decoder_sptr_my_id_set", _wrap_generic_decoder_sptr_my_id_set, METH_VARARGS, (char *)"generic_decoder_sptr_my_id_set(generic_decoder_sptr self, int my_id)"},
	 { (char *)"generic_decoder_sptr_my_id_get", _wrap_generic_decoder_sptr_my_id_get, METH_VARARGS, (char *)"generic_decoder_sptr_my_id_get(generic_decoder_sptr self) -> int"},
	 { (char *)"generic_decoder_sptr_unique_id", _wrap_generic_decoder_sptr_unique_id, METH_VARARGS, (char *)"generic_decoder_sptr_unique_id(generic_decoder_sptr self) -> int"},
	 { (char *)"generic_decoder_sptr_d_name_set", _wrap_generic_decoder_sptr_d_name_set, METH_VARARGS, (char *)"generic_decoder_sptr_d_name_set(generic_decoder_sptr self, std::string const & d_name)"},
	 { (char *)"generic_decoder_sptr_d_name_get", _wrap_generic_decoder_sptr_d_name_get, METH_VARARGS, (char *)"generic_decoder_sptr_d_name_get(generic_decoder_sptr self) -> std::string const &"},
	 { (char *)"generic_decoder_sptr_alias", _wrap_generic_decoder_sptr_alias, METH_VARARGS, (char *)"generic_decoder_sptr_alias(generic_decoder_sptr self) -> std::string"},
	 { (char *)"generic_decoder_sptr_rate", _wrap_generic_decoder_sptr_rate, METH_VARARGS, (char *)"\n"
		"generic_decoder_sptr_rate(generic_decoder_sptr self) -> double\n"
		"\n"
		"Returns the rate of the code. For every r input bits, there is 1 output bit, so the rate is 1/r. Used for setting things like the encoder block's relative rate.\n"
		"\n"
		"This function MUST be reimplemented by the child class.\n"
		""},
	 { (char *)"generic_decoder_sptr_get_input_size", _wrap_generic_decoder_sptr_get_input_size, METH_VARARGS, (char *)"\n"
		"generic_decoder_sptr_get_input_size(generic_decoder_sptr self) -> int\n"
		"\n"
		"Returns the input size in items that the decoder object uses to decode a full frame. Often, this number is the number of bits per frame if the input format is unpacked. If the block expects packed bytes, then this value should be the number of bytes (number of bits / 8) per input frame.\n"
		"\n"
		"The child class MUST implement this function.\n"
		""},
	 { (char *)"generic_decoder_sptr_get_output_size", _wrap_generic_decoder_sptr_get_output_size, METH_VARARGS, (char *)"\n"
		"generic_decoder_sptr_get_output_size(generic_decoder_sptr self) -> int\n"
		"\n"
		"Returns the output size in items that the decoder object produces after decoding a full frame. Often, this number is the number of bits in the outputted frame if the input format is unpacked. If the block produces packed bytes, then this value should be the number of bytes (number of bits / 8) per frame produced. This value is generally something like get_input_size()/R for a 1/R rate code.\n"
		"\n"
		"The child class MUST implement this function.\n"
		""},
	 { (char *)"generic_decoder_sptr_get_history", _wrap_generic_decoder_sptr_get_history, METH_VARARGS, (char *)"\n"
		"generic_decoder_sptr_get_history(generic_decoder_sptr self) -> int\n"
		"\n"
		"Sets up history for the decoder when the decoder is required to look ahead in the data stream in order to finish its processing.\n"
		"\n"
		"The child class MAY implement this function. If not reimplemented, it returns 0.\n"
		""},
	 { (char *)"generic_decoder_sptr_get_shift", _wrap_generic_decoder_sptr_get_shift, METH_VARARGS, (char *)"\n"
		"generic_decoder_sptr_get_shift(generic_decoder_sptr self) -> float\n"
		"\n"
		"Some decoders require the input items to float around a particular soft value. We can set that floating value by setting this value to return some non-zero number.\n"
		"\n"
		"The fec.extended_decoder block will use this to create an add_const_ff block before the decoder block to adjust all input samples appropriately.\n"
		"\n"
		"The child class MAY implement this function. If not reimplemented, it returns 0.\n"
		""},
	 { (char *)"generic_decoder_sptr_get_input_item_size", _wrap_generic_decoder_sptr_get_input_item_size, METH_VARARGS, (char *)"\n"
		"generic_decoder_sptr_get_input_item_size(generic_decoder_sptr self) -> int\n"
		"\n"
		"Sets the size of an input item, as in the size of a char or float item.\n"
		"\n"
		"The child class SHOULD implement this function. If not reimplemented, it returns sizeof(float) as the decoders typically expect floating point input types.\n"
		""},
	 { (char *)"generic_decoder_sptr_get_output_item_size", _wrap_generic_decoder_sptr_get_output_item_size, METH_VARARGS, (char *)"\n"
		"generic_decoder_sptr_get_output_item_size(generic_decoder_sptr self) -> int\n"
		"\n"
		"Sets the size of an output item, as in the size of a char or float item.\n"
		"\n"
		"The child class SHOULD implement this function. If not reimplemented, it returns sizeof(char) as the decoders typically expect to produce bits or bytes.\n"
		""},
	 { (char *)"generic_decoder_sptr_get_input_conversion", _wrap_generic_decoder_sptr_get_input_conversion, METH_VARARGS, (char *)"\n"
		"generic_decoder_sptr_get_input_conversion(generic_decoder_sptr self) -> char const *\n"
		"\n"
		"Set up a conversion type required to setup the data properly for this decoder. The decoder itself will not implement the conversion and expects an external wrapper (e.g., fec.extended_decoder) to read this value and \"do the right\n"
		"thing\" to format the data.\n"
		"\n"
		"The default behavior is 'none', which means no conversion is required. Whatever the get_input_item_size() value returns, the input is expected to conform directly to this.\n"
		"\n"
		"This may also return 'uchar', which indicates that the wrapper should convert the standard float samples to unsigned characters, either hard sliced or 8-bit soft symbols. See gr::fec::code::cc_decoder as an example decoder that uses this conversion format.\n"
		"\n"
		"If 'packed_bits', the block expects the inputs to be packed hard bits. Each input item is a unsigned char where each of the 8-bits is a hard bit value.\n"
		"\n"
		"The child class SHOULD implement this function. If not reimplemented, it returns \"none\".\n"
		""},
	 { (char *)"generic_decoder_sptr_get_output_conversion", _wrap_generic_decoder_sptr_get_output_conversion, METH_VARARGS, (char *)"\n"
		"generic_decoder_sptr_get_output_conversion(generic_decoder_sptr self) -> char const *\n"
		"\n"
		"Set up a conversion type required to understand the output style of this decoder. Generally, follow-on processing expects unpacked bits, so we specify the conversion type here to indicate what the wrapper (e.g., fec.extended_decoder) should do to convert the output samples from the decoder into unpacked bits.\n"
		"\n"
		"The default behavior is 'none', which means no conversion is required. This should mean that the output data is produced from this decoder as unpacked bit.\n"
		"\n"
		"If 'unpack', the block produces packed bytes that should be unpacked by the wrapper. See gr::fec::code::ccsds_decoder as an example of a decoder that produces packed bytes.\n"
		"\n"
		"The child class SHOULD implement this function. If not reimplemented, it returns \"none\".\n"
		""},
	 { (char *)"generic_decoder_sptr_set_frame_size", (PyCFunction) _wrap_generic_decoder_sptr_set_frame_size, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"generic_decoder_sptr_set_frame_size(generic_decoder_sptr self, unsigned int frame_size) -> bool\n"
		"\n"
		"Updates the size of a decoded frame.\n"
		"\n"
		"The child class MUST implement this function and interpret how the  information affects the block's behavior. It should also provide bounds checks.\n"
		""},
	 { (char *)"generic_decoder_sptr_get_iterations", _wrap_generic_decoder_sptr_get_iterations, METH_VARARGS, (char *)"\n"
		"generic_decoder_sptr_get_iterations(generic_decoder_sptr self) -> float\n"
		"\n"
		"Get repetitions to decode.\n"
		"\n"
		"The child class should implement this function and return the number of iterations required to decode.\n"
		""},
	 { (char *)"generic_decoder_sptr_swigregister", generic_decoder_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"generic_decoder_generic_work", (PyCFunction) _wrap_generic_decoder_generic_work, METH_VARARGS | METH_KEYWORDS, (char *)"generic_decoder_generic_work(generic_decoder self, void * inbuffer, void * outbuffer)"},
	 { (char *)"generic_decoder_base_unique_id_get", _wrap_generic_decoder_base_unique_id_get, METH_VARARGS, NULL},
	 { (char *)"generic_decoder_base_unique_id_set", _wrap_generic_decoder_base_unique_id_set, METH_VARARGS, NULL},
	 { (char *)"generic_decoder_my_id_set", _wrap_generic_decoder_my_id_set, METH_VARARGS, (char *)"generic_decoder_my_id_set(generic_decoder self, int my_id)"},
	 { (char *)"generic_decoder_my_id_get", _wrap_generic_decoder_my_id_get, METH_VARARGS, (char *)"generic_decoder_my_id_get(generic_decoder self) -> int"},
	 { (char *)"generic_decoder_unique_id", _wrap_generic_decoder_unique_id, METH_VARARGS, (char *)"generic_decoder_unique_id(generic_decoder self) -> int"},
	 { (char *)"generic_decoder_d_name_set", _wrap_generic_decoder_d_name_set, METH_VARARGS, (char *)"generic_decoder_d_name_set(generic_decoder self, std::string const & d_name)"},
	 { (char *)"generic_decoder_d_name_get", _wrap_generic_decoder_d_name_get, METH_VARARGS, (char *)"generic_decoder_d_name_get(generic_decoder self) -> std::string const &"},
	 { (char *)"generic_decoder_alias", _wrap_generic_decoder_alias, METH_VARARGS, (char *)"generic_decoder_alias(generic_decoder self) -> std::string"},
	 { (char *)"delete_generic_decoder", _wrap_delete_generic_decoder, METH_VARARGS, (char *)"delete_generic_decoder(generic_decoder self)"},
	 { (char *)"generic_decoder_rate", _wrap_generic_decoder_rate, METH_VARARGS, (char *)"\n"
		"generic_decoder_rate(generic_decoder self) -> double\n"
		"\n"
		"Returns the rate of the code. For every r input bits, there is 1 output bit, so the rate is 1/r. Used for setting things like the encoder block's relative rate.\n"
		"\n"
		"This function MUST be reimplemented by the child class.\n"
		""},
	 { (char *)"generic_decoder_get_input_size", _wrap_generic_decoder_get_input_size, METH_VARARGS, (char *)"\n"
		"generic_decoder_get_input_size(generic_decoder self) -> int\n"
		"\n"
		"Returns the input size in items that the decoder object uses to decode a full frame. Often, this number is the number of bits per frame if the input format is unpacked. If the block expects packed bytes, then this value should be the number of bytes (number of bits / 8) per input frame.\n"
		"\n"
		"The child class MUST implement this function.\n"
		""},
	 { (char *)"generic_decoder_get_output_size", _wrap_generic_decoder_get_output_size, METH_VARARGS, (char *)"\n"
		"generic_decoder_get_output_size(generic_decoder self) -> int\n"
		"\n"
		"Returns the output size in items that the decoder object produces after decoding a full frame. Often, this number is the number of bits in the outputted frame if the input format is unpacked. If the block produces packed bytes, then this value should be the number of bytes (number of bits / 8) per frame produced. This value is generally something like get_input_size()/R for a 1/R rate code.\n"
		"\n"
		"The child class MUST implement this function.\n"
		""},
	 { (char *)"generic_decoder_get_history", _wrap_generic_decoder_get_history, METH_VARARGS, (char *)"\n"
		"generic_decoder_get_history(generic_decoder self) -> int\n"
		"\n"
		"Sets up history for the decoder when the decoder is required to look ahead in the data stream in order to finish its processing.\n"
		"\n"
		"The child class MAY implement this function. If not reimplemented, it returns 0.\n"
		""},
	 { (char *)"generic_decoder_get_shift", _wrap_generic_decoder_get_shift, METH_VARARGS, (char *)"\n"
		"generic_decoder_get_shift(generic_decoder self) -> float\n"
		"\n"
		"Some decoders require the input items to float around a particular soft value. We can set that floating value by setting this value to return some non-zero number.\n"
		"\n"
		"The fec.extended_decoder block will use this to create an add_const_ff block before the decoder block to adjust all input samples appropriately.\n"
		"\n"
		"The child class MAY implement this function. If not reimplemented, it returns 0.\n"
		""},
	 { (char *)"generic_decoder_get_input_item_size", _wrap_generic_decoder_get_input_item_size, METH_VARARGS, (char *)"\n"
		"generic_decoder_get_input_item_size(generic_decoder self) -> int\n"
		"\n"
		"Sets the size of an input item, as in the size of a char or float item.\n"
		"\n"
		"The child class SHOULD implement this function. If not reimplemented, it returns sizeof(float) as the decoders typically expect floating point input types.\n"
		""},
	 { (char *)"generic_decoder_get_output_item_size", _wrap_generic_decoder_get_output_item_size, METH_VARARGS, (char *)"\n"
		"generic_decoder_get_output_item_size(generic_decoder self) -> int\n"
		"\n"
		"Sets the size of an output item, as in the size of a char or float item.\n"
		"\n"
		"The child class SHOULD implement this function. If not reimplemented, it returns sizeof(char) as the decoders typically expect to produce bits or bytes.\n"
		""},
	 { (char *)"generic_decoder_get_input_conversion", _wrap_generic_decoder_get_input_conversion, METH_VARARGS, (char *)"\n"
		"generic_decoder_get_input_conversion(generic_decoder self) -> char const *\n"
		"\n"
		"Set up a conversion type required to setup the data properly for this decoder. The decoder itself will not implement the conversion and expects an external wrapper (e.g., fec.extended_decoder) to read this value and \"do the right\n"
		"thing\" to format the data.\n"
		"\n"
		"The default behavior is 'none', which means no conversion is required. Whatever the get_input_item_size() value returns, the input is expected to conform directly to this.\n"
		"\n"
		"This may also return 'uchar', which indicates that the wrapper should convert the standard float samples to unsigned characters, either hard sliced or 8-bit soft symbols. See gr::fec::code::cc_decoder as an example decoder that uses this conversion format.\n"
		"\n"
		"If 'packed_bits', the block expects the inputs to be packed hard bits. Each input item is a unsigned char where each of the 8-bits is a hard bit value.\n"
		"\n"
		"The child class SHOULD implement this function. If not reimplemented, it returns \"none\".\n"
		""},
	 { (char *)"generic_decoder_get_output_conversion", _wrap_generic_decoder_get_output_conversion, METH_VARARGS, (char *)"\n"
		"generic_decoder_get_output_conversion(generic_decoder self) -> char const *\n"
		"\n"
		"Set up a conversion type required to understand the output style of this decoder. Generally, follow-on processing expects unpacked bits, so we specify the conversion type here to indicate what the wrapper (e.g., fec.extended_decoder) should do to convert the output samples from the decoder into unpacked bits.\n"
		"\n"
		"The default behavior is 'none', which means no conversion is required. This should mean that the output data is produced from this decoder as unpacked bit.\n"
		"\n"
		"If 'unpack', the block produces packed bytes that should be unpacked by the wrapper. See gr::fec::code::ccsds_decoder as an example of a decoder that produces packed bytes.\n"
		"\n"
		"The child class SHOULD implement this function. If not reimplemented, it returns \"none\".\n"
		""},
	 { (char *)"generic_decoder_set_frame_size", (PyCFunction) _wrap_generic_decoder_set_frame_size, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"generic_decoder_set_frame_size(generic_decoder self, unsigned int frame_size) -> bool\n"
		"\n"
		"Updates the size of a decoded frame.\n"
		"\n"
		"The child class MUST implement this function and interpret how the  information affects the block's behavior. It should also provide bounds checks.\n"
		""},
	 { (char *)"generic_decoder_get_iterations", _wrap_generic_decoder_get_iterations, METH_VARARGS, (char *)"\n"
		"generic_decoder_get_iterations(generic_decoder self) -> float\n"
		"\n"
		"Get repetitions to decode.\n"
		"\n"
		"The child class should implement this function and return the number of iterations required to decode.\n"
		""},
	 { (char *)"generic_decoder_swigregister", generic_decoder_swigregister, METH_VARARGS, NULL},
	 { (char *)"get_decoder_output_size", (PyCFunction) _wrap_get_decoder_output_size, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"get_decoder_output_size(generic_decoder_sptr my_decoder) -> int\n"
		"\n"
		"see generic_decoder::get_output_size()\n"
		""},
	 { (char *)"get_decoder_input_size", (PyCFunction) _wrap_get_decoder_input_size, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"get_decoder_input_size(generic_decoder_sptr my_decoder) -> int\n"
		"\n"
		"see generic_decoder::get_input_size()\n"
		""},
	 { (char *)"get_shift", (PyCFunction) _wrap_get_shift, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"get_shift(generic_decoder_sptr my_decoder) -> float\n"
		"\n"
		"see generic_decoder::get_shift()\n"
		""},
	 { (char *)"get_history", (PyCFunction) _wrap_get_history, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"get_history(generic_decoder_sptr my_decoder) -> int\n"
		"\n"
		"see generic_decoder::get_history()\n"
		""},
	 { (char *)"get_decoder_input_item_size", (PyCFunction) _wrap_get_decoder_input_item_size, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"get_decoder_input_item_size(generic_decoder_sptr my_decoder) -> int\n"
		"\n"
		"see generic_decoder::get_input_item_size()\n"
		""},
	 { (char *)"get_decoder_output_item_size", (PyCFunction) _wrap_get_decoder_output_item_size, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"get_decoder_output_item_size(generic_decoder_sptr my_decoder) -> int\n"
		"\n"
		"see generic_decoder::get_output_item_size()\n"
		""},
	 { (char *)"get_decoder_input_conversion", (PyCFunction) _wrap_get_decoder_input_conversion, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"get_decoder_input_conversion(generic_decoder_sptr my_decoder) -> char const *\n"
		"\n"
		"see generic_decoder::get_input_conversion()\n"
		""},
	 { (char *)"get_decoder_output_conversion", (PyCFunction) _wrap_get_decoder_output_conversion, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"get_decoder_output_conversion(generic_decoder_sptr my_decoder) -> char const *\n"
		"\n"
		"see generic_decoder::get_output_conversion()\n"
		""},
	 { (char *)"generic_encoder_generic_work", (PyCFunction) _wrap_generic_encoder_generic_work, METH_VARARGS | METH_KEYWORDS, (char *)"generic_encoder_generic_work(generic_encoder self, void * in_buffer, void * out_buffer)"},
	 { (char *)"generic_encoder_base_unique_id_get", _wrap_generic_encoder_base_unique_id_get, METH_VARARGS, NULL},
	 { (char *)"generic_encoder_base_unique_id_set", _wrap_generic_encoder_base_unique_id_set, METH_VARARGS, NULL},
	 { (char *)"generic_encoder_my_id_set", _wrap_generic_encoder_my_id_set, METH_VARARGS, (char *)"generic_encoder_my_id_set(generic_encoder self, int my_id)"},
	 { (char *)"generic_encoder_my_id_get", _wrap_generic_encoder_my_id_get, METH_VARARGS, (char *)"generic_encoder_my_id_get(generic_encoder self) -> int"},
	 { (char *)"generic_encoder_unique_id", _wrap_generic_encoder_unique_id, METH_VARARGS, (char *)"generic_encoder_unique_id(generic_encoder self) -> int"},
	 { (char *)"generic_encoder_d_name_set", _wrap_generic_encoder_d_name_set, METH_VARARGS, (char *)"generic_encoder_d_name_set(generic_encoder self, std::string const & d_name)"},
	 { (char *)"generic_encoder_d_name_get", _wrap_generic_encoder_d_name_get, METH_VARARGS, (char *)"generic_encoder_d_name_get(generic_encoder self) -> std::string const &"},
	 { (char *)"generic_encoder_alias", _wrap_generic_encoder_alias, METH_VARARGS, (char *)"generic_encoder_alias(generic_encoder self) -> std::string"},
	 { (char *)"generic_encoder_rate", _wrap_generic_encoder_rate, METH_VARARGS, (char *)"\n"
		"generic_encoder_rate(generic_encoder self) -> double\n"
		"\n"
		"Returns the rate of the code. For every 1 input bit, there are r output bits, so the rate is 1/r. Used for setting things like the encoder block's relative rate.\n"
		"\n"
		"This function MUST be reimplemented by the child class.\n"
		""},
	 { (char *)"generic_encoder_get_input_size", _wrap_generic_encoder_get_input_size, METH_VARARGS, (char *)"\n"
		"generic_encoder_get_input_size(generic_encoder self) -> int\n"
		"\n"
		"Returns the input size in items that the encoder object uses to encode a full frame. Often, this number is the number of bits per frame if the input format is unpacked. If the block expects packed bytes, then this value should be the number of bytes (number of bits / 8) per input frame.\n"
		"\n"
		"The child class MUST implement this function.\n"
		""},
	 { (char *)"generic_encoder_get_output_size", _wrap_generic_encoder_get_output_size, METH_VARARGS, (char *)"\n"
		"generic_encoder_get_output_size(generic_encoder self) -> int\n"
		"\n"
		"Returns the output size in items that the encoder object produces after encoding a full frame. Often, this number is the number of bits in the outputted frame if the input format is unpacked. If the block produces packed bytes, then this value should be the number of bytes (number of bits / 8) per frame produced. This value is generally something like R*get_input_size() for a 1/R rate code.\n"
		"\n"
		"The child class MUST implement this function.\n"
		""},
	 { (char *)"generic_encoder_get_input_conversion", _wrap_generic_encoder_get_input_conversion, METH_VARARGS, (char *)"\n"
		"generic_encoder_get_input_conversion(generic_encoder self) -> char const *\n"
		"\n"
		"Set up a conversion type required to setup the data properly for this encoder. The encoder itself will not implement the conversion and expects an external wrapper (e.g., fec.extended_encoder) to read this value and \"do the right\n"
		"thing\" to format the data.\n"
		"\n"
		"The default behavior is 'none', which means no conversion is required. Whatever the get_input_item_size() value returns, the input is expected to conform directly to this. Generally, this means unpacked bytes.\n"
		"\n"
		"If 'pack', the block expects the inputs to be packed bytes. The wrapper should implement a gr::blocks::pack_k_bits_bb(8) block for this.\n"
		"\n"
		"The child class MAY implement this function. If not reimplemented, it returns \"none\".\n"
		""},
	 { (char *)"generic_encoder_get_output_conversion", _wrap_generic_encoder_get_output_conversion, METH_VARARGS, (char *)"\n"
		"generic_encoder_get_output_conversion(generic_encoder self) -> char const *\n"
		"\n"
		"Set up a conversion type required to understand the output style of this encoder. Generally an encoder will produce unpacked bytes with a bit set in the LSB.\n"
		"\n"
		"The default behavior is 'none', which means no conversion is required and the encoder produces unpacked bytes.\n"
		"\n"
		"If 'packed_bits', the block produces packed bits and the wrapper should unpack these (using, for instance, gr::block::unpack_k_bits_bb(8)).\n"
		"\n"
		"The child class MAY implement this function. If not reimplemented, it returns \"none\".\n"
		""},
	 { (char *)"generic_encoder_set_frame_size", (PyCFunction) _wrap_generic_encoder_set_frame_size, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"generic_encoder_set_frame_size(generic_encoder self, unsigned int frame_size) -> bool\n"
		"\n"
		"Updates the size of the frame to encode.\n"
		"\n"
		"The child class MUST implement this function and interpret how the  information affects the block's behavior. It should also provide bounds checks.\n"
		""},
	 { (char *)"delete_generic_encoder", _wrap_delete_generic_encoder, METH_VARARGS, (char *)"delete_generic_encoder(generic_encoder self)"},
	 { (char *)"generic_encoder_swigregister", generic_encoder_swigregister, METH_VARARGS, NULL},
	 { (char *)"get_encoder_output_size", (PyCFunction) _wrap_get_encoder_output_size, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"get_encoder_output_size(generic_encoder_sptr my_encoder) -> int\n"
		"\n"
		"see generic_encoder::get_output_size()\n"
		""},
	 { (char *)"get_encoder_input_size", (PyCFunction) _wrap_get_encoder_input_size, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"get_encoder_input_size(generic_encoder_sptr my_encoder) -> int\n"
		"\n"
		"see generic_encoder::get_input_size()\n"
		""},
	 { (char *)"get_encoder_input_conversion", (PyCFunction) _wrap_get_encoder_input_conversion, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"get_encoder_input_conversion(generic_encoder_sptr my_encoder) -> char const *\n"
		"\n"
		"see generic_encoder::get_input_conversion()\n"
		""},
	 { (char *)"get_encoder_output_conversion", (PyCFunction) _wrap_get_encoder_output_conversion, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"get_encoder_output_conversion(generic_encoder_sptr my_encoder) -> char const *\n"
		"\n"
		"see generic_encoder::get_output_conversion()\n"
		""},
	 { (char *)"decoder_make", (PyCFunction) _wrap_decoder_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"decoder_make(generic_decoder_sptr my_decoder, size_t input_item_size, size_t output_item_size) -> decoder_sptr\n"
		"\n"
		"General FEC decoding block that takes in a decoder variable object (derived from gr::fec::general_decoder) for use in a flowgraph.\n"
		"\n"
		"This block uses a decoder variable object (derived from gr::fec::generic_decoder) to decode data within a flowgraph. This block interacts with the general FECAPI architecture to handle all passing all input and output data in a flowgraph. The decoder variable takes care of understanding the requirements, data types and sizes, and boundary conditions of the specific FEC decoding algorithm.\n"
		"\n"
		"Generally, this block is used within the fec.extended_decoder Python block to handle some input/output formatting issues. In the FECAPI, the decoder variable sets properties like the input and output types and sizes and whether the output is packed or unpacked bytes. The fec.extended_decoder uses this information to set up an gr::hier_block2 structure to make sure the I/O to the variable is handled consistently, such as to make sure all inputs are floats with one soft symbol per item and the outputs are unpacked bytes with the bit in the LSB.\n"
		"\n"
		"See gr::fec::generic_decoder for detail on what information an FECAPI variable object can set if using this block directly and not as part of the fec.extended_decoder.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Create the FEC decoder block by taking in the FECAPI decoder object as well as input and output sizes.\n"
		"\n"
		"Args:\n"
		"    my_decoder : An FECAPI decoder object (See gr::fec::generic_decoder).\n"
		"    input_item_size : The size of the input items (often the my_decoder object can tell us this).\n"
		"    output_item_size : The size of the output items (often the my_decoder object can tell us this).\n"
		""},
	 { (char *)"decoder_general_work", (PyCFunction) _wrap_decoder_general_work, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"decoder_general_work(decoder self, int noutput_items, gr_vector_int & ninput_items, gr_vector_const_void_star & input_items, \n"
		"    gr_vector_void_star & output_items) -> int\n"
		""},
	 { (char *)"decoder_fixed_rate_ninput_to_noutput", (PyCFunction) _wrap_decoder_fixed_rate_ninput_to_noutput, METH_VARARGS | METH_KEYWORDS, (char *)"decoder_fixed_rate_ninput_to_noutput(decoder self, int ninput) -> int"},
	 { (char *)"decoder_fixed_rate_noutput_to_ninput", (PyCFunction) _wrap_decoder_fixed_rate_noutput_to_ninput, METH_VARARGS | METH_KEYWORDS, (char *)"decoder_fixed_rate_noutput_to_ninput(decoder self, int noutput) -> int"},
	 { (char *)"decoder_forecast", (PyCFunction) _wrap_decoder_forecast, METH_VARARGS | METH_KEYWORDS, (char *)"decoder_forecast(decoder self, int noutput_items, gr_vector_int & ninput_items_required)"},
	 { (char *)"delete_decoder", _wrap_delete_decoder, METH_VARARGS, (char *)"delete_decoder(decoder self)"},
	 { (char *)"decoder_swigregister", decoder_swigregister, METH_VARARGS, NULL},
	 { (char *)"encoder_make", (PyCFunction) _wrap_encoder_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"encoder_make(generic_encoder_sptr my_encoder, size_t input_item_size, size_t output_item_size) -> encoder_sptr\n"
		"\n"
		"Creates the encoder block for use in GNU Radio flowgraphs from a given FECAPI object derived from the generic_encoder class.\n"
		"\n"
		"Generally, we would use the fec.extended_encoder Python implementation to instantiate this. The extended_encoder wraps up a few more details, like taking care of puncturing as well as the encoder itself.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Build the FEC encoder block from an FECAPI encoder object.\n"
		"\n"
		"Args:\n"
		"    my_encoder : An FECAPI encoder object child of the generic_encoder class.\n"
		"    input_item_size : size of a block of data for the encoder.\n"
		"    output_item_size : size of a block of data the encoder will produce.\n"
		""},
	 { (char *)"encoder_general_work", (PyCFunction) _wrap_encoder_general_work, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"encoder_general_work(encoder self, int noutput_items, gr_vector_int & ninput_items, gr_vector_const_void_star & input_items, \n"
		"    gr_vector_void_star & output_items) -> int\n"
		""},
	 { (char *)"encoder_fixed_rate_ninput_to_noutput", (PyCFunction) _wrap_encoder_fixed_rate_ninput_to_noutput, METH_VARARGS | METH_KEYWORDS, (char *)"encoder_fixed_rate_ninput_to_noutput(encoder self, int ninput) -> int"},
	 { (char *)"encoder_fixed_rate_noutput_to_ninput", (PyCFunction) _wrap_encoder_fixed_rate_noutput_to_ninput, METH_VARARGS | METH_KEYWORDS, (char *)"encoder_fixed_rate_noutput_to_ninput(encoder self, int noutput) -> int"},
	 { (char *)"encoder_forecast", (PyCFunction) _wrap_encoder_forecast, METH_VARARGS | METH_KEYWORDS, (char *)"encoder_forecast(encoder self, int noutput_items, gr_vector_int & ninput_items_required)"},
	 { (char *)"delete_encoder", _wrap_delete_encoder, METH_VARARGS, (char *)"delete_encoder(encoder self)"},
	 { (char *)"encoder_swigregister", encoder_swigregister, METH_VARARGS, NULL},
	 { (char *)"tagged_decoder_make", (PyCFunction) _wrap_tagged_decoder_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tagged_decoder_make(generic_decoder_sptr my_decoder, size_t input_item_size, size_t output_item_size, \n"
		"    std::string const & lengthtagname=\"packet_len\", int mtu=1500) -> tagged_decoder_sptr\n"
		"\n"
		"General FEC decoding block that takes in a decoder variable object (derived from gr::fec::general_decoder) for use in a flowgraph.\n"
		"\n"
		"This block uses a decoder variable object (derived from gr::fec::generic_decoder) to decode data within a flowgraph. This block interacts with the general FECAPI architecture to handle all passing all input and output data in a flowgraph. The decoder variable takes care of understanding the requirements, data types and sizes, and boundary conditions of the specific FEC decoding algorithm.\n"
		"\n"
		"Generally, this block is used within the fec.extended_decoder Python block to handle some input/output formatting issues. In the FECAPI, the decoder variable sets properties like the input and output types and sizes and whether the output is packed or unpacked bytes. The fec.extended_decoder uses this information to set up an gr::hier_block2 structure to make sure the I/O to the variable is handled consistently, such as to make sure all inputs are floats with one soft symbol per item and the outputs are unpacked bytes with the bit in the LSB.\n"
		"\n"
		"See gr::fec::generic_decoder for detail on what information an FECAPI variable object can set if using this block directly and not as part of the fec.extended_decoder.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Create the FEC decoder block by taking in the FECAPI decoder object as well as input and output sizes.\n"
		"\n"
		"Args:\n"
		"    my_decoder : An FECAPI decoder object (See gr::fec::generic_decoder).\n"
		"    input_item_size : The size of the input items (often the my_decoder object can tell us this).\n"
		"    output_item_size : The size of the output items (often the my_decoder object can tell us this).\n"
		"    lengthtagname : Key name of the tagged stream frame size.\n"
		"    mtu : The Maximum Transmission Unit (MTU) of the output frame that the block will be able to process. Specified in bytes and defaults to 1500.\n"
		""},
	 { (char *)"tagged_decoder_work", (PyCFunction) _wrap_tagged_decoder_work, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tagged_decoder_work(tagged_decoder self, int noutput_items, gr_vector_int & ninput_items, gr_vector_const_void_star & input_items, \n"
		"    gr_vector_void_star & output_items) -> int\n"
		""},
	 { (char *)"tagged_decoder_calculate_output_stream_length", (PyCFunction) _wrap_tagged_decoder_calculate_output_stream_length, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_decoder_calculate_output_stream_length(tagged_decoder self, gr_vector_int const & ninput_items) -> int"},
	 { (char *)"delete_tagged_decoder", _wrap_delete_tagged_decoder, METH_VARARGS, (char *)"delete_tagged_decoder(tagged_decoder self)"},
	 { (char *)"tagged_decoder_swigregister", tagged_decoder_swigregister, METH_VARARGS, NULL},
	 { (char *)"tagged_encoder_make", (PyCFunction) _wrap_tagged_encoder_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tagged_encoder_make(generic_encoder_sptr my_encoder, size_t input_item_size, size_t output_item_size, \n"
		"    std::string const & lengthtagname=\"packet_len\", int mtu=1500) -> tagged_encoder_sptr\n"
		"\n"
		"Creates the encoder block for use in GNU Radio flowgraphs from a given FECAPI object derived from the generic_encoder class.\n"
		"\n"
		"Generally, we would use the fec.extended_encoder Python implementation to instantiate this. The extended_encoder wraps up a few more details, like taking care of puncturing as well as the encoder itself.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Build the FEC encoder block from an FECAPI encoder object.\n"
		"\n"
		"Args:\n"
		"    my_encoder : An FECAPI encoder object child of the generic_encoder class.\n"
		"    input_item_size : size of a block of data for the encoder.\n"
		"    output_item_size : size of a block of data the encoder will produce.\n"
		"    lengthtagname : Key name of the tagged stream frame size.\n"
		"    mtu : The Maximum Transmission Unit (MTU) of the input frame that the block will be able to process. Specified in bytes and defaults to 1500.\n"
		""},
	 { (char *)"tagged_encoder_work", (PyCFunction) _wrap_tagged_encoder_work, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tagged_encoder_work(tagged_encoder self, int noutput_items, gr_vector_int & ninput_items, gr_vector_const_void_star & input_items, \n"
		"    gr_vector_void_star & output_items) -> int\n"
		""},
	 { (char *)"tagged_encoder_calculate_output_stream_length", (PyCFunction) _wrap_tagged_encoder_calculate_output_stream_length, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_encoder_calculate_output_stream_length(tagged_encoder self, gr_vector_int const & ninput_items) -> int"},
	 { (char *)"delete_tagged_encoder", _wrap_delete_tagged_encoder, METH_VARARGS, (char *)"delete_tagged_encoder(tagged_encoder self)"},
	 { (char *)"tagged_encoder_swigregister", tagged_encoder_swigregister, METH_VARARGS, NULL},
	 { (char *)"async_decoder_make", (PyCFunction) _wrap_async_decoder_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"async_decoder_make(generic_decoder_sptr my_decoder, bool packed=False, bool rev_pack=True, int mtu=1500) -> async_decoder_sptr\n"
		"\n"
		"Creates the decoder block for use in GNU Radio flowgraphs from a given FEC API object derived from the generic_decoder class.\n"
		"\n"
		"Decodes frames received as async messages over a message port. This decoder deployment expects messages of soft decision symbols in and can produce either packed, PDU messages ( = True) or messages full of unpacked bits ( = False).\n"
		"\n"
		"This decoder works off a full message as one frame or block to decode. The message length is used to calculate the frame length. To support this, the decoder variable used will have had its frame_size set. This block treats that initial frame_size value as the maximum transmission unit (MTU) and will not process frames larger than that after being decoded.\n"
		"\n"
		"The packed PDU form of this deployment is designed to work well with other PDU-based blocks to operate within the processing flow of data packets or frames.\n"
		"\n"
		"Due to differences in how data is packed and processed, this block also offers the ability to change the direction of how bits are packed. All inputs messages are one soft decision per item. By default, the  mode is set to True. Using this setup allows the async block to behave with PDUs in the same operation and format as the tagged stream decoders. That is, putting the same data into both the tagged stream decoder deployment and this with the default setting should produce the same data.\n"
		"\n"
		"Because the block handles data as a full frame per message, this decoder deployment cannot work with any decoders that require history. For example, the gr::fec::code::cc_decoder decoder in streaming mode requires an extra rate*(K-1) bits to complete the decoding, so it would have to wait for the next message to come in and finish processing. Therefore, the streaming mode of the CC decoder is not allowed. The other three modes will work with this deployment since the frame is self-contained for decoding.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Build the PDU-based FEC decoder block from an FECAPI decoder object.\n"
		"\n"
		"Args:\n"
		"    my_decoder : An FECAPI decoder object child of the generic_decoder class.\n"
		"    packed : Sets output to packed bytes if true; otherwise, 1 bit per byte.\n"
		"    rev_pack : If packing bits, should they be reversed?\n"
		"    mtu : The Maximum Transmission Unit (MTU) of the output frame that the block will be able to process. Specified in bytes and defaults to 1500.\n"
		""},
	 { (char *)"async_decoder_general_work", (PyCFunction) _wrap_async_decoder_general_work, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"async_decoder_general_work(async_decoder self, int noutput_items, gr_vector_int & ninput_items, gr_vector_const_void_star & input_items, \n"
		"    gr_vector_void_star & output_items) -> int\n"
		""},
	 { (char *)"delete_async_decoder", _wrap_delete_async_decoder, METH_VARARGS, (char *)"delete_async_decoder(async_decoder self)"},
	 { (char *)"async_decoder_swigregister", async_decoder_swigregister, METH_VARARGS, NULL},
	 { (char *)"async_encoder_make", (PyCFunction) _wrap_async_encoder_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"async_encoder_make(generic_encoder_sptr my_encoder, bool packed=False, bool rev_unpack=True, bool rev_pack=True, \n"
		"    int mtu=1500) -> async_encoder_sptr\n"
		"\n"
		"Creates the encoder block for use in GNU Radio flowgraphs with async message from a given FEC API object derived from the generic_encoder class.\n"
		"\n"
		"Encodes frames received as async messages or as a PDU over a message port. This encoder works off a full message as one frame or block to encode. The message length is used as the frame length. To support this, the encoder variable used will have had its frame_size set. This block treats that initial frame_size value as the maximum transmission unit (MTU) and will not process frames larger than that.\n"
		"\n"
		"This deployment works off messages and expects them to either be messages full of unpacked bits or PDU messages, which means full bytes of a frame from the higher layers, including things like headers, tails, CRC check bytes, etc. For handling PDUs, set the  option of this deployment block to True. The block will then use the FEC API to properly unpack the bits from the PDU, pass it through the encoder, and repack them to output the PDUs for the next stage of processing.\n"
		"\n"
		"The packed PDU form of this deployment is designed to work well with other PDU-based blocks to operate within the processing flow of data packets or frames.\n"
		"\n"
		"Due to differences in how data is packed and processed, this block also offers the ability to change the direction of how bits are unpacked and packed, where reading or writing from the LSB or MSB. By default, the  and  modes are set to True. Using this setup allows the async block to behave with PDUs in the same operation and format as the tagged stream encoders. That is, putting the same data into both the tagged stream encoder deployment and this with these default settings should produce the same data.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Build the PDU-based FEC encoder block from an FECAPI encoder object.\n"
		"\n"
		"Args:\n"
		"    my_encoder : An FECAPI encoder object child of the generic_encoder class.\n"
		"    packed : True if working on packed bytes (like PDUs).\n"
		"    rev_unpack : Reverse the unpacking order from input bytes to bits.\n"
		"    rev_pack : Reverse the packing order from bits to output bytes.\n"
		"    mtu : The Maximum Transmission Unit (MTU) of the input frame that the block will be able to process. Specified in bytes and defaults to 1500.\n"
		""},
	 { (char *)"async_encoder_general_work", (PyCFunction) _wrap_async_encoder_general_work, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"async_encoder_general_work(async_encoder self, int noutput_items, gr_vector_int & ninput_items, gr_vector_const_void_star & input_items, \n"
		"    gr_vector_void_star & output_items) -> int\n"
		""},
	 { (char *)"delete_async_encoder", _wrap_delete_async_encoder, METH_VARARGS, (char *)"delete_async_encoder(async_encoder self)"},
	 { (char *)"async_encoder_swigregister", async_encoder_swigregister, METH_VARARGS, NULL},
	 { (char *)"cc_decoder_make", (PyCFunction) _wrap_cc_decoder_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"cc_decoder_make(int frame_size, int k, int rate, std::vector< int,std::allocator< int > > polys, \n"
		"    int start_state=0, int end_state=-1, cc_mode_t mode=CC_STREAMING, bool padded=False) -> generic_decoder_sptr\n"
		"\n"
		"Build a convolutional code decoding FEC API object.\n"
		""},
	 { (char *)"delete_cc_decoder", _wrap_delete_cc_decoder, METH_VARARGS, (char *)"delete_cc_decoder(cc_decoder self)"},
	 { (char *)"cc_decoder_swigregister", cc_decoder_swigregister, METH_VARARGS, NULL},
	 { (char *)"cc_encoder_make", (PyCFunction) _wrap_cc_encoder_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"cc_encoder_make(int frame_size, int k, int rate, std::vector< int,std::allocator< int > > polys, \n"
		"    int start_state=0, cc_mode_t mode=CC_STREAMING, bool padded=False) -> generic_encoder_sptr\n"
		"\n"
		"Build a convolutional code encoding FEC API object.\n"
		""},
	 { (char *)"delete_cc_encoder", _wrap_delete_cc_encoder, METH_VARARGS, (char *)"delete_cc_encoder(cc_encoder self)"},
	 { (char *)"cc_encoder_swigregister", cc_encoder_swigregister, METH_VARARGS, NULL},
	 { (char *)"ccsds_encoder_make", (PyCFunction) _wrap_ccsds_encoder_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"ccsds_encoder_make(int frame_size, int start_state=0, cc_mode_t mode=CC_STREAMING) -> generic_encoder_sptr\n"
		"\n"
		"Build the CCSDS (rate=1/2, K=7, polys=[109,79] convolutional code FECAPI object.\n"
		""},
	 { (char *)"delete_ccsds_encoder", _wrap_delete_ccsds_encoder, METH_VARARGS, (char *)"delete_ccsds_encoder(ccsds_encoder self)"},
	 { (char *)"ccsds_encoder_swigregister", ccsds_encoder_swigregister, METH_VARARGS, NULL},
	 { (char *)"dummy_decoder_make", (PyCFunction) _wrap_dummy_decoder_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"dummy_decoder_make(int frame_size) -> generic_decoder_sptr\n"
		"\n"
		"Build a dummy decoding FEC API object.\n"
		""},
	 { (char *)"delete_dummy_decoder", _wrap_delete_dummy_decoder, METH_VARARGS, (char *)"delete_dummy_decoder(dummy_decoder self)"},
	 { (char *)"dummy_decoder_swigregister", dummy_decoder_swigregister, METH_VARARGS, NULL},
	 { (char *)"dummy_encoder_make", (PyCFunction) _wrap_dummy_encoder_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"dummy_encoder_make(int frame_size, bool pack=False, bool packed_bits=False) -> generic_encoder_sptr\n"
		"\n"
		"Build a dummy encoding FEC API object.\n"
		""},
	 { (char *)"delete_dummy_encoder", _wrap_delete_dummy_encoder, METH_VARARGS, (char *)"delete_dummy_encoder(dummy_encoder self)"},
	 { (char *)"dummy_encoder_swigregister", dummy_encoder_swigregister, METH_VARARGS, NULL},
	 { (char *)"repetition_decoder_make", (PyCFunction) _wrap_repetition_decoder_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"repetition_decoder_make(int frame_size, int rep, float ap_prob=0.5) -> generic_decoder_sptr\n"
		"\n"
		"Build a repetition decoding FEC API object.\n"
		""},
	 { (char *)"delete_repetition_decoder", _wrap_delete_repetition_decoder, METH_VARARGS, (char *)"delete_repetition_decoder(repetition_decoder self)"},
	 { (char *)"repetition_decoder_swigregister", repetition_decoder_swigregister, METH_VARARGS, NULL},
	 { (char *)"repetition_encoder_make", (PyCFunction) _wrap_repetition_encoder_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"repetition_encoder_make(int frame_size, int rep) -> generic_encoder_sptr\n"
		"\n"
		"Build a repetition encoding FEC API object.\n"
		""},
	 { (char *)"delete_repetition_encoder", _wrap_delete_repetition_encoder, METH_VARARGS, (char *)"delete_repetition_encoder(repetition_encoder self)"},
	 { (char *)"repetition_encoder_swigregister", repetition_encoder_swigregister, METH_VARARGS, NULL},
	 { (char *)"decode_ccsds_27_fb_make", _wrap_decode_ccsds_27_fb_make, METH_VARARGS, (char *)"\n"
		"decode_ccsds_27_fb_make() -> decode_ccsds_27_fb_sptr\n"
		"\n"
		"A rate 1/2, k=7 convolutional decoder for the CCSDS standard.\n"
		"\n"
		"This block performs soft-decision convolutional decoding using the Viterbi algorithm.\n"
		"\n"
		"The input is a stream of (possibly noise corrupted) floating point values nominally spanning [-1.0, 1.0], representing the encoded channel symbols 0 (-1.0) and 1 (1.0), with erased symbols at 0.0.\n"
		"\n"
		"The output is MSB first packed bytes of decoded values.\n"
		"\n"
		"As a rate 1/2 code, there will be one output byte for every 16 input symbols.\n"
		"\n"
		"This block is designed for continuous data streaming, not packetized data. The first 32 bits out will be zeroes, with the output delayed four bytes from the corresponding inputs.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"\n"
		""},
	 { (char *)"delete_decode_ccsds_27_fb", _wrap_delete_decode_ccsds_27_fb, METH_VARARGS, (char *)"delete_decode_ccsds_27_fb(decode_ccsds_27_fb self)"},
	 { (char *)"decode_ccsds_27_fb_swigregister", decode_ccsds_27_fb_swigregister, METH_VARARGS, NULL},
	 { (char *)"encode_ccsds_27_bb_make", _wrap_encode_ccsds_27_bb_make, METH_VARARGS, (char *)"\n"
		"encode_ccsds_27_bb_make() -> encode_ccsds_27_bb_sptr\n"
		"\n"
		"A rate 1/2, k=7 convolutional encoder for the CCSDS standard.\n"
		"\n"
		"This block performs convolutional encoding using the CCSDS standard polynomial (\"Voyager\").\n"
		"\n"
		"The input is an MSB first packed stream of bits.\n"
		"\n"
		"The output is a stream of symbols 0 or 1 representing the encoded data.\n"
		"\n"
		"As a rate 1/2 code, there will be 16 output symbols for every input byte.\n"
		"\n"
		"This block is designed for continuous data streaming, not packetized data. There is no provision to \"flush\" the encoder.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"\n"
		""},
	 { (char *)"delete_encode_ccsds_27_bb", _wrap_delete_encode_ccsds_27_bb, METH_VARARGS, (char *)"delete_encode_ccsds_27_bb(encode_ccsds_27_bb self)"},
	 { (char *)"encode_ccsds_27_bb_swigregister", encode_ccsds_27_bb_swigregister, METH_VARARGS, NULL},
	 { (char *)"ber_bf_total_errors", _wrap_ber_bf_total_errors, METH_VARARGS, (char *)"\n"
		"ber_bf_total_errors(ber_bf self) -> long\n"
		"\n"
		"Get total number of errors counter value.\n"
		""},
	 { (char *)"ber_bf_make", (PyCFunction) _wrap_ber_bf_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"ber_bf_make(bool test_mode=False, int berminerrors=100, float ber_limit=-7.0) -> ber_bf_sptr\n"
		"\n"
		"BER block in FECAPI.\n"
		"\n"
		"This block measures the bit error rate between two streams of packed data. It compares the bits of each streams and counts the number of incorrect bits between them. It outputs the log of the bit error rate, so a value of -X is 10^{-X} bit errors.\n"
		"\n"
		"When the  is set to false (default), it is in streaming mode. This means that the output is constantly producing the current value of the BER. In this mode, there is a single output BER calculation per chunk of bytes passed to it, so there is no exact timing between calculations of BER. In this mode, the other two parameters to the constructor are ignored.\n"
		"\n"
		"When  is true, the block is in test mode. This mode is used in the ber_curve_gen example and for other offline analysis of BER curves. Here, the block waits until at least  are observed and then produces a BER calculation. The parameter  helps make sure that the simulation is controlled. If the BER calculation drops below the  setting, the block will exit and simply return the set limit; the real BER is therefore some amount lower than this.\n"
		"\n"
		"Note that this block takes in data as packed bytes with 8-bits per byte used. It outputs a stream of floats as the log-scale BER.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Calculate the BER between two streams of data.\n"
		"\n"
		"Args:\n"
		"    test_mode : false for normal streaming mode (default); true for test mode.\n"
		"    berminerrors : the block needs to observe this many errors before outputting a result. Only valid when test_mode=true.\n"
		"    ber_limit : if the BER calculation falls below this limit, produce this value and exit. Only valid when test_mode=true.\n"
		""},
	 { (char *)"delete_ber_bf", _wrap_delete_ber_bf, METH_VARARGS, (char *)"delete_ber_bf(ber_bf self)"},
	 { (char *)"ber_bf_swigregister", ber_bf_swigregister, METH_VARARGS, NULL},
	 { (char *)"conv_bit_corr_bb_make", (PyCFunction) _wrap_conv_bit_corr_bb_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"conv_bit_corr_bb_make(std::vector< unsigned long long,std::allocator< unsigned long long > > correlator, \n"
		"    int corr_sym, int corr_len, int cut, int flush, float thresh) -> conv_bit_corr_bb_sptr\n"
		"\n"
		"Correlate block in FECAPI.\n"
		"\n"
		"What does this block do?\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"\n"
		"\n"
		"Args:\n"
		"    correlator : \n"
		"    corr_sym : \n"
		"    corr_len : \n"
		"    cut : \n"
		"    flush : \n"
		"    thresh : \n"
		""},
	 { (char *)"conv_bit_corr_bb_data_garble_rate", (PyCFunction) _wrap_conv_bit_corr_bb_data_garble_rate, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"conv_bit_corr_bb_data_garble_rate(conv_bit_corr_bb self, int taps, float syn_density) -> float\n"
		"\n"
		"This subroutine will find the encoded data garble rate corresponding to a syndrome density of `target', that is created with an annihilating polynomial with 'taps' number of taps.\n"
		""},
	 { (char *)"delete_conv_bit_corr_bb", _wrap_delete_conv_bit_corr_bb, METH_VARARGS, (char *)"delete_conv_bit_corr_bb(conv_bit_corr_bb self)"},
	 { (char *)"conv_bit_corr_bb_swigregister", conv_bit_corr_bb_swigregister, METH_VARARGS, NULL},
	 { (char *)"puncture_bb_make", (PyCFunction) _wrap_puncture_bb_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"puncture_bb_make(int puncsize, int puncpat, int delay=0) -> puncture_bb_sptr\n"
		"\n"
		"Puncture a stream of unpacked bits.\n"
		"\n"
		"Puncture a given block of input samples of . The items produced is based on pattern . Basically, if:\n"
		"\n"
		"\n"
		"\n"
		"This block is designed for unpacked bits - that is, every input sample is a bit, either a 1 or 0. It's possible to use packed bits as symbols, but the puncturing will be done on the symbol level, not the bit level.\n"
		"\n"
		" is specified as a 32-bit integer that we can convert into the vector _puncpat used in the algorithm above:\n"
		"\n"
		"\n"
		"\n"
		"Example: \n"
		"\n"
		"The gr.fec Python module provides a read_bitlist function that can turn a string of a puncture pattern into the correct integer form. The pattern of 0xEF could be specified as fec.readbitlist(\"11101111\"). Also, this allows us to use puncsize=len(\"11101111\") to make sure that our sizes are set up correctly for the pattern we want.\n"
		"\n"
		"The fec.extended_encoder takes in the puncture pattern directly as a string and uses the readbitlist inside to do the conversion.\n"
		"\n"
		"Note that due to the above concept, the default setting in the extended encoder of '11' translates into no puncturing.\n"
		"\n"
		"The  parameter delays the application of the puncture pattern. This is equivalent to circularly rotating the  by . Note that because of the circular shift, the delay should be between 0 and , but this is not enforced; the effective delay will simply be  mod . A negative value here is ignored.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Constructs a puncture block for unpacked bits.\n"
		"\n"
		"Args:\n"
		"    puncsize : Size of block of bits to puncture\n"
		"    puncpat : The puncturing pattern\n"
		"    delay : Delayed the puncturing pattern by shifting it\n"
		""},
	 { (char *)"delete_puncture_bb", _wrap_delete_puncture_bb, METH_VARARGS, (char *)"delete_puncture_bb(puncture_bb self)"},
	 { (char *)"puncture_bb_swigregister", puncture_bb_swigregister, METH_VARARGS, NULL},
	 { (char *)"puncture_ff_make", (PyCFunction) _wrap_puncture_ff_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"puncture_ff_make(int puncsize, int puncpat, int delay) -> puncture_ff_sptr\n"
		"\n"
		"Puncture a stream of floats.\n"
		"\n"
		"For a given block of input samples of , the items produced is based on . Basically, if:\n"
		"\n"
		"\n"
		"\n"
		"This block is designed for floats, generally 1's and -1's. It's possible to use other float values as symbols, but this is not the expected operation.\n"
		"\n"
		" is specified as a 32-bit integer that we can convert into the vector _puncpat used in the algorithm above:\n"
		"\n"
		"\n"
		"\n"
		"Example: \n"
		"\n"
		"The gr.fec Python module provides a read_bitlist function that can turn a string of a puncture pattern into the correct integer form. The pattern of 0xEF could be specified as fec.readbitlist(\"11101111\"). Also, this allows us to use puncsize=len(\"11101111\") to make sure that our sizes are set up correctly for the pattern we want.\n"
		"\n"
		"The fec.extended_encoder takes in the puncture pattern directly as a string and uses the readbitlist inside to do the conversion.\n"
		"\n"
		"Note that due to the above concept, the default setting in the extended encoder of '11' translates into no puncturing.\n"
		"\n"
		"The  parameter delays the application of the puncture pattern. This is equivalent to circularly rotating the  by . Note that because of the circular shift, the delay should be between 0 and , but this is not enforced; the effective delay will simply be  mod . A negative value here is ignored.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Constructs a puncture block for floats.\n"
		"\n"
		"Args:\n"
		"    puncsize : Size of block of bits to puncture\n"
		"    puncpat : The puncturing pattern\n"
		"    delay : Delayed the puncturing pattern by shifting it\n"
		""},
	 { (char *)"delete_puncture_ff", _wrap_delete_puncture_ff, METH_VARARGS, (char *)"delete_puncture_ff(puncture_ff self)"},
	 { (char *)"puncture_ff_swigregister", puncture_ff_swigregister, METH_VARARGS, NULL},
	 { (char *)"depuncture_bb_make", (PyCFunction) _wrap_depuncture_bb_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"depuncture_bb_make(int puncsize, int puncpat, int delay=0, char symbol=127) -> depuncture_bb_sptr\n"
		"\n"
		"Depuncture a stream of samples.\n"
		"\n"
		"Depuncture a given block of input samples of . The items produced is based on the pattern . Basically, if:\n"
		"\n"
		"\n"
		"\n"
		"This block is designed for unpacked bits - that is, every input sample is a bit, either a 1 or 0. It's possible to use packed bits as symbols, but the depuncturing will be done on the symbol level, not the bit level.\n"
		"\n"
		" is specified as a 32-bit integer that we can convert into the vector _puncpat used in the algorithm above:\n"
		"\n"
		"\n"
		"\n"
		"Example: \n"
		"\n"
		"The gr.fec Python module provides a read_bitlist function that can turn a string of a puncture pattern into the correct integer form. The pattern of 0xEF could be specified as fec.readbitlist(\"11101111\"). Also, this allows us to use puncsize=len(\"11101111\") to make sure that our sizes are set up correctly for the pattern we want.\n"
		"\n"
		"The fec.extended_decoder takes in the puncture pattern directly as a string and uses the readbitlist inside to do the conversion.\n"
		"\n"
		"The  parameter delays the application of the puncture pattern. This is equivalent to circularly rotating the  by . Note that because of the circular shift, the delay should be between 0 and , but this is not enforced; the effective delay will simply be  mod . A negative value here is ignored.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Constructs a depuncture block.\n"
		"\n"
		"Args:\n"
		"    puncsize : Size of block of bits to puncture\n"
		"    puncpat : The puncturing pattern\n"
		"    delay : Delayed the puncturing pattern by shifting it\n"
		"    symbol : The symbol to reinsert into the stream (def=127)\n"
		""},
	 { (char *)"delete_depuncture_bb", _wrap_delete_depuncture_bb, METH_VARARGS, (char *)"delete_depuncture_bb(depuncture_bb self)"},
	 { (char *)"depuncture_bb_swigregister", depuncture_bb_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_tpc_encoder", _wrap_delete_tpc_encoder, METH_VARARGS, (char *)"delete_tpc_encoder(tpc_encoder self)"},
	 { (char *)"tpc_encoder_make", (PyCFunction) _wrap_tpc_encoder_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tpc_encoder_make(std::vector< int,std::allocator< int > > row_poly, std::vector< int,std::allocator< int > > col_poly, \n"
		"    int krow, int kcol, int bval, int qval) -> generic_encoder_sptr\n"
		""},
	 { (char *)"tpc_encoder_swigregister", tpc_encoder_swigregister, METH_VARARGS, NULL},
	 { (char *)"tpc_decoder_make", (PyCFunction) _wrap_tpc_decoder_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tpc_decoder_make(std::vector< int,std::allocator< int > > row_poly, std::vector< int,std::allocator< int > > col_poly, \n"
		"    int krow, int kcol, int bval, int qval, int max_iter, \n"
		"    int decoder_type) -> generic_decoder_sptr\n"
		""},
	 { (char *)"delete_tpc_decoder", _wrap_delete_tpc_decoder, METH_VARARGS, (char *)"delete_tpc_decoder(tpc_decoder self)"},
	 { (char *)"tpc_decoder_swigregister", tpc_decoder_swigregister, METH_VARARGS, NULL},
	 { (char *)"polar_encoder_make", (PyCFunction) _wrap_polar_encoder_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"polar_encoder_make(int block_size, int num_info_bits, std::vector< int,std::allocator< int > > frozen_bit_positions, \n"
		"    std::vector< char,std::allocator< char > > frozen_bit_values, \n"
		"    bool is_packed=False) -> generic_encoder_sptr\n"
		"\n"
		"Factory for a polar code encoder object.\n"
		""},
	 { (char *)"delete_polar_encoder", _wrap_delete_polar_encoder, METH_VARARGS, (char *)"delete_polar_encoder(polar_encoder self)"},
	 { (char *)"polar_encoder_swigregister", polar_encoder_swigregister, METH_VARARGS, NULL},
	 { (char *)"polar_decoder_sc_make", (PyCFunction) _wrap_polar_decoder_sc_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"polar_decoder_sc_make(int block_size, int num_info_bits, std::vector< int,std::allocator< int > > frozen_bit_positions, \n"
		"    std::vector< char,std::allocator< char > > frozen_bit_values) -> generic_decoder_sptr\n"
		""},
	 { (char *)"delete_polar_decoder_sc", _wrap_delete_polar_decoder_sc, METH_VARARGS, (char *)"delete_polar_decoder_sc(polar_decoder_sc self)"},
	 { (char *)"polar_decoder_sc_generic_work", (PyCFunction) _wrap_polar_decoder_sc_generic_work, METH_VARARGS | METH_KEYWORDS, (char *)"polar_decoder_sc_generic_work(polar_decoder_sc self, void * in_buffer, void * out_buffer)"},
	 { (char *)"polar_decoder_sc_swigregister", polar_decoder_sc_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_polar_common", (PyCFunction) _wrap_new_polar_common, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"new_polar_common(int block_size, int num_info_bits, std::vector< int,std::allocator< int > > frozen_bit_positions, \n"
		"    std::vector< char,std::allocator< char > > frozen_bit_values) -> polar_common\n"
		""},
	 { (char *)"delete_polar_common", _wrap_delete_polar_common, METH_VARARGS, (char *)"delete_polar_common(polar_common self)"},
	 { (char *)"polar_common_swigregister", polar_common_swigregister, METH_VARARGS, NULL},
	 { (char *)"polar_decoder_sc_list_make", (PyCFunction) _wrap_polar_decoder_sc_list_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"polar_decoder_sc_list_make(int max_list_size, int block_size, int num_info_bits, std::vector< int,std::allocator< int > > frozen_bit_positions, \n"
		"    std::vector< char,std::allocator< char > > frozen_bit_values) -> generic_decoder_sptr\n"
		""},
	 { (char *)"delete_polar_decoder_sc_list", _wrap_delete_polar_decoder_sc_list, METH_VARARGS, (char *)"delete_polar_decoder_sc_list(polar_decoder_sc_list self)"},
	 { (char *)"polar_decoder_sc_list_generic_work", (PyCFunction) _wrap_polar_decoder_sc_list_generic_work, METH_VARARGS | METH_KEYWORDS, (char *)"polar_decoder_sc_list_generic_work(polar_decoder_sc_list self, void * in_buffer, void * out_buffer)"},
	 { (char *)"polar_decoder_sc_list_swigregister", polar_decoder_sc_list_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_polar_decoder_common", _wrap_delete_polar_decoder_common, METH_VARARGS, (char *)"delete_polar_decoder_common(polar_decoder_common self)"},
	 { (char *)"polar_decoder_common_swigregister", polar_decoder_common_swigregister, METH_VARARGS, NULL},
	 { (char *)"polar_encoder_systematic_make", (PyCFunction) _wrap_polar_encoder_systematic_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"polar_encoder_systematic_make(int block_size, int num_info_bits, std::vector< int,std::allocator< int > > frozen_bit_positions) -> generic_encoder_sptr\n"
		"\n"
		"Factory for a polar code encoder object.\n"
		""},
	 { (char *)"delete_polar_encoder_systematic", _wrap_delete_polar_encoder_systematic, METH_VARARGS, (char *)"delete_polar_encoder_systematic(polar_encoder_systematic self)"},
	 { (char *)"polar_encoder_systematic_swigregister", polar_encoder_systematic_swigregister, METH_VARARGS, NULL},
	 { (char *)"polar_decoder_sc_systematic_make", (PyCFunction) _wrap_polar_decoder_sc_systematic_make, METH_VARARGS | METH_KEYWORDS, (char *)"polar_decoder_sc_systematic_make(int block_size, int num_info_bits, std::vector< int,std::allocator< int > > frozen_bit_positions) -> generic_decoder_sptr"},
	 { (char *)"delete_polar_decoder_sc_systematic", _wrap_delete_polar_decoder_sc_systematic, METH_VARARGS, (char *)"delete_polar_decoder_sc_systematic(polar_decoder_sc_systematic self)"},
	 { (char *)"polar_decoder_sc_systematic_swigregister", polar_decoder_sc_systematic_swigregister, METH_VARARGS, NULL},
	 { (char *)"ldpc_encoder_make", (PyCFunction) _wrap_ldpc_encoder_make, METH_VARARGS | METH_KEYWORDS, (char *)"ldpc_encoder_make(std::string alist_file) -> generic_encoder_sptr"},
	 { (char *)"delete_ldpc_encoder", _wrap_delete_ldpc_encoder, METH_VARARGS, (char *)"delete_ldpc_encoder(ldpc_encoder self)"},
	 { (char *)"ldpc_encoder_swigregister", ldpc_encoder_swigregister, METH_VARARGS, NULL},
	 { (char *)"block_data_size_set", _wrap_block_data_size_set, METH_VARARGS, (char *)"block_data_size_set(block_data self, size_t size)"},
	 { (char *)"block_data_size_get", _wrap_block_data_size_get, METH_VARARGS, (char *)"block_data_size_get(block_data self) -> size_t"},
	 { (char *)"block_data_data_set", _wrap_block_data_data_set, METH_VARARGS, (char *)"block_data_data_set(block_data self, double * data)"},
	 { (char *)"block_data_data_get", _wrap_block_data_data_get, METH_VARARGS, (char *)"block_data_data_get(block_data self) -> double *"},
	 { (char *)"new_block_data", _wrap_new_block_data, METH_VARARGS, (char *)"new_block_data() -> block_data"},
	 { (char *)"delete_block_data", _wrap_delete_block_data, METH_VARARGS, (char *)"delete_block_data(block_data self)"},
	 { (char *)"block_data_swigregister", block_data_swigregister, METH_VARARGS, NULL},
	 { (char *)"matrix_size1_set", _wrap_matrix_size1_set, METH_VARARGS, (char *)"matrix_size1_set(matrix self, size_t size1)"},
	 { (char *)"matrix_size1_get", _wrap_matrix_size1_get, METH_VARARGS, (char *)"matrix_size1_get(matrix self) -> size_t"},
	 { (char *)"matrix_size2_set", _wrap_matrix_size2_set, METH_VARARGS, (char *)"matrix_size2_set(matrix self, size_t size2)"},
	 { (char *)"matrix_size2_get", _wrap_matrix_size2_get, METH_VARARGS, (char *)"matrix_size2_get(matrix self) -> size_t"},
	 { (char *)"matrix_tda_set", _wrap_matrix_tda_set, METH_VARARGS, (char *)"matrix_tda_set(matrix self, size_t tda)"},
	 { (char *)"matrix_tda_get", _wrap_matrix_tda_get, METH_VARARGS, (char *)"matrix_tda_get(matrix self) -> size_t"},
	 { (char *)"matrix_data_set", _wrap_matrix_data_set, METH_VARARGS, (char *)"matrix_data_set(matrix self, double * data)"},
	 { (char *)"matrix_data_get", _wrap_matrix_data_get, METH_VARARGS, (char *)"matrix_data_get(matrix self) -> double *"},
	 { (char *)"matrix_block_set", _wrap_matrix_block_set, METH_VARARGS, (char *)"matrix_block_set(matrix self, block_data block)"},
	 { (char *)"matrix_block_get", _wrap_matrix_block_get, METH_VARARGS, (char *)"matrix_block_get(matrix self) -> block_data"},
	 { (char *)"matrix_owner_set", _wrap_matrix_owner_set, METH_VARARGS, (char *)"matrix_owner_set(matrix self, int owner)"},
	 { (char *)"matrix_owner_get", _wrap_matrix_owner_get, METH_VARARGS, (char *)"matrix_owner_get(matrix self) -> int"},
	 { (char *)"new_matrix", _wrap_new_matrix, METH_VARARGS, (char *)"new_matrix() -> matrix"},
	 { (char *)"delete_matrix", _wrap_delete_matrix, METH_VARARGS, (char *)"delete_matrix(matrix self)"},
	 { (char *)"matrix_swigregister", matrix_swigregister, METH_VARARGS, NULL},
	 { (char *)"matrix_free", (PyCFunction) _wrap_matrix_free, METH_VARARGS | METH_KEYWORDS, (char *)"matrix_free(matrix x)"},
	 { (char *)"read_matrix_from_file", (PyCFunction) _wrap_read_matrix_from_file, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"read_matrix_from_file(std::string const filename) -> matrix_sptr\n"
		"\n"
		"Read in an alist file and produce the matrix object.\n"
		"\n"
		"Takes in a an alist file (the file name as a string) and creates the corresponding matrix. The format of alist files is described at: \n"
		"\n"
		"The result is returned as a matrix shared pointer.\n"
		""},
	 { (char *)"write_matrix_to_file", (PyCFunction) _wrap_write_matrix_to_file, METH_VARARGS | METH_KEYWORDS, (char *)"write_matrix_to_file(std::string const filename, matrix_sptr M)"},
	 { (char *)"generate_G_transpose", (PyCFunction) _wrap_generate_G_transpose, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"generate_G_transpose(matrix_sptr H_obj) -> matrix_sptr\n"
		"\n"
		"Takes a parity check matrix (H) and returns the transpose of the generator matrix (G).\n"
		"\n"
		"The result is returned as a matrix shared pointer. The form of this matrix is [I_k | P]^T, where P is the parity check matrix. It is a n x k matrix where k is the information length and n is the codeword length.\n"
		""},
	 { (char *)"generate_G", (PyCFunction) _wrap_generate_G, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"generate_G(matrix_sptr H_obj) -> matrix_sptr\n"
		"\n"
		"Takes a parity check matrix (H) and returns the generator matrix (G).\n"
		"\n"
		"The result is returned as a matrix shared pointer. The form of this matrix is [I_k | P], where P is the parity check matrix. It is a k x n matrix where k is the information length and n is the codeword length.\n"
		""},
	 { (char *)"generate_H", (PyCFunction) _wrap_generate_H, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"generate_H(matrix_sptr G_obj) -> matrix_sptr\n"
		"\n"
		"Takes a generator matrix (G) and returns the parity check matrix (H).\n"
		""},
	 { (char *)"print_matrix", (PyCFunction) _wrap_print_matrix, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"print_matrix(matrix_sptr M, bool numpy=False)\n"
		"\n"
		"Takes a matrix and prints it to screen.\n"
		""},
	 { (char *)"delete_fec_mtrx", _wrap_delete_fec_mtrx, METH_VARARGS, (char *)"delete_fec_mtrx(fec_mtrx self)"},
	 { (char *)"fec_mtrx_encode", (PyCFunction) _wrap_fec_mtrx_encode, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"fec_mtrx_encode(fec_mtrx self, unsigned char * outbuffer, unsigned char const * inbuffer)\n"
		"\n"
		"Encode  with LDPC H matrix into .\n"
		""},
	 { (char *)"fec_mtrx_decode", (PyCFunction) _wrap_fec_mtrx_decode, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"fec_mtrx_decode(fec_mtrx self, unsigned char * outbuffer, float const * inbuffer, unsigned int frame_size, \n"
		"    unsigned int max_iterations)\n"
		"\n"
		"Decode  with LDPC H matrix into .\n"
		""},
	 { (char *)"fec_mtrx_n", _wrap_fec_mtrx_n, METH_VARARGS, (char *)"\n"
		"fec_mtrx_n(fec_mtrx self) -> unsigned int\n"
		"\n"
		"Get the codeword length n.\n"
		""},
	 { (char *)"fec_mtrx_k", _wrap_fec_mtrx_k, METH_VARARGS, (char *)"\n"
		"fec_mtrx_k(fec_mtrx self) -> unsigned int\n"
		"\n"
		"Get the information word length k.\n"
		""},
	 { (char *)"fec_mtrx_swigregister", fec_mtrx_swigregister, METH_VARARGS, NULL},
	 { (char *)"ldpc_H_matrix_make", (PyCFunction) _wrap_ldpc_H_matrix_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"ldpc_H_matrix_make(std::string const filename, unsigned int gap) -> ldpc_H_matrix_sptr\n"
		"\n"
		"Parity check matrix in Richardson/Urbanke format.\n"
		"\n"
		"This class stores a matrix for use with the ldpc_encoder class. It must be of the specific format described by Richardson and Urbanke in Appendix A of their book: Modern Coding Theory (ISBN 978-0-521-85229-6). The form is:  This class can be used with the ldpc_bit_flip_decoder.\n"
		"\n"
		"To convert a parity check matrix to this format, use the python functions in: /lib/python2.7/dist-packages/gnuradio/fec/LDPC/Generate_LDPC_matrix.py.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Constructor given alist file and gap.\n"
		"\n"
		"Args:\n"
		"    filename : Name of an alist file to use. The alist format is described at:\n"
		"    gap : A property of the matrix being used. For alist files distributed with GNU Radio, this value is specified in the alist filename. The gap is found during the matrix preprocessing algorithm. It is equal to the number of rows in submatrices E, C and D.\n"
		""},
	 { (char *)"ldpc_H_matrix_get_base_sptr", _wrap_ldpc_H_matrix_get_base_sptr, METH_VARARGS, (char *)"\n"
		"ldpc_H_matrix_get_base_sptr(ldpc_H_matrix self) -> fec_mtrx_sptr\n"
		"\n"
		"A pointer to make SWIG work.\n"
		"\n"
		"SWIG doesn't understand the parent class pointer to this child class for the make function of the ldpc_bit_flip_decoder; it's expecting a pointer to the base class. This returns a shared_from_this instance.\n"
		""},
	 { (char *)"delete_ldpc_H_matrix", _wrap_delete_ldpc_H_matrix, METH_VARARGS, (char *)"delete_ldpc_H_matrix(ldpc_H_matrix self)"},
	 { (char *)"ldpc_H_matrix_swigregister", ldpc_H_matrix_swigregister, METH_VARARGS, NULL},
	 { (char *)"ldpc_G_matrix_make", (PyCFunction) _wrap_ldpc_G_matrix_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"ldpc_G_matrix_make(std::string const filename) -> ldpc_G_matrix_sptr\n"
		"\n"
		"Class for storing H or G matrix.\n"
		"\n"
		"This class stores a matrix variable, specifically either a:\n"
		"\n"
		"1) Generator matrix, G, in the standard format G = [I P], where I is an identity matrix and P is the parity submatrix.\n"
		"\n"
		"or\n"
		"\n"
		"2) Parity matrix, H, in the standard format H = [P' I], where P' is the transpose of the parity submatrix and I is an identity matrix.\n"
		"\n"
		"This variable can used by the ldpc_gen_mtrx_encoder and ldpc_bit_flip_decoder classes.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Constructor given alist file.\n"
		"\n"
		"Args:\n"
		"    filename : Name of an alist file to use. The alist format is described at:\n"
		""},
	 { (char *)"ldpc_G_matrix_get_base_sptr", _wrap_ldpc_G_matrix_get_base_sptr, METH_VARARGS, (char *)"\n"
		"ldpc_G_matrix_get_base_sptr(ldpc_G_matrix self) -> fec_mtrx_sptr\n"
		"\n"
		"A pointer to make SWIG work.\n"
		"\n"
		"SWIG doesn't understand the parent class pointer to this child class for the make function of the ldpc_bit_flip_decoder; it's expecting a pointer to the base class. This returns a shared_from_this instance.\n"
		""},
	 { (char *)"delete_ldpc_G_matrix", _wrap_delete_ldpc_G_matrix, METH_VARARGS, (char *)"delete_ldpc_G_matrix(ldpc_G_matrix self)"},
	 { (char *)"ldpc_G_matrix_swigregister", ldpc_G_matrix_swigregister, METH_VARARGS, NULL},
	 { (char *)"ldpc_gen_mtrx_encoder_make", (PyCFunction) _wrap_ldpc_gen_mtrx_encoder_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"ldpc_gen_mtrx_encoder_make(ldpc_G_matrix_sptr G_obj) -> generic_encoder_sptr\n"
		"\n"
		"Build an encoding FEC API object.\n"
		""},
	 { (char *)"delete_ldpc_gen_mtrx_encoder", _wrap_delete_ldpc_gen_mtrx_encoder, METH_VARARGS, (char *)"delete_ldpc_gen_mtrx_encoder(ldpc_gen_mtrx_encoder self)"},
	 { (char *)"ldpc_gen_mtrx_encoder_swigregister", ldpc_gen_mtrx_encoder_swigregister, METH_VARARGS, NULL},
	 { (char *)"ldpc_par_mtrx_encoder_make", (PyCFunction) _wrap_ldpc_par_mtrx_encoder_make, METH_VARARGS | METH_KEYWORDS, (char *)"ldpc_par_mtrx_encoder_make(std::string alist_file, unsigned int gap=0) -> generic_encoder_sptr"},
	 { (char *)"ldpc_par_mtrx_encoder_make_H", (PyCFunction) _wrap_ldpc_par_mtrx_encoder_make_H, METH_VARARGS | METH_KEYWORDS, (char *)"ldpc_par_mtrx_encoder_make_H(ldpc_H_matrix_sptr H_obj) -> generic_encoder_sptr"},
	 { (char *)"delete_ldpc_par_mtrx_encoder", _wrap_delete_ldpc_par_mtrx_encoder, METH_VARARGS, (char *)"delete_ldpc_par_mtrx_encoder(ldpc_par_mtrx_encoder self)"},
	 { (char *)"ldpc_par_mtrx_encoder_swigregister", ldpc_par_mtrx_encoder_swigregister, METH_VARARGS, NULL},
	 { (char *)"ldpc_bit_flip_decoder_make", (PyCFunction) _wrap_ldpc_bit_flip_decoder_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"ldpc_bit_flip_decoder_make(fec_mtrx_sptr mtrx_obj, unsigned int max_iter=100) -> generic_decoder_sptr\n"
		"\n"
		"Build a bit flip decoding FEC API object.\n"
		""},
	 { (char *)"delete_ldpc_bit_flip_decoder", _wrap_delete_ldpc_bit_flip_decoder, METH_VARARGS, (char *)"delete_ldpc_bit_flip_decoder(ldpc_bit_flip_decoder self)"},
	 { (char *)"ldpc_bit_flip_decoder_swigregister", ldpc_bit_flip_decoder_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_ldpc_decoder", _wrap_delete_ldpc_decoder, METH_VARARGS, (char *)"delete_ldpc_decoder(ldpc_decoder self)"},
	 { (char *)"ldpc_decoder_make", (PyCFunction) _wrap_ldpc_decoder_make, METH_VARARGS | METH_KEYWORDS, (char *)"ldpc_decoder_make(std::string alist_file, float sigma=0.5, int max_iterations=50) -> generic_decoder_sptr"},
	 { (char *)"ldpc_decoder_swigregister", ldpc_decoder_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_matrix_sptr", _wrap_new_matrix_sptr, METH_VARARGS, (char *)"\n"
		"matrix_sptr()\n"
		"new_matrix_sptr(matrix p) -> matrix_sptr\n"
		""},
	 { (char *)"matrix_sptr___deref__", _wrap_matrix_sptr___deref__, METH_VARARGS, (char *)"matrix_sptr___deref__(matrix_sptr self) -> matrix"},
	 { (char *)"delete_matrix_sptr", _wrap_delete_matrix_sptr, METH_VARARGS, (char *)"delete_matrix_sptr(matrix_sptr self)"},
	 { (char *)"matrix_sptr_size1_set", _wrap_matrix_sptr_size1_set, METH_VARARGS, (char *)"matrix_sptr_size1_set(matrix_sptr self, size_t size1)"},
	 { (char *)"matrix_sptr_size1_get", _wrap_matrix_sptr_size1_get, METH_VARARGS, (char *)"matrix_sptr_size1_get(matrix_sptr self) -> size_t"},
	 { (char *)"matrix_sptr_size2_set", _wrap_matrix_sptr_size2_set, METH_VARARGS, (char *)"matrix_sptr_size2_set(matrix_sptr self, size_t size2)"},
	 { (char *)"matrix_sptr_size2_get", _wrap_matrix_sptr_size2_get, METH_VARARGS, (char *)"matrix_sptr_size2_get(matrix_sptr self) -> size_t"},
	 { (char *)"matrix_sptr_tda_set", _wrap_matrix_sptr_tda_set, METH_VARARGS, (char *)"matrix_sptr_tda_set(matrix_sptr self, size_t tda)"},
	 { (char *)"matrix_sptr_tda_get", _wrap_matrix_sptr_tda_get, METH_VARARGS, (char *)"matrix_sptr_tda_get(matrix_sptr self) -> size_t"},
	 { (char *)"matrix_sptr_data_set", _wrap_matrix_sptr_data_set, METH_VARARGS, (char *)"matrix_sptr_data_set(matrix_sptr self, double * data)"},
	 { (char *)"matrix_sptr_data_get", _wrap_matrix_sptr_data_get, METH_VARARGS, (char *)"matrix_sptr_data_get(matrix_sptr self) -> double *"},
	 { (char *)"matrix_sptr_block_set", _wrap_matrix_sptr_block_set, METH_VARARGS, (char *)"matrix_sptr_block_set(matrix_sptr self, block_data block)"},
	 { (char *)"matrix_sptr_block_get", _wrap_matrix_sptr_block_get, METH_VARARGS, (char *)"matrix_sptr_block_get(matrix_sptr self) -> block_data"},
	 { (char *)"matrix_sptr_owner_set", _wrap_matrix_sptr_owner_set, METH_VARARGS, (char *)"matrix_sptr_owner_set(matrix_sptr self, int owner)"},
	 { (char *)"matrix_sptr_owner_get", _wrap_matrix_sptr_owner_get, METH_VARARGS, (char *)"matrix_sptr_owner_get(matrix_sptr self) -> int"},
	 { (char *)"matrix_sptr_swigregister", matrix_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_fec_mtrx_sptr", _wrap_new_fec_mtrx_sptr, METH_VARARGS, (char *)"\n"
		"fec_mtrx_sptr()\n"
		"new_fec_mtrx_sptr(fec_mtrx p) -> fec_mtrx_sptr\n"
		""},
	 { (char *)"fec_mtrx_sptr___deref__", _wrap_fec_mtrx_sptr___deref__, METH_VARARGS, (char *)"fec_mtrx_sptr___deref__(fec_mtrx_sptr self) -> fec_mtrx"},
	 { (char *)"delete_fec_mtrx_sptr", _wrap_delete_fec_mtrx_sptr, METH_VARARGS, (char *)"delete_fec_mtrx_sptr(fec_mtrx_sptr self)"},
	 { (char *)"fec_mtrx_sptr_encode", (PyCFunction) _wrap_fec_mtrx_sptr_encode, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"fec_mtrx_sptr_encode(fec_mtrx_sptr self, unsigned char * outbuffer, unsigned char const * inbuffer)\n"
		"\n"
		"Encode  with LDPC H matrix into .\n"
		""},
	 { (char *)"fec_mtrx_sptr_decode", (PyCFunction) _wrap_fec_mtrx_sptr_decode, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"fec_mtrx_sptr_decode(fec_mtrx_sptr self, unsigned char * outbuffer, float const * inbuffer, unsigned int frame_size, \n"
		"    unsigned int max_iterations)\n"
		"\n"
		"Decode  with LDPC H matrix into .\n"
		""},
	 { (char *)"fec_mtrx_sptr_n", _wrap_fec_mtrx_sptr_n, METH_VARARGS, (char *)"\n"
		"fec_mtrx_sptr_n(fec_mtrx_sptr self) -> unsigned int\n"
		"\n"
		"Get the codeword length n.\n"
		""},
	 { (char *)"fec_mtrx_sptr_k", _wrap_fec_mtrx_sptr_k, METH_VARARGS, (char *)"\n"
		"fec_mtrx_sptr_k(fec_mtrx_sptr self) -> unsigned int\n"
		"\n"
		"Get the information word length k.\n"
		""},
	 { (char *)"fec_mtrx_sptr_swigregister", fec_mtrx_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ldpc_H_matrix_sptr", _wrap_new_ldpc_H_matrix_sptr, METH_VARARGS, (char *)"\n"
		"ldpc_H_matrix_sptr()\n"
		"new_ldpc_H_matrix_sptr(ldpc_H_matrix p) -> ldpc_H_matrix_sptr\n"
		""},
	 { (char *)"ldpc_H_matrix_sptr___deref__", _wrap_ldpc_H_matrix_sptr___deref__, METH_VARARGS, (char *)"ldpc_H_matrix_sptr___deref__(ldpc_H_matrix_sptr self) -> ldpc_H_matrix"},
	 { (char *)"delete_ldpc_H_matrix_sptr", _wrap_delete_ldpc_H_matrix_sptr, METH_VARARGS, (char *)"delete_ldpc_H_matrix_sptr(ldpc_H_matrix_sptr self)"},
	 { (char *)"ldpc_H_matrix_sptr_make", (PyCFunction) _wrap_ldpc_H_matrix_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"ldpc_H_matrix_sptr_make(ldpc_H_matrix_sptr self, std::string const filename, unsigned int gap) -> ldpc_H_matrix_sptr\n"
		"\n"
		"Parity check matrix in Richardson/Urbanke format.\n"
		"\n"
		"This class stores a matrix for use with the ldpc_encoder class. It must be of the specific format described by Richardson and Urbanke in Appendix A of their book: Modern Coding Theory (ISBN 978-0-521-85229-6). The form is:  This class can be used with the ldpc_bit_flip_decoder.\n"
		"\n"
		"To convert a parity check matrix to this format, use the python functions in: /lib/python2.7/dist-packages/gnuradio/fec/LDPC/Generate_LDPC_matrix.py.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Constructor given alist file and gap.\n"
		"\n"
		"Args:\n"
		"    filename : Name of an alist file to use. The alist format is described at:\n"
		"    gap : A property of the matrix being used. For alist files distributed with GNU Radio, this value is specified in the alist filename. The gap is found during the matrix preprocessing algorithm. It is equal to the number of rows in submatrices E, C and D.\n"
		""},
	 { (char *)"ldpc_H_matrix_sptr_get_base_sptr", _wrap_ldpc_H_matrix_sptr_get_base_sptr, METH_VARARGS, (char *)"\n"
		"ldpc_H_matrix_sptr_get_base_sptr(ldpc_H_matrix_sptr self) -> fec_mtrx_sptr\n"
		"\n"
		"A pointer to make SWIG work.\n"
		"\n"
		"SWIG doesn't understand the parent class pointer to this child class for the make function of the ldpc_bit_flip_decoder; it's expecting a pointer to the base class. This returns a shared_from_this instance.\n"
		""},
	 { (char *)"ldpc_H_matrix_sptr_encode", (PyCFunction) _wrap_ldpc_H_matrix_sptr_encode, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"ldpc_H_matrix_sptr_encode(ldpc_H_matrix_sptr self, unsigned char * outbuffer, unsigned char const * inbuffer)\n"
		"\n"
		"Encode  with LDPC H matrix into .\n"
		""},
	 { (char *)"ldpc_H_matrix_sptr_decode", (PyCFunction) _wrap_ldpc_H_matrix_sptr_decode, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"ldpc_H_matrix_sptr_decode(ldpc_H_matrix_sptr self, unsigned char * outbuffer, float const * inbuffer, unsigned int frame_size, \n"
		"    unsigned int max_iterations)\n"
		"\n"
		"Decode  with LDPC H matrix into .\n"
		""},
	 { (char *)"ldpc_H_matrix_sptr_n", _wrap_ldpc_H_matrix_sptr_n, METH_VARARGS, (char *)"\n"
		"ldpc_H_matrix_sptr_n(ldpc_H_matrix_sptr self) -> unsigned int\n"
		"\n"
		"Get the codeword length n.\n"
		""},
	 { (char *)"ldpc_H_matrix_sptr_k", _wrap_ldpc_H_matrix_sptr_k, METH_VARARGS, (char *)"\n"
		"ldpc_H_matrix_sptr_k(ldpc_H_matrix_sptr self) -> unsigned int\n"
		"\n"
		"Get the information word length k.\n"
		""},
	 { (char *)"ldpc_H_matrix_sptr_swigregister", ldpc_H_matrix_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ldpc_G_matrix_sptr", _wrap_new_ldpc_G_matrix_sptr, METH_VARARGS, (char *)"\n"
		"ldpc_G_matrix_sptr()\n"
		"new_ldpc_G_matrix_sptr(ldpc_G_matrix p) -> ldpc_G_matrix_sptr\n"
		""},
	 { (char *)"ldpc_G_matrix_sptr___deref__", _wrap_ldpc_G_matrix_sptr___deref__, METH_VARARGS, (char *)"ldpc_G_matrix_sptr___deref__(ldpc_G_matrix_sptr self) -> ldpc_G_matrix"},
	 { (char *)"delete_ldpc_G_matrix_sptr", _wrap_delete_ldpc_G_matrix_sptr, METH_VARARGS, (char *)"delete_ldpc_G_matrix_sptr(ldpc_G_matrix_sptr self)"},
	 { (char *)"ldpc_G_matrix_sptr_make", (PyCFunction) _wrap_ldpc_G_matrix_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"ldpc_G_matrix_sptr_make(ldpc_G_matrix_sptr self, std::string const filename) -> ldpc_G_matrix_sptr\n"
		"\n"
		"Class for storing H or G matrix.\n"
		"\n"
		"This class stores a matrix variable, specifically either a:\n"
		"\n"
		"1) Generator matrix, G, in the standard format G = [I P], where I is an identity matrix and P is the parity submatrix.\n"
		"\n"
		"or\n"
		"\n"
		"2) Parity matrix, H, in the standard format H = [P' I], where P' is the transpose of the parity submatrix and I is an identity matrix.\n"
		"\n"
		"This variable can used by the ldpc_gen_mtrx_encoder and ldpc_bit_flip_decoder classes.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Constructor given alist file.\n"
		"\n"
		"Args:\n"
		"    filename : Name of an alist file to use. The alist format is described at:\n"
		""},
	 { (char *)"ldpc_G_matrix_sptr_get_base_sptr", _wrap_ldpc_G_matrix_sptr_get_base_sptr, METH_VARARGS, (char *)"\n"
		"ldpc_G_matrix_sptr_get_base_sptr(ldpc_G_matrix_sptr self) -> fec_mtrx_sptr\n"
		"\n"
		"A pointer to make SWIG work.\n"
		"\n"
		"SWIG doesn't understand the parent class pointer to this child class for the make function of the ldpc_bit_flip_decoder; it's expecting a pointer to the base class. This returns a shared_from_this instance.\n"
		""},
	 { (char *)"ldpc_G_matrix_sptr_encode", (PyCFunction) _wrap_ldpc_G_matrix_sptr_encode, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"ldpc_G_matrix_sptr_encode(ldpc_G_matrix_sptr self, unsigned char * outbuffer, unsigned char const * inbuffer)\n"
		"\n"
		"Encode  with LDPC H matrix into .\n"
		""},
	 { (char *)"ldpc_G_matrix_sptr_decode", (PyCFunction) _wrap_ldpc_G_matrix_sptr_decode, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"ldpc_G_matrix_sptr_decode(ldpc_G_matrix_sptr self, unsigned char * outbuffer, float const * inbuffer, unsigned int frame_size, \n"
		"    unsigned int max_iterations)\n"
		"\n"
		"Decode  with LDPC H matrix into .\n"
		""},
	 { (char *)"ldpc_G_matrix_sptr_n", _wrap_ldpc_G_matrix_sptr_n, METH_VARARGS, (char *)"\n"
		"ldpc_G_matrix_sptr_n(ldpc_G_matrix_sptr self) -> unsigned int\n"
		"\n"
		"Get the codeword length n.\n"
		""},
	 { (char *)"ldpc_G_matrix_sptr_k", _wrap_ldpc_G_matrix_sptr_k, METH_VARARGS, (char *)"\n"
		"ldpc_G_matrix_sptr_k(ldpc_G_matrix_sptr self) -> unsigned int\n"
		"\n"
		"Get the information word length k.\n"
		""},
	 { (char *)"ldpc_G_matrix_sptr_swigregister", ldpc_G_matrix_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_decoder_sptr", _wrap_new_decoder_sptr, METH_VARARGS, (char *)"\n"
		"decoder_sptr()\n"
		"new_decoder_sptr(decoder p) -> decoder_sptr\n"
		""},
	 { (char *)"decoder_sptr___deref__", _wrap_decoder_sptr___deref__, METH_VARARGS, (char *)"decoder_sptr___deref__(decoder_sptr self) -> decoder"},
	 { (char *)"delete_decoder_sptr", _wrap_delete_decoder_sptr, METH_VARARGS, (char *)"delete_decoder_sptr(decoder_sptr self)"},
	 { (char *)"decoder_sptr_make", (PyCFunction) _wrap_decoder_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"decoder_sptr_make(decoder_sptr self, generic_decoder_sptr my_decoder, size_t input_item_size, size_t output_item_size) -> decoder_sptr\n"
		"\n"
		"General FEC decoding block that takes in a decoder variable object (derived from gr::fec::general_decoder) for use in a flowgraph.\n"
		"\n"
		"This block uses a decoder variable object (derived from gr::fec::generic_decoder) to decode data within a flowgraph. This block interacts with the general FECAPI architecture to handle all passing all input and output data in a flowgraph. The decoder variable takes care of understanding the requirements, data types and sizes, and boundary conditions of the specific FEC decoding algorithm.\n"
		"\n"
		"Generally, this block is used within the fec.extended_decoder Python block to handle some input/output formatting issues. In the FECAPI, the decoder variable sets properties like the input and output types and sizes and whether the output is packed or unpacked bytes. The fec.extended_decoder uses this information to set up an gr::hier_block2 structure to make sure the I/O to the variable is handled consistently, such as to make sure all inputs are floats with one soft symbol per item and the outputs are unpacked bytes with the bit in the LSB.\n"
		"\n"
		"See gr::fec::generic_decoder for detail on what information an FECAPI variable object can set if using this block directly and not as part of the fec.extended_decoder.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Create the FEC decoder block by taking in the FECAPI decoder object as well as input and output sizes.\n"
		"\n"
		"Args:\n"
		"    my_decoder : An FECAPI decoder object (See gr::fec::generic_decoder).\n"
		"    input_item_size : The size of the input items (often the my_decoder object can tell us this).\n"
		"    output_item_size : The size of the output items (often the my_decoder object can tell us this).\n"
		""},
	 { (char *)"decoder_sptr_general_work", (PyCFunction) _wrap_decoder_sptr_general_work, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"decoder_sptr_general_work(decoder_sptr self, int noutput_items, gr_vector_int & ninput_items, gr_vector_const_void_star & input_items, \n"
		"    gr_vector_void_star & output_items) -> int\n"
		""},
	 { (char *)"decoder_sptr_fixed_rate_ninput_to_noutput", (PyCFunction) _wrap_decoder_sptr_fixed_rate_ninput_to_noutput, METH_VARARGS | METH_KEYWORDS, (char *)"decoder_sptr_fixed_rate_ninput_to_noutput(decoder_sptr self, int ninput) -> int"},
	 { (char *)"decoder_sptr_fixed_rate_noutput_to_ninput", (PyCFunction) _wrap_decoder_sptr_fixed_rate_noutput_to_ninput, METH_VARARGS | METH_KEYWORDS, (char *)"decoder_sptr_fixed_rate_noutput_to_ninput(decoder_sptr self, int noutput) -> int"},
	 { (char *)"decoder_sptr_forecast", (PyCFunction) _wrap_decoder_sptr_forecast, METH_VARARGS | METH_KEYWORDS, (char *)"decoder_sptr_forecast(decoder_sptr self, int noutput_items, gr_vector_int & ninput_items_required)"},
	 { (char *)"decoder_sptr_history", _wrap_decoder_sptr_history, METH_VARARGS, (char *)"decoder_sptr_history(decoder_sptr self) -> unsigned int"},
	 { (char *)"decoder_sptr_declare_sample_delay", _wrap_decoder_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"decoder_sptr_declare_sample_delay(decoder_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"decoder_sptr_sample_delay", (PyCFunction) _wrap_decoder_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"decoder_sptr_sample_delay(decoder_sptr self, int which) -> unsigned int"},
	 { (char *)"decoder_sptr_output_multiple", _wrap_decoder_sptr_output_multiple, METH_VARARGS, (char *)"decoder_sptr_output_multiple(decoder_sptr self) -> int"},
	 { (char *)"decoder_sptr_relative_rate", _wrap_decoder_sptr_relative_rate, METH_VARARGS, (char *)"decoder_sptr_relative_rate(decoder_sptr self) -> double"},
	 { (char *)"decoder_sptr_start", _wrap_decoder_sptr_start, METH_VARARGS, (char *)"decoder_sptr_start(decoder_sptr self) -> bool"},
	 { (char *)"decoder_sptr_stop", _wrap_decoder_sptr_stop, METH_VARARGS, (char *)"decoder_sptr_stop(decoder_sptr self) -> bool"},
	 { (char *)"decoder_sptr_nitems_read", (PyCFunction) _wrap_decoder_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"decoder_sptr_nitems_read(decoder_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"decoder_sptr_nitems_written", (PyCFunction) _wrap_decoder_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"decoder_sptr_nitems_written(decoder_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"decoder_sptr_max_noutput_items", _wrap_decoder_sptr_max_noutput_items, METH_VARARGS, (char *)"decoder_sptr_max_noutput_items(decoder_sptr self) -> int"},
	 { (char *)"decoder_sptr_set_max_noutput_items", (PyCFunction) _wrap_decoder_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"decoder_sptr_set_max_noutput_items(decoder_sptr self, int m)"},
	 { (char *)"decoder_sptr_unset_max_noutput_items", _wrap_decoder_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"decoder_sptr_unset_max_noutput_items(decoder_sptr self)"},
	 { (char *)"decoder_sptr_is_set_max_noutput_items", _wrap_decoder_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"decoder_sptr_is_set_max_noutput_items(decoder_sptr self) -> bool"},
	 { (char *)"decoder_sptr_set_min_noutput_items", (PyCFunction) _wrap_decoder_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"decoder_sptr_set_min_noutput_items(decoder_sptr self, int m)"},
	 { (char *)"decoder_sptr_min_noutput_items", _wrap_decoder_sptr_min_noutput_items, METH_VARARGS, (char *)"decoder_sptr_min_noutput_items(decoder_sptr self) -> int"},
	 { (char *)"decoder_sptr_max_output_buffer", (PyCFunction) _wrap_decoder_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"decoder_sptr_max_output_buffer(decoder_sptr self, int i) -> long"},
	 { (char *)"decoder_sptr_set_max_output_buffer", _wrap_decoder_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"decoder_sptr_set_max_output_buffer(decoder_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"decoder_sptr_min_output_buffer", (PyCFunction) _wrap_decoder_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"decoder_sptr_min_output_buffer(decoder_sptr self, int i) -> long"},
	 { (char *)"decoder_sptr_set_min_output_buffer", _wrap_decoder_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"decoder_sptr_set_min_output_buffer(decoder_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"decoder_sptr_pc_noutput_items", _wrap_decoder_sptr_pc_noutput_items, METH_VARARGS, (char *)"decoder_sptr_pc_noutput_items(decoder_sptr self) -> float"},
	 { (char *)"decoder_sptr_pc_noutput_items_avg", _wrap_decoder_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"decoder_sptr_pc_noutput_items_avg(decoder_sptr self) -> float"},
	 { (char *)"decoder_sptr_pc_noutput_items_var", _wrap_decoder_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"decoder_sptr_pc_noutput_items_var(decoder_sptr self) -> float"},
	 { (char *)"decoder_sptr_pc_nproduced", _wrap_decoder_sptr_pc_nproduced, METH_VARARGS, (char *)"decoder_sptr_pc_nproduced(decoder_sptr self) -> float"},
	 { (char *)"decoder_sptr_pc_nproduced_avg", _wrap_decoder_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"decoder_sptr_pc_nproduced_avg(decoder_sptr self) -> float"},
	 { (char *)"decoder_sptr_pc_nproduced_var", _wrap_decoder_sptr_pc_nproduced_var, METH_VARARGS, (char *)"decoder_sptr_pc_nproduced_var(decoder_sptr self) -> float"},
	 { (char *)"decoder_sptr_pc_input_buffers_full", _wrap_decoder_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"decoder_sptr_pc_input_buffers_full(decoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"decoder_sptr_pc_input_buffers_full_avg", _wrap_decoder_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"decoder_sptr_pc_input_buffers_full_avg(decoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"decoder_sptr_pc_input_buffers_full_var", _wrap_decoder_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"decoder_sptr_pc_input_buffers_full_var(decoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"decoder_sptr_pc_output_buffers_full", _wrap_decoder_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"decoder_sptr_pc_output_buffers_full(decoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"decoder_sptr_pc_output_buffers_full_avg", _wrap_decoder_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"decoder_sptr_pc_output_buffers_full_avg(decoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"decoder_sptr_pc_output_buffers_full_var", _wrap_decoder_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"decoder_sptr_pc_output_buffers_full_var(decoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"decoder_sptr_pc_work_time", _wrap_decoder_sptr_pc_work_time, METH_VARARGS, (char *)"decoder_sptr_pc_work_time(decoder_sptr self) -> float"},
	 { (char *)"decoder_sptr_pc_work_time_avg", _wrap_decoder_sptr_pc_work_time_avg, METH_VARARGS, (char *)"decoder_sptr_pc_work_time_avg(decoder_sptr self) -> float"},
	 { (char *)"decoder_sptr_pc_work_time_var", _wrap_decoder_sptr_pc_work_time_var, METH_VARARGS, (char *)"decoder_sptr_pc_work_time_var(decoder_sptr self) -> float"},
	 { (char *)"decoder_sptr_pc_work_time_total", _wrap_decoder_sptr_pc_work_time_total, METH_VARARGS, (char *)"decoder_sptr_pc_work_time_total(decoder_sptr self) -> float"},
	 { (char *)"decoder_sptr_pc_throughput_avg", _wrap_decoder_sptr_pc_throughput_avg, METH_VARARGS, (char *)"decoder_sptr_pc_throughput_avg(decoder_sptr self) -> float"},
	 { (char *)"decoder_sptr_set_processor_affinity", (PyCFunction) _wrap_decoder_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"decoder_sptr_set_processor_affinity(decoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"decoder_sptr_unset_processor_affinity", _wrap_decoder_sptr_unset_processor_affinity, METH_VARARGS, (char *)"decoder_sptr_unset_processor_affinity(decoder_sptr self)"},
	 { (char *)"decoder_sptr_processor_affinity", _wrap_decoder_sptr_processor_affinity, METH_VARARGS, (char *)"decoder_sptr_processor_affinity(decoder_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"decoder_sptr_active_thread_priority", _wrap_decoder_sptr_active_thread_priority, METH_VARARGS, (char *)"decoder_sptr_active_thread_priority(decoder_sptr self) -> int"},
	 { (char *)"decoder_sptr_thread_priority", _wrap_decoder_sptr_thread_priority, METH_VARARGS, (char *)"decoder_sptr_thread_priority(decoder_sptr self) -> int"},
	 { (char *)"decoder_sptr_set_thread_priority", (PyCFunction) _wrap_decoder_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"decoder_sptr_set_thread_priority(decoder_sptr self, int priority) -> int"},
	 { (char *)"decoder_sptr_name", _wrap_decoder_sptr_name, METH_VARARGS, (char *)"decoder_sptr_name(decoder_sptr self) -> std::string"},
	 { (char *)"decoder_sptr_symbol_name", _wrap_decoder_sptr_symbol_name, METH_VARARGS, (char *)"decoder_sptr_symbol_name(decoder_sptr self) -> std::string"},
	 { (char *)"decoder_sptr_input_signature", _wrap_decoder_sptr_input_signature, METH_VARARGS, (char *)"decoder_sptr_input_signature(decoder_sptr self) -> io_signature_sptr"},
	 { (char *)"decoder_sptr_output_signature", _wrap_decoder_sptr_output_signature, METH_VARARGS, (char *)"decoder_sptr_output_signature(decoder_sptr self) -> io_signature_sptr"},
	 { (char *)"decoder_sptr_unique_id", _wrap_decoder_sptr_unique_id, METH_VARARGS, (char *)"decoder_sptr_unique_id(decoder_sptr self) -> long"},
	 { (char *)"decoder_sptr_to_basic_block", _wrap_decoder_sptr_to_basic_block, METH_VARARGS, (char *)"decoder_sptr_to_basic_block(decoder_sptr self) -> basic_block_sptr"},
	 { (char *)"decoder_sptr_check_topology", (PyCFunction) _wrap_decoder_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"decoder_sptr_check_topology(decoder_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"decoder_sptr_alias", _wrap_decoder_sptr_alias, METH_VARARGS, (char *)"decoder_sptr_alias(decoder_sptr self) -> std::string"},
	 { (char *)"decoder_sptr_set_block_alias", (PyCFunction) _wrap_decoder_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"decoder_sptr_set_block_alias(decoder_sptr self, std::string name)"},
	 { (char *)"decoder_sptr__post", (PyCFunction) _wrap_decoder_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"decoder_sptr__post(decoder_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"decoder_sptr_message_ports_in", _wrap_decoder_sptr_message_ports_in, METH_VARARGS, (char *)"decoder_sptr_message_ports_in(decoder_sptr self) -> swig_int_ptr"},
	 { (char *)"decoder_sptr_message_ports_out", _wrap_decoder_sptr_message_ports_out, METH_VARARGS, (char *)"decoder_sptr_message_ports_out(decoder_sptr self) -> swig_int_ptr"},
	 { (char *)"decoder_sptr_message_subscribers", (PyCFunction) _wrap_decoder_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"decoder_sptr_message_subscribers(decoder_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"decoder_sptr_swigregister", decoder_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_encoder_sptr", _wrap_new_encoder_sptr, METH_VARARGS, (char *)"\n"
		"encoder_sptr()\n"
		"new_encoder_sptr(encoder p) -> encoder_sptr\n"
		""},
	 { (char *)"encoder_sptr___deref__", _wrap_encoder_sptr___deref__, METH_VARARGS, (char *)"encoder_sptr___deref__(encoder_sptr self) -> encoder"},
	 { (char *)"delete_encoder_sptr", _wrap_delete_encoder_sptr, METH_VARARGS, (char *)"delete_encoder_sptr(encoder_sptr self)"},
	 { (char *)"encoder_sptr_make", (PyCFunction) _wrap_encoder_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"encoder_sptr_make(encoder_sptr self, generic_encoder_sptr my_encoder, size_t input_item_size, size_t output_item_size) -> encoder_sptr\n"
		"\n"
		"Creates the encoder block for use in GNU Radio flowgraphs from a given FECAPI object derived from the generic_encoder class.\n"
		"\n"
		"Generally, we would use the fec.extended_encoder Python implementation to instantiate this. The extended_encoder wraps up a few more details, like taking care of puncturing as well as the encoder itself.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Build the FEC encoder block from an FECAPI encoder object.\n"
		"\n"
		"Args:\n"
		"    my_encoder : An FECAPI encoder object child of the generic_encoder class.\n"
		"    input_item_size : size of a block of data for the encoder.\n"
		"    output_item_size : size of a block of data the encoder will produce.\n"
		""},
	 { (char *)"encoder_sptr_general_work", (PyCFunction) _wrap_encoder_sptr_general_work, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"encoder_sptr_general_work(encoder_sptr self, int noutput_items, gr_vector_int & ninput_items, gr_vector_const_void_star & input_items, \n"
		"    gr_vector_void_star & output_items) -> int\n"
		""},
	 { (char *)"encoder_sptr_fixed_rate_ninput_to_noutput", (PyCFunction) _wrap_encoder_sptr_fixed_rate_ninput_to_noutput, METH_VARARGS | METH_KEYWORDS, (char *)"encoder_sptr_fixed_rate_ninput_to_noutput(encoder_sptr self, int ninput) -> int"},
	 { (char *)"encoder_sptr_fixed_rate_noutput_to_ninput", (PyCFunction) _wrap_encoder_sptr_fixed_rate_noutput_to_ninput, METH_VARARGS | METH_KEYWORDS, (char *)"encoder_sptr_fixed_rate_noutput_to_ninput(encoder_sptr self, int noutput) -> int"},
	 { (char *)"encoder_sptr_forecast", (PyCFunction) _wrap_encoder_sptr_forecast, METH_VARARGS | METH_KEYWORDS, (char *)"encoder_sptr_forecast(encoder_sptr self, int noutput_items, gr_vector_int & ninput_items_required)"},
	 { (char *)"encoder_sptr_history", _wrap_encoder_sptr_history, METH_VARARGS, (char *)"encoder_sptr_history(encoder_sptr self) -> unsigned int"},
	 { (char *)"encoder_sptr_declare_sample_delay", _wrap_encoder_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"encoder_sptr_declare_sample_delay(encoder_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"encoder_sptr_sample_delay", (PyCFunction) _wrap_encoder_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"encoder_sptr_sample_delay(encoder_sptr self, int which) -> unsigned int"},
	 { (char *)"encoder_sptr_output_multiple", _wrap_encoder_sptr_output_multiple, METH_VARARGS, (char *)"encoder_sptr_output_multiple(encoder_sptr self) -> int"},
	 { (char *)"encoder_sptr_relative_rate", _wrap_encoder_sptr_relative_rate, METH_VARARGS, (char *)"encoder_sptr_relative_rate(encoder_sptr self) -> double"},
	 { (char *)"encoder_sptr_start", _wrap_encoder_sptr_start, METH_VARARGS, (char *)"encoder_sptr_start(encoder_sptr self) -> bool"},
	 { (char *)"encoder_sptr_stop", _wrap_encoder_sptr_stop, METH_VARARGS, (char *)"encoder_sptr_stop(encoder_sptr self) -> bool"},
	 { (char *)"encoder_sptr_nitems_read", (PyCFunction) _wrap_encoder_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"encoder_sptr_nitems_read(encoder_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"encoder_sptr_nitems_written", (PyCFunction) _wrap_encoder_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"encoder_sptr_nitems_written(encoder_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"encoder_sptr_max_noutput_items", _wrap_encoder_sptr_max_noutput_items, METH_VARARGS, (char *)"encoder_sptr_max_noutput_items(encoder_sptr self) -> int"},
	 { (char *)"encoder_sptr_set_max_noutput_items", (PyCFunction) _wrap_encoder_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"encoder_sptr_set_max_noutput_items(encoder_sptr self, int m)"},
	 { (char *)"encoder_sptr_unset_max_noutput_items", _wrap_encoder_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"encoder_sptr_unset_max_noutput_items(encoder_sptr self)"},
	 { (char *)"encoder_sptr_is_set_max_noutput_items", _wrap_encoder_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"encoder_sptr_is_set_max_noutput_items(encoder_sptr self) -> bool"},
	 { (char *)"encoder_sptr_set_min_noutput_items", (PyCFunction) _wrap_encoder_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"encoder_sptr_set_min_noutput_items(encoder_sptr self, int m)"},
	 { (char *)"encoder_sptr_min_noutput_items", _wrap_encoder_sptr_min_noutput_items, METH_VARARGS, (char *)"encoder_sptr_min_noutput_items(encoder_sptr self) -> int"},
	 { (char *)"encoder_sptr_max_output_buffer", (PyCFunction) _wrap_encoder_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"encoder_sptr_max_output_buffer(encoder_sptr self, int i) -> long"},
	 { (char *)"encoder_sptr_set_max_output_buffer", _wrap_encoder_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"encoder_sptr_set_max_output_buffer(encoder_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"encoder_sptr_min_output_buffer", (PyCFunction) _wrap_encoder_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"encoder_sptr_min_output_buffer(encoder_sptr self, int i) -> long"},
	 { (char *)"encoder_sptr_set_min_output_buffer", _wrap_encoder_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"encoder_sptr_set_min_output_buffer(encoder_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"encoder_sptr_pc_noutput_items", _wrap_encoder_sptr_pc_noutput_items, METH_VARARGS, (char *)"encoder_sptr_pc_noutput_items(encoder_sptr self) -> float"},
	 { (char *)"encoder_sptr_pc_noutput_items_avg", _wrap_encoder_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"encoder_sptr_pc_noutput_items_avg(encoder_sptr self) -> float"},
	 { (char *)"encoder_sptr_pc_noutput_items_var", _wrap_encoder_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"encoder_sptr_pc_noutput_items_var(encoder_sptr self) -> float"},
	 { (char *)"encoder_sptr_pc_nproduced", _wrap_encoder_sptr_pc_nproduced, METH_VARARGS, (char *)"encoder_sptr_pc_nproduced(encoder_sptr self) -> float"},
	 { (char *)"encoder_sptr_pc_nproduced_avg", _wrap_encoder_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"encoder_sptr_pc_nproduced_avg(encoder_sptr self) -> float"},
	 { (char *)"encoder_sptr_pc_nproduced_var", _wrap_encoder_sptr_pc_nproduced_var, METH_VARARGS, (char *)"encoder_sptr_pc_nproduced_var(encoder_sptr self) -> float"},
	 { (char *)"encoder_sptr_pc_input_buffers_full", _wrap_encoder_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"encoder_sptr_pc_input_buffers_full(encoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"encoder_sptr_pc_input_buffers_full_avg", _wrap_encoder_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"encoder_sptr_pc_input_buffers_full_avg(encoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"encoder_sptr_pc_input_buffers_full_var", _wrap_encoder_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"encoder_sptr_pc_input_buffers_full_var(encoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"encoder_sptr_pc_output_buffers_full", _wrap_encoder_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"encoder_sptr_pc_output_buffers_full(encoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"encoder_sptr_pc_output_buffers_full_avg", _wrap_encoder_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"encoder_sptr_pc_output_buffers_full_avg(encoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"encoder_sptr_pc_output_buffers_full_var", _wrap_encoder_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"encoder_sptr_pc_output_buffers_full_var(encoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"encoder_sptr_pc_work_time", _wrap_encoder_sptr_pc_work_time, METH_VARARGS, (char *)"encoder_sptr_pc_work_time(encoder_sptr self) -> float"},
	 { (char *)"encoder_sptr_pc_work_time_avg", _wrap_encoder_sptr_pc_work_time_avg, METH_VARARGS, (char *)"encoder_sptr_pc_work_time_avg(encoder_sptr self) -> float"},
	 { (char *)"encoder_sptr_pc_work_time_var", _wrap_encoder_sptr_pc_work_time_var, METH_VARARGS, (char *)"encoder_sptr_pc_work_time_var(encoder_sptr self) -> float"},
	 { (char *)"encoder_sptr_pc_work_time_total", _wrap_encoder_sptr_pc_work_time_total, METH_VARARGS, (char *)"encoder_sptr_pc_work_time_total(encoder_sptr self) -> float"},
	 { (char *)"encoder_sptr_pc_throughput_avg", _wrap_encoder_sptr_pc_throughput_avg, METH_VARARGS, (char *)"encoder_sptr_pc_throughput_avg(encoder_sptr self) -> float"},
	 { (char *)"encoder_sptr_set_processor_affinity", (PyCFunction) _wrap_encoder_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"encoder_sptr_set_processor_affinity(encoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"encoder_sptr_unset_processor_affinity", _wrap_encoder_sptr_unset_processor_affinity, METH_VARARGS, (char *)"encoder_sptr_unset_processor_affinity(encoder_sptr self)"},
	 { (char *)"encoder_sptr_processor_affinity", _wrap_encoder_sptr_processor_affinity, METH_VARARGS, (char *)"encoder_sptr_processor_affinity(encoder_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"encoder_sptr_active_thread_priority", _wrap_encoder_sptr_active_thread_priority, METH_VARARGS, (char *)"encoder_sptr_active_thread_priority(encoder_sptr self) -> int"},
	 { (char *)"encoder_sptr_thread_priority", _wrap_encoder_sptr_thread_priority, METH_VARARGS, (char *)"encoder_sptr_thread_priority(encoder_sptr self) -> int"},
	 { (char *)"encoder_sptr_set_thread_priority", (PyCFunction) _wrap_encoder_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"encoder_sptr_set_thread_priority(encoder_sptr self, int priority) -> int"},
	 { (char *)"encoder_sptr_name", _wrap_encoder_sptr_name, METH_VARARGS, (char *)"encoder_sptr_name(encoder_sptr self) -> std::string"},
	 { (char *)"encoder_sptr_symbol_name", _wrap_encoder_sptr_symbol_name, METH_VARARGS, (char *)"encoder_sptr_symbol_name(encoder_sptr self) -> std::string"},
	 { (char *)"encoder_sptr_input_signature", _wrap_encoder_sptr_input_signature, METH_VARARGS, (char *)"encoder_sptr_input_signature(encoder_sptr self) -> io_signature_sptr"},
	 { (char *)"encoder_sptr_output_signature", _wrap_encoder_sptr_output_signature, METH_VARARGS, (char *)"encoder_sptr_output_signature(encoder_sptr self) -> io_signature_sptr"},
	 { (char *)"encoder_sptr_unique_id", _wrap_encoder_sptr_unique_id, METH_VARARGS, (char *)"encoder_sptr_unique_id(encoder_sptr self) -> long"},
	 { (char *)"encoder_sptr_to_basic_block", _wrap_encoder_sptr_to_basic_block, METH_VARARGS, (char *)"encoder_sptr_to_basic_block(encoder_sptr self) -> basic_block_sptr"},
	 { (char *)"encoder_sptr_check_topology", (PyCFunction) _wrap_encoder_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"encoder_sptr_check_topology(encoder_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"encoder_sptr_alias", _wrap_encoder_sptr_alias, METH_VARARGS, (char *)"encoder_sptr_alias(encoder_sptr self) -> std::string"},
	 { (char *)"encoder_sptr_set_block_alias", (PyCFunction) _wrap_encoder_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"encoder_sptr_set_block_alias(encoder_sptr self, std::string name)"},
	 { (char *)"encoder_sptr__post", (PyCFunction) _wrap_encoder_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"encoder_sptr__post(encoder_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"encoder_sptr_message_ports_in", _wrap_encoder_sptr_message_ports_in, METH_VARARGS, (char *)"encoder_sptr_message_ports_in(encoder_sptr self) -> swig_int_ptr"},
	 { (char *)"encoder_sptr_message_ports_out", _wrap_encoder_sptr_message_ports_out, METH_VARARGS, (char *)"encoder_sptr_message_ports_out(encoder_sptr self) -> swig_int_ptr"},
	 { (char *)"encoder_sptr_message_subscribers", (PyCFunction) _wrap_encoder_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"encoder_sptr_message_subscribers(encoder_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"encoder_sptr_swigregister", encoder_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_tagged_decoder_sptr", _wrap_new_tagged_decoder_sptr, METH_VARARGS, (char *)"\n"
		"tagged_decoder_sptr()\n"
		"new_tagged_decoder_sptr(tagged_decoder p) -> tagged_decoder_sptr\n"
		""},
	 { (char *)"tagged_decoder_sptr___deref__", _wrap_tagged_decoder_sptr___deref__, METH_VARARGS, (char *)"tagged_decoder_sptr___deref__(tagged_decoder_sptr self) -> tagged_decoder"},
	 { (char *)"delete_tagged_decoder_sptr", _wrap_delete_tagged_decoder_sptr, METH_VARARGS, (char *)"delete_tagged_decoder_sptr(tagged_decoder_sptr self)"},
	 { (char *)"tagged_decoder_sptr_make", (PyCFunction) _wrap_tagged_decoder_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tagged_decoder_sptr_make(tagged_decoder_sptr self, generic_decoder_sptr my_decoder, size_t input_item_size, \n"
		"    size_t output_item_size, std::string const & lengthtagname=\"packet_len\", \n"
		"    int mtu=1500) -> tagged_decoder_sptr\n"
		"\n"
		"General FEC decoding block that takes in a decoder variable object (derived from gr::fec::general_decoder) for use in a flowgraph.\n"
		"\n"
		"This block uses a decoder variable object (derived from gr::fec::generic_decoder) to decode data within a flowgraph. This block interacts with the general FECAPI architecture to handle all passing all input and output data in a flowgraph. The decoder variable takes care of understanding the requirements, data types and sizes, and boundary conditions of the specific FEC decoding algorithm.\n"
		"\n"
		"Generally, this block is used within the fec.extended_decoder Python block to handle some input/output formatting issues. In the FECAPI, the decoder variable sets properties like the input and output types and sizes and whether the output is packed or unpacked bytes. The fec.extended_decoder uses this information to set up an gr::hier_block2 structure to make sure the I/O to the variable is handled consistently, such as to make sure all inputs are floats with one soft symbol per item and the outputs are unpacked bytes with the bit in the LSB.\n"
		"\n"
		"See gr::fec::generic_decoder for detail on what information an FECAPI variable object can set if using this block directly and not as part of the fec.extended_decoder.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Create the FEC decoder block by taking in the FECAPI decoder object as well as input and output sizes.\n"
		"\n"
		"Args:\n"
		"    my_decoder : An FECAPI decoder object (See gr::fec::generic_decoder).\n"
		"    input_item_size : The size of the input items (often the my_decoder object can tell us this).\n"
		"    output_item_size : The size of the output items (often the my_decoder object can tell us this).\n"
		"    lengthtagname : Key name of the tagged stream frame size.\n"
		"    mtu : The Maximum Transmission Unit (MTU) of the output frame that the block will be able to process. Specified in bytes and defaults to 1500.\n"
		""},
	 { (char *)"tagged_decoder_sptr_work", (PyCFunction) _wrap_tagged_decoder_sptr_work, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tagged_decoder_sptr_work(tagged_decoder_sptr self, int noutput_items, gr_vector_int & ninput_items, gr_vector_const_void_star & input_items, \n"
		"    gr_vector_void_star & output_items) -> int\n"
		""},
	 { (char *)"tagged_decoder_sptr_calculate_output_stream_length", (PyCFunction) _wrap_tagged_decoder_sptr_calculate_output_stream_length, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_decoder_sptr_calculate_output_stream_length(tagged_decoder_sptr self, gr_vector_int const & ninput_items) -> int"},
	 { (char *)"tagged_decoder_sptr_history", _wrap_tagged_decoder_sptr_history, METH_VARARGS, (char *)"tagged_decoder_sptr_history(tagged_decoder_sptr self) -> unsigned int"},
	 { (char *)"tagged_decoder_sptr_declare_sample_delay", _wrap_tagged_decoder_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"tagged_decoder_sptr_declare_sample_delay(tagged_decoder_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"tagged_decoder_sptr_sample_delay", (PyCFunction) _wrap_tagged_decoder_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_decoder_sptr_sample_delay(tagged_decoder_sptr self, int which) -> unsigned int"},
	 { (char *)"tagged_decoder_sptr_output_multiple", _wrap_tagged_decoder_sptr_output_multiple, METH_VARARGS, (char *)"tagged_decoder_sptr_output_multiple(tagged_decoder_sptr self) -> int"},
	 { (char *)"tagged_decoder_sptr_relative_rate", _wrap_tagged_decoder_sptr_relative_rate, METH_VARARGS, (char *)"tagged_decoder_sptr_relative_rate(tagged_decoder_sptr self) -> double"},
	 { (char *)"tagged_decoder_sptr_start", _wrap_tagged_decoder_sptr_start, METH_VARARGS, (char *)"tagged_decoder_sptr_start(tagged_decoder_sptr self) -> bool"},
	 { (char *)"tagged_decoder_sptr_stop", _wrap_tagged_decoder_sptr_stop, METH_VARARGS, (char *)"tagged_decoder_sptr_stop(tagged_decoder_sptr self) -> bool"},
	 { (char *)"tagged_decoder_sptr_nitems_read", (PyCFunction) _wrap_tagged_decoder_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_decoder_sptr_nitems_read(tagged_decoder_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"tagged_decoder_sptr_nitems_written", (PyCFunction) _wrap_tagged_decoder_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_decoder_sptr_nitems_written(tagged_decoder_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"tagged_decoder_sptr_max_noutput_items", _wrap_tagged_decoder_sptr_max_noutput_items, METH_VARARGS, (char *)"tagged_decoder_sptr_max_noutput_items(tagged_decoder_sptr self) -> int"},
	 { (char *)"tagged_decoder_sptr_set_max_noutput_items", (PyCFunction) _wrap_tagged_decoder_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_decoder_sptr_set_max_noutput_items(tagged_decoder_sptr self, int m)"},
	 { (char *)"tagged_decoder_sptr_unset_max_noutput_items", _wrap_tagged_decoder_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"tagged_decoder_sptr_unset_max_noutput_items(tagged_decoder_sptr self)"},
	 { (char *)"tagged_decoder_sptr_is_set_max_noutput_items", _wrap_tagged_decoder_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"tagged_decoder_sptr_is_set_max_noutput_items(tagged_decoder_sptr self) -> bool"},
	 { (char *)"tagged_decoder_sptr_set_min_noutput_items", (PyCFunction) _wrap_tagged_decoder_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_decoder_sptr_set_min_noutput_items(tagged_decoder_sptr self, int m)"},
	 { (char *)"tagged_decoder_sptr_min_noutput_items", _wrap_tagged_decoder_sptr_min_noutput_items, METH_VARARGS, (char *)"tagged_decoder_sptr_min_noutput_items(tagged_decoder_sptr self) -> int"},
	 { (char *)"tagged_decoder_sptr_max_output_buffer", (PyCFunction) _wrap_tagged_decoder_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_decoder_sptr_max_output_buffer(tagged_decoder_sptr self, int i) -> long"},
	 { (char *)"tagged_decoder_sptr_set_max_output_buffer", _wrap_tagged_decoder_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"tagged_decoder_sptr_set_max_output_buffer(tagged_decoder_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"tagged_decoder_sptr_min_output_buffer", (PyCFunction) _wrap_tagged_decoder_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_decoder_sptr_min_output_buffer(tagged_decoder_sptr self, int i) -> long"},
	 { (char *)"tagged_decoder_sptr_set_min_output_buffer", _wrap_tagged_decoder_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"tagged_decoder_sptr_set_min_output_buffer(tagged_decoder_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"tagged_decoder_sptr_pc_noutput_items", _wrap_tagged_decoder_sptr_pc_noutput_items, METH_VARARGS, (char *)"tagged_decoder_sptr_pc_noutput_items(tagged_decoder_sptr self) -> float"},
	 { (char *)"tagged_decoder_sptr_pc_noutput_items_avg", _wrap_tagged_decoder_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"tagged_decoder_sptr_pc_noutput_items_avg(tagged_decoder_sptr self) -> float"},
	 { (char *)"tagged_decoder_sptr_pc_noutput_items_var", _wrap_tagged_decoder_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"tagged_decoder_sptr_pc_noutput_items_var(tagged_decoder_sptr self) -> float"},
	 { (char *)"tagged_decoder_sptr_pc_nproduced", _wrap_tagged_decoder_sptr_pc_nproduced, METH_VARARGS, (char *)"tagged_decoder_sptr_pc_nproduced(tagged_decoder_sptr self) -> float"},
	 { (char *)"tagged_decoder_sptr_pc_nproduced_avg", _wrap_tagged_decoder_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"tagged_decoder_sptr_pc_nproduced_avg(tagged_decoder_sptr self) -> float"},
	 { (char *)"tagged_decoder_sptr_pc_nproduced_var", _wrap_tagged_decoder_sptr_pc_nproduced_var, METH_VARARGS, (char *)"tagged_decoder_sptr_pc_nproduced_var(tagged_decoder_sptr self) -> float"},
	 { (char *)"tagged_decoder_sptr_pc_input_buffers_full", _wrap_tagged_decoder_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"tagged_decoder_sptr_pc_input_buffers_full(tagged_decoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_decoder_sptr_pc_input_buffers_full_avg", _wrap_tagged_decoder_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"tagged_decoder_sptr_pc_input_buffers_full_avg(tagged_decoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_decoder_sptr_pc_input_buffers_full_var", _wrap_tagged_decoder_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"tagged_decoder_sptr_pc_input_buffers_full_var(tagged_decoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_decoder_sptr_pc_output_buffers_full", _wrap_tagged_decoder_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"tagged_decoder_sptr_pc_output_buffers_full(tagged_decoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_decoder_sptr_pc_output_buffers_full_avg", _wrap_tagged_decoder_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"tagged_decoder_sptr_pc_output_buffers_full_avg(tagged_decoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_decoder_sptr_pc_output_buffers_full_var", _wrap_tagged_decoder_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"tagged_decoder_sptr_pc_output_buffers_full_var(tagged_decoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_decoder_sptr_pc_work_time", _wrap_tagged_decoder_sptr_pc_work_time, METH_VARARGS, (char *)"tagged_decoder_sptr_pc_work_time(tagged_decoder_sptr self) -> float"},
	 { (char *)"tagged_decoder_sptr_pc_work_time_avg", _wrap_tagged_decoder_sptr_pc_work_time_avg, METH_VARARGS, (char *)"tagged_decoder_sptr_pc_work_time_avg(tagged_decoder_sptr self) -> float"},
	 { (char *)"tagged_decoder_sptr_pc_work_time_var", _wrap_tagged_decoder_sptr_pc_work_time_var, METH_VARARGS, (char *)"tagged_decoder_sptr_pc_work_time_var(tagged_decoder_sptr self) -> float"},
	 { (char *)"tagged_decoder_sptr_pc_work_time_total", _wrap_tagged_decoder_sptr_pc_work_time_total, METH_VARARGS, (char *)"tagged_decoder_sptr_pc_work_time_total(tagged_decoder_sptr self) -> float"},
	 { (char *)"tagged_decoder_sptr_pc_throughput_avg", _wrap_tagged_decoder_sptr_pc_throughput_avg, METH_VARARGS, (char *)"tagged_decoder_sptr_pc_throughput_avg(tagged_decoder_sptr self) -> float"},
	 { (char *)"tagged_decoder_sptr_set_processor_affinity", (PyCFunction) _wrap_tagged_decoder_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_decoder_sptr_set_processor_affinity(tagged_decoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"tagged_decoder_sptr_unset_processor_affinity", _wrap_tagged_decoder_sptr_unset_processor_affinity, METH_VARARGS, (char *)"tagged_decoder_sptr_unset_processor_affinity(tagged_decoder_sptr self)"},
	 { (char *)"tagged_decoder_sptr_processor_affinity", _wrap_tagged_decoder_sptr_processor_affinity, METH_VARARGS, (char *)"tagged_decoder_sptr_processor_affinity(tagged_decoder_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"tagged_decoder_sptr_active_thread_priority", _wrap_tagged_decoder_sptr_active_thread_priority, METH_VARARGS, (char *)"tagged_decoder_sptr_active_thread_priority(tagged_decoder_sptr self) -> int"},
	 { (char *)"tagged_decoder_sptr_thread_priority", _wrap_tagged_decoder_sptr_thread_priority, METH_VARARGS, (char *)"tagged_decoder_sptr_thread_priority(tagged_decoder_sptr self) -> int"},
	 { (char *)"tagged_decoder_sptr_set_thread_priority", (PyCFunction) _wrap_tagged_decoder_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_decoder_sptr_set_thread_priority(tagged_decoder_sptr self, int priority) -> int"},
	 { (char *)"tagged_decoder_sptr_name", _wrap_tagged_decoder_sptr_name, METH_VARARGS, (char *)"tagged_decoder_sptr_name(tagged_decoder_sptr self) -> std::string"},
	 { (char *)"tagged_decoder_sptr_symbol_name", _wrap_tagged_decoder_sptr_symbol_name, METH_VARARGS, (char *)"tagged_decoder_sptr_symbol_name(tagged_decoder_sptr self) -> std::string"},
	 { (char *)"tagged_decoder_sptr_input_signature", _wrap_tagged_decoder_sptr_input_signature, METH_VARARGS, (char *)"tagged_decoder_sptr_input_signature(tagged_decoder_sptr self) -> io_signature_sptr"},
	 { (char *)"tagged_decoder_sptr_output_signature", _wrap_tagged_decoder_sptr_output_signature, METH_VARARGS, (char *)"tagged_decoder_sptr_output_signature(tagged_decoder_sptr self) -> io_signature_sptr"},
	 { (char *)"tagged_decoder_sptr_unique_id", _wrap_tagged_decoder_sptr_unique_id, METH_VARARGS, (char *)"tagged_decoder_sptr_unique_id(tagged_decoder_sptr self) -> long"},
	 { (char *)"tagged_decoder_sptr_to_basic_block", _wrap_tagged_decoder_sptr_to_basic_block, METH_VARARGS, (char *)"tagged_decoder_sptr_to_basic_block(tagged_decoder_sptr self) -> basic_block_sptr"},
	 { (char *)"tagged_decoder_sptr_check_topology", (PyCFunction) _wrap_tagged_decoder_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_decoder_sptr_check_topology(tagged_decoder_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"tagged_decoder_sptr_alias", _wrap_tagged_decoder_sptr_alias, METH_VARARGS, (char *)"tagged_decoder_sptr_alias(tagged_decoder_sptr self) -> std::string"},
	 { (char *)"tagged_decoder_sptr_set_block_alias", (PyCFunction) _wrap_tagged_decoder_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_decoder_sptr_set_block_alias(tagged_decoder_sptr self, std::string name)"},
	 { (char *)"tagged_decoder_sptr__post", (PyCFunction) _wrap_tagged_decoder_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_decoder_sptr__post(tagged_decoder_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"tagged_decoder_sptr_message_ports_in", _wrap_tagged_decoder_sptr_message_ports_in, METH_VARARGS, (char *)"tagged_decoder_sptr_message_ports_in(tagged_decoder_sptr self) -> swig_int_ptr"},
	 { (char *)"tagged_decoder_sptr_message_ports_out", _wrap_tagged_decoder_sptr_message_ports_out, METH_VARARGS, (char *)"tagged_decoder_sptr_message_ports_out(tagged_decoder_sptr self) -> swig_int_ptr"},
	 { (char *)"tagged_decoder_sptr_message_subscribers", (PyCFunction) _wrap_tagged_decoder_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_decoder_sptr_message_subscribers(tagged_decoder_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"tagged_decoder_sptr_swigregister", tagged_decoder_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_tagged_encoder_sptr", _wrap_new_tagged_encoder_sptr, METH_VARARGS, (char *)"\n"
		"tagged_encoder_sptr()\n"
		"new_tagged_encoder_sptr(tagged_encoder p) -> tagged_encoder_sptr\n"
		""},
	 { (char *)"tagged_encoder_sptr___deref__", _wrap_tagged_encoder_sptr___deref__, METH_VARARGS, (char *)"tagged_encoder_sptr___deref__(tagged_encoder_sptr self) -> tagged_encoder"},
	 { (char *)"delete_tagged_encoder_sptr", _wrap_delete_tagged_encoder_sptr, METH_VARARGS, (char *)"delete_tagged_encoder_sptr(tagged_encoder_sptr self)"},
	 { (char *)"tagged_encoder_sptr_make", (PyCFunction) _wrap_tagged_encoder_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tagged_encoder_sptr_make(tagged_encoder_sptr self, generic_encoder_sptr my_encoder, size_t input_item_size, \n"
		"    size_t output_item_size, std::string const & lengthtagname=\"packet_len\", \n"
		"    int mtu=1500) -> tagged_encoder_sptr\n"
		"\n"
		"Creates the encoder block for use in GNU Radio flowgraphs from a given FECAPI object derived from the generic_encoder class.\n"
		"\n"
		"Generally, we would use the fec.extended_encoder Python implementation to instantiate this. The extended_encoder wraps up a few more details, like taking care of puncturing as well as the encoder itself.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Build the FEC encoder block from an FECAPI encoder object.\n"
		"\n"
		"Args:\n"
		"    my_encoder : An FECAPI encoder object child of the generic_encoder class.\n"
		"    input_item_size : size of a block of data for the encoder.\n"
		"    output_item_size : size of a block of data the encoder will produce.\n"
		"    lengthtagname : Key name of the tagged stream frame size.\n"
		"    mtu : The Maximum Transmission Unit (MTU) of the input frame that the block will be able to process. Specified in bytes and defaults to 1500.\n"
		""},
	 { (char *)"tagged_encoder_sptr_work", (PyCFunction) _wrap_tagged_encoder_sptr_work, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"tagged_encoder_sptr_work(tagged_encoder_sptr self, int noutput_items, gr_vector_int & ninput_items, gr_vector_const_void_star & input_items, \n"
		"    gr_vector_void_star & output_items) -> int\n"
		""},
	 { (char *)"tagged_encoder_sptr_calculate_output_stream_length", (PyCFunction) _wrap_tagged_encoder_sptr_calculate_output_stream_length, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_encoder_sptr_calculate_output_stream_length(tagged_encoder_sptr self, gr_vector_int const & ninput_items) -> int"},
	 { (char *)"tagged_encoder_sptr_history", _wrap_tagged_encoder_sptr_history, METH_VARARGS, (char *)"tagged_encoder_sptr_history(tagged_encoder_sptr self) -> unsigned int"},
	 { (char *)"tagged_encoder_sptr_declare_sample_delay", _wrap_tagged_encoder_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"tagged_encoder_sptr_declare_sample_delay(tagged_encoder_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"tagged_encoder_sptr_sample_delay", (PyCFunction) _wrap_tagged_encoder_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_encoder_sptr_sample_delay(tagged_encoder_sptr self, int which) -> unsigned int"},
	 { (char *)"tagged_encoder_sptr_output_multiple", _wrap_tagged_encoder_sptr_output_multiple, METH_VARARGS, (char *)"tagged_encoder_sptr_output_multiple(tagged_encoder_sptr self) -> int"},
	 { (char *)"tagged_encoder_sptr_relative_rate", _wrap_tagged_encoder_sptr_relative_rate, METH_VARARGS, (char *)"tagged_encoder_sptr_relative_rate(tagged_encoder_sptr self) -> double"},
	 { (char *)"tagged_encoder_sptr_start", _wrap_tagged_encoder_sptr_start, METH_VARARGS, (char *)"tagged_encoder_sptr_start(tagged_encoder_sptr self) -> bool"},
	 { (char *)"tagged_encoder_sptr_stop", _wrap_tagged_encoder_sptr_stop, METH_VARARGS, (char *)"tagged_encoder_sptr_stop(tagged_encoder_sptr self) -> bool"},
	 { (char *)"tagged_encoder_sptr_nitems_read", (PyCFunction) _wrap_tagged_encoder_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_encoder_sptr_nitems_read(tagged_encoder_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"tagged_encoder_sptr_nitems_written", (PyCFunction) _wrap_tagged_encoder_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_encoder_sptr_nitems_written(tagged_encoder_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"tagged_encoder_sptr_max_noutput_items", _wrap_tagged_encoder_sptr_max_noutput_items, METH_VARARGS, (char *)"tagged_encoder_sptr_max_noutput_items(tagged_encoder_sptr self) -> int"},
	 { (char *)"tagged_encoder_sptr_set_max_noutput_items", (PyCFunction) _wrap_tagged_encoder_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_encoder_sptr_set_max_noutput_items(tagged_encoder_sptr self, int m)"},
	 { (char *)"tagged_encoder_sptr_unset_max_noutput_items", _wrap_tagged_encoder_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"tagged_encoder_sptr_unset_max_noutput_items(tagged_encoder_sptr self)"},
	 { (char *)"tagged_encoder_sptr_is_set_max_noutput_items", _wrap_tagged_encoder_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"tagged_encoder_sptr_is_set_max_noutput_items(tagged_encoder_sptr self) -> bool"},
	 { (char *)"tagged_encoder_sptr_set_min_noutput_items", (PyCFunction) _wrap_tagged_encoder_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_encoder_sptr_set_min_noutput_items(tagged_encoder_sptr self, int m)"},
	 { (char *)"tagged_encoder_sptr_min_noutput_items", _wrap_tagged_encoder_sptr_min_noutput_items, METH_VARARGS, (char *)"tagged_encoder_sptr_min_noutput_items(tagged_encoder_sptr self) -> int"},
	 { (char *)"tagged_encoder_sptr_max_output_buffer", (PyCFunction) _wrap_tagged_encoder_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_encoder_sptr_max_output_buffer(tagged_encoder_sptr self, int i) -> long"},
	 { (char *)"tagged_encoder_sptr_set_max_output_buffer", _wrap_tagged_encoder_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"tagged_encoder_sptr_set_max_output_buffer(tagged_encoder_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"tagged_encoder_sptr_min_output_buffer", (PyCFunction) _wrap_tagged_encoder_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_encoder_sptr_min_output_buffer(tagged_encoder_sptr self, int i) -> long"},
	 { (char *)"tagged_encoder_sptr_set_min_output_buffer", _wrap_tagged_encoder_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"tagged_encoder_sptr_set_min_output_buffer(tagged_encoder_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"tagged_encoder_sptr_pc_noutput_items", _wrap_tagged_encoder_sptr_pc_noutput_items, METH_VARARGS, (char *)"tagged_encoder_sptr_pc_noutput_items(tagged_encoder_sptr self) -> float"},
	 { (char *)"tagged_encoder_sptr_pc_noutput_items_avg", _wrap_tagged_encoder_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"tagged_encoder_sptr_pc_noutput_items_avg(tagged_encoder_sptr self) -> float"},
	 { (char *)"tagged_encoder_sptr_pc_noutput_items_var", _wrap_tagged_encoder_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"tagged_encoder_sptr_pc_noutput_items_var(tagged_encoder_sptr self) -> float"},
	 { (char *)"tagged_encoder_sptr_pc_nproduced", _wrap_tagged_encoder_sptr_pc_nproduced, METH_VARARGS, (char *)"tagged_encoder_sptr_pc_nproduced(tagged_encoder_sptr self) -> float"},
	 { (char *)"tagged_encoder_sptr_pc_nproduced_avg", _wrap_tagged_encoder_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"tagged_encoder_sptr_pc_nproduced_avg(tagged_encoder_sptr self) -> float"},
	 { (char *)"tagged_encoder_sptr_pc_nproduced_var", _wrap_tagged_encoder_sptr_pc_nproduced_var, METH_VARARGS, (char *)"tagged_encoder_sptr_pc_nproduced_var(tagged_encoder_sptr self) -> float"},
	 { (char *)"tagged_encoder_sptr_pc_input_buffers_full", _wrap_tagged_encoder_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"tagged_encoder_sptr_pc_input_buffers_full(tagged_encoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_encoder_sptr_pc_input_buffers_full_avg", _wrap_tagged_encoder_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"tagged_encoder_sptr_pc_input_buffers_full_avg(tagged_encoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_encoder_sptr_pc_input_buffers_full_var", _wrap_tagged_encoder_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"tagged_encoder_sptr_pc_input_buffers_full_var(tagged_encoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_encoder_sptr_pc_output_buffers_full", _wrap_tagged_encoder_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"tagged_encoder_sptr_pc_output_buffers_full(tagged_encoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_encoder_sptr_pc_output_buffers_full_avg", _wrap_tagged_encoder_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"tagged_encoder_sptr_pc_output_buffers_full_avg(tagged_encoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_encoder_sptr_pc_output_buffers_full_var", _wrap_tagged_encoder_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"tagged_encoder_sptr_pc_output_buffers_full_var(tagged_encoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"tagged_encoder_sptr_pc_work_time", _wrap_tagged_encoder_sptr_pc_work_time, METH_VARARGS, (char *)"tagged_encoder_sptr_pc_work_time(tagged_encoder_sptr self) -> float"},
	 { (char *)"tagged_encoder_sptr_pc_work_time_avg", _wrap_tagged_encoder_sptr_pc_work_time_avg, METH_VARARGS, (char *)"tagged_encoder_sptr_pc_work_time_avg(tagged_encoder_sptr self) -> float"},
	 { (char *)"tagged_encoder_sptr_pc_work_time_var", _wrap_tagged_encoder_sptr_pc_work_time_var, METH_VARARGS, (char *)"tagged_encoder_sptr_pc_work_time_var(tagged_encoder_sptr self) -> float"},
	 { (char *)"tagged_encoder_sptr_pc_work_time_total", _wrap_tagged_encoder_sptr_pc_work_time_total, METH_VARARGS, (char *)"tagged_encoder_sptr_pc_work_time_total(tagged_encoder_sptr self) -> float"},
	 { (char *)"tagged_encoder_sptr_pc_throughput_avg", _wrap_tagged_encoder_sptr_pc_throughput_avg, METH_VARARGS, (char *)"tagged_encoder_sptr_pc_throughput_avg(tagged_encoder_sptr self) -> float"},
	 { (char *)"tagged_encoder_sptr_set_processor_affinity", (PyCFunction) _wrap_tagged_encoder_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_encoder_sptr_set_processor_affinity(tagged_encoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"tagged_encoder_sptr_unset_processor_affinity", _wrap_tagged_encoder_sptr_unset_processor_affinity, METH_VARARGS, (char *)"tagged_encoder_sptr_unset_processor_affinity(tagged_encoder_sptr self)"},
	 { (char *)"tagged_encoder_sptr_processor_affinity", _wrap_tagged_encoder_sptr_processor_affinity, METH_VARARGS, (char *)"tagged_encoder_sptr_processor_affinity(tagged_encoder_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"tagged_encoder_sptr_active_thread_priority", _wrap_tagged_encoder_sptr_active_thread_priority, METH_VARARGS, (char *)"tagged_encoder_sptr_active_thread_priority(tagged_encoder_sptr self) -> int"},
	 { (char *)"tagged_encoder_sptr_thread_priority", _wrap_tagged_encoder_sptr_thread_priority, METH_VARARGS, (char *)"tagged_encoder_sptr_thread_priority(tagged_encoder_sptr self) -> int"},
	 { (char *)"tagged_encoder_sptr_set_thread_priority", (PyCFunction) _wrap_tagged_encoder_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_encoder_sptr_set_thread_priority(tagged_encoder_sptr self, int priority) -> int"},
	 { (char *)"tagged_encoder_sptr_name", _wrap_tagged_encoder_sptr_name, METH_VARARGS, (char *)"tagged_encoder_sptr_name(tagged_encoder_sptr self) -> std::string"},
	 { (char *)"tagged_encoder_sptr_symbol_name", _wrap_tagged_encoder_sptr_symbol_name, METH_VARARGS, (char *)"tagged_encoder_sptr_symbol_name(tagged_encoder_sptr self) -> std::string"},
	 { (char *)"tagged_encoder_sptr_input_signature", _wrap_tagged_encoder_sptr_input_signature, METH_VARARGS, (char *)"tagged_encoder_sptr_input_signature(tagged_encoder_sptr self) -> io_signature_sptr"},
	 { (char *)"tagged_encoder_sptr_output_signature", _wrap_tagged_encoder_sptr_output_signature, METH_VARARGS, (char *)"tagged_encoder_sptr_output_signature(tagged_encoder_sptr self) -> io_signature_sptr"},
	 { (char *)"tagged_encoder_sptr_unique_id", _wrap_tagged_encoder_sptr_unique_id, METH_VARARGS, (char *)"tagged_encoder_sptr_unique_id(tagged_encoder_sptr self) -> long"},
	 { (char *)"tagged_encoder_sptr_to_basic_block", _wrap_tagged_encoder_sptr_to_basic_block, METH_VARARGS, (char *)"tagged_encoder_sptr_to_basic_block(tagged_encoder_sptr self) -> basic_block_sptr"},
	 { (char *)"tagged_encoder_sptr_check_topology", (PyCFunction) _wrap_tagged_encoder_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_encoder_sptr_check_topology(tagged_encoder_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"tagged_encoder_sptr_alias", _wrap_tagged_encoder_sptr_alias, METH_VARARGS, (char *)"tagged_encoder_sptr_alias(tagged_encoder_sptr self) -> std::string"},
	 { (char *)"tagged_encoder_sptr_set_block_alias", (PyCFunction) _wrap_tagged_encoder_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_encoder_sptr_set_block_alias(tagged_encoder_sptr self, std::string name)"},
	 { (char *)"tagged_encoder_sptr__post", (PyCFunction) _wrap_tagged_encoder_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_encoder_sptr__post(tagged_encoder_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"tagged_encoder_sptr_message_ports_in", _wrap_tagged_encoder_sptr_message_ports_in, METH_VARARGS, (char *)"tagged_encoder_sptr_message_ports_in(tagged_encoder_sptr self) -> swig_int_ptr"},
	 { (char *)"tagged_encoder_sptr_message_ports_out", _wrap_tagged_encoder_sptr_message_ports_out, METH_VARARGS, (char *)"tagged_encoder_sptr_message_ports_out(tagged_encoder_sptr self) -> swig_int_ptr"},
	 { (char *)"tagged_encoder_sptr_message_subscribers", (PyCFunction) _wrap_tagged_encoder_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"tagged_encoder_sptr_message_subscribers(tagged_encoder_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"tagged_encoder_sptr_swigregister", tagged_encoder_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_async_decoder_sptr", _wrap_new_async_decoder_sptr, METH_VARARGS, (char *)"\n"
		"async_decoder_sptr()\n"
		"new_async_decoder_sptr(async_decoder p) -> async_decoder_sptr\n"
		""},
	 { (char *)"async_decoder_sptr___deref__", _wrap_async_decoder_sptr___deref__, METH_VARARGS, (char *)"async_decoder_sptr___deref__(async_decoder_sptr self) -> async_decoder"},
	 { (char *)"delete_async_decoder_sptr", _wrap_delete_async_decoder_sptr, METH_VARARGS, (char *)"delete_async_decoder_sptr(async_decoder_sptr self)"},
	 { (char *)"async_decoder_sptr_make", (PyCFunction) _wrap_async_decoder_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"async_decoder_sptr_make(async_decoder_sptr self, generic_decoder_sptr my_decoder, bool packed=False, bool rev_pack=True, \n"
		"    int mtu=1500) -> async_decoder_sptr\n"
		"\n"
		"Creates the decoder block for use in GNU Radio flowgraphs from a given FEC API object derived from the generic_decoder class.\n"
		"\n"
		"Decodes frames received as async messages over a message port. This decoder deployment expects messages of soft decision symbols in and can produce either packed, PDU messages ( = True) or messages full of unpacked bits ( = False).\n"
		"\n"
		"This decoder works off a full message as one frame or block to decode. The message length is used to calculate the frame length. To support this, the decoder variable used will have had its frame_size set. This block treats that initial frame_size value as the maximum transmission unit (MTU) and will not process frames larger than that after being decoded.\n"
		"\n"
		"The packed PDU form of this deployment is designed to work well with other PDU-based blocks to operate within the processing flow of data packets or frames.\n"
		"\n"
		"Due to differences in how data is packed and processed, this block also offers the ability to change the direction of how bits are packed. All inputs messages are one soft decision per item. By default, the  mode is set to True. Using this setup allows the async block to behave with PDUs in the same operation and format as the tagged stream decoders. That is, putting the same data into both the tagged stream decoder deployment and this with the default setting should produce the same data.\n"
		"\n"
		"Because the block handles data as a full frame per message, this decoder deployment cannot work with any decoders that require history. For example, the gr::fec::code::cc_decoder decoder in streaming mode requires an extra rate*(K-1) bits to complete the decoding, so it would have to wait for the next message to come in and finish processing. Therefore, the streaming mode of the CC decoder is not allowed. The other three modes will work with this deployment since the frame is self-contained for decoding.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Build the PDU-based FEC decoder block from an FECAPI decoder object.\n"
		"\n"
		"Args:\n"
		"    my_decoder : An FECAPI decoder object child of the generic_decoder class.\n"
		"    packed : Sets output to packed bytes if true; otherwise, 1 bit per byte.\n"
		"    rev_pack : If packing bits, should they be reversed?\n"
		"    mtu : The Maximum Transmission Unit (MTU) of the output frame that the block will be able to process. Specified in bytes and defaults to 1500.\n"
		""},
	 { (char *)"async_decoder_sptr_general_work", (PyCFunction) _wrap_async_decoder_sptr_general_work, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"async_decoder_sptr_general_work(async_decoder_sptr self, int noutput_items, gr_vector_int & ninput_items, gr_vector_const_void_star & input_items, \n"
		"    gr_vector_void_star & output_items) -> int\n"
		""},
	 { (char *)"async_decoder_sptr_history", _wrap_async_decoder_sptr_history, METH_VARARGS, (char *)"async_decoder_sptr_history(async_decoder_sptr self) -> unsigned int"},
	 { (char *)"async_decoder_sptr_declare_sample_delay", _wrap_async_decoder_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"async_decoder_sptr_declare_sample_delay(async_decoder_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"async_decoder_sptr_sample_delay", (PyCFunction) _wrap_async_decoder_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"async_decoder_sptr_sample_delay(async_decoder_sptr self, int which) -> unsigned int"},
	 { (char *)"async_decoder_sptr_output_multiple", _wrap_async_decoder_sptr_output_multiple, METH_VARARGS, (char *)"async_decoder_sptr_output_multiple(async_decoder_sptr self) -> int"},
	 { (char *)"async_decoder_sptr_relative_rate", _wrap_async_decoder_sptr_relative_rate, METH_VARARGS, (char *)"async_decoder_sptr_relative_rate(async_decoder_sptr self) -> double"},
	 { (char *)"async_decoder_sptr_start", _wrap_async_decoder_sptr_start, METH_VARARGS, (char *)"async_decoder_sptr_start(async_decoder_sptr self) -> bool"},
	 { (char *)"async_decoder_sptr_stop", _wrap_async_decoder_sptr_stop, METH_VARARGS, (char *)"async_decoder_sptr_stop(async_decoder_sptr self) -> bool"},
	 { (char *)"async_decoder_sptr_nitems_read", (PyCFunction) _wrap_async_decoder_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"async_decoder_sptr_nitems_read(async_decoder_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"async_decoder_sptr_nitems_written", (PyCFunction) _wrap_async_decoder_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"async_decoder_sptr_nitems_written(async_decoder_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"async_decoder_sptr_max_noutput_items", _wrap_async_decoder_sptr_max_noutput_items, METH_VARARGS, (char *)"async_decoder_sptr_max_noutput_items(async_decoder_sptr self) -> int"},
	 { (char *)"async_decoder_sptr_set_max_noutput_items", (PyCFunction) _wrap_async_decoder_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"async_decoder_sptr_set_max_noutput_items(async_decoder_sptr self, int m)"},
	 { (char *)"async_decoder_sptr_unset_max_noutput_items", _wrap_async_decoder_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"async_decoder_sptr_unset_max_noutput_items(async_decoder_sptr self)"},
	 { (char *)"async_decoder_sptr_is_set_max_noutput_items", _wrap_async_decoder_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"async_decoder_sptr_is_set_max_noutput_items(async_decoder_sptr self) -> bool"},
	 { (char *)"async_decoder_sptr_set_min_noutput_items", (PyCFunction) _wrap_async_decoder_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"async_decoder_sptr_set_min_noutput_items(async_decoder_sptr self, int m)"},
	 { (char *)"async_decoder_sptr_min_noutput_items", _wrap_async_decoder_sptr_min_noutput_items, METH_VARARGS, (char *)"async_decoder_sptr_min_noutput_items(async_decoder_sptr self) -> int"},
	 { (char *)"async_decoder_sptr_max_output_buffer", (PyCFunction) _wrap_async_decoder_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"async_decoder_sptr_max_output_buffer(async_decoder_sptr self, int i) -> long"},
	 { (char *)"async_decoder_sptr_set_max_output_buffer", _wrap_async_decoder_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"async_decoder_sptr_set_max_output_buffer(async_decoder_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"async_decoder_sptr_min_output_buffer", (PyCFunction) _wrap_async_decoder_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"async_decoder_sptr_min_output_buffer(async_decoder_sptr self, int i) -> long"},
	 { (char *)"async_decoder_sptr_set_min_output_buffer", _wrap_async_decoder_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"async_decoder_sptr_set_min_output_buffer(async_decoder_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"async_decoder_sptr_pc_noutput_items", _wrap_async_decoder_sptr_pc_noutput_items, METH_VARARGS, (char *)"async_decoder_sptr_pc_noutput_items(async_decoder_sptr self) -> float"},
	 { (char *)"async_decoder_sptr_pc_noutput_items_avg", _wrap_async_decoder_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"async_decoder_sptr_pc_noutput_items_avg(async_decoder_sptr self) -> float"},
	 { (char *)"async_decoder_sptr_pc_noutput_items_var", _wrap_async_decoder_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"async_decoder_sptr_pc_noutput_items_var(async_decoder_sptr self) -> float"},
	 { (char *)"async_decoder_sptr_pc_nproduced", _wrap_async_decoder_sptr_pc_nproduced, METH_VARARGS, (char *)"async_decoder_sptr_pc_nproduced(async_decoder_sptr self) -> float"},
	 { (char *)"async_decoder_sptr_pc_nproduced_avg", _wrap_async_decoder_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"async_decoder_sptr_pc_nproduced_avg(async_decoder_sptr self) -> float"},
	 { (char *)"async_decoder_sptr_pc_nproduced_var", _wrap_async_decoder_sptr_pc_nproduced_var, METH_VARARGS, (char *)"async_decoder_sptr_pc_nproduced_var(async_decoder_sptr self) -> float"},
	 { (char *)"async_decoder_sptr_pc_input_buffers_full", _wrap_async_decoder_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"async_decoder_sptr_pc_input_buffers_full(async_decoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"async_decoder_sptr_pc_input_buffers_full_avg", _wrap_async_decoder_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"async_decoder_sptr_pc_input_buffers_full_avg(async_decoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"async_decoder_sptr_pc_input_buffers_full_var", _wrap_async_decoder_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"async_decoder_sptr_pc_input_buffers_full_var(async_decoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"async_decoder_sptr_pc_output_buffers_full", _wrap_async_decoder_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"async_decoder_sptr_pc_output_buffers_full(async_decoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"async_decoder_sptr_pc_output_buffers_full_avg", _wrap_async_decoder_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"async_decoder_sptr_pc_output_buffers_full_avg(async_decoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"async_decoder_sptr_pc_output_buffers_full_var", _wrap_async_decoder_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"async_decoder_sptr_pc_output_buffers_full_var(async_decoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"async_decoder_sptr_pc_work_time", _wrap_async_decoder_sptr_pc_work_time, METH_VARARGS, (char *)"async_decoder_sptr_pc_work_time(async_decoder_sptr self) -> float"},
	 { (char *)"async_decoder_sptr_pc_work_time_avg", _wrap_async_decoder_sptr_pc_work_time_avg, METH_VARARGS, (char *)"async_decoder_sptr_pc_work_time_avg(async_decoder_sptr self) -> float"},
	 { (char *)"async_decoder_sptr_pc_work_time_var", _wrap_async_decoder_sptr_pc_work_time_var, METH_VARARGS, (char *)"async_decoder_sptr_pc_work_time_var(async_decoder_sptr self) -> float"},
	 { (char *)"async_decoder_sptr_pc_work_time_total", _wrap_async_decoder_sptr_pc_work_time_total, METH_VARARGS, (char *)"async_decoder_sptr_pc_work_time_total(async_decoder_sptr self) -> float"},
	 { (char *)"async_decoder_sptr_pc_throughput_avg", _wrap_async_decoder_sptr_pc_throughput_avg, METH_VARARGS, (char *)"async_decoder_sptr_pc_throughput_avg(async_decoder_sptr self) -> float"},
	 { (char *)"async_decoder_sptr_set_processor_affinity", (PyCFunction) _wrap_async_decoder_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"async_decoder_sptr_set_processor_affinity(async_decoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"async_decoder_sptr_unset_processor_affinity", _wrap_async_decoder_sptr_unset_processor_affinity, METH_VARARGS, (char *)"async_decoder_sptr_unset_processor_affinity(async_decoder_sptr self)"},
	 { (char *)"async_decoder_sptr_processor_affinity", _wrap_async_decoder_sptr_processor_affinity, METH_VARARGS, (char *)"async_decoder_sptr_processor_affinity(async_decoder_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"async_decoder_sptr_active_thread_priority", _wrap_async_decoder_sptr_active_thread_priority, METH_VARARGS, (char *)"async_decoder_sptr_active_thread_priority(async_decoder_sptr self) -> int"},
	 { (char *)"async_decoder_sptr_thread_priority", _wrap_async_decoder_sptr_thread_priority, METH_VARARGS, (char *)"async_decoder_sptr_thread_priority(async_decoder_sptr self) -> int"},
	 { (char *)"async_decoder_sptr_set_thread_priority", (PyCFunction) _wrap_async_decoder_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"async_decoder_sptr_set_thread_priority(async_decoder_sptr self, int priority) -> int"},
	 { (char *)"async_decoder_sptr_name", _wrap_async_decoder_sptr_name, METH_VARARGS, (char *)"async_decoder_sptr_name(async_decoder_sptr self) -> std::string"},
	 { (char *)"async_decoder_sptr_symbol_name", _wrap_async_decoder_sptr_symbol_name, METH_VARARGS, (char *)"async_decoder_sptr_symbol_name(async_decoder_sptr self) -> std::string"},
	 { (char *)"async_decoder_sptr_input_signature", _wrap_async_decoder_sptr_input_signature, METH_VARARGS, (char *)"async_decoder_sptr_input_signature(async_decoder_sptr self) -> io_signature_sptr"},
	 { (char *)"async_decoder_sptr_output_signature", _wrap_async_decoder_sptr_output_signature, METH_VARARGS, (char *)"async_decoder_sptr_output_signature(async_decoder_sptr self) -> io_signature_sptr"},
	 { (char *)"async_decoder_sptr_unique_id", _wrap_async_decoder_sptr_unique_id, METH_VARARGS, (char *)"async_decoder_sptr_unique_id(async_decoder_sptr self) -> long"},
	 { (char *)"async_decoder_sptr_to_basic_block", _wrap_async_decoder_sptr_to_basic_block, METH_VARARGS, (char *)"async_decoder_sptr_to_basic_block(async_decoder_sptr self) -> basic_block_sptr"},
	 { (char *)"async_decoder_sptr_check_topology", (PyCFunction) _wrap_async_decoder_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"async_decoder_sptr_check_topology(async_decoder_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"async_decoder_sptr_alias", _wrap_async_decoder_sptr_alias, METH_VARARGS, (char *)"async_decoder_sptr_alias(async_decoder_sptr self) -> std::string"},
	 { (char *)"async_decoder_sptr_set_block_alias", (PyCFunction) _wrap_async_decoder_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"async_decoder_sptr_set_block_alias(async_decoder_sptr self, std::string name)"},
	 { (char *)"async_decoder_sptr__post", (PyCFunction) _wrap_async_decoder_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"async_decoder_sptr__post(async_decoder_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"async_decoder_sptr_message_ports_in", _wrap_async_decoder_sptr_message_ports_in, METH_VARARGS, (char *)"async_decoder_sptr_message_ports_in(async_decoder_sptr self) -> swig_int_ptr"},
	 { (char *)"async_decoder_sptr_message_ports_out", _wrap_async_decoder_sptr_message_ports_out, METH_VARARGS, (char *)"async_decoder_sptr_message_ports_out(async_decoder_sptr self) -> swig_int_ptr"},
	 { (char *)"async_decoder_sptr_message_subscribers", (PyCFunction) _wrap_async_decoder_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"async_decoder_sptr_message_subscribers(async_decoder_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"async_decoder_sptr_swigregister", async_decoder_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_async_encoder_sptr", _wrap_new_async_encoder_sptr, METH_VARARGS, (char *)"\n"
		"async_encoder_sptr()\n"
		"new_async_encoder_sptr(async_encoder p) -> async_encoder_sptr\n"
		""},
	 { (char *)"async_encoder_sptr___deref__", _wrap_async_encoder_sptr___deref__, METH_VARARGS, (char *)"async_encoder_sptr___deref__(async_encoder_sptr self) -> async_encoder"},
	 { (char *)"delete_async_encoder_sptr", _wrap_delete_async_encoder_sptr, METH_VARARGS, (char *)"delete_async_encoder_sptr(async_encoder_sptr self)"},
	 { (char *)"async_encoder_sptr_make", (PyCFunction) _wrap_async_encoder_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"async_encoder_sptr_make(async_encoder_sptr self, generic_encoder_sptr my_encoder, bool packed=False, bool rev_unpack=True, \n"
		"    bool rev_pack=True, int mtu=1500) -> async_encoder_sptr\n"
		"\n"
		"Creates the encoder block for use in GNU Radio flowgraphs with async message from a given FEC API object derived from the generic_encoder class.\n"
		"\n"
		"Encodes frames received as async messages or as a PDU over a message port. This encoder works off a full message as one frame or block to encode. The message length is used as the frame length. To support this, the encoder variable used will have had its frame_size set. This block treats that initial frame_size value as the maximum transmission unit (MTU) and will not process frames larger than that.\n"
		"\n"
		"This deployment works off messages and expects them to either be messages full of unpacked bits or PDU messages, which means full bytes of a frame from the higher layers, including things like headers, tails, CRC check bytes, etc. For handling PDUs, set the  option of this deployment block to True. The block will then use the FEC API to properly unpack the bits from the PDU, pass it through the encoder, and repack them to output the PDUs for the next stage of processing.\n"
		"\n"
		"The packed PDU form of this deployment is designed to work well with other PDU-based blocks to operate within the processing flow of data packets or frames.\n"
		"\n"
		"Due to differences in how data is packed and processed, this block also offers the ability to change the direction of how bits are unpacked and packed, where reading or writing from the LSB or MSB. By default, the  and  modes are set to True. Using this setup allows the async block to behave with PDUs in the same operation and format as the tagged stream encoders. That is, putting the same data into both the tagged stream encoder deployment and this with these default settings should produce the same data.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Build the PDU-based FEC encoder block from an FECAPI encoder object.\n"
		"\n"
		"Args:\n"
		"    my_encoder : An FECAPI encoder object child of the generic_encoder class.\n"
		"    packed : True if working on packed bytes (like PDUs).\n"
		"    rev_unpack : Reverse the unpacking order from input bytes to bits.\n"
		"    rev_pack : Reverse the packing order from bits to output bytes.\n"
		"    mtu : The Maximum Transmission Unit (MTU) of the input frame that the block will be able to process. Specified in bytes and defaults to 1500.\n"
		""},
	 { (char *)"async_encoder_sptr_general_work", (PyCFunction) _wrap_async_encoder_sptr_general_work, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"async_encoder_sptr_general_work(async_encoder_sptr self, int noutput_items, gr_vector_int & ninput_items, gr_vector_const_void_star & input_items, \n"
		"    gr_vector_void_star & output_items) -> int\n"
		""},
	 { (char *)"async_encoder_sptr_history", _wrap_async_encoder_sptr_history, METH_VARARGS, (char *)"async_encoder_sptr_history(async_encoder_sptr self) -> unsigned int"},
	 { (char *)"async_encoder_sptr_declare_sample_delay", _wrap_async_encoder_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"async_encoder_sptr_declare_sample_delay(async_encoder_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"async_encoder_sptr_sample_delay", (PyCFunction) _wrap_async_encoder_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"async_encoder_sptr_sample_delay(async_encoder_sptr self, int which) -> unsigned int"},
	 { (char *)"async_encoder_sptr_output_multiple", _wrap_async_encoder_sptr_output_multiple, METH_VARARGS, (char *)"async_encoder_sptr_output_multiple(async_encoder_sptr self) -> int"},
	 { (char *)"async_encoder_sptr_relative_rate", _wrap_async_encoder_sptr_relative_rate, METH_VARARGS, (char *)"async_encoder_sptr_relative_rate(async_encoder_sptr self) -> double"},
	 { (char *)"async_encoder_sptr_start", _wrap_async_encoder_sptr_start, METH_VARARGS, (char *)"async_encoder_sptr_start(async_encoder_sptr self) -> bool"},
	 { (char *)"async_encoder_sptr_stop", _wrap_async_encoder_sptr_stop, METH_VARARGS, (char *)"async_encoder_sptr_stop(async_encoder_sptr self) -> bool"},
	 { (char *)"async_encoder_sptr_nitems_read", (PyCFunction) _wrap_async_encoder_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"async_encoder_sptr_nitems_read(async_encoder_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"async_encoder_sptr_nitems_written", (PyCFunction) _wrap_async_encoder_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"async_encoder_sptr_nitems_written(async_encoder_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"async_encoder_sptr_max_noutput_items", _wrap_async_encoder_sptr_max_noutput_items, METH_VARARGS, (char *)"async_encoder_sptr_max_noutput_items(async_encoder_sptr self) -> int"},
	 { (char *)"async_encoder_sptr_set_max_noutput_items", (PyCFunction) _wrap_async_encoder_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"async_encoder_sptr_set_max_noutput_items(async_encoder_sptr self, int m)"},
	 { (char *)"async_encoder_sptr_unset_max_noutput_items", _wrap_async_encoder_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"async_encoder_sptr_unset_max_noutput_items(async_encoder_sptr self)"},
	 { (char *)"async_encoder_sptr_is_set_max_noutput_items", _wrap_async_encoder_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"async_encoder_sptr_is_set_max_noutput_items(async_encoder_sptr self) -> bool"},
	 { (char *)"async_encoder_sptr_set_min_noutput_items", (PyCFunction) _wrap_async_encoder_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"async_encoder_sptr_set_min_noutput_items(async_encoder_sptr self, int m)"},
	 { (char *)"async_encoder_sptr_min_noutput_items", _wrap_async_encoder_sptr_min_noutput_items, METH_VARARGS, (char *)"async_encoder_sptr_min_noutput_items(async_encoder_sptr self) -> int"},
	 { (char *)"async_encoder_sptr_max_output_buffer", (PyCFunction) _wrap_async_encoder_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"async_encoder_sptr_max_output_buffer(async_encoder_sptr self, int i) -> long"},
	 { (char *)"async_encoder_sptr_set_max_output_buffer", _wrap_async_encoder_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"async_encoder_sptr_set_max_output_buffer(async_encoder_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"async_encoder_sptr_min_output_buffer", (PyCFunction) _wrap_async_encoder_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"async_encoder_sptr_min_output_buffer(async_encoder_sptr self, int i) -> long"},
	 { (char *)"async_encoder_sptr_set_min_output_buffer", _wrap_async_encoder_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"async_encoder_sptr_set_min_output_buffer(async_encoder_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"async_encoder_sptr_pc_noutput_items", _wrap_async_encoder_sptr_pc_noutput_items, METH_VARARGS, (char *)"async_encoder_sptr_pc_noutput_items(async_encoder_sptr self) -> float"},
	 { (char *)"async_encoder_sptr_pc_noutput_items_avg", _wrap_async_encoder_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"async_encoder_sptr_pc_noutput_items_avg(async_encoder_sptr self) -> float"},
	 { (char *)"async_encoder_sptr_pc_noutput_items_var", _wrap_async_encoder_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"async_encoder_sptr_pc_noutput_items_var(async_encoder_sptr self) -> float"},
	 { (char *)"async_encoder_sptr_pc_nproduced", _wrap_async_encoder_sptr_pc_nproduced, METH_VARARGS, (char *)"async_encoder_sptr_pc_nproduced(async_encoder_sptr self) -> float"},
	 { (char *)"async_encoder_sptr_pc_nproduced_avg", _wrap_async_encoder_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"async_encoder_sptr_pc_nproduced_avg(async_encoder_sptr self) -> float"},
	 { (char *)"async_encoder_sptr_pc_nproduced_var", _wrap_async_encoder_sptr_pc_nproduced_var, METH_VARARGS, (char *)"async_encoder_sptr_pc_nproduced_var(async_encoder_sptr self) -> float"},
	 { (char *)"async_encoder_sptr_pc_input_buffers_full", _wrap_async_encoder_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"async_encoder_sptr_pc_input_buffers_full(async_encoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"async_encoder_sptr_pc_input_buffers_full_avg", _wrap_async_encoder_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"async_encoder_sptr_pc_input_buffers_full_avg(async_encoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"async_encoder_sptr_pc_input_buffers_full_var", _wrap_async_encoder_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"async_encoder_sptr_pc_input_buffers_full_var(async_encoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"async_encoder_sptr_pc_output_buffers_full", _wrap_async_encoder_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"async_encoder_sptr_pc_output_buffers_full(async_encoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"async_encoder_sptr_pc_output_buffers_full_avg", _wrap_async_encoder_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"async_encoder_sptr_pc_output_buffers_full_avg(async_encoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"async_encoder_sptr_pc_output_buffers_full_var", _wrap_async_encoder_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"async_encoder_sptr_pc_output_buffers_full_var(async_encoder_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"async_encoder_sptr_pc_work_time", _wrap_async_encoder_sptr_pc_work_time, METH_VARARGS, (char *)"async_encoder_sptr_pc_work_time(async_encoder_sptr self) -> float"},
	 { (char *)"async_encoder_sptr_pc_work_time_avg", _wrap_async_encoder_sptr_pc_work_time_avg, METH_VARARGS, (char *)"async_encoder_sptr_pc_work_time_avg(async_encoder_sptr self) -> float"},
	 { (char *)"async_encoder_sptr_pc_work_time_var", _wrap_async_encoder_sptr_pc_work_time_var, METH_VARARGS, (char *)"async_encoder_sptr_pc_work_time_var(async_encoder_sptr self) -> float"},
	 { (char *)"async_encoder_sptr_pc_work_time_total", _wrap_async_encoder_sptr_pc_work_time_total, METH_VARARGS, (char *)"async_encoder_sptr_pc_work_time_total(async_encoder_sptr self) -> float"},
	 { (char *)"async_encoder_sptr_pc_throughput_avg", _wrap_async_encoder_sptr_pc_throughput_avg, METH_VARARGS, (char *)"async_encoder_sptr_pc_throughput_avg(async_encoder_sptr self) -> float"},
	 { (char *)"async_encoder_sptr_set_processor_affinity", (PyCFunction) _wrap_async_encoder_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"async_encoder_sptr_set_processor_affinity(async_encoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"async_encoder_sptr_unset_processor_affinity", _wrap_async_encoder_sptr_unset_processor_affinity, METH_VARARGS, (char *)"async_encoder_sptr_unset_processor_affinity(async_encoder_sptr self)"},
	 { (char *)"async_encoder_sptr_processor_affinity", _wrap_async_encoder_sptr_processor_affinity, METH_VARARGS, (char *)"async_encoder_sptr_processor_affinity(async_encoder_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"async_encoder_sptr_active_thread_priority", _wrap_async_encoder_sptr_active_thread_priority, METH_VARARGS, (char *)"async_encoder_sptr_active_thread_priority(async_encoder_sptr self) -> int"},
	 { (char *)"async_encoder_sptr_thread_priority", _wrap_async_encoder_sptr_thread_priority, METH_VARARGS, (char *)"async_encoder_sptr_thread_priority(async_encoder_sptr self) -> int"},
	 { (char *)"async_encoder_sptr_set_thread_priority", (PyCFunction) _wrap_async_encoder_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"async_encoder_sptr_set_thread_priority(async_encoder_sptr self, int priority) -> int"},
	 { (char *)"async_encoder_sptr_name", _wrap_async_encoder_sptr_name, METH_VARARGS, (char *)"async_encoder_sptr_name(async_encoder_sptr self) -> std::string"},
	 { (char *)"async_encoder_sptr_symbol_name", _wrap_async_encoder_sptr_symbol_name, METH_VARARGS, (char *)"async_encoder_sptr_symbol_name(async_encoder_sptr self) -> std::string"},
	 { (char *)"async_encoder_sptr_input_signature", _wrap_async_encoder_sptr_input_signature, METH_VARARGS, (char *)"async_encoder_sptr_input_signature(async_encoder_sptr self) -> io_signature_sptr"},
	 { (char *)"async_encoder_sptr_output_signature", _wrap_async_encoder_sptr_output_signature, METH_VARARGS, (char *)"async_encoder_sptr_output_signature(async_encoder_sptr self) -> io_signature_sptr"},
	 { (char *)"async_encoder_sptr_unique_id", _wrap_async_encoder_sptr_unique_id, METH_VARARGS, (char *)"async_encoder_sptr_unique_id(async_encoder_sptr self) -> long"},
	 { (char *)"async_encoder_sptr_to_basic_block", _wrap_async_encoder_sptr_to_basic_block, METH_VARARGS, (char *)"async_encoder_sptr_to_basic_block(async_encoder_sptr self) -> basic_block_sptr"},
	 { (char *)"async_encoder_sptr_check_topology", (PyCFunction) _wrap_async_encoder_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"async_encoder_sptr_check_topology(async_encoder_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"async_encoder_sptr_alias", _wrap_async_encoder_sptr_alias, METH_VARARGS, (char *)"async_encoder_sptr_alias(async_encoder_sptr self) -> std::string"},
	 { (char *)"async_encoder_sptr_set_block_alias", (PyCFunction) _wrap_async_encoder_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"async_encoder_sptr_set_block_alias(async_encoder_sptr self, std::string name)"},
	 { (char *)"async_encoder_sptr__post", (PyCFunction) _wrap_async_encoder_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"async_encoder_sptr__post(async_encoder_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"async_encoder_sptr_message_ports_in", _wrap_async_encoder_sptr_message_ports_in, METH_VARARGS, (char *)"async_encoder_sptr_message_ports_in(async_encoder_sptr self) -> swig_int_ptr"},
	 { (char *)"async_encoder_sptr_message_ports_out", _wrap_async_encoder_sptr_message_ports_out, METH_VARARGS, (char *)"async_encoder_sptr_message_ports_out(async_encoder_sptr self) -> swig_int_ptr"},
	 { (char *)"async_encoder_sptr_message_subscribers", (PyCFunction) _wrap_async_encoder_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"async_encoder_sptr_message_subscribers(async_encoder_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"async_encoder_sptr_swigregister", async_encoder_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_decode_ccsds_27_fb_sptr", _wrap_new_decode_ccsds_27_fb_sptr, METH_VARARGS, (char *)"\n"
		"decode_ccsds_27_fb_sptr()\n"
		"new_decode_ccsds_27_fb_sptr(decode_ccsds_27_fb p) -> decode_ccsds_27_fb_sptr\n"
		""},
	 { (char *)"decode_ccsds_27_fb_sptr___deref__", _wrap_decode_ccsds_27_fb_sptr___deref__, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr___deref__(decode_ccsds_27_fb_sptr self) -> decode_ccsds_27_fb"},
	 { (char *)"delete_decode_ccsds_27_fb_sptr", _wrap_delete_decode_ccsds_27_fb_sptr, METH_VARARGS, (char *)"delete_decode_ccsds_27_fb_sptr(decode_ccsds_27_fb_sptr self)"},
	 { (char *)"decode_ccsds_27_fb_sptr_make", _wrap_decode_ccsds_27_fb_sptr_make, METH_VARARGS, (char *)"\n"
		"decode_ccsds_27_fb_sptr_make(decode_ccsds_27_fb_sptr self) -> decode_ccsds_27_fb_sptr\n"
		"\n"
		"A rate 1/2, k=7 convolutional decoder for the CCSDS standard.\n"
		"\n"
		"This block performs soft-decision convolutional decoding using the Viterbi algorithm.\n"
		"\n"
		"The input is a stream of (possibly noise corrupted) floating point values nominally spanning [-1.0, 1.0], representing the encoded channel symbols 0 (-1.0) and 1 (1.0), with erased symbols at 0.0.\n"
		"\n"
		"The output is MSB first packed bytes of decoded values.\n"
		"\n"
		"As a rate 1/2 code, there will be one output byte for every 16 input symbols.\n"
		"\n"
		"This block is designed for continuous data streaming, not packetized data. The first 32 bits out will be zeroes, with the output delayed four bytes from the corresponding inputs.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"\n"
		""},
	 { (char *)"decode_ccsds_27_fb_sptr_history", _wrap_decode_ccsds_27_fb_sptr_history, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_history(decode_ccsds_27_fb_sptr self) -> unsigned int"},
	 { (char *)"decode_ccsds_27_fb_sptr_declare_sample_delay", _wrap_decode_ccsds_27_fb_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"decode_ccsds_27_fb_sptr_declare_sample_delay(decode_ccsds_27_fb_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"decode_ccsds_27_fb_sptr_sample_delay", (PyCFunction) _wrap_decode_ccsds_27_fb_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"decode_ccsds_27_fb_sptr_sample_delay(decode_ccsds_27_fb_sptr self, int which) -> unsigned int"},
	 { (char *)"decode_ccsds_27_fb_sptr_output_multiple", _wrap_decode_ccsds_27_fb_sptr_output_multiple, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_output_multiple(decode_ccsds_27_fb_sptr self) -> int"},
	 { (char *)"decode_ccsds_27_fb_sptr_relative_rate", _wrap_decode_ccsds_27_fb_sptr_relative_rate, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_relative_rate(decode_ccsds_27_fb_sptr self) -> double"},
	 { (char *)"decode_ccsds_27_fb_sptr_start", _wrap_decode_ccsds_27_fb_sptr_start, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_start(decode_ccsds_27_fb_sptr self) -> bool"},
	 { (char *)"decode_ccsds_27_fb_sptr_stop", _wrap_decode_ccsds_27_fb_sptr_stop, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_stop(decode_ccsds_27_fb_sptr self) -> bool"},
	 { (char *)"decode_ccsds_27_fb_sptr_nitems_read", (PyCFunction) _wrap_decode_ccsds_27_fb_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"decode_ccsds_27_fb_sptr_nitems_read(decode_ccsds_27_fb_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"decode_ccsds_27_fb_sptr_nitems_written", (PyCFunction) _wrap_decode_ccsds_27_fb_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"decode_ccsds_27_fb_sptr_nitems_written(decode_ccsds_27_fb_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"decode_ccsds_27_fb_sptr_max_noutput_items", _wrap_decode_ccsds_27_fb_sptr_max_noutput_items, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_max_noutput_items(decode_ccsds_27_fb_sptr self) -> int"},
	 { (char *)"decode_ccsds_27_fb_sptr_set_max_noutput_items", (PyCFunction) _wrap_decode_ccsds_27_fb_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"decode_ccsds_27_fb_sptr_set_max_noutput_items(decode_ccsds_27_fb_sptr self, int m)"},
	 { (char *)"decode_ccsds_27_fb_sptr_unset_max_noutput_items", _wrap_decode_ccsds_27_fb_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_unset_max_noutput_items(decode_ccsds_27_fb_sptr self)"},
	 { (char *)"decode_ccsds_27_fb_sptr_is_set_max_noutput_items", _wrap_decode_ccsds_27_fb_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_is_set_max_noutput_items(decode_ccsds_27_fb_sptr self) -> bool"},
	 { (char *)"decode_ccsds_27_fb_sptr_set_min_noutput_items", (PyCFunction) _wrap_decode_ccsds_27_fb_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"decode_ccsds_27_fb_sptr_set_min_noutput_items(decode_ccsds_27_fb_sptr self, int m)"},
	 { (char *)"decode_ccsds_27_fb_sptr_min_noutput_items", _wrap_decode_ccsds_27_fb_sptr_min_noutput_items, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_min_noutput_items(decode_ccsds_27_fb_sptr self) -> int"},
	 { (char *)"decode_ccsds_27_fb_sptr_max_output_buffer", (PyCFunction) _wrap_decode_ccsds_27_fb_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"decode_ccsds_27_fb_sptr_max_output_buffer(decode_ccsds_27_fb_sptr self, int i) -> long"},
	 { (char *)"decode_ccsds_27_fb_sptr_set_max_output_buffer", _wrap_decode_ccsds_27_fb_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"decode_ccsds_27_fb_sptr_set_max_output_buffer(decode_ccsds_27_fb_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"decode_ccsds_27_fb_sptr_min_output_buffer", (PyCFunction) _wrap_decode_ccsds_27_fb_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"decode_ccsds_27_fb_sptr_min_output_buffer(decode_ccsds_27_fb_sptr self, int i) -> long"},
	 { (char *)"decode_ccsds_27_fb_sptr_set_min_output_buffer", _wrap_decode_ccsds_27_fb_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"decode_ccsds_27_fb_sptr_set_min_output_buffer(decode_ccsds_27_fb_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"decode_ccsds_27_fb_sptr_pc_noutput_items", _wrap_decode_ccsds_27_fb_sptr_pc_noutput_items, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_pc_noutput_items(decode_ccsds_27_fb_sptr self) -> float"},
	 { (char *)"decode_ccsds_27_fb_sptr_pc_noutput_items_avg", _wrap_decode_ccsds_27_fb_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_pc_noutput_items_avg(decode_ccsds_27_fb_sptr self) -> float"},
	 { (char *)"decode_ccsds_27_fb_sptr_pc_noutput_items_var", _wrap_decode_ccsds_27_fb_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_pc_noutput_items_var(decode_ccsds_27_fb_sptr self) -> float"},
	 { (char *)"decode_ccsds_27_fb_sptr_pc_nproduced", _wrap_decode_ccsds_27_fb_sptr_pc_nproduced, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_pc_nproduced(decode_ccsds_27_fb_sptr self) -> float"},
	 { (char *)"decode_ccsds_27_fb_sptr_pc_nproduced_avg", _wrap_decode_ccsds_27_fb_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_pc_nproduced_avg(decode_ccsds_27_fb_sptr self) -> float"},
	 { (char *)"decode_ccsds_27_fb_sptr_pc_nproduced_var", _wrap_decode_ccsds_27_fb_sptr_pc_nproduced_var, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_pc_nproduced_var(decode_ccsds_27_fb_sptr self) -> float"},
	 { (char *)"decode_ccsds_27_fb_sptr_pc_input_buffers_full", _wrap_decode_ccsds_27_fb_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"decode_ccsds_27_fb_sptr_pc_input_buffers_full(decode_ccsds_27_fb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"decode_ccsds_27_fb_sptr_pc_input_buffers_full_avg", _wrap_decode_ccsds_27_fb_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"decode_ccsds_27_fb_sptr_pc_input_buffers_full_avg(decode_ccsds_27_fb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"decode_ccsds_27_fb_sptr_pc_input_buffers_full_var", _wrap_decode_ccsds_27_fb_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"decode_ccsds_27_fb_sptr_pc_input_buffers_full_var(decode_ccsds_27_fb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"decode_ccsds_27_fb_sptr_pc_output_buffers_full", _wrap_decode_ccsds_27_fb_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"decode_ccsds_27_fb_sptr_pc_output_buffers_full(decode_ccsds_27_fb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"decode_ccsds_27_fb_sptr_pc_output_buffers_full_avg", _wrap_decode_ccsds_27_fb_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"decode_ccsds_27_fb_sptr_pc_output_buffers_full_avg(decode_ccsds_27_fb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"decode_ccsds_27_fb_sptr_pc_output_buffers_full_var", _wrap_decode_ccsds_27_fb_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"decode_ccsds_27_fb_sptr_pc_output_buffers_full_var(decode_ccsds_27_fb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"decode_ccsds_27_fb_sptr_pc_work_time", _wrap_decode_ccsds_27_fb_sptr_pc_work_time, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_pc_work_time(decode_ccsds_27_fb_sptr self) -> float"},
	 { (char *)"decode_ccsds_27_fb_sptr_pc_work_time_avg", _wrap_decode_ccsds_27_fb_sptr_pc_work_time_avg, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_pc_work_time_avg(decode_ccsds_27_fb_sptr self) -> float"},
	 { (char *)"decode_ccsds_27_fb_sptr_pc_work_time_var", _wrap_decode_ccsds_27_fb_sptr_pc_work_time_var, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_pc_work_time_var(decode_ccsds_27_fb_sptr self) -> float"},
	 { (char *)"decode_ccsds_27_fb_sptr_pc_work_time_total", _wrap_decode_ccsds_27_fb_sptr_pc_work_time_total, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_pc_work_time_total(decode_ccsds_27_fb_sptr self) -> float"},
	 { (char *)"decode_ccsds_27_fb_sptr_pc_throughput_avg", _wrap_decode_ccsds_27_fb_sptr_pc_throughput_avg, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_pc_throughput_avg(decode_ccsds_27_fb_sptr self) -> float"},
	 { (char *)"decode_ccsds_27_fb_sptr_set_processor_affinity", (PyCFunction) _wrap_decode_ccsds_27_fb_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"decode_ccsds_27_fb_sptr_set_processor_affinity(decode_ccsds_27_fb_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"decode_ccsds_27_fb_sptr_unset_processor_affinity", _wrap_decode_ccsds_27_fb_sptr_unset_processor_affinity, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_unset_processor_affinity(decode_ccsds_27_fb_sptr self)"},
	 { (char *)"decode_ccsds_27_fb_sptr_processor_affinity", _wrap_decode_ccsds_27_fb_sptr_processor_affinity, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_processor_affinity(decode_ccsds_27_fb_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"decode_ccsds_27_fb_sptr_active_thread_priority", _wrap_decode_ccsds_27_fb_sptr_active_thread_priority, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_active_thread_priority(decode_ccsds_27_fb_sptr self) -> int"},
	 { (char *)"decode_ccsds_27_fb_sptr_thread_priority", _wrap_decode_ccsds_27_fb_sptr_thread_priority, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_thread_priority(decode_ccsds_27_fb_sptr self) -> int"},
	 { (char *)"decode_ccsds_27_fb_sptr_set_thread_priority", (PyCFunction) _wrap_decode_ccsds_27_fb_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"decode_ccsds_27_fb_sptr_set_thread_priority(decode_ccsds_27_fb_sptr self, int priority) -> int"},
	 { (char *)"decode_ccsds_27_fb_sptr_name", _wrap_decode_ccsds_27_fb_sptr_name, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_name(decode_ccsds_27_fb_sptr self) -> std::string"},
	 { (char *)"decode_ccsds_27_fb_sptr_symbol_name", _wrap_decode_ccsds_27_fb_sptr_symbol_name, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_symbol_name(decode_ccsds_27_fb_sptr self) -> std::string"},
	 { (char *)"decode_ccsds_27_fb_sptr_input_signature", _wrap_decode_ccsds_27_fb_sptr_input_signature, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_input_signature(decode_ccsds_27_fb_sptr self) -> io_signature_sptr"},
	 { (char *)"decode_ccsds_27_fb_sptr_output_signature", _wrap_decode_ccsds_27_fb_sptr_output_signature, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_output_signature(decode_ccsds_27_fb_sptr self) -> io_signature_sptr"},
	 { (char *)"decode_ccsds_27_fb_sptr_unique_id", _wrap_decode_ccsds_27_fb_sptr_unique_id, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_unique_id(decode_ccsds_27_fb_sptr self) -> long"},
	 { (char *)"decode_ccsds_27_fb_sptr_to_basic_block", _wrap_decode_ccsds_27_fb_sptr_to_basic_block, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_to_basic_block(decode_ccsds_27_fb_sptr self) -> basic_block_sptr"},
	 { (char *)"decode_ccsds_27_fb_sptr_check_topology", (PyCFunction) _wrap_decode_ccsds_27_fb_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"decode_ccsds_27_fb_sptr_check_topology(decode_ccsds_27_fb_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"decode_ccsds_27_fb_sptr_alias", _wrap_decode_ccsds_27_fb_sptr_alias, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_alias(decode_ccsds_27_fb_sptr self) -> std::string"},
	 { (char *)"decode_ccsds_27_fb_sptr_set_block_alias", (PyCFunction) _wrap_decode_ccsds_27_fb_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"decode_ccsds_27_fb_sptr_set_block_alias(decode_ccsds_27_fb_sptr self, std::string name)"},
	 { (char *)"decode_ccsds_27_fb_sptr__post", (PyCFunction) _wrap_decode_ccsds_27_fb_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"decode_ccsds_27_fb_sptr__post(decode_ccsds_27_fb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"decode_ccsds_27_fb_sptr_message_ports_in", _wrap_decode_ccsds_27_fb_sptr_message_ports_in, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_message_ports_in(decode_ccsds_27_fb_sptr self) -> swig_int_ptr"},
	 { (char *)"decode_ccsds_27_fb_sptr_message_ports_out", _wrap_decode_ccsds_27_fb_sptr_message_ports_out, METH_VARARGS, (char *)"decode_ccsds_27_fb_sptr_message_ports_out(decode_ccsds_27_fb_sptr self) -> swig_int_ptr"},
	 { (char *)"decode_ccsds_27_fb_sptr_message_subscribers", (PyCFunction) _wrap_decode_ccsds_27_fb_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"decode_ccsds_27_fb_sptr_message_subscribers(decode_ccsds_27_fb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"decode_ccsds_27_fb_sptr_swigregister", decode_ccsds_27_fb_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_encode_ccsds_27_bb_sptr", _wrap_new_encode_ccsds_27_bb_sptr, METH_VARARGS, (char *)"\n"
		"encode_ccsds_27_bb_sptr()\n"
		"new_encode_ccsds_27_bb_sptr(encode_ccsds_27_bb p) -> encode_ccsds_27_bb_sptr\n"
		""},
	 { (char *)"encode_ccsds_27_bb_sptr___deref__", _wrap_encode_ccsds_27_bb_sptr___deref__, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr___deref__(encode_ccsds_27_bb_sptr self) -> encode_ccsds_27_bb"},
	 { (char *)"delete_encode_ccsds_27_bb_sptr", _wrap_delete_encode_ccsds_27_bb_sptr, METH_VARARGS, (char *)"delete_encode_ccsds_27_bb_sptr(encode_ccsds_27_bb_sptr self)"},
	 { (char *)"encode_ccsds_27_bb_sptr_make", _wrap_encode_ccsds_27_bb_sptr_make, METH_VARARGS, (char *)"\n"
		"encode_ccsds_27_bb_sptr_make(encode_ccsds_27_bb_sptr self) -> encode_ccsds_27_bb_sptr\n"
		"\n"
		"A rate 1/2, k=7 convolutional encoder for the CCSDS standard.\n"
		"\n"
		"This block performs convolutional encoding using the CCSDS standard polynomial (\"Voyager\").\n"
		"\n"
		"The input is an MSB first packed stream of bits.\n"
		"\n"
		"The output is a stream of symbols 0 or 1 representing the encoded data.\n"
		"\n"
		"As a rate 1/2 code, there will be 16 output symbols for every input byte.\n"
		"\n"
		"This block is designed for continuous data streaming, not packetized data. There is no provision to \"flush\" the encoder.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"\n"
		""},
	 { (char *)"encode_ccsds_27_bb_sptr_history", _wrap_encode_ccsds_27_bb_sptr_history, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_history(encode_ccsds_27_bb_sptr self) -> unsigned int"},
	 { (char *)"encode_ccsds_27_bb_sptr_declare_sample_delay", _wrap_encode_ccsds_27_bb_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"encode_ccsds_27_bb_sptr_declare_sample_delay(encode_ccsds_27_bb_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"encode_ccsds_27_bb_sptr_sample_delay", (PyCFunction) _wrap_encode_ccsds_27_bb_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"encode_ccsds_27_bb_sptr_sample_delay(encode_ccsds_27_bb_sptr self, int which) -> unsigned int"},
	 { (char *)"encode_ccsds_27_bb_sptr_output_multiple", _wrap_encode_ccsds_27_bb_sptr_output_multiple, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_output_multiple(encode_ccsds_27_bb_sptr self) -> int"},
	 { (char *)"encode_ccsds_27_bb_sptr_relative_rate", _wrap_encode_ccsds_27_bb_sptr_relative_rate, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_relative_rate(encode_ccsds_27_bb_sptr self) -> double"},
	 { (char *)"encode_ccsds_27_bb_sptr_start", _wrap_encode_ccsds_27_bb_sptr_start, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_start(encode_ccsds_27_bb_sptr self) -> bool"},
	 { (char *)"encode_ccsds_27_bb_sptr_stop", _wrap_encode_ccsds_27_bb_sptr_stop, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_stop(encode_ccsds_27_bb_sptr self) -> bool"},
	 { (char *)"encode_ccsds_27_bb_sptr_nitems_read", (PyCFunction) _wrap_encode_ccsds_27_bb_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"encode_ccsds_27_bb_sptr_nitems_read(encode_ccsds_27_bb_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"encode_ccsds_27_bb_sptr_nitems_written", (PyCFunction) _wrap_encode_ccsds_27_bb_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"encode_ccsds_27_bb_sptr_nitems_written(encode_ccsds_27_bb_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"encode_ccsds_27_bb_sptr_max_noutput_items", _wrap_encode_ccsds_27_bb_sptr_max_noutput_items, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_max_noutput_items(encode_ccsds_27_bb_sptr self) -> int"},
	 { (char *)"encode_ccsds_27_bb_sptr_set_max_noutput_items", (PyCFunction) _wrap_encode_ccsds_27_bb_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"encode_ccsds_27_bb_sptr_set_max_noutput_items(encode_ccsds_27_bb_sptr self, int m)"},
	 { (char *)"encode_ccsds_27_bb_sptr_unset_max_noutput_items", _wrap_encode_ccsds_27_bb_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_unset_max_noutput_items(encode_ccsds_27_bb_sptr self)"},
	 { (char *)"encode_ccsds_27_bb_sptr_is_set_max_noutput_items", _wrap_encode_ccsds_27_bb_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_is_set_max_noutput_items(encode_ccsds_27_bb_sptr self) -> bool"},
	 { (char *)"encode_ccsds_27_bb_sptr_set_min_noutput_items", (PyCFunction) _wrap_encode_ccsds_27_bb_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"encode_ccsds_27_bb_sptr_set_min_noutput_items(encode_ccsds_27_bb_sptr self, int m)"},
	 { (char *)"encode_ccsds_27_bb_sptr_min_noutput_items", _wrap_encode_ccsds_27_bb_sptr_min_noutput_items, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_min_noutput_items(encode_ccsds_27_bb_sptr self) -> int"},
	 { (char *)"encode_ccsds_27_bb_sptr_max_output_buffer", (PyCFunction) _wrap_encode_ccsds_27_bb_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"encode_ccsds_27_bb_sptr_max_output_buffer(encode_ccsds_27_bb_sptr self, int i) -> long"},
	 { (char *)"encode_ccsds_27_bb_sptr_set_max_output_buffer", _wrap_encode_ccsds_27_bb_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"encode_ccsds_27_bb_sptr_set_max_output_buffer(encode_ccsds_27_bb_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"encode_ccsds_27_bb_sptr_min_output_buffer", (PyCFunction) _wrap_encode_ccsds_27_bb_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"encode_ccsds_27_bb_sptr_min_output_buffer(encode_ccsds_27_bb_sptr self, int i) -> long"},
	 { (char *)"encode_ccsds_27_bb_sptr_set_min_output_buffer", _wrap_encode_ccsds_27_bb_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"encode_ccsds_27_bb_sptr_set_min_output_buffer(encode_ccsds_27_bb_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"encode_ccsds_27_bb_sptr_pc_noutput_items", _wrap_encode_ccsds_27_bb_sptr_pc_noutput_items, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_pc_noutput_items(encode_ccsds_27_bb_sptr self) -> float"},
	 { (char *)"encode_ccsds_27_bb_sptr_pc_noutput_items_avg", _wrap_encode_ccsds_27_bb_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_pc_noutput_items_avg(encode_ccsds_27_bb_sptr self) -> float"},
	 { (char *)"encode_ccsds_27_bb_sptr_pc_noutput_items_var", _wrap_encode_ccsds_27_bb_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_pc_noutput_items_var(encode_ccsds_27_bb_sptr self) -> float"},
	 { (char *)"encode_ccsds_27_bb_sptr_pc_nproduced", _wrap_encode_ccsds_27_bb_sptr_pc_nproduced, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_pc_nproduced(encode_ccsds_27_bb_sptr self) -> float"},
	 { (char *)"encode_ccsds_27_bb_sptr_pc_nproduced_avg", _wrap_encode_ccsds_27_bb_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_pc_nproduced_avg(encode_ccsds_27_bb_sptr self) -> float"},
	 { (char *)"encode_ccsds_27_bb_sptr_pc_nproduced_var", _wrap_encode_ccsds_27_bb_sptr_pc_nproduced_var, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_pc_nproduced_var(encode_ccsds_27_bb_sptr self) -> float"},
	 { (char *)"encode_ccsds_27_bb_sptr_pc_input_buffers_full", _wrap_encode_ccsds_27_bb_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"encode_ccsds_27_bb_sptr_pc_input_buffers_full(encode_ccsds_27_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"encode_ccsds_27_bb_sptr_pc_input_buffers_full_avg", _wrap_encode_ccsds_27_bb_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"encode_ccsds_27_bb_sptr_pc_input_buffers_full_avg(encode_ccsds_27_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"encode_ccsds_27_bb_sptr_pc_input_buffers_full_var", _wrap_encode_ccsds_27_bb_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"encode_ccsds_27_bb_sptr_pc_input_buffers_full_var(encode_ccsds_27_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"encode_ccsds_27_bb_sptr_pc_output_buffers_full", _wrap_encode_ccsds_27_bb_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"encode_ccsds_27_bb_sptr_pc_output_buffers_full(encode_ccsds_27_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"encode_ccsds_27_bb_sptr_pc_output_buffers_full_avg", _wrap_encode_ccsds_27_bb_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"encode_ccsds_27_bb_sptr_pc_output_buffers_full_avg(encode_ccsds_27_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"encode_ccsds_27_bb_sptr_pc_output_buffers_full_var", _wrap_encode_ccsds_27_bb_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"encode_ccsds_27_bb_sptr_pc_output_buffers_full_var(encode_ccsds_27_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"encode_ccsds_27_bb_sptr_pc_work_time", _wrap_encode_ccsds_27_bb_sptr_pc_work_time, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_pc_work_time(encode_ccsds_27_bb_sptr self) -> float"},
	 { (char *)"encode_ccsds_27_bb_sptr_pc_work_time_avg", _wrap_encode_ccsds_27_bb_sptr_pc_work_time_avg, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_pc_work_time_avg(encode_ccsds_27_bb_sptr self) -> float"},
	 { (char *)"encode_ccsds_27_bb_sptr_pc_work_time_var", _wrap_encode_ccsds_27_bb_sptr_pc_work_time_var, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_pc_work_time_var(encode_ccsds_27_bb_sptr self) -> float"},
	 { (char *)"encode_ccsds_27_bb_sptr_pc_work_time_total", _wrap_encode_ccsds_27_bb_sptr_pc_work_time_total, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_pc_work_time_total(encode_ccsds_27_bb_sptr self) -> float"},
	 { (char *)"encode_ccsds_27_bb_sptr_pc_throughput_avg", _wrap_encode_ccsds_27_bb_sptr_pc_throughput_avg, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_pc_throughput_avg(encode_ccsds_27_bb_sptr self) -> float"},
	 { (char *)"encode_ccsds_27_bb_sptr_set_processor_affinity", (PyCFunction) _wrap_encode_ccsds_27_bb_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"encode_ccsds_27_bb_sptr_set_processor_affinity(encode_ccsds_27_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"encode_ccsds_27_bb_sptr_unset_processor_affinity", _wrap_encode_ccsds_27_bb_sptr_unset_processor_affinity, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_unset_processor_affinity(encode_ccsds_27_bb_sptr self)"},
	 { (char *)"encode_ccsds_27_bb_sptr_processor_affinity", _wrap_encode_ccsds_27_bb_sptr_processor_affinity, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_processor_affinity(encode_ccsds_27_bb_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"encode_ccsds_27_bb_sptr_active_thread_priority", _wrap_encode_ccsds_27_bb_sptr_active_thread_priority, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_active_thread_priority(encode_ccsds_27_bb_sptr self) -> int"},
	 { (char *)"encode_ccsds_27_bb_sptr_thread_priority", _wrap_encode_ccsds_27_bb_sptr_thread_priority, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_thread_priority(encode_ccsds_27_bb_sptr self) -> int"},
	 { (char *)"encode_ccsds_27_bb_sptr_set_thread_priority", (PyCFunction) _wrap_encode_ccsds_27_bb_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"encode_ccsds_27_bb_sptr_set_thread_priority(encode_ccsds_27_bb_sptr self, int priority) -> int"},
	 { (char *)"encode_ccsds_27_bb_sptr_name", _wrap_encode_ccsds_27_bb_sptr_name, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_name(encode_ccsds_27_bb_sptr self) -> std::string"},
	 { (char *)"encode_ccsds_27_bb_sptr_symbol_name", _wrap_encode_ccsds_27_bb_sptr_symbol_name, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_symbol_name(encode_ccsds_27_bb_sptr self) -> std::string"},
	 { (char *)"encode_ccsds_27_bb_sptr_input_signature", _wrap_encode_ccsds_27_bb_sptr_input_signature, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_input_signature(encode_ccsds_27_bb_sptr self) -> io_signature_sptr"},
	 { (char *)"encode_ccsds_27_bb_sptr_output_signature", _wrap_encode_ccsds_27_bb_sptr_output_signature, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_output_signature(encode_ccsds_27_bb_sptr self) -> io_signature_sptr"},
	 { (char *)"encode_ccsds_27_bb_sptr_unique_id", _wrap_encode_ccsds_27_bb_sptr_unique_id, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_unique_id(encode_ccsds_27_bb_sptr self) -> long"},
	 { (char *)"encode_ccsds_27_bb_sptr_to_basic_block", _wrap_encode_ccsds_27_bb_sptr_to_basic_block, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_to_basic_block(encode_ccsds_27_bb_sptr self) -> basic_block_sptr"},
	 { (char *)"encode_ccsds_27_bb_sptr_check_topology", (PyCFunction) _wrap_encode_ccsds_27_bb_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"encode_ccsds_27_bb_sptr_check_topology(encode_ccsds_27_bb_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"encode_ccsds_27_bb_sptr_alias", _wrap_encode_ccsds_27_bb_sptr_alias, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_alias(encode_ccsds_27_bb_sptr self) -> std::string"},
	 { (char *)"encode_ccsds_27_bb_sptr_set_block_alias", (PyCFunction) _wrap_encode_ccsds_27_bb_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"encode_ccsds_27_bb_sptr_set_block_alias(encode_ccsds_27_bb_sptr self, std::string name)"},
	 { (char *)"encode_ccsds_27_bb_sptr__post", (PyCFunction) _wrap_encode_ccsds_27_bb_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"encode_ccsds_27_bb_sptr__post(encode_ccsds_27_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"encode_ccsds_27_bb_sptr_message_ports_in", _wrap_encode_ccsds_27_bb_sptr_message_ports_in, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_message_ports_in(encode_ccsds_27_bb_sptr self) -> swig_int_ptr"},
	 { (char *)"encode_ccsds_27_bb_sptr_message_ports_out", _wrap_encode_ccsds_27_bb_sptr_message_ports_out, METH_VARARGS, (char *)"encode_ccsds_27_bb_sptr_message_ports_out(encode_ccsds_27_bb_sptr self) -> swig_int_ptr"},
	 { (char *)"encode_ccsds_27_bb_sptr_message_subscribers", (PyCFunction) _wrap_encode_ccsds_27_bb_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"encode_ccsds_27_bb_sptr_message_subscribers(encode_ccsds_27_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"encode_ccsds_27_bb_sptr_swigregister", encode_ccsds_27_bb_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ber_bf_sptr", _wrap_new_ber_bf_sptr, METH_VARARGS, (char *)"\n"
		"ber_bf_sptr()\n"
		"new_ber_bf_sptr(ber_bf p) -> ber_bf_sptr\n"
		""},
	 { (char *)"ber_bf_sptr___deref__", _wrap_ber_bf_sptr___deref__, METH_VARARGS, (char *)"ber_bf_sptr___deref__(ber_bf_sptr self) -> ber_bf"},
	 { (char *)"delete_ber_bf_sptr", _wrap_delete_ber_bf_sptr, METH_VARARGS, (char *)"delete_ber_bf_sptr(ber_bf_sptr self)"},
	 { (char *)"ber_bf_sptr_total_errors", _wrap_ber_bf_sptr_total_errors, METH_VARARGS, (char *)"\n"
		"ber_bf_sptr_total_errors(ber_bf_sptr self) -> long\n"
		"\n"
		"Get total number of errors counter value.\n"
		""},
	 { (char *)"ber_bf_sptr_make", (PyCFunction) _wrap_ber_bf_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"ber_bf_sptr_make(ber_bf_sptr self, bool test_mode=False, int berminerrors=100, float ber_limit=-7.0) -> ber_bf_sptr\n"
		"\n"
		"BER block in FECAPI.\n"
		"\n"
		"This block measures the bit error rate between two streams of packed data. It compares the bits of each streams and counts the number of incorrect bits between them. It outputs the log of the bit error rate, so a value of -X is 10^{-X} bit errors.\n"
		"\n"
		"When the  is set to false (default), it is in streaming mode. This means that the output is constantly producing the current value of the BER. In this mode, there is a single output BER calculation per chunk of bytes passed to it, so there is no exact timing between calculations of BER. In this mode, the other two parameters to the constructor are ignored.\n"
		"\n"
		"When  is true, the block is in test mode. This mode is used in the ber_curve_gen example and for other offline analysis of BER curves. Here, the block waits until at least  are observed and then produces a BER calculation. The parameter  helps make sure that the simulation is controlled. If the BER calculation drops below the  setting, the block will exit and simply return the set limit; the real BER is therefore some amount lower than this.\n"
		"\n"
		"Note that this block takes in data as packed bytes with 8-bits per byte used. It outputs a stream of floats as the log-scale BER.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Calculate the BER between two streams of data.\n"
		"\n"
		"Args:\n"
		"    test_mode : false for normal streaming mode (default); true for test mode.\n"
		"    berminerrors : the block needs to observe this many errors before outputting a result. Only valid when test_mode=true.\n"
		"    ber_limit : if the BER calculation falls below this limit, produce this value and exit. Only valid when test_mode=true.\n"
		""},
	 { (char *)"ber_bf_sptr_history", _wrap_ber_bf_sptr_history, METH_VARARGS, (char *)"ber_bf_sptr_history(ber_bf_sptr self) -> unsigned int"},
	 { (char *)"ber_bf_sptr_declare_sample_delay", _wrap_ber_bf_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"ber_bf_sptr_declare_sample_delay(ber_bf_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"ber_bf_sptr_sample_delay", (PyCFunction) _wrap_ber_bf_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"ber_bf_sptr_sample_delay(ber_bf_sptr self, int which) -> unsigned int"},
	 { (char *)"ber_bf_sptr_output_multiple", _wrap_ber_bf_sptr_output_multiple, METH_VARARGS, (char *)"ber_bf_sptr_output_multiple(ber_bf_sptr self) -> int"},
	 { (char *)"ber_bf_sptr_relative_rate", _wrap_ber_bf_sptr_relative_rate, METH_VARARGS, (char *)"ber_bf_sptr_relative_rate(ber_bf_sptr self) -> double"},
	 { (char *)"ber_bf_sptr_start", _wrap_ber_bf_sptr_start, METH_VARARGS, (char *)"ber_bf_sptr_start(ber_bf_sptr self) -> bool"},
	 { (char *)"ber_bf_sptr_stop", _wrap_ber_bf_sptr_stop, METH_VARARGS, (char *)"ber_bf_sptr_stop(ber_bf_sptr self) -> bool"},
	 { (char *)"ber_bf_sptr_nitems_read", (PyCFunction) _wrap_ber_bf_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"ber_bf_sptr_nitems_read(ber_bf_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"ber_bf_sptr_nitems_written", (PyCFunction) _wrap_ber_bf_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"ber_bf_sptr_nitems_written(ber_bf_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"ber_bf_sptr_max_noutput_items", _wrap_ber_bf_sptr_max_noutput_items, METH_VARARGS, (char *)"ber_bf_sptr_max_noutput_items(ber_bf_sptr self) -> int"},
	 { (char *)"ber_bf_sptr_set_max_noutput_items", (PyCFunction) _wrap_ber_bf_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"ber_bf_sptr_set_max_noutput_items(ber_bf_sptr self, int m)"},
	 { (char *)"ber_bf_sptr_unset_max_noutput_items", _wrap_ber_bf_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"ber_bf_sptr_unset_max_noutput_items(ber_bf_sptr self)"},
	 { (char *)"ber_bf_sptr_is_set_max_noutput_items", _wrap_ber_bf_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"ber_bf_sptr_is_set_max_noutput_items(ber_bf_sptr self) -> bool"},
	 { (char *)"ber_bf_sptr_set_min_noutput_items", (PyCFunction) _wrap_ber_bf_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"ber_bf_sptr_set_min_noutput_items(ber_bf_sptr self, int m)"},
	 { (char *)"ber_bf_sptr_min_noutput_items", _wrap_ber_bf_sptr_min_noutput_items, METH_VARARGS, (char *)"ber_bf_sptr_min_noutput_items(ber_bf_sptr self) -> int"},
	 { (char *)"ber_bf_sptr_max_output_buffer", (PyCFunction) _wrap_ber_bf_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"ber_bf_sptr_max_output_buffer(ber_bf_sptr self, int i) -> long"},
	 { (char *)"ber_bf_sptr_set_max_output_buffer", _wrap_ber_bf_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"ber_bf_sptr_set_max_output_buffer(ber_bf_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"ber_bf_sptr_min_output_buffer", (PyCFunction) _wrap_ber_bf_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"ber_bf_sptr_min_output_buffer(ber_bf_sptr self, int i) -> long"},
	 { (char *)"ber_bf_sptr_set_min_output_buffer", _wrap_ber_bf_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"ber_bf_sptr_set_min_output_buffer(ber_bf_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"ber_bf_sptr_pc_noutput_items", _wrap_ber_bf_sptr_pc_noutput_items, METH_VARARGS, (char *)"ber_bf_sptr_pc_noutput_items(ber_bf_sptr self) -> float"},
	 { (char *)"ber_bf_sptr_pc_noutput_items_avg", _wrap_ber_bf_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"ber_bf_sptr_pc_noutput_items_avg(ber_bf_sptr self) -> float"},
	 { (char *)"ber_bf_sptr_pc_noutput_items_var", _wrap_ber_bf_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"ber_bf_sptr_pc_noutput_items_var(ber_bf_sptr self) -> float"},
	 { (char *)"ber_bf_sptr_pc_nproduced", _wrap_ber_bf_sptr_pc_nproduced, METH_VARARGS, (char *)"ber_bf_sptr_pc_nproduced(ber_bf_sptr self) -> float"},
	 { (char *)"ber_bf_sptr_pc_nproduced_avg", _wrap_ber_bf_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"ber_bf_sptr_pc_nproduced_avg(ber_bf_sptr self) -> float"},
	 { (char *)"ber_bf_sptr_pc_nproduced_var", _wrap_ber_bf_sptr_pc_nproduced_var, METH_VARARGS, (char *)"ber_bf_sptr_pc_nproduced_var(ber_bf_sptr self) -> float"},
	 { (char *)"ber_bf_sptr_pc_input_buffers_full", _wrap_ber_bf_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"ber_bf_sptr_pc_input_buffers_full(ber_bf_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"ber_bf_sptr_pc_input_buffers_full_avg", _wrap_ber_bf_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"ber_bf_sptr_pc_input_buffers_full_avg(ber_bf_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"ber_bf_sptr_pc_input_buffers_full_var", _wrap_ber_bf_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"ber_bf_sptr_pc_input_buffers_full_var(ber_bf_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"ber_bf_sptr_pc_output_buffers_full", _wrap_ber_bf_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"ber_bf_sptr_pc_output_buffers_full(ber_bf_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"ber_bf_sptr_pc_output_buffers_full_avg", _wrap_ber_bf_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"ber_bf_sptr_pc_output_buffers_full_avg(ber_bf_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"ber_bf_sptr_pc_output_buffers_full_var", _wrap_ber_bf_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"ber_bf_sptr_pc_output_buffers_full_var(ber_bf_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"ber_bf_sptr_pc_work_time", _wrap_ber_bf_sptr_pc_work_time, METH_VARARGS, (char *)"ber_bf_sptr_pc_work_time(ber_bf_sptr self) -> float"},
	 { (char *)"ber_bf_sptr_pc_work_time_avg", _wrap_ber_bf_sptr_pc_work_time_avg, METH_VARARGS, (char *)"ber_bf_sptr_pc_work_time_avg(ber_bf_sptr self) -> float"},
	 { (char *)"ber_bf_sptr_pc_work_time_var", _wrap_ber_bf_sptr_pc_work_time_var, METH_VARARGS, (char *)"ber_bf_sptr_pc_work_time_var(ber_bf_sptr self) -> float"},
	 { (char *)"ber_bf_sptr_pc_work_time_total", _wrap_ber_bf_sptr_pc_work_time_total, METH_VARARGS, (char *)"ber_bf_sptr_pc_work_time_total(ber_bf_sptr self) -> float"},
	 { (char *)"ber_bf_sptr_pc_throughput_avg", _wrap_ber_bf_sptr_pc_throughput_avg, METH_VARARGS, (char *)"ber_bf_sptr_pc_throughput_avg(ber_bf_sptr self) -> float"},
	 { (char *)"ber_bf_sptr_set_processor_affinity", (PyCFunction) _wrap_ber_bf_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"ber_bf_sptr_set_processor_affinity(ber_bf_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"ber_bf_sptr_unset_processor_affinity", _wrap_ber_bf_sptr_unset_processor_affinity, METH_VARARGS, (char *)"ber_bf_sptr_unset_processor_affinity(ber_bf_sptr self)"},
	 { (char *)"ber_bf_sptr_processor_affinity", _wrap_ber_bf_sptr_processor_affinity, METH_VARARGS, (char *)"ber_bf_sptr_processor_affinity(ber_bf_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"ber_bf_sptr_active_thread_priority", _wrap_ber_bf_sptr_active_thread_priority, METH_VARARGS, (char *)"ber_bf_sptr_active_thread_priority(ber_bf_sptr self) -> int"},
	 { (char *)"ber_bf_sptr_thread_priority", _wrap_ber_bf_sptr_thread_priority, METH_VARARGS, (char *)"ber_bf_sptr_thread_priority(ber_bf_sptr self) -> int"},
	 { (char *)"ber_bf_sptr_set_thread_priority", (PyCFunction) _wrap_ber_bf_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"ber_bf_sptr_set_thread_priority(ber_bf_sptr self, int priority) -> int"},
	 { (char *)"ber_bf_sptr_name", _wrap_ber_bf_sptr_name, METH_VARARGS, (char *)"ber_bf_sptr_name(ber_bf_sptr self) -> std::string"},
	 { (char *)"ber_bf_sptr_symbol_name", _wrap_ber_bf_sptr_symbol_name, METH_VARARGS, (char *)"ber_bf_sptr_symbol_name(ber_bf_sptr self) -> std::string"},
	 { (char *)"ber_bf_sptr_input_signature", _wrap_ber_bf_sptr_input_signature, METH_VARARGS, (char *)"ber_bf_sptr_input_signature(ber_bf_sptr self) -> io_signature_sptr"},
	 { (char *)"ber_bf_sptr_output_signature", _wrap_ber_bf_sptr_output_signature, METH_VARARGS, (char *)"ber_bf_sptr_output_signature(ber_bf_sptr self) -> io_signature_sptr"},
	 { (char *)"ber_bf_sptr_unique_id", _wrap_ber_bf_sptr_unique_id, METH_VARARGS, (char *)"ber_bf_sptr_unique_id(ber_bf_sptr self) -> long"},
	 { (char *)"ber_bf_sptr_to_basic_block", _wrap_ber_bf_sptr_to_basic_block, METH_VARARGS, (char *)"ber_bf_sptr_to_basic_block(ber_bf_sptr self) -> basic_block_sptr"},
	 { (char *)"ber_bf_sptr_check_topology", (PyCFunction) _wrap_ber_bf_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"ber_bf_sptr_check_topology(ber_bf_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"ber_bf_sptr_alias", _wrap_ber_bf_sptr_alias, METH_VARARGS, (char *)"ber_bf_sptr_alias(ber_bf_sptr self) -> std::string"},
	 { (char *)"ber_bf_sptr_set_block_alias", (PyCFunction) _wrap_ber_bf_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"ber_bf_sptr_set_block_alias(ber_bf_sptr self, std::string name)"},
	 { (char *)"ber_bf_sptr__post", (PyCFunction) _wrap_ber_bf_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"ber_bf_sptr__post(ber_bf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"ber_bf_sptr_message_ports_in", _wrap_ber_bf_sptr_message_ports_in, METH_VARARGS, (char *)"ber_bf_sptr_message_ports_in(ber_bf_sptr self) -> swig_int_ptr"},
	 { (char *)"ber_bf_sptr_message_ports_out", _wrap_ber_bf_sptr_message_ports_out, METH_VARARGS, (char *)"ber_bf_sptr_message_ports_out(ber_bf_sptr self) -> swig_int_ptr"},
	 { (char *)"ber_bf_sptr_message_subscribers", (PyCFunction) _wrap_ber_bf_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"ber_bf_sptr_message_subscribers(ber_bf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"ber_bf_sptr_swigregister", ber_bf_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_conv_bit_corr_bb_sptr", _wrap_new_conv_bit_corr_bb_sptr, METH_VARARGS, (char *)"\n"
		"conv_bit_corr_bb_sptr()\n"
		"new_conv_bit_corr_bb_sptr(conv_bit_corr_bb p) -> conv_bit_corr_bb_sptr\n"
		""},
	 { (char *)"conv_bit_corr_bb_sptr___deref__", _wrap_conv_bit_corr_bb_sptr___deref__, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr___deref__(conv_bit_corr_bb_sptr self) -> conv_bit_corr_bb"},
	 { (char *)"delete_conv_bit_corr_bb_sptr", _wrap_delete_conv_bit_corr_bb_sptr, METH_VARARGS, (char *)"delete_conv_bit_corr_bb_sptr(conv_bit_corr_bb_sptr self)"},
	 { (char *)"conv_bit_corr_bb_sptr_make", (PyCFunction) _wrap_conv_bit_corr_bb_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"conv_bit_corr_bb_sptr_make(conv_bit_corr_bb_sptr self, std::vector< unsigned long long,std::allocator< unsigned long long > > correlator, \n"
		"    int corr_sym, int corr_len, int cut, int flush, \n"
		"    float thresh) -> conv_bit_corr_bb_sptr\n"
		"\n"
		"Correlate block in FECAPI.\n"
		"\n"
		"What does this block do?\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"\n"
		"\n"
		"Args:\n"
		"    correlator : \n"
		"    corr_sym : \n"
		"    corr_len : \n"
		"    cut : \n"
		"    flush : \n"
		"    thresh : \n"
		""},
	 { (char *)"conv_bit_corr_bb_sptr_data_garble_rate", (PyCFunction) _wrap_conv_bit_corr_bb_sptr_data_garble_rate, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"conv_bit_corr_bb_sptr_data_garble_rate(conv_bit_corr_bb_sptr self, int taps, float syn_density) -> float\n"
		"\n"
		"This subroutine will find the encoded data garble rate corresponding to a syndrome density of `target', that is created with an annihilating polynomial with 'taps' number of taps.\n"
		""},
	 { (char *)"conv_bit_corr_bb_sptr_history", _wrap_conv_bit_corr_bb_sptr_history, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_history(conv_bit_corr_bb_sptr self) -> unsigned int"},
	 { (char *)"conv_bit_corr_bb_sptr_declare_sample_delay", _wrap_conv_bit_corr_bb_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"conv_bit_corr_bb_sptr_declare_sample_delay(conv_bit_corr_bb_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"conv_bit_corr_bb_sptr_sample_delay", (PyCFunction) _wrap_conv_bit_corr_bb_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"conv_bit_corr_bb_sptr_sample_delay(conv_bit_corr_bb_sptr self, int which) -> unsigned int"},
	 { (char *)"conv_bit_corr_bb_sptr_output_multiple", _wrap_conv_bit_corr_bb_sptr_output_multiple, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_output_multiple(conv_bit_corr_bb_sptr self) -> int"},
	 { (char *)"conv_bit_corr_bb_sptr_relative_rate", _wrap_conv_bit_corr_bb_sptr_relative_rate, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_relative_rate(conv_bit_corr_bb_sptr self) -> double"},
	 { (char *)"conv_bit_corr_bb_sptr_start", _wrap_conv_bit_corr_bb_sptr_start, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_start(conv_bit_corr_bb_sptr self) -> bool"},
	 { (char *)"conv_bit_corr_bb_sptr_stop", _wrap_conv_bit_corr_bb_sptr_stop, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_stop(conv_bit_corr_bb_sptr self) -> bool"},
	 { (char *)"conv_bit_corr_bb_sptr_nitems_read", (PyCFunction) _wrap_conv_bit_corr_bb_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"conv_bit_corr_bb_sptr_nitems_read(conv_bit_corr_bb_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"conv_bit_corr_bb_sptr_nitems_written", (PyCFunction) _wrap_conv_bit_corr_bb_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"conv_bit_corr_bb_sptr_nitems_written(conv_bit_corr_bb_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"conv_bit_corr_bb_sptr_max_noutput_items", _wrap_conv_bit_corr_bb_sptr_max_noutput_items, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_max_noutput_items(conv_bit_corr_bb_sptr self) -> int"},
	 { (char *)"conv_bit_corr_bb_sptr_set_max_noutput_items", (PyCFunction) _wrap_conv_bit_corr_bb_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"conv_bit_corr_bb_sptr_set_max_noutput_items(conv_bit_corr_bb_sptr self, int m)"},
	 { (char *)"conv_bit_corr_bb_sptr_unset_max_noutput_items", _wrap_conv_bit_corr_bb_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_unset_max_noutput_items(conv_bit_corr_bb_sptr self)"},
	 { (char *)"conv_bit_corr_bb_sptr_is_set_max_noutput_items", _wrap_conv_bit_corr_bb_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_is_set_max_noutput_items(conv_bit_corr_bb_sptr self) -> bool"},
	 { (char *)"conv_bit_corr_bb_sptr_set_min_noutput_items", (PyCFunction) _wrap_conv_bit_corr_bb_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"conv_bit_corr_bb_sptr_set_min_noutput_items(conv_bit_corr_bb_sptr self, int m)"},
	 { (char *)"conv_bit_corr_bb_sptr_min_noutput_items", _wrap_conv_bit_corr_bb_sptr_min_noutput_items, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_min_noutput_items(conv_bit_corr_bb_sptr self) -> int"},
	 { (char *)"conv_bit_corr_bb_sptr_max_output_buffer", (PyCFunction) _wrap_conv_bit_corr_bb_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"conv_bit_corr_bb_sptr_max_output_buffer(conv_bit_corr_bb_sptr self, int i) -> long"},
	 { (char *)"conv_bit_corr_bb_sptr_set_max_output_buffer", _wrap_conv_bit_corr_bb_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"conv_bit_corr_bb_sptr_set_max_output_buffer(conv_bit_corr_bb_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"conv_bit_corr_bb_sptr_min_output_buffer", (PyCFunction) _wrap_conv_bit_corr_bb_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"conv_bit_corr_bb_sptr_min_output_buffer(conv_bit_corr_bb_sptr self, int i) -> long"},
	 { (char *)"conv_bit_corr_bb_sptr_set_min_output_buffer", _wrap_conv_bit_corr_bb_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"conv_bit_corr_bb_sptr_set_min_output_buffer(conv_bit_corr_bb_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"conv_bit_corr_bb_sptr_pc_noutput_items", _wrap_conv_bit_corr_bb_sptr_pc_noutput_items, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_pc_noutput_items(conv_bit_corr_bb_sptr self) -> float"},
	 { (char *)"conv_bit_corr_bb_sptr_pc_noutput_items_avg", _wrap_conv_bit_corr_bb_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_pc_noutput_items_avg(conv_bit_corr_bb_sptr self) -> float"},
	 { (char *)"conv_bit_corr_bb_sptr_pc_noutput_items_var", _wrap_conv_bit_corr_bb_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_pc_noutput_items_var(conv_bit_corr_bb_sptr self) -> float"},
	 { (char *)"conv_bit_corr_bb_sptr_pc_nproduced", _wrap_conv_bit_corr_bb_sptr_pc_nproduced, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_pc_nproduced(conv_bit_corr_bb_sptr self) -> float"},
	 { (char *)"conv_bit_corr_bb_sptr_pc_nproduced_avg", _wrap_conv_bit_corr_bb_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_pc_nproduced_avg(conv_bit_corr_bb_sptr self) -> float"},
	 { (char *)"conv_bit_corr_bb_sptr_pc_nproduced_var", _wrap_conv_bit_corr_bb_sptr_pc_nproduced_var, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_pc_nproduced_var(conv_bit_corr_bb_sptr self) -> float"},
	 { (char *)"conv_bit_corr_bb_sptr_pc_input_buffers_full", _wrap_conv_bit_corr_bb_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"conv_bit_corr_bb_sptr_pc_input_buffers_full(conv_bit_corr_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"conv_bit_corr_bb_sptr_pc_input_buffers_full_avg", _wrap_conv_bit_corr_bb_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"conv_bit_corr_bb_sptr_pc_input_buffers_full_avg(conv_bit_corr_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"conv_bit_corr_bb_sptr_pc_input_buffers_full_var", _wrap_conv_bit_corr_bb_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"conv_bit_corr_bb_sptr_pc_input_buffers_full_var(conv_bit_corr_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"conv_bit_corr_bb_sptr_pc_output_buffers_full", _wrap_conv_bit_corr_bb_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"conv_bit_corr_bb_sptr_pc_output_buffers_full(conv_bit_corr_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"conv_bit_corr_bb_sptr_pc_output_buffers_full_avg", _wrap_conv_bit_corr_bb_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"conv_bit_corr_bb_sptr_pc_output_buffers_full_avg(conv_bit_corr_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"conv_bit_corr_bb_sptr_pc_output_buffers_full_var", _wrap_conv_bit_corr_bb_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"conv_bit_corr_bb_sptr_pc_output_buffers_full_var(conv_bit_corr_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"conv_bit_corr_bb_sptr_pc_work_time", _wrap_conv_bit_corr_bb_sptr_pc_work_time, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_pc_work_time(conv_bit_corr_bb_sptr self) -> float"},
	 { (char *)"conv_bit_corr_bb_sptr_pc_work_time_avg", _wrap_conv_bit_corr_bb_sptr_pc_work_time_avg, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_pc_work_time_avg(conv_bit_corr_bb_sptr self) -> float"},
	 { (char *)"conv_bit_corr_bb_sptr_pc_work_time_var", _wrap_conv_bit_corr_bb_sptr_pc_work_time_var, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_pc_work_time_var(conv_bit_corr_bb_sptr self) -> float"},
	 { (char *)"conv_bit_corr_bb_sptr_pc_work_time_total", _wrap_conv_bit_corr_bb_sptr_pc_work_time_total, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_pc_work_time_total(conv_bit_corr_bb_sptr self) -> float"},
	 { (char *)"conv_bit_corr_bb_sptr_pc_throughput_avg", _wrap_conv_bit_corr_bb_sptr_pc_throughput_avg, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_pc_throughput_avg(conv_bit_corr_bb_sptr self) -> float"},
	 { (char *)"conv_bit_corr_bb_sptr_set_processor_affinity", (PyCFunction) _wrap_conv_bit_corr_bb_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"conv_bit_corr_bb_sptr_set_processor_affinity(conv_bit_corr_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"conv_bit_corr_bb_sptr_unset_processor_affinity", _wrap_conv_bit_corr_bb_sptr_unset_processor_affinity, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_unset_processor_affinity(conv_bit_corr_bb_sptr self)"},
	 { (char *)"conv_bit_corr_bb_sptr_processor_affinity", _wrap_conv_bit_corr_bb_sptr_processor_affinity, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_processor_affinity(conv_bit_corr_bb_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"conv_bit_corr_bb_sptr_active_thread_priority", _wrap_conv_bit_corr_bb_sptr_active_thread_priority, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_active_thread_priority(conv_bit_corr_bb_sptr self) -> int"},
	 { (char *)"conv_bit_corr_bb_sptr_thread_priority", _wrap_conv_bit_corr_bb_sptr_thread_priority, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_thread_priority(conv_bit_corr_bb_sptr self) -> int"},
	 { (char *)"conv_bit_corr_bb_sptr_set_thread_priority", (PyCFunction) _wrap_conv_bit_corr_bb_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"conv_bit_corr_bb_sptr_set_thread_priority(conv_bit_corr_bb_sptr self, int priority) -> int"},
	 { (char *)"conv_bit_corr_bb_sptr_name", _wrap_conv_bit_corr_bb_sptr_name, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_name(conv_bit_corr_bb_sptr self) -> std::string"},
	 { (char *)"conv_bit_corr_bb_sptr_symbol_name", _wrap_conv_bit_corr_bb_sptr_symbol_name, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_symbol_name(conv_bit_corr_bb_sptr self) -> std::string"},
	 { (char *)"conv_bit_corr_bb_sptr_input_signature", _wrap_conv_bit_corr_bb_sptr_input_signature, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_input_signature(conv_bit_corr_bb_sptr self) -> io_signature_sptr"},
	 { (char *)"conv_bit_corr_bb_sptr_output_signature", _wrap_conv_bit_corr_bb_sptr_output_signature, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_output_signature(conv_bit_corr_bb_sptr self) -> io_signature_sptr"},
	 { (char *)"conv_bit_corr_bb_sptr_unique_id", _wrap_conv_bit_corr_bb_sptr_unique_id, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_unique_id(conv_bit_corr_bb_sptr self) -> long"},
	 { (char *)"conv_bit_corr_bb_sptr_to_basic_block", _wrap_conv_bit_corr_bb_sptr_to_basic_block, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_to_basic_block(conv_bit_corr_bb_sptr self) -> basic_block_sptr"},
	 { (char *)"conv_bit_corr_bb_sptr_check_topology", (PyCFunction) _wrap_conv_bit_corr_bb_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"conv_bit_corr_bb_sptr_check_topology(conv_bit_corr_bb_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"conv_bit_corr_bb_sptr_alias", _wrap_conv_bit_corr_bb_sptr_alias, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_alias(conv_bit_corr_bb_sptr self) -> std::string"},
	 { (char *)"conv_bit_corr_bb_sptr_set_block_alias", (PyCFunction) _wrap_conv_bit_corr_bb_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"conv_bit_corr_bb_sptr_set_block_alias(conv_bit_corr_bb_sptr self, std::string name)"},
	 { (char *)"conv_bit_corr_bb_sptr__post", (PyCFunction) _wrap_conv_bit_corr_bb_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"conv_bit_corr_bb_sptr__post(conv_bit_corr_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"conv_bit_corr_bb_sptr_message_ports_in", _wrap_conv_bit_corr_bb_sptr_message_ports_in, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_message_ports_in(conv_bit_corr_bb_sptr self) -> swig_int_ptr"},
	 { (char *)"conv_bit_corr_bb_sptr_message_ports_out", _wrap_conv_bit_corr_bb_sptr_message_ports_out, METH_VARARGS, (char *)"conv_bit_corr_bb_sptr_message_ports_out(conv_bit_corr_bb_sptr self) -> swig_int_ptr"},
	 { (char *)"conv_bit_corr_bb_sptr_message_subscribers", (PyCFunction) _wrap_conv_bit_corr_bb_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"conv_bit_corr_bb_sptr_message_subscribers(conv_bit_corr_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"conv_bit_corr_bb_sptr_swigregister", conv_bit_corr_bb_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_puncture_bb_sptr", _wrap_new_puncture_bb_sptr, METH_VARARGS, (char *)"\n"
		"puncture_bb_sptr()\n"
		"new_puncture_bb_sptr(puncture_bb p) -> puncture_bb_sptr\n"
		""},
	 { (char *)"puncture_bb_sptr___deref__", _wrap_puncture_bb_sptr___deref__, METH_VARARGS, (char *)"puncture_bb_sptr___deref__(puncture_bb_sptr self) -> puncture_bb"},
	 { (char *)"delete_puncture_bb_sptr", _wrap_delete_puncture_bb_sptr, METH_VARARGS, (char *)"delete_puncture_bb_sptr(puncture_bb_sptr self)"},
	 { (char *)"puncture_bb_sptr_make", (PyCFunction) _wrap_puncture_bb_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"puncture_bb_sptr_make(puncture_bb_sptr self, int puncsize, int puncpat, int delay=0) -> puncture_bb_sptr\n"
		"\n"
		"Puncture a stream of unpacked bits.\n"
		"\n"
		"Puncture a given block of input samples of . The items produced is based on pattern . Basically, if:\n"
		"\n"
		"\n"
		"\n"
		"This block is designed for unpacked bits - that is, every input sample is a bit, either a 1 or 0. It's possible to use packed bits as symbols, but the puncturing will be done on the symbol level, not the bit level.\n"
		"\n"
		" is specified as a 32-bit integer that we can convert into the vector _puncpat used in the algorithm above:\n"
		"\n"
		"\n"
		"\n"
		"Example: \n"
		"\n"
		"The gr.fec Python module provides a read_bitlist function that can turn a string of a puncture pattern into the correct integer form. The pattern of 0xEF could be specified as fec.readbitlist(\"11101111\"). Also, this allows us to use puncsize=len(\"11101111\") to make sure that our sizes are set up correctly for the pattern we want.\n"
		"\n"
		"The fec.extended_encoder takes in the puncture pattern directly as a string and uses the readbitlist inside to do the conversion.\n"
		"\n"
		"Note that due to the above concept, the default setting in the extended encoder of '11' translates into no puncturing.\n"
		"\n"
		"The  parameter delays the application of the puncture pattern. This is equivalent to circularly rotating the  by . Note that because of the circular shift, the delay should be between 0 and , but this is not enforced; the effective delay will simply be  mod . A negative value here is ignored.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Constructs a puncture block for unpacked bits.\n"
		"\n"
		"Args:\n"
		"    puncsize : Size of block of bits to puncture\n"
		"    puncpat : The puncturing pattern\n"
		"    delay : Delayed the puncturing pattern by shifting it\n"
		""},
	 { (char *)"puncture_bb_sptr_history", _wrap_puncture_bb_sptr_history, METH_VARARGS, (char *)"puncture_bb_sptr_history(puncture_bb_sptr self) -> unsigned int"},
	 { (char *)"puncture_bb_sptr_declare_sample_delay", _wrap_puncture_bb_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"puncture_bb_sptr_declare_sample_delay(puncture_bb_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"puncture_bb_sptr_sample_delay", (PyCFunction) _wrap_puncture_bb_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"puncture_bb_sptr_sample_delay(puncture_bb_sptr self, int which) -> unsigned int"},
	 { (char *)"puncture_bb_sptr_output_multiple", _wrap_puncture_bb_sptr_output_multiple, METH_VARARGS, (char *)"puncture_bb_sptr_output_multiple(puncture_bb_sptr self) -> int"},
	 { (char *)"puncture_bb_sptr_relative_rate", _wrap_puncture_bb_sptr_relative_rate, METH_VARARGS, (char *)"puncture_bb_sptr_relative_rate(puncture_bb_sptr self) -> double"},
	 { (char *)"puncture_bb_sptr_start", _wrap_puncture_bb_sptr_start, METH_VARARGS, (char *)"puncture_bb_sptr_start(puncture_bb_sptr self) -> bool"},
	 { (char *)"puncture_bb_sptr_stop", _wrap_puncture_bb_sptr_stop, METH_VARARGS, (char *)"puncture_bb_sptr_stop(puncture_bb_sptr self) -> bool"},
	 { (char *)"puncture_bb_sptr_nitems_read", (PyCFunction) _wrap_puncture_bb_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"puncture_bb_sptr_nitems_read(puncture_bb_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"puncture_bb_sptr_nitems_written", (PyCFunction) _wrap_puncture_bb_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"puncture_bb_sptr_nitems_written(puncture_bb_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"puncture_bb_sptr_max_noutput_items", _wrap_puncture_bb_sptr_max_noutput_items, METH_VARARGS, (char *)"puncture_bb_sptr_max_noutput_items(puncture_bb_sptr self) -> int"},
	 { (char *)"puncture_bb_sptr_set_max_noutput_items", (PyCFunction) _wrap_puncture_bb_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"puncture_bb_sptr_set_max_noutput_items(puncture_bb_sptr self, int m)"},
	 { (char *)"puncture_bb_sptr_unset_max_noutput_items", _wrap_puncture_bb_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"puncture_bb_sptr_unset_max_noutput_items(puncture_bb_sptr self)"},
	 { (char *)"puncture_bb_sptr_is_set_max_noutput_items", _wrap_puncture_bb_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"puncture_bb_sptr_is_set_max_noutput_items(puncture_bb_sptr self) -> bool"},
	 { (char *)"puncture_bb_sptr_set_min_noutput_items", (PyCFunction) _wrap_puncture_bb_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"puncture_bb_sptr_set_min_noutput_items(puncture_bb_sptr self, int m)"},
	 { (char *)"puncture_bb_sptr_min_noutput_items", _wrap_puncture_bb_sptr_min_noutput_items, METH_VARARGS, (char *)"puncture_bb_sptr_min_noutput_items(puncture_bb_sptr self) -> int"},
	 { (char *)"puncture_bb_sptr_max_output_buffer", (PyCFunction) _wrap_puncture_bb_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"puncture_bb_sptr_max_output_buffer(puncture_bb_sptr self, int i) -> long"},
	 { (char *)"puncture_bb_sptr_set_max_output_buffer", _wrap_puncture_bb_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"puncture_bb_sptr_set_max_output_buffer(puncture_bb_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"puncture_bb_sptr_min_output_buffer", (PyCFunction) _wrap_puncture_bb_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"puncture_bb_sptr_min_output_buffer(puncture_bb_sptr self, int i) -> long"},
	 { (char *)"puncture_bb_sptr_set_min_output_buffer", _wrap_puncture_bb_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"puncture_bb_sptr_set_min_output_buffer(puncture_bb_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"puncture_bb_sptr_pc_noutput_items", _wrap_puncture_bb_sptr_pc_noutput_items, METH_VARARGS, (char *)"puncture_bb_sptr_pc_noutput_items(puncture_bb_sptr self) -> float"},
	 { (char *)"puncture_bb_sptr_pc_noutput_items_avg", _wrap_puncture_bb_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"puncture_bb_sptr_pc_noutput_items_avg(puncture_bb_sptr self) -> float"},
	 { (char *)"puncture_bb_sptr_pc_noutput_items_var", _wrap_puncture_bb_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"puncture_bb_sptr_pc_noutput_items_var(puncture_bb_sptr self) -> float"},
	 { (char *)"puncture_bb_sptr_pc_nproduced", _wrap_puncture_bb_sptr_pc_nproduced, METH_VARARGS, (char *)"puncture_bb_sptr_pc_nproduced(puncture_bb_sptr self) -> float"},
	 { (char *)"puncture_bb_sptr_pc_nproduced_avg", _wrap_puncture_bb_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"puncture_bb_sptr_pc_nproduced_avg(puncture_bb_sptr self) -> float"},
	 { (char *)"puncture_bb_sptr_pc_nproduced_var", _wrap_puncture_bb_sptr_pc_nproduced_var, METH_VARARGS, (char *)"puncture_bb_sptr_pc_nproduced_var(puncture_bb_sptr self) -> float"},
	 { (char *)"puncture_bb_sptr_pc_input_buffers_full", _wrap_puncture_bb_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"puncture_bb_sptr_pc_input_buffers_full(puncture_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"puncture_bb_sptr_pc_input_buffers_full_avg", _wrap_puncture_bb_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"puncture_bb_sptr_pc_input_buffers_full_avg(puncture_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"puncture_bb_sptr_pc_input_buffers_full_var", _wrap_puncture_bb_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"puncture_bb_sptr_pc_input_buffers_full_var(puncture_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"puncture_bb_sptr_pc_output_buffers_full", _wrap_puncture_bb_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"puncture_bb_sptr_pc_output_buffers_full(puncture_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"puncture_bb_sptr_pc_output_buffers_full_avg", _wrap_puncture_bb_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"puncture_bb_sptr_pc_output_buffers_full_avg(puncture_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"puncture_bb_sptr_pc_output_buffers_full_var", _wrap_puncture_bb_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"puncture_bb_sptr_pc_output_buffers_full_var(puncture_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"puncture_bb_sptr_pc_work_time", _wrap_puncture_bb_sptr_pc_work_time, METH_VARARGS, (char *)"puncture_bb_sptr_pc_work_time(puncture_bb_sptr self) -> float"},
	 { (char *)"puncture_bb_sptr_pc_work_time_avg", _wrap_puncture_bb_sptr_pc_work_time_avg, METH_VARARGS, (char *)"puncture_bb_sptr_pc_work_time_avg(puncture_bb_sptr self) -> float"},
	 { (char *)"puncture_bb_sptr_pc_work_time_var", _wrap_puncture_bb_sptr_pc_work_time_var, METH_VARARGS, (char *)"puncture_bb_sptr_pc_work_time_var(puncture_bb_sptr self) -> float"},
	 { (char *)"puncture_bb_sptr_pc_work_time_total", _wrap_puncture_bb_sptr_pc_work_time_total, METH_VARARGS, (char *)"puncture_bb_sptr_pc_work_time_total(puncture_bb_sptr self) -> float"},
	 { (char *)"puncture_bb_sptr_pc_throughput_avg", _wrap_puncture_bb_sptr_pc_throughput_avg, METH_VARARGS, (char *)"puncture_bb_sptr_pc_throughput_avg(puncture_bb_sptr self) -> float"},
	 { (char *)"puncture_bb_sptr_set_processor_affinity", (PyCFunction) _wrap_puncture_bb_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"puncture_bb_sptr_set_processor_affinity(puncture_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"puncture_bb_sptr_unset_processor_affinity", _wrap_puncture_bb_sptr_unset_processor_affinity, METH_VARARGS, (char *)"puncture_bb_sptr_unset_processor_affinity(puncture_bb_sptr self)"},
	 { (char *)"puncture_bb_sptr_processor_affinity", _wrap_puncture_bb_sptr_processor_affinity, METH_VARARGS, (char *)"puncture_bb_sptr_processor_affinity(puncture_bb_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"puncture_bb_sptr_active_thread_priority", _wrap_puncture_bb_sptr_active_thread_priority, METH_VARARGS, (char *)"puncture_bb_sptr_active_thread_priority(puncture_bb_sptr self) -> int"},
	 { (char *)"puncture_bb_sptr_thread_priority", _wrap_puncture_bb_sptr_thread_priority, METH_VARARGS, (char *)"puncture_bb_sptr_thread_priority(puncture_bb_sptr self) -> int"},
	 { (char *)"puncture_bb_sptr_set_thread_priority", (PyCFunction) _wrap_puncture_bb_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"puncture_bb_sptr_set_thread_priority(puncture_bb_sptr self, int priority) -> int"},
	 { (char *)"puncture_bb_sptr_name", _wrap_puncture_bb_sptr_name, METH_VARARGS, (char *)"puncture_bb_sptr_name(puncture_bb_sptr self) -> std::string"},
	 { (char *)"puncture_bb_sptr_symbol_name", _wrap_puncture_bb_sptr_symbol_name, METH_VARARGS, (char *)"puncture_bb_sptr_symbol_name(puncture_bb_sptr self) -> std::string"},
	 { (char *)"puncture_bb_sptr_input_signature", _wrap_puncture_bb_sptr_input_signature, METH_VARARGS, (char *)"puncture_bb_sptr_input_signature(puncture_bb_sptr self) -> io_signature_sptr"},
	 { (char *)"puncture_bb_sptr_output_signature", _wrap_puncture_bb_sptr_output_signature, METH_VARARGS, (char *)"puncture_bb_sptr_output_signature(puncture_bb_sptr self) -> io_signature_sptr"},
	 { (char *)"puncture_bb_sptr_unique_id", _wrap_puncture_bb_sptr_unique_id, METH_VARARGS, (char *)"puncture_bb_sptr_unique_id(puncture_bb_sptr self) -> long"},
	 { (char *)"puncture_bb_sptr_to_basic_block", _wrap_puncture_bb_sptr_to_basic_block, METH_VARARGS, (char *)"puncture_bb_sptr_to_basic_block(puncture_bb_sptr self) -> basic_block_sptr"},
	 { (char *)"puncture_bb_sptr_check_topology", (PyCFunction) _wrap_puncture_bb_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"puncture_bb_sptr_check_topology(puncture_bb_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"puncture_bb_sptr_alias", _wrap_puncture_bb_sptr_alias, METH_VARARGS, (char *)"puncture_bb_sptr_alias(puncture_bb_sptr self) -> std::string"},
	 { (char *)"puncture_bb_sptr_set_block_alias", (PyCFunction) _wrap_puncture_bb_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"puncture_bb_sptr_set_block_alias(puncture_bb_sptr self, std::string name)"},
	 { (char *)"puncture_bb_sptr__post", (PyCFunction) _wrap_puncture_bb_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"puncture_bb_sptr__post(puncture_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"puncture_bb_sptr_message_ports_in", _wrap_puncture_bb_sptr_message_ports_in, METH_VARARGS, (char *)"puncture_bb_sptr_message_ports_in(puncture_bb_sptr self) -> swig_int_ptr"},
	 { (char *)"puncture_bb_sptr_message_ports_out", _wrap_puncture_bb_sptr_message_ports_out, METH_VARARGS, (char *)"puncture_bb_sptr_message_ports_out(puncture_bb_sptr self) -> swig_int_ptr"},
	 { (char *)"puncture_bb_sptr_message_subscribers", (PyCFunction) _wrap_puncture_bb_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"puncture_bb_sptr_message_subscribers(puncture_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"puncture_bb_sptr_swigregister", puncture_bb_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_puncture_ff_sptr", _wrap_new_puncture_ff_sptr, METH_VARARGS, (char *)"\n"
		"puncture_ff_sptr()\n"
		"new_puncture_ff_sptr(puncture_ff p) -> puncture_ff_sptr\n"
		""},
	 { (char *)"puncture_ff_sptr___deref__", _wrap_puncture_ff_sptr___deref__, METH_VARARGS, (char *)"puncture_ff_sptr___deref__(puncture_ff_sptr self) -> puncture_ff"},
	 { (char *)"delete_puncture_ff_sptr", _wrap_delete_puncture_ff_sptr, METH_VARARGS, (char *)"delete_puncture_ff_sptr(puncture_ff_sptr self)"},
	 { (char *)"puncture_ff_sptr_make", (PyCFunction) _wrap_puncture_ff_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"puncture_ff_sptr_make(puncture_ff_sptr self, int puncsize, int puncpat, int delay) -> puncture_ff_sptr\n"
		"\n"
		"Puncture a stream of floats.\n"
		"\n"
		"For a given block of input samples of , the items produced is based on . Basically, if:\n"
		"\n"
		"\n"
		"\n"
		"This block is designed for floats, generally 1's and -1's. It's possible to use other float values as symbols, but this is not the expected operation.\n"
		"\n"
		" is specified as a 32-bit integer that we can convert into the vector _puncpat used in the algorithm above:\n"
		"\n"
		"\n"
		"\n"
		"Example: \n"
		"\n"
		"The gr.fec Python module provides a read_bitlist function that can turn a string of a puncture pattern into the correct integer form. The pattern of 0xEF could be specified as fec.readbitlist(\"11101111\"). Also, this allows us to use puncsize=len(\"11101111\") to make sure that our sizes are set up correctly for the pattern we want.\n"
		"\n"
		"The fec.extended_encoder takes in the puncture pattern directly as a string and uses the readbitlist inside to do the conversion.\n"
		"\n"
		"Note that due to the above concept, the default setting in the extended encoder of '11' translates into no puncturing.\n"
		"\n"
		"The  parameter delays the application of the puncture pattern. This is equivalent to circularly rotating the  by . Note that because of the circular shift, the delay should be between 0 and , but this is not enforced; the effective delay will simply be  mod . A negative value here is ignored.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Constructs a puncture block for floats.\n"
		"\n"
		"Args:\n"
		"    puncsize : Size of block of bits to puncture\n"
		"    puncpat : The puncturing pattern\n"
		"    delay : Delayed the puncturing pattern by shifting it\n"
		""},
	 { (char *)"puncture_ff_sptr_history", _wrap_puncture_ff_sptr_history, METH_VARARGS, (char *)"puncture_ff_sptr_history(puncture_ff_sptr self) -> unsigned int"},
	 { (char *)"puncture_ff_sptr_declare_sample_delay", _wrap_puncture_ff_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"puncture_ff_sptr_declare_sample_delay(puncture_ff_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"puncture_ff_sptr_sample_delay", (PyCFunction) _wrap_puncture_ff_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"puncture_ff_sptr_sample_delay(puncture_ff_sptr self, int which) -> unsigned int"},
	 { (char *)"puncture_ff_sptr_output_multiple", _wrap_puncture_ff_sptr_output_multiple, METH_VARARGS, (char *)"puncture_ff_sptr_output_multiple(puncture_ff_sptr self) -> int"},
	 { (char *)"puncture_ff_sptr_relative_rate", _wrap_puncture_ff_sptr_relative_rate, METH_VARARGS, (char *)"puncture_ff_sptr_relative_rate(puncture_ff_sptr self) -> double"},
	 { (char *)"puncture_ff_sptr_start", _wrap_puncture_ff_sptr_start, METH_VARARGS, (char *)"puncture_ff_sptr_start(puncture_ff_sptr self) -> bool"},
	 { (char *)"puncture_ff_sptr_stop", _wrap_puncture_ff_sptr_stop, METH_VARARGS, (char *)"puncture_ff_sptr_stop(puncture_ff_sptr self) -> bool"},
	 { (char *)"puncture_ff_sptr_nitems_read", (PyCFunction) _wrap_puncture_ff_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"puncture_ff_sptr_nitems_read(puncture_ff_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"puncture_ff_sptr_nitems_written", (PyCFunction) _wrap_puncture_ff_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"puncture_ff_sptr_nitems_written(puncture_ff_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"puncture_ff_sptr_max_noutput_items", _wrap_puncture_ff_sptr_max_noutput_items, METH_VARARGS, (char *)"puncture_ff_sptr_max_noutput_items(puncture_ff_sptr self) -> int"},
	 { (char *)"puncture_ff_sptr_set_max_noutput_items", (PyCFunction) _wrap_puncture_ff_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"puncture_ff_sptr_set_max_noutput_items(puncture_ff_sptr self, int m)"},
	 { (char *)"puncture_ff_sptr_unset_max_noutput_items", _wrap_puncture_ff_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"puncture_ff_sptr_unset_max_noutput_items(puncture_ff_sptr self)"},
	 { (char *)"puncture_ff_sptr_is_set_max_noutput_items", _wrap_puncture_ff_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"puncture_ff_sptr_is_set_max_noutput_items(puncture_ff_sptr self) -> bool"},
	 { (char *)"puncture_ff_sptr_set_min_noutput_items", (PyCFunction) _wrap_puncture_ff_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"puncture_ff_sptr_set_min_noutput_items(puncture_ff_sptr self, int m)"},
	 { (char *)"puncture_ff_sptr_min_noutput_items", _wrap_puncture_ff_sptr_min_noutput_items, METH_VARARGS, (char *)"puncture_ff_sptr_min_noutput_items(puncture_ff_sptr self) -> int"},
	 { (char *)"puncture_ff_sptr_max_output_buffer", (PyCFunction) _wrap_puncture_ff_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"puncture_ff_sptr_max_output_buffer(puncture_ff_sptr self, int i) -> long"},
	 { (char *)"puncture_ff_sptr_set_max_output_buffer", _wrap_puncture_ff_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"puncture_ff_sptr_set_max_output_buffer(puncture_ff_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"puncture_ff_sptr_min_output_buffer", (PyCFunction) _wrap_puncture_ff_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"puncture_ff_sptr_min_output_buffer(puncture_ff_sptr self, int i) -> long"},
	 { (char *)"puncture_ff_sptr_set_min_output_buffer", _wrap_puncture_ff_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"puncture_ff_sptr_set_min_output_buffer(puncture_ff_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"puncture_ff_sptr_pc_noutput_items", _wrap_puncture_ff_sptr_pc_noutput_items, METH_VARARGS, (char *)"puncture_ff_sptr_pc_noutput_items(puncture_ff_sptr self) -> float"},
	 { (char *)"puncture_ff_sptr_pc_noutput_items_avg", _wrap_puncture_ff_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"puncture_ff_sptr_pc_noutput_items_avg(puncture_ff_sptr self) -> float"},
	 { (char *)"puncture_ff_sptr_pc_noutput_items_var", _wrap_puncture_ff_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"puncture_ff_sptr_pc_noutput_items_var(puncture_ff_sptr self) -> float"},
	 { (char *)"puncture_ff_sptr_pc_nproduced", _wrap_puncture_ff_sptr_pc_nproduced, METH_VARARGS, (char *)"puncture_ff_sptr_pc_nproduced(puncture_ff_sptr self) -> float"},
	 { (char *)"puncture_ff_sptr_pc_nproduced_avg", _wrap_puncture_ff_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"puncture_ff_sptr_pc_nproduced_avg(puncture_ff_sptr self) -> float"},
	 { (char *)"puncture_ff_sptr_pc_nproduced_var", _wrap_puncture_ff_sptr_pc_nproduced_var, METH_VARARGS, (char *)"puncture_ff_sptr_pc_nproduced_var(puncture_ff_sptr self) -> float"},
	 { (char *)"puncture_ff_sptr_pc_input_buffers_full", _wrap_puncture_ff_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"puncture_ff_sptr_pc_input_buffers_full(puncture_ff_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"puncture_ff_sptr_pc_input_buffers_full_avg", _wrap_puncture_ff_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"puncture_ff_sptr_pc_input_buffers_full_avg(puncture_ff_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"puncture_ff_sptr_pc_input_buffers_full_var", _wrap_puncture_ff_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"puncture_ff_sptr_pc_input_buffers_full_var(puncture_ff_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"puncture_ff_sptr_pc_output_buffers_full", _wrap_puncture_ff_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"puncture_ff_sptr_pc_output_buffers_full(puncture_ff_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"puncture_ff_sptr_pc_output_buffers_full_avg", _wrap_puncture_ff_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"puncture_ff_sptr_pc_output_buffers_full_avg(puncture_ff_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"puncture_ff_sptr_pc_output_buffers_full_var", _wrap_puncture_ff_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"puncture_ff_sptr_pc_output_buffers_full_var(puncture_ff_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"puncture_ff_sptr_pc_work_time", _wrap_puncture_ff_sptr_pc_work_time, METH_VARARGS, (char *)"puncture_ff_sptr_pc_work_time(puncture_ff_sptr self) -> float"},
	 { (char *)"puncture_ff_sptr_pc_work_time_avg", _wrap_puncture_ff_sptr_pc_work_time_avg, METH_VARARGS, (char *)"puncture_ff_sptr_pc_work_time_avg(puncture_ff_sptr self) -> float"},
	 { (char *)"puncture_ff_sptr_pc_work_time_var", _wrap_puncture_ff_sptr_pc_work_time_var, METH_VARARGS, (char *)"puncture_ff_sptr_pc_work_time_var(puncture_ff_sptr self) -> float"},
	 { (char *)"puncture_ff_sptr_pc_work_time_total", _wrap_puncture_ff_sptr_pc_work_time_total, METH_VARARGS, (char *)"puncture_ff_sptr_pc_work_time_total(puncture_ff_sptr self) -> float"},
	 { (char *)"puncture_ff_sptr_pc_throughput_avg", _wrap_puncture_ff_sptr_pc_throughput_avg, METH_VARARGS, (char *)"puncture_ff_sptr_pc_throughput_avg(puncture_ff_sptr self) -> float"},
	 { (char *)"puncture_ff_sptr_set_processor_affinity", (PyCFunction) _wrap_puncture_ff_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"puncture_ff_sptr_set_processor_affinity(puncture_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"puncture_ff_sptr_unset_processor_affinity", _wrap_puncture_ff_sptr_unset_processor_affinity, METH_VARARGS, (char *)"puncture_ff_sptr_unset_processor_affinity(puncture_ff_sptr self)"},
	 { (char *)"puncture_ff_sptr_processor_affinity", _wrap_puncture_ff_sptr_processor_affinity, METH_VARARGS, (char *)"puncture_ff_sptr_processor_affinity(puncture_ff_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"puncture_ff_sptr_active_thread_priority", _wrap_puncture_ff_sptr_active_thread_priority, METH_VARARGS, (char *)"puncture_ff_sptr_active_thread_priority(puncture_ff_sptr self) -> int"},
	 { (char *)"puncture_ff_sptr_thread_priority", _wrap_puncture_ff_sptr_thread_priority, METH_VARARGS, (char *)"puncture_ff_sptr_thread_priority(puncture_ff_sptr self) -> int"},
	 { (char *)"puncture_ff_sptr_set_thread_priority", (PyCFunction) _wrap_puncture_ff_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"puncture_ff_sptr_set_thread_priority(puncture_ff_sptr self, int priority) -> int"},
	 { (char *)"puncture_ff_sptr_name", _wrap_puncture_ff_sptr_name, METH_VARARGS, (char *)"puncture_ff_sptr_name(puncture_ff_sptr self) -> std::string"},
	 { (char *)"puncture_ff_sptr_symbol_name", _wrap_puncture_ff_sptr_symbol_name, METH_VARARGS, (char *)"puncture_ff_sptr_symbol_name(puncture_ff_sptr self) -> std::string"},
	 { (char *)"puncture_ff_sptr_input_signature", _wrap_puncture_ff_sptr_input_signature, METH_VARARGS, (char *)"puncture_ff_sptr_input_signature(puncture_ff_sptr self) -> io_signature_sptr"},
	 { (char *)"puncture_ff_sptr_output_signature", _wrap_puncture_ff_sptr_output_signature, METH_VARARGS, (char *)"puncture_ff_sptr_output_signature(puncture_ff_sptr self) -> io_signature_sptr"},
	 { (char *)"puncture_ff_sptr_unique_id", _wrap_puncture_ff_sptr_unique_id, METH_VARARGS, (char *)"puncture_ff_sptr_unique_id(puncture_ff_sptr self) -> long"},
	 { (char *)"puncture_ff_sptr_to_basic_block", _wrap_puncture_ff_sptr_to_basic_block, METH_VARARGS, (char *)"puncture_ff_sptr_to_basic_block(puncture_ff_sptr self) -> basic_block_sptr"},
	 { (char *)"puncture_ff_sptr_check_topology", (PyCFunction) _wrap_puncture_ff_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"puncture_ff_sptr_check_topology(puncture_ff_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"puncture_ff_sptr_alias", _wrap_puncture_ff_sptr_alias, METH_VARARGS, (char *)"puncture_ff_sptr_alias(puncture_ff_sptr self) -> std::string"},
	 { (char *)"puncture_ff_sptr_set_block_alias", (PyCFunction) _wrap_puncture_ff_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"puncture_ff_sptr_set_block_alias(puncture_ff_sptr self, std::string name)"},
	 { (char *)"puncture_ff_sptr__post", (PyCFunction) _wrap_puncture_ff_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"puncture_ff_sptr__post(puncture_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"puncture_ff_sptr_message_ports_in", _wrap_puncture_ff_sptr_message_ports_in, METH_VARARGS, (char *)"puncture_ff_sptr_message_ports_in(puncture_ff_sptr self) -> swig_int_ptr"},
	 { (char *)"puncture_ff_sptr_message_ports_out", _wrap_puncture_ff_sptr_message_ports_out, METH_VARARGS, (char *)"puncture_ff_sptr_message_ports_out(puncture_ff_sptr self) -> swig_int_ptr"},
	 { (char *)"puncture_ff_sptr_message_subscribers", (PyCFunction) _wrap_puncture_ff_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"puncture_ff_sptr_message_subscribers(puncture_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"puncture_ff_sptr_swigregister", puncture_ff_sptr_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_depuncture_bb_sptr", _wrap_new_depuncture_bb_sptr, METH_VARARGS, (char *)"\n"
		"depuncture_bb_sptr()\n"
		"new_depuncture_bb_sptr(depuncture_bb p) -> depuncture_bb_sptr\n"
		""},
	 { (char *)"depuncture_bb_sptr___deref__", _wrap_depuncture_bb_sptr___deref__, METH_VARARGS, (char *)"depuncture_bb_sptr___deref__(depuncture_bb_sptr self) -> depuncture_bb"},
	 { (char *)"delete_depuncture_bb_sptr", _wrap_delete_depuncture_bb_sptr, METH_VARARGS, (char *)"delete_depuncture_bb_sptr(depuncture_bb_sptr self)"},
	 { (char *)"depuncture_bb_sptr_make", (PyCFunction) _wrap_depuncture_bb_sptr_make, METH_VARARGS | METH_KEYWORDS, (char *)"\n"
		"depuncture_bb_sptr_make(depuncture_bb_sptr self, int puncsize, int puncpat, int delay=0, char symbol=127) -> depuncture_bb_sptr\n"
		"\n"
		"Depuncture a stream of samples.\n"
		"\n"
		"Depuncture a given block of input samples of . The items produced is based on the pattern . Basically, if:\n"
		"\n"
		"\n"
		"\n"
		"This block is designed for unpacked bits - that is, every input sample is a bit, either a 1 or 0. It's possible to use packed bits as symbols, but the depuncturing will be done on the symbol level, not the bit level.\n"
		"\n"
		" is specified as a 32-bit integer that we can convert into the vector _puncpat used in the algorithm above:\n"
		"\n"
		"\n"
		"\n"
		"Example: \n"
		"\n"
		"The gr.fec Python module provides a read_bitlist function that can turn a string of a puncture pattern into the correct integer form. The pattern of 0xEF could be specified as fec.readbitlist(\"11101111\"). Also, this allows us to use puncsize=len(\"11101111\") to make sure that our sizes are set up correctly for the pattern we want.\n"
		"\n"
		"The fec.extended_decoder takes in the puncture pattern directly as a string and uses the readbitlist inside to do the conversion.\n"
		"\n"
		"The  parameter delays the application of the puncture pattern. This is equivalent to circularly rotating the  by . Note that because of the circular shift, the delay should be between 0 and , but this is not enforced; the effective delay will simply be  mod . A negative value here is ignored.\n"
		"\n"
		"Constructor Specific Documentation:\n"
		"\n"
		"Constructs a depuncture block.\n"
		"\n"
		"Args:\n"
		"    puncsize : Size of block of bits to puncture\n"
		"    puncpat : The puncturing pattern\n"
		"    delay : Delayed the puncturing pattern by shifting it\n"
		"    symbol : The symbol to reinsert into the stream (def=127)\n"
		""},
	 { (char *)"depuncture_bb_sptr_history", _wrap_depuncture_bb_sptr_history, METH_VARARGS, (char *)"depuncture_bb_sptr_history(depuncture_bb_sptr self) -> unsigned int"},
	 { (char *)"depuncture_bb_sptr_declare_sample_delay", _wrap_depuncture_bb_sptr_declare_sample_delay, METH_VARARGS, (char *)"\n"
		"declare_sample_delay(int which, int delay)\n"
		"depuncture_bb_sptr_declare_sample_delay(depuncture_bb_sptr self, unsigned int delay)\n"
		""},
	 { (char *)"depuncture_bb_sptr_sample_delay", (PyCFunction) _wrap_depuncture_bb_sptr_sample_delay, METH_VARARGS | METH_KEYWORDS, (char *)"depuncture_bb_sptr_sample_delay(depuncture_bb_sptr self, int which) -> unsigned int"},
	 { (char *)"depuncture_bb_sptr_output_multiple", _wrap_depuncture_bb_sptr_output_multiple, METH_VARARGS, (char *)"depuncture_bb_sptr_output_multiple(depuncture_bb_sptr self) -> int"},
	 { (char *)"depuncture_bb_sptr_relative_rate", _wrap_depuncture_bb_sptr_relative_rate, METH_VARARGS, (char *)"depuncture_bb_sptr_relative_rate(depuncture_bb_sptr self) -> double"},
	 { (char *)"depuncture_bb_sptr_start", _wrap_depuncture_bb_sptr_start, METH_VARARGS, (char *)"depuncture_bb_sptr_start(depuncture_bb_sptr self) -> bool"},
	 { (char *)"depuncture_bb_sptr_stop", _wrap_depuncture_bb_sptr_stop, METH_VARARGS, (char *)"depuncture_bb_sptr_stop(depuncture_bb_sptr self) -> bool"},
	 { (char *)"depuncture_bb_sptr_nitems_read", (PyCFunction) _wrap_depuncture_bb_sptr_nitems_read, METH_VARARGS | METH_KEYWORDS, (char *)"depuncture_bb_sptr_nitems_read(depuncture_bb_sptr self, unsigned int which_input) -> uint64_t"},
	 { (char *)"depuncture_bb_sptr_nitems_written", (PyCFunction) _wrap_depuncture_bb_sptr_nitems_written, METH_VARARGS | METH_KEYWORDS, (char *)"depuncture_bb_sptr_nitems_written(depuncture_bb_sptr self, unsigned int which_output) -> uint64_t"},
	 { (char *)"depuncture_bb_sptr_max_noutput_items", _wrap_depuncture_bb_sptr_max_noutput_items, METH_VARARGS, (char *)"depuncture_bb_sptr_max_noutput_items(depuncture_bb_sptr self) -> int"},
	 { (char *)"depuncture_bb_sptr_set_max_noutput_items", (PyCFunction) _wrap_depuncture_bb_sptr_set_max_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"depuncture_bb_sptr_set_max_noutput_items(depuncture_bb_sptr self, int m)"},
	 { (char *)"depuncture_bb_sptr_unset_max_noutput_items", _wrap_depuncture_bb_sptr_unset_max_noutput_items, METH_VARARGS, (char *)"depuncture_bb_sptr_unset_max_noutput_items(depuncture_bb_sptr self)"},
	 { (char *)"depuncture_bb_sptr_is_set_max_noutput_items", _wrap_depuncture_bb_sptr_is_set_max_noutput_items, METH_VARARGS, (char *)"depuncture_bb_sptr_is_set_max_noutput_items(depuncture_bb_sptr self) -> bool"},
	 { (char *)"depuncture_bb_sptr_set_min_noutput_items", (PyCFunction) _wrap_depuncture_bb_sptr_set_min_noutput_items, METH_VARARGS | METH_KEYWORDS, (char *)"depuncture_bb_sptr_set_min_noutput_items(depuncture_bb_sptr self, int m)"},
	 { (char *)"depuncture_bb_sptr_min_noutput_items", _wrap_depuncture_bb_sptr_min_noutput_items, METH_VARARGS, (char *)"depuncture_bb_sptr_min_noutput_items(depuncture_bb_sptr self) -> int"},
	 { (char *)"depuncture_bb_sptr_max_output_buffer", (PyCFunction) _wrap_depuncture_bb_sptr_max_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"depuncture_bb_sptr_max_output_buffer(depuncture_bb_sptr self, int i) -> long"},
	 { (char *)"depuncture_bb_sptr_set_max_output_buffer", _wrap_depuncture_bb_sptr_set_max_output_buffer, METH_VARARGS, (char *)"\n"
		"set_max_output_buffer(long max_output_buffer)\n"
		"depuncture_bb_sptr_set_max_output_buffer(depuncture_bb_sptr self, int port, long max_output_buffer)\n"
		""},
	 { (char *)"depuncture_bb_sptr_min_output_buffer", (PyCFunction) _wrap_depuncture_bb_sptr_min_output_buffer, METH_VARARGS | METH_KEYWORDS, (char *)"depuncture_bb_sptr_min_output_buffer(depuncture_bb_sptr self, int i) -> long"},
	 { (char *)"depuncture_bb_sptr_set_min_output_buffer", _wrap_depuncture_bb_sptr_set_min_output_buffer, METH_VARARGS, (char *)"\n"
		"set_min_output_buffer(long min_output_buffer)\n"
		"depuncture_bb_sptr_set_min_output_buffer(depuncture_bb_sptr self, int port, long min_output_buffer)\n"
		""},
	 { (char *)"depuncture_bb_sptr_pc_noutput_items", _wrap_depuncture_bb_sptr_pc_noutput_items, METH_VARARGS, (char *)"depuncture_bb_sptr_pc_noutput_items(depuncture_bb_sptr self) -> float"},
	 { (char *)"depuncture_bb_sptr_pc_noutput_items_avg", _wrap_depuncture_bb_sptr_pc_noutput_items_avg, METH_VARARGS, (char *)"depuncture_bb_sptr_pc_noutput_items_avg(depuncture_bb_sptr self) -> float"},
	 { (char *)"depuncture_bb_sptr_pc_noutput_items_var", _wrap_depuncture_bb_sptr_pc_noutput_items_var, METH_VARARGS, (char *)"depuncture_bb_sptr_pc_noutput_items_var(depuncture_bb_sptr self) -> float"},
	 { (char *)"depuncture_bb_sptr_pc_nproduced", _wrap_depuncture_bb_sptr_pc_nproduced, METH_VARARGS, (char *)"depuncture_bb_sptr_pc_nproduced(depuncture_bb_sptr self) -> float"},
	 { (char *)"depuncture_bb_sptr_pc_nproduced_avg", _wrap_depuncture_bb_sptr_pc_nproduced_avg, METH_VARARGS, (char *)"depuncture_bb_sptr_pc_nproduced_avg(depuncture_bb_sptr self) -> float"},
	 { (char *)"depuncture_bb_sptr_pc_nproduced_var", _wrap_depuncture_bb_sptr_pc_nproduced_var, METH_VARARGS, (char *)"depuncture_bb_sptr_pc_nproduced_var(depuncture_bb_sptr self) -> float"},
	 { (char *)"depuncture_bb_sptr_pc_input_buffers_full", _wrap_depuncture_bb_sptr_pc_input_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full(int which) -> float\n"
		"depuncture_bb_sptr_pc_input_buffers_full(depuncture_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"depuncture_bb_sptr_pc_input_buffers_full_avg", _wrap_depuncture_bb_sptr_pc_input_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_avg(int which) -> float\n"
		"depuncture_bb_sptr_pc_input_buffers_full_avg(depuncture_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"depuncture_bb_sptr_pc_input_buffers_full_var", _wrap_depuncture_bb_sptr_pc_input_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_input_buffers_full_var(int which) -> float\n"
		"depuncture_bb_sptr_pc_input_buffers_full_var(depuncture_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"depuncture_bb_sptr_pc_output_buffers_full", _wrap_depuncture_bb_sptr_pc_output_buffers_full, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full(int which) -> float\n"
		"depuncture_bb_sptr_pc_output_buffers_full(depuncture_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"depuncture_bb_sptr_pc_output_buffers_full_avg", _wrap_depuncture_bb_sptr_pc_output_buffers_full_avg, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_avg(int which) -> float\n"
		"depuncture_bb_sptr_pc_output_buffers_full_avg(depuncture_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"depuncture_bb_sptr_pc_output_buffers_full_var", _wrap_depuncture_bb_sptr_pc_output_buffers_full_var, METH_VARARGS, (char *)"\n"
		"pc_output_buffers_full_var(int which) -> float\n"
		"depuncture_bb_sptr_pc_output_buffers_full_var(depuncture_bb_sptr self) -> pmt_vector_float\n"
		""},
	 { (char *)"depuncture_bb_sptr_pc_work_time", _wrap_depuncture_bb_sptr_pc_work_time, METH_VARARGS, (char *)"depuncture_bb_sptr_pc_work_time(depuncture_bb_sptr self) -> float"},
	 { (char *)"depuncture_bb_sptr_pc_work_time_avg", _wrap_depuncture_bb_sptr_pc_work_time_avg, METH_VARARGS, (char *)"depuncture_bb_sptr_pc_work_time_avg(depuncture_bb_sptr self) -> float"},
	 { (char *)"depuncture_bb_sptr_pc_work_time_var", _wrap_depuncture_bb_sptr_pc_work_time_var, METH_VARARGS, (char *)"depuncture_bb_sptr_pc_work_time_var(depuncture_bb_sptr self) -> float"},
	 { (char *)"depuncture_bb_sptr_pc_work_time_total", _wrap_depuncture_bb_sptr_pc_work_time_total, METH_VARARGS, (char *)"depuncture_bb_sptr_pc_work_time_total(depuncture_bb_sptr self) -> float"},
	 { (char *)"depuncture_bb_sptr_pc_throughput_avg", _wrap_depuncture_bb_sptr_pc_throughput_avg, METH_VARARGS, (char *)"depuncture_bb_sptr_pc_throughput_avg(depuncture_bb_sptr self) -> float"},
	 { (char *)"depuncture_bb_sptr_set_processor_affinity", (PyCFunction) _wrap_depuncture_bb_sptr_set_processor_affinity, METH_VARARGS | METH_KEYWORDS, (char *)"depuncture_bb_sptr_set_processor_affinity(depuncture_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"},
	 { (char *)"depuncture_bb_sptr_unset_processor_affinity", _wrap_depuncture_bb_sptr_unset_processor_affinity, METH_VARARGS, (char *)"depuncture_bb_sptr_unset_processor_affinity(depuncture_bb_sptr self)"},
	 { (char *)"depuncture_bb_sptr_processor_affinity", _wrap_depuncture_bb_sptr_processor_affinity, METH_VARARGS, (char *)"depuncture_bb_sptr_processor_affinity(depuncture_bb_sptr self) -> std::vector< int,std::allocator< int > >"},
	 { (char *)"depuncture_bb_sptr_active_thread_priority", _wrap_depuncture_bb_sptr_active_thread_priority, METH_VARARGS, (char *)"depuncture_bb_sptr_active_thread_priority(depuncture_bb_sptr self) -> int"},
	 { (char *)"depuncture_bb_sptr_thread_priority", _wrap_depuncture_bb_sptr_thread_priority, METH_VARARGS, (char *)"depuncture_bb_sptr_thread_priority(depuncture_bb_sptr self) -> int"},
	 { (char *)"depuncture_bb_sptr_set_thread_priority", (PyCFunction) _wrap_depuncture_bb_sptr_set_thread_priority, METH_VARARGS | METH_KEYWORDS, (char *)"depuncture_bb_sptr_set_thread_priority(depuncture_bb_sptr self, int priority) -> int"},
	 { (char *)"depuncture_bb_sptr_name", _wrap_depuncture_bb_sptr_name, METH_VARARGS, (char *)"depuncture_bb_sptr_name(depuncture_bb_sptr self) -> std::string"},
	 { (char *)"depuncture_bb_sptr_symbol_name", _wrap_depuncture_bb_sptr_symbol_name, METH_VARARGS, (char *)"depuncture_bb_sptr_symbol_name(depuncture_bb_sptr self) -> std::string"},
	 { (char *)"depuncture_bb_sptr_input_signature", _wrap_depuncture_bb_sptr_input_signature, METH_VARARGS, (char *)"depuncture_bb_sptr_input_signature(depuncture_bb_sptr self) -> io_signature_sptr"},
	 { (char *)"depuncture_bb_sptr_output_signature", _wrap_depuncture_bb_sptr_output_signature, METH_VARARGS, (char *)"depuncture_bb_sptr_output_signature(depuncture_bb_sptr self) -> io_signature_sptr"},
	 { (char *)"depuncture_bb_sptr_unique_id", _wrap_depuncture_bb_sptr_unique_id, METH_VARARGS, (char *)"depuncture_bb_sptr_unique_id(depuncture_bb_sptr self) -> long"},
	 { (char *)"depuncture_bb_sptr_to_basic_block", _wrap_depuncture_bb_sptr_to_basic_block, METH_VARARGS, (char *)"depuncture_bb_sptr_to_basic_block(depuncture_bb_sptr self) -> basic_block_sptr"},
	 { (char *)"depuncture_bb_sptr_check_topology", (PyCFunction) _wrap_depuncture_bb_sptr_check_topology, METH_VARARGS | METH_KEYWORDS, (char *)"depuncture_bb_sptr_check_topology(depuncture_bb_sptr self, int ninputs, int noutputs) -> bool"},
	 { (char *)"depuncture_bb_sptr_alias", _wrap_depuncture_bb_sptr_alias, METH_VARARGS, (char *)"depuncture_bb_sptr_alias(depuncture_bb_sptr self) -> std::string"},
	 { (char *)"depuncture_bb_sptr_set_block_alias", (PyCFunction) _wrap_depuncture_bb_sptr_set_block_alias, METH_VARARGS | METH_KEYWORDS, (char *)"depuncture_bb_sptr_set_block_alias(depuncture_bb_sptr self, std::string name)"},
	 { (char *)"depuncture_bb_sptr__post", (PyCFunction) _wrap_depuncture_bb_sptr__post, METH_VARARGS | METH_KEYWORDS, (char *)"depuncture_bb_sptr__post(depuncture_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"},
	 { (char *)"depuncture_bb_sptr_message_ports_in", _wrap_depuncture_bb_sptr_message_ports_in, METH_VARARGS, (char *)"depuncture_bb_sptr_message_ports_in(depuncture_bb_sptr self) -> swig_int_ptr"},
	 { (char *)"depuncture_bb_sptr_message_ports_out", _wrap_depuncture_bb_sptr_message_ports_out, METH_VARARGS, (char *)"depuncture_bb_sptr_message_ports_out(depuncture_bb_sptr self) -> swig_int_ptr"},
	 { (char *)"depuncture_bb_sptr_message_subscribers", (PyCFunction) _wrap_depuncture_bb_sptr_message_subscribers, METH_VARARGS | METH_KEYWORDS, (char *)"depuncture_bb_sptr_message_subscribers(depuncture_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"},
	 { (char *)"depuncture_bb_sptr_swigregister", depuncture_bb_sptr_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_gr__fec__code__polar_decoder_sc_systematicTo_p_gr__fec__code__polar_decoder_common(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::fec::code::polar_decoder_common *)  ((gr::fec::code::polar_decoder_sc_systematic *) x));
}
static void *_p_gr__fec__code__polar_encoder_systematicTo_p_gr__fec__code__polar_common(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::fec::code::polar_common *)  ((gr::fec::code::polar_encoder_systematic *) x));
}
static void *_p_gr__fec__code__polar_decoder_sc_systematicTo_p_gr__fec__code__polar_common(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::fec::code::polar_common *) (gr::fec::code::polar_decoder_common *) ((gr::fec::code::polar_decoder_sc_systematic *) x));
}
static void *_p_gr__fec__code__polar_decoder_commonTo_p_gr__fec__code__polar_common(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::fec::code::polar_common *)  ((gr::fec::code::polar_decoder_common *) x));
}
static void *_p_gr__fec__decode_ccsds_27_fbTo_p_gr__sync_decimator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::sync_decimator *)  ((gr::fec::decode_ccsds_27_fb *) x));
}
static void *_p_gr__fec__encode_ccsds_27_bbTo_p_gr__sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::sync_block *) (gr::sync_interpolator *) ((gr::fec::encode_ccsds_27_bb *) x));
}
static void *_p_gr__sync_decimatorTo_p_gr__sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::sync_block *)  ((gr::sync_decimator *) x));
}
static void *_p_gr__fec__decode_ccsds_27_fbTo_p_gr__sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::sync_block *) (gr::sync_decimator *) ((gr::fec::decode_ccsds_27_fb *) x));
}
static void *_p_gr__sync_interpolatorTo_p_gr__sync_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::sync_block *)  ((gr::sync_interpolator *) x));
}
static void *_p_gr__fec__tagged_encoderTo_p_gr__tagged_stream_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::tagged_stream_block *)  ((gr::fec::tagged_encoder *) x));
}
static void *_p_gr__fec__tagged_decoderTo_p_gr__tagged_stream_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::tagged_stream_block *)  ((gr::fec::tagged_decoder *) x));
}
static void *_p_gr__blockTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *)  ((gr::block *) x));
}
static void *_p_gr__fec__conv_bit_corr_bbTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *) ((gr::fec::conv_bit_corr_bb *) x));
}
static void *_p_gr__tagged_stream_blockTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *) ((gr::tagged_stream_block *) x));
}
static void *_p_gr__sync_blockTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *) ((gr::sync_block *) x));
}
static void *_p_gr__fec__decode_ccsds_27_fbTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *)(gr::sync_block *)(gr::sync_decimator *) ((gr::fec::decode_ccsds_27_fb *) x));
}
static void *_p_gr__fec__ber_bfTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *) ((gr::fec::ber_bf *) x));
}
static void *_p_gr__hier_block2To_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *)  ((gr::hier_block2 *) x));
}
static void *_p_gr__fec__puncture_ffTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *) ((gr::fec::puncture_ff *) x));
}
static void *_p_gr__sync_interpolatorTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *)(gr::sync_block *) ((gr::sync_interpolator *) x));
}
static void *_p_gr__block_gatewayTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *) ((gr::block_gateway *) x));
}
static void *_p_gr__fec__puncture_bbTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *) ((gr::fec::puncture_bb *) x));
}
static void *_p_gr__fec__depuncture_bbTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *) ((gr::fec::depuncture_bb *) x));
}
static void *_p_gr__fec__async_decoderTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *) ((gr::fec::async_decoder *) x));
}
static void *_p_gr__fec__tagged_decoderTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *)(gr::tagged_stream_block *) ((gr::fec::tagged_decoder *) x));
}
static void *_p_gr__fec__decoderTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *) ((gr::fec::decoder *) x));
}
static void *_p_gr__fec__encode_ccsds_27_bbTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *)(gr::sync_block *)(gr::sync_interpolator *) ((gr::fec::encode_ccsds_27_bb *) x));
}
static void *_p_gr__top_blockTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::hier_block2 *) ((gr::top_block *) x));
}
static void *_p_gr__sync_decimatorTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *)(gr::sync_block *) ((gr::sync_decimator *) x));
}
static void *_p_gr__fec__async_encoderTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *) ((gr::fec::async_encoder *) x));
}
static void *_p_gr__fec__tagged_encoderTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *)(gr::tagged_stream_block *) ((gr::fec::tagged_encoder *) x));
}
static void *_p_gr__fec__encoderTo_p_gr__basic_block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::basic_block *) (gr::block *) ((gr::fec::encoder *) x));
}
static void *_p_gr__fec__code__ldpc_H_matrixTo_p_gr__fec__code__fec_mtrx(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::fec::code::fec_mtrx *)  ((gr::fec::code::ldpc_H_matrix *) x));
}
static void *_p_gr__fec__code__ldpc_G_matrixTo_p_gr__fec__code__fec_mtrx(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::fec::code::fec_mtrx *)  ((gr::fec::code::ldpc_G_matrix *) x));
}
static void *_p_gr__fec__conv_bit_corr_bbTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *)  ((gr::fec::conv_bit_corr_bb *) x));
}
static void *_p_gr__tagged_stream_blockTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *)  ((gr::tagged_stream_block *) x));
}
static void *_p_gr__sync_blockTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *)  ((gr::sync_block *) x));
}
static void *_p_gr__fec__decode_ccsds_27_fbTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *) (gr::sync_block *)(gr::sync_decimator *) ((gr::fec::decode_ccsds_27_fb *) x));
}
static void *_p_gr__fec__ber_bfTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *)  ((gr::fec::ber_bf *) x));
}
static void *_p_gr__fec__puncture_ffTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *)  ((gr::fec::puncture_ff *) x));
}
static void *_p_gr__sync_interpolatorTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *) (gr::sync_block *) ((gr::sync_interpolator *) x));
}
static void *_p_gr__block_gatewayTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *)  ((gr::block_gateway *) x));
}
static void *_p_gr__fec__puncture_bbTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *)  ((gr::fec::puncture_bb *) x));
}
static void *_p_gr__fec__depuncture_bbTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *)  ((gr::fec::depuncture_bb *) x));
}
static void *_p_gr__fec__async_decoderTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *)  ((gr::fec::async_decoder *) x));
}
static void *_p_gr__fec__tagged_decoderTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *) (gr::tagged_stream_block *) ((gr::fec::tagged_decoder *) x));
}
static void *_p_gr__fec__decoderTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *)  ((gr::fec::decoder *) x));
}
static void *_p_gr__fec__encode_ccsds_27_bbTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *) (gr::sync_block *)(gr::sync_interpolator *) ((gr::fec::encode_ccsds_27_bb *) x));
}
static void *_p_gr__sync_decimatorTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *) (gr::sync_block *) ((gr::sync_decimator *) x));
}
static void *_p_gr__fec__async_encoderTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *)  ((gr::fec::async_encoder *) x));
}
static void *_p_gr__fec__tagged_encoderTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *) (gr::tagged_stream_block *) ((gr::fec::tagged_encoder *) x));
}
static void *_p_gr__fec__encoderTo_p_gr__block(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::block *)  ((gr::fec::encoder *) x));
}
static void *_p_gr__fec__encode_ccsds_27_bbTo_p_gr__sync_interpolator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::sync_interpolator *)  ((gr::fec::encode_ccsds_27_bb *) x));
}
static void *_p_gr__fec__code__polar_decoder_sc_systematicTo_p_gr__fec__generic_decoder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::fec::generic_decoder *) (gr::fec::code::polar_decoder_common *) ((gr::fec::code::polar_decoder_sc_systematic *) x));
}
static void *_p_gr__fec__code__polar_decoder_commonTo_p_gr__fec__generic_decoder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::fec::generic_decoder *)  ((gr::fec::code::polar_decoder_common *) x));
}
static void *_p_gr__fec__code__cc_decoderTo_p_gr__fec__generic_decoder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::fec::generic_decoder *)  ((gr::fec::code::cc_decoder *) x));
}
static void *_p_gr__fec__code__dummy_decoderTo_p_gr__fec__generic_decoder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::fec::generic_decoder *)  ((gr::fec::code::dummy_decoder *) x));
}
static void *_p_gr__fec__code__repetition_decoderTo_p_gr__fec__generic_decoder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::fec::generic_decoder *)  ((gr::fec::code::repetition_decoder *) x));
}
static void *_p_gr__fec__tpc_decoderTo_p_gr__fec__generic_decoder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::fec::generic_decoder *)  ((gr::fec::tpc_decoder *) x));
}
static void *_p_gr__fec__code__ldpc_bit_flip_decoderTo_p_gr__fec__generic_decoder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::fec::generic_decoder *)  ((gr::fec::code::ldpc_bit_flip_decoder *) x));
}
static void *_p_gr__fec__ldpc_decoderTo_p_gr__fec__generic_decoder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::fec::generic_decoder *)  ((gr::fec::ldpc_decoder *) x));
}
static void *_p_gr__fec__code__cc_encoderTo_p_gr__fec__generic_encoder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::fec::generic_encoder *)  ((gr::fec::code::cc_encoder *) x));
}
static void *_p_gr__fec__code__ccsds_encoderTo_p_gr__fec__generic_encoder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::fec::generic_encoder *)  ((gr::fec::code::ccsds_encoder *) x));
}
static void *_p_gr__fec__code__dummy_encoderTo_p_gr__fec__generic_encoder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::fec::generic_encoder *)  ((gr::fec::code::dummy_encoder *) x));
}
static void *_p_gr__fec__code__repetition_encoderTo_p_gr__fec__generic_encoder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::fec::generic_encoder *)  ((gr::fec::code::repetition_encoder *) x));
}
static void *_p_gr__fec__tpc_encoderTo_p_gr__fec__generic_encoder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::fec::generic_encoder *)  ((gr::fec::tpc_encoder *) x));
}
static void *_p_gr__fec__code__polar_encoderTo_p_gr__fec__generic_encoder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::fec::generic_encoder *)  ((gr::fec::code::polar_encoder *) x));
}
static void *_p_gr__fec__code__polar_encoder_systematicTo_p_gr__fec__generic_encoder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::fec::generic_encoder *)  ((gr::fec::code::polar_encoder_systematic *) x));
}
static void *_p_gr__fec__ldpc_encoderTo_p_gr__fec__generic_encoder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::fec::generic_encoder *)  ((gr::fec::ldpc_encoder *) x));
}
static void *_p_gr__fec__code__ldpc_gen_mtrx_encoderTo_p_gr__fec__generic_encoder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::fec::generic_encoder *)  ((gr::fec::code::ldpc_gen_mtrx_encoder *) x));
}
static void *_p_gr__fec__code__ldpc_par_mtrx_encoderTo_p_gr__fec__generic_encoder(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((gr::fec::generic_encoder *)  ((gr::fec::code::ldpc_par_mtrx_encoder *) x));
}
static swig_type_info _swigt__p__cc_mode_t = {"_p__cc_mode_t", "enum _cc_mode_t *|cc_mode_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__intrusive_ptrT_pmt__pmt_base_t = {"_p_boost__intrusive_ptrT_pmt__pmt_base_t", "pmt::pmt_t *|boost::intrusive_ptr< pmt::pmt_base > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__basic_block_t = {"_p_boost__shared_ptrT_gr__basic_block_t", "boost::shared_ptr< gr::basic_block > *|gr::basic_block_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__block_detail_t = {"_p_boost__shared_ptrT_gr__block_detail_t", "boost::shared_ptr< gr::block_detail > *|gr::block_detail_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__block_t = {"_p_boost__shared_ptrT_gr__block_t", "boost::shared_ptr< gr::block > *|gr::block_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__buffer_reader_t = {"_p_boost__shared_ptrT_gr__buffer_reader_t", "boost::shared_ptr< gr::buffer_reader > *|gr::buffer_reader_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__buffer_t = {"_p_boost__shared_ptrT_gr__buffer_t", "boost::shared_ptr< gr::buffer > *|gr::buffer_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__fec__async_decoder_t = {"_p_boost__shared_ptrT_gr__fec__async_decoder_t", "gr::fec::async_decoder::sptr *|boost::shared_ptr< gr::fec::async_decoder > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__fec__async_encoder_t = {"_p_boost__shared_ptrT_gr__fec__async_encoder_t", "gr::fec::async_encoder::sptr *|boost::shared_ptr< gr::fec::async_encoder > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__fec__ber_bf_t = {"_p_boost__shared_ptrT_gr__fec__ber_bf_t", "gr::fec::ber_bf::sptr *|boost::shared_ptr< gr::fec::ber_bf > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__fec__code__fec_mtrx_t = {"_p_boost__shared_ptrT_gr__fec__code__fec_mtrx_t", "boost::shared_ptr< gr::fec::code::fec_mtrx > *|gr::fec::code::fec_mtrx_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__fec__code__ldpc_G_matrix_t = {"_p_boost__shared_ptrT_gr__fec__code__ldpc_G_matrix_t", "gr::fec::code::ldpc_G_matrix::sptr *|boost::shared_ptr< gr::fec::code::ldpc_G_matrix > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__fec__code__ldpc_H_matrix_t = {"_p_boost__shared_ptrT_gr__fec__code__ldpc_H_matrix_t", "gr::fec::code::ldpc_H_matrix::sptr *|boost::shared_ptr< gr::fec::code::ldpc_H_matrix > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__fec__code__matrix_t = {"_p_boost__shared_ptrT_gr__fec__code__matrix_t", "boost::shared_ptr< gr::fec::code::matrix > *|gr::fec::code::matrix_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t = {"_p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t", "gr::fec::conv_bit_corr_bb::sptr *|boost::shared_ptr< gr::fec::conv_bit_corr_bb > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t = {"_p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t", "gr::fec::decode_ccsds_27_fb::sptr *|boost::shared_ptr< gr::fec::decode_ccsds_27_fb > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__fec__decoder_t = {"_p_boost__shared_ptrT_gr__fec__decoder_t", "gr::fec::decoder::sptr *|boost::shared_ptr< gr::fec::decoder > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__fec__depuncture_bb_t = {"_p_boost__shared_ptrT_gr__fec__depuncture_bb_t", "gr::fec::depuncture_bb::sptr *|boost::shared_ptr< gr::fec::depuncture_bb > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t = {"_p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t", "gr::fec::encode_ccsds_27_bb::sptr *|boost::shared_ptr< gr::fec::encode_ccsds_27_bb > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__fec__encoder_t = {"_p_boost__shared_ptrT_gr__fec__encoder_t", "gr::fec::encoder::sptr *|boost::shared_ptr< gr::fec::encoder > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__fec__generic_decoder_t = {"_p_boost__shared_ptrT_gr__fec__generic_decoder_t", "gr::fec::generic_decoder::sptr *|boost::shared_ptr< gr::fec::generic_decoder > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__fec__generic_encoder_t = {"_p_boost__shared_ptrT_gr__fec__generic_encoder_t", "gr::fec::generic_encoder::sptr *|boost::shared_ptr< gr::fec::generic_encoder > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__fec__puncture_bb_t = {"_p_boost__shared_ptrT_gr__fec__puncture_bb_t", "gr::fec::puncture_bb::sptr *|boost::shared_ptr< gr::fec::puncture_bb > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__fec__puncture_ff_t = {"_p_boost__shared_ptrT_gr__fec__puncture_ff_t", "gr::fec::puncture_ff::sptr *|boost::shared_ptr< gr::fec::puncture_ff > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__fec__tagged_decoder_t = {"_p_boost__shared_ptrT_gr__fec__tagged_decoder_t", "gr::fec::tagged_decoder::sptr *|boost::shared_ptr< gr::fec::tagged_decoder > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__fec__tagged_encoder_t = {"_p_boost__shared_ptrT_gr__fec__tagged_encoder_t", "gr::fec::tagged_encoder::sptr *|boost::shared_ptr< gr::fec::tagged_encoder > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__flat_flowgraph_t = {"_p_boost__shared_ptrT_gr__flat_flowgraph_t", "boost::shared_ptr< gr::flat_flowgraph > *|gr::flat_flowgraph_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__flowgraph_t = {"_p_boost__shared_ptrT_gr__flowgraph_t", "boost::shared_ptr< gr::flowgraph > *|gr::flowgraph_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__hier_block2_t = {"_p_boost__shared_ptrT_gr__hier_block2_t", "boost::shared_ptr< gr::hier_block2 > *|gr::hier_block2_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__io_signature_t = {"_p_boost__shared_ptrT_gr__io_signature_t", "gr::io_signature::sptr *|boost::shared_ptr< gr::io_signature > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_gr__top_block_t = {"_p_boost__shared_ptrT_gr__top_block_t", "boost::shared_ptr< gr::top_block > *|gr::top_block_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_buf_sptr = {"_p_buf_sptr", "buf_sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_reference = {"_p_const_reference", "const_reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_decision_t = {"_p_decision_t", "decision_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "INPUT_DATATYPE *|float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__basic_block = {"_p_gr__basic_block", "gr::basic_block *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__hier_block2 = {"_p_gr__hier_block2", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_gr__block_gateway = {"_p_gr__block_gateway", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_gr__top_block = {"_p_gr__top_block", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_gr__block = {"_p_gr__block", "gr::block *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__endianness_t = {"_p_gr__endianness_t", "enum gr::endianness_t *|gr::endianness_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__async_decoder = {"_p_gr__fec__async_decoder", "gr::fec::async_decoder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__async_encoder = {"_p_gr__fec__async_encoder", "gr::fec::async_encoder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__ber_bf = {"_p_gr__fec__ber_bf", "gr::fec::ber_bf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__code__block_data = {"_p_gr__fec__code__block_data", "gr::fec::code::block_data *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__code__cc_decoder = {"_p_gr__fec__code__cc_decoder", "gr::fec::code::cc_decoder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__code__cc_encoder = {"_p_gr__fec__code__cc_encoder", "gr::fec::code::cc_encoder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__code__ccsds_encoder = {"_p_gr__fec__code__ccsds_encoder", "gr::fec::code::ccsds_encoder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__code__dummy_decoder = {"_p_gr__fec__code__dummy_decoder", "gr::fec::code::dummy_decoder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__code__dummy_encoder = {"_p_gr__fec__code__dummy_encoder", "gr::fec::code::dummy_encoder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__code__fec_mtrx = {"_p_gr__fec__code__fec_mtrx", "gr::fec::code::fec_mtrx *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__code__ldpc_G_matrix = {"_p_gr__fec__code__ldpc_G_matrix", "gr::fec::code::ldpc_G_matrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__code__ldpc_H_matrix = {"_p_gr__fec__code__ldpc_H_matrix", "gr::fec::code::ldpc_H_matrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__code__ldpc_bit_flip_decoder = {"_p_gr__fec__code__ldpc_bit_flip_decoder", "gr::fec::code::ldpc_bit_flip_decoder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__code__ldpc_gen_mtrx_encoder = {"_p_gr__fec__code__ldpc_gen_mtrx_encoder", "gr::fec::code::ldpc_gen_mtrx_encoder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__code__ldpc_par_mtrx_encoder = {"_p_gr__fec__code__ldpc_par_mtrx_encoder", "gr::fec::code::ldpc_par_mtrx_encoder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__code__matrix = {"_p_gr__fec__code__matrix", "gr::fec::code::matrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__code__polar_common = {"_p_gr__fec__code__polar_common", "gr::fec::code::polar_common *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__code__polar_decoder_common = {"_p_gr__fec__code__polar_decoder_common", "gr::fec::code::polar_decoder_common *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__code__polar_decoder_sc = {"_p_gr__fec__code__polar_decoder_sc", "gr::fec::code::polar_decoder_sc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__code__polar_decoder_sc_list = {"_p_gr__fec__code__polar_decoder_sc_list", "gr::fec::code::polar_decoder_sc_list *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__code__polar_decoder_sc_systematic = {"_p_gr__fec__code__polar_decoder_sc_systematic", "gr::fec::code::polar_decoder_sc_systematic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__code__polar_encoder = {"_p_gr__fec__code__polar_encoder", "gr::fec::code::polar_encoder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__code__polar_encoder_systematic = {"_p_gr__fec__code__polar_encoder_systematic", "gr::fec::code::polar_encoder_systematic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__code__repetition_decoder = {"_p_gr__fec__code__repetition_decoder", "gr::fec::code::repetition_decoder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__code__repetition_encoder = {"_p_gr__fec__code__repetition_encoder", "gr::fec::code::repetition_encoder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__conv_bit_corr_bb = {"_p_gr__fec__conv_bit_corr_bb", "gr::fec::conv_bit_corr_bb *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__decode_ccsds_27_fb = {"_p_gr__fec__decode_ccsds_27_fb", "gr::fec::decode_ccsds_27_fb *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__decoder = {"_p_gr__fec__decoder", "gr::fec::decoder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__depuncture_bb = {"_p_gr__fec__depuncture_bb", "gr::fec::depuncture_bb *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__encode_ccsds_27_bb = {"_p_gr__fec__encode_ccsds_27_bb", "gr::fec::encode_ccsds_27_bb *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__encoder = {"_p_gr__fec__encoder", "gr::fec::encoder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__generic_decoder = {"_p_gr__fec__generic_decoder", "gr::fec::generic_decoder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__generic_encoder = {"_p_gr__fec__generic_encoder", "gr::fec::generic_encoder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__ldpc_decoder = {"_p_gr__fec__ldpc_decoder", "gr::fec::ldpc_decoder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__ldpc_encoder = {"_p_gr__fec__ldpc_encoder", "gr::fec::ldpc_encoder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__puncture_bb = {"_p_gr__fec__puncture_bb", "gr::fec::puncture_bb *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__puncture_ff = {"_p_gr__fec__puncture_ff", "gr::fec::puncture_ff *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__tagged_decoder = {"_p_gr__fec__tagged_decoder", "gr::fec::tagged_decoder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__tagged_encoder = {"_p_gr__fec__tagged_encoder", "gr::fec::tagged_encoder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__tpc_decoder = {"_p_gr__fec__tpc_decoder", "gr::fec::tpc_decoder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__fec__tpc_encoder = {"_p_gr__fec__tpc_encoder", "gr::fec::tpc_encoder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__rt_status_t = {"_p_gr__rt_status_t", "enum gr::rt_status_t *|gr::rt_status_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__sync_block = {"_p_gr__sync_block", "gr::sync_block *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__sync_decimator = {"_p_gr__sync_decimator", "gr::sync_decimator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__sync_interpolator = {"_p_gr__sync_interpolator", "gr::sync_interpolator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr__tagged_stream_block = {"_p_gr__tagged_stream_block", "gr::tagged_stream_block *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr_vector_const_void_star = {"_p_gr_vector_const_void_star", "gr_vector_const_void_star *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr_vector_int = {"_p_gr_vector_int", "gr_vector_int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_gr_vector_void_star = {"_p_gr_vector_void_star", "gr_vector_void_star *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "gr::high_res_timer_type *|int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_metric_t = {"_p_metric_t", "metric_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_reference = {"_p_reference", "reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sptr = {"_p_sptr", "sptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_double_t = {"_p_std__complexT_double_t", "gr_complexd *|std::complex< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_float_t = {"_p_std__complexT_float_t", "std::complex< float > *|gr_complex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_long_long_std__allocatorT_unsigned_long_long_t_t = {"_p_std__vectorT_unsigned_long_long_std__allocatorT_unsigned_long_long_t_t", "std::vector< unsigned long long,std::allocator< unsigned long long > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|OUTPUT_DATATYPE *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|DisplayType *|uint32_t *|unsigned int *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_v = {"_p_v", "v *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p__cc_mode_t,
  &_swigt__p_allocator_type,
  &_swigt__p_boost__intrusive_ptrT_pmt__pmt_base_t,
  &_swigt__p_boost__shared_ptrT_gr__basic_block_t,
  &_swigt__p_boost__shared_ptrT_gr__block_detail_t,
  &_swigt__p_boost__shared_ptrT_gr__block_t,
  &_swigt__p_boost__shared_ptrT_gr__buffer_reader_t,
  &_swigt__p_boost__shared_ptrT_gr__buffer_t,
  &_swigt__p_boost__shared_ptrT_gr__fec__async_decoder_t,
  &_swigt__p_boost__shared_ptrT_gr__fec__async_encoder_t,
  &_swigt__p_boost__shared_ptrT_gr__fec__ber_bf_t,
  &_swigt__p_boost__shared_ptrT_gr__fec__code__fec_mtrx_t,
  &_swigt__p_boost__shared_ptrT_gr__fec__code__ldpc_G_matrix_t,
  &_swigt__p_boost__shared_ptrT_gr__fec__code__ldpc_H_matrix_t,
  &_swigt__p_boost__shared_ptrT_gr__fec__code__matrix_t,
  &_swigt__p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t,
  &_swigt__p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t,
  &_swigt__p_boost__shared_ptrT_gr__fec__decoder_t,
  &_swigt__p_boost__shared_ptrT_gr__fec__depuncture_bb_t,
  &_swigt__p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t,
  &_swigt__p_boost__shared_ptrT_gr__fec__encoder_t,
  &_swigt__p_boost__shared_ptrT_gr__fec__generic_decoder_t,
  &_swigt__p_boost__shared_ptrT_gr__fec__generic_encoder_t,
  &_swigt__p_boost__shared_ptrT_gr__fec__puncture_bb_t,
  &_swigt__p_boost__shared_ptrT_gr__fec__puncture_ff_t,
  &_swigt__p_boost__shared_ptrT_gr__fec__tagged_decoder_t,
  &_swigt__p_boost__shared_ptrT_gr__fec__tagged_encoder_t,
  &_swigt__p_boost__shared_ptrT_gr__flat_flowgraph_t,
  &_swigt__p_boost__shared_ptrT_gr__flowgraph_t,
  &_swigt__p_boost__shared_ptrT_gr__hier_block2_t,
  &_swigt__p_boost__shared_ptrT_gr__io_signature_t,
  &_swigt__p_boost__shared_ptrT_gr__top_block_t,
  &_swigt__p_buf_sptr,
  &_swigt__p_char,
  &_swigt__p_const_reference,
  &_swigt__p_decision_t,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_gr__basic_block,
  &_swigt__p_gr__block,
  &_swigt__p_gr__block_gateway,
  &_swigt__p_gr__endianness_t,
  &_swigt__p_gr__fec__async_decoder,
  &_swigt__p_gr__fec__async_encoder,
  &_swigt__p_gr__fec__ber_bf,
  &_swigt__p_gr__fec__code__block_data,
  &_swigt__p_gr__fec__code__cc_decoder,
  &_swigt__p_gr__fec__code__cc_encoder,
  &_swigt__p_gr__fec__code__ccsds_encoder,
  &_swigt__p_gr__fec__code__dummy_decoder,
  &_swigt__p_gr__fec__code__dummy_encoder,
  &_swigt__p_gr__fec__code__fec_mtrx,
  &_swigt__p_gr__fec__code__ldpc_G_matrix,
  &_swigt__p_gr__fec__code__ldpc_H_matrix,
  &_swigt__p_gr__fec__code__ldpc_bit_flip_decoder,
  &_swigt__p_gr__fec__code__ldpc_gen_mtrx_encoder,
  &_swigt__p_gr__fec__code__ldpc_par_mtrx_encoder,
  &_swigt__p_gr__fec__code__matrix,
  &_swigt__p_gr__fec__code__polar_common,
  &_swigt__p_gr__fec__code__polar_decoder_common,
  &_swigt__p_gr__fec__code__polar_decoder_sc,
  &_swigt__p_gr__fec__code__polar_decoder_sc_list,
  &_swigt__p_gr__fec__code__polar_decoder_sc_systematic,
  &_swigt__p_gr__fec__code__polar_encoder,
  &_swigt__p_gr__fec__code__polar_encoder_systematic,
  &_swigt__p_gr__fec__code__repetition_decoder,
  &_swigt__p_gr__fec__code__repetition_encoder,
  &_swigt__p_gr__fec__conv_bit_corr_bb,
  &_swigt__p_gr__fec__decode_ccsds_27_fb,
  &_swigt__p_gr__fec__decoder,
  &_swigt__p_gr__fec__depuncture_bb,
  &_swigt__p_gr__fec__encode_ccsds_27_bb,
  &_swigt__p_gr__fec__encoder,
  &_swigt__p_gr__fec__generic_decoder,
  &_swigt__p_gr__fec__generic_encoder,
  &_swigt__p_gr__fec__ldpc_decoder,
  &_swigt__p_gr__fec__ldpc_encoder,
  &_swigt__p_gr__fec__puncture_bb,
  &_swigt__p_gr__fec__puncture_ff,
  &_swigt__p_gr__fec__tagged_decoder,
  &_swigt__p_gr__fec__tagged_encoder,
  &_swigt__p_gr__fec__tpc_decoder,
  &_swigt__p_gr__fec__tpc_encoder,
  &_swigt__p_gr__hier_block2,
  &_swigt__p_gr__rt_status_t,
  &_swigt__p_gr__sync_block,
  &_swigt__p_gr__sync_decimator,
  &_swigt__p_gr__sync_interpolator,
  &_swigt__p_gr__tagged_stream_block,
  &_swigt__p_gr__top_block,
  &_swigt__p_gr_vector_const_void_star,
  &_swigt__p_gr_vector_int,
  &_swigt__p_gr_vector_void_star,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_metric_t,
  &_swigt__p_reference,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_type,
  &_swigt__p_sptr,
  &_swigt__p_std__complexT_double_t,
  &_swigt__p_std__complexT_float_t,
  &_swigt__p_std__vectorT_unsigned_long_long_std__allocatorT_unsigned_long_long_t_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_v,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p__cc_mode_t[] = {  {&_swigt__p__cc_mode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__intrusive_ptrT_pmt__pmt_base_t[] = {  {&_swigt__p_boost__intrusive_ptrT_pmt__pmt_base_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__basic_block_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__basic_block_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__block_detail_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__block_detail_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__block_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__block_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__buffer_reader_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__buffer_reader_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__buffer_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__buffer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__fec__async_decoder_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__fec__async_decoder_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__fec__async_encoder_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__fec__async_encoder_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__fec__ber_bf_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__fec__ber_bf_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__fec__code__fec_mtrx_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__fec__code__fec_mtrx_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__fec__code__ldpc_G_matrix_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__fec__code__ldpc_G_matrix_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__fec__code__ldpc_H_matrix_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__fec__code__ldpc_H_matrix_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__fec__code__matrix_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__fec__code__matrix_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__fec__decoder_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__fec__decoder_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__fec__depuncture_bb_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__fec__depuncture_bb_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__fec__encoder_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__fec__encoder_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__fec__generic_decoder_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__fec__generic_decoder_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__fec__generic_encoder_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__fec__generic_encoder_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__fec__puncture_bb_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__fec__puncture_bb_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__fec__puncture_ff_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__fec__puncture_ff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__fec__tagged_decoder_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__fec__tagged_decoder_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__fec__tagged_encoder_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__fec__tagged_encoder_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__flat_flowgraph_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__flat_flowgraph_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__flowgraph_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__flowgraph_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__hier_block2_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__hier_block2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__io_signature_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__io_signature_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_gr__top_block_t[] = {  {&_swigt__p_boost__shared_ptrT_gr__top_block_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_buf_sptr[] = {  {&_swigt__p_buf_sptr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_reference[] = {  {&_swigt__p_const_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_decision_t[] = {  {&_swigt__p_decision_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__hier_block2[] = {{&_swigt__p_gr__hier_block2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__block_gateway[] = {{&_swigt__p_gr__block_gateway, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__top_block[] = {{&_swigt__p_gr__top_block, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__basic_block[] = {  {&_swigt__p_gr__fec__conv_bit_corr_bb, _p_gr__fec__conv_bit_corr_bbTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__block, _p_gr__blockTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__tagged_stream_block, _p_gr__tagged_stream_blockTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__sync_block, _p_gr__sync_blockTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__basic_block, 0, 0, 0},  {&_swigt__p_gr__fec__decode_ccsds_27_fb, _p_gr__fec__decode_ccsds_27_fbTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__hier_block2, _p_gr__hier_block2To_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__fec__puncture_ff, _p_gr__fec__puncture_ffTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__sync_interpolator, _p_gr__sync_interpolatorTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__block_gateway, _p_gr__block_gatewayTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__fec__ber_bf, _p_gr__fec__ber_bfTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__fec__depuncture_bb, _p_gr__fec__depuncture_bbTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__fec__puncture_bb, _p_gr__fec__puncture_bbTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__fec__tagged_decoder, _p_gr__fec__tagged_decoderTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__fec__encode_ccsds_27_bb, _p_gr__fec__encode_ccsds_27_bbTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__fec__decoder, _p_gr__fec__decoderTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__fec__async_decoder, _p_gr__fec__async_decoderTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__top_block, _p_gr__top_blockTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__sync_decimator, _p_gr__sync_decimatorTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__fec__tagged_encoder, _p_gr__fec__tagged_encoderTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__fec__async_encoder, _p_gr__fec__async_encoderTo_p_gr__basic_block, 0, 0},  {&_swigt__p_gr__fec__encoder, _p_gr__fec__encoderTo_p_gr__basic_block, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__block[] = {  {&_swigt__p_gr__fec__conv_bit_corr_bb, _p_gr__fec__conv_bit_corr_bbTo_p_gr__block, 0, 0},  {&_swigt__p_gr__tagged_stream_block, _p_gr__tagged_stream_blockTo_p_gr__block, 0, 0},  {&_swigt__p_gr__sync_block, _p_gr__sync_blockTo_p_gr__block, 0, 0},  {&_swigt__p_gr__block, 0, 0, 0},  {&_swigt__p_gr__fec__decode_ccsds_27_fb, _p_gr__fec__decode_ccsds_27_fbTo_p_gr__block, 0, 0},  {&_swigt__p_gr__fec__puncture_ff, _p_gr__fec__puncture_ffTo_p_gr__block, 0, 0},  {&_swigt__p_gr__sync_interpolator, _p_gr__sync_interpolatorTo_p_gr__block, 0, 0},  {&_swigt__p_gr__block_gateway, _p_gr__block_gatewayTo_p_gr__block, 0, 0},  {&_swigt__p_gr__fec__ber_bf, _p_gr__fec__ber_bfTo_p_gr__block, 0, 0},  {&_swigt__p_gr__fec__depuncture_bb, _p_gr__fec__depuncture_bbTo_p_gr__block, 0, 0},  {&_swigt__p_gr__fec__puncture_bb, _p_gr__fec__puncture_bbTo_p_gr__block, 0, 0},  {&_swigt__p_gr__fec__tagged_decoder, _p_gr__fec__tagged_decoderTo_p_gr__block, 0, 0},  {&_swigt__p_gr__fec__encode_ccsds_27_bb, _p_gr__fec__encode_ccsds_27_bbTo_p_gr__block, 0, 0},  {&_swigt__p_gr__fec__decoder, _p_gr__fec__decoderTo_p_gr__block, 0, 0},  {&_swigt__p_gr__fec__async_decoder, _p_gr__fec__async_decoderTo_p_gr__block, 0, 0},  {&_swigt__p_gr__sync_decimator, _p_gr__sync_decimatorTo_p_gr__block, 0, 0},  {&_swigt__p_gr__fec__tagged_encoder, _p_gr__fec__tagged_encoderTo_p_gr__block, 0, 0},  {&_swigt__p_gr__fec__async_encoder, _p_gr__fec__async_encoderTo_p_gr__block, 0, 0},  {&_swigt__p_gr__fec__encoder, _p_gr__fec__encoderTo_p_gr__block, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__endianness_t[] = {  {&_swigt__p_gr__endianness_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__async_decoder[] = {  {&_swigt__p_gr__fec__async_decoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__async_encoder[] = {  {&_swigt__p_gr__fec__async_encoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__ber_bf[] = {  {&_swigt__p_gr__fec__ber_bf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__code__block_data[] = {  {&_swigt__p_gr__fec__code__block_data, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__code__cc_decoder[] = {  {&_swigt__p_gr__fec__code__cc_decoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__code__cc_encoder[] = {  {&_swigt__p_gr__fec__code__cc_encoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__code__ccsds_encoder[] = {  {&_swigt__p_gr__fec__code__ccsds_encoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__code__dummy_decoder[] = {  {&_swigt__p_gr__fec__code__dummy_decoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__code__dummy_encoder[] = {  {&_swigt__p_gr__fec__code__dummy_encoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__code__fec_mtrx[] = {  {&_swigt__p_gr__fec__code__fec_mtrx, 0, 0, 0},  {&_swigt__p_gr__fec__code__ldpc_H_matrix, _p_gr__fec__code__ldpc_H_matrixTo_p_gr__fec__code__fec_mtrx, 0, 0},  {&_swigt__p_gr__fec__code__ldpc_G_matrix, _p_gr__fec__code__ldpc_G_matrixTo_p_gr__fec__code__fec_mtrx, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__code__ldpc_G_matrix[] = {  {&_swigt__p_gr__fec__code__ldpc_G_matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__code__ldpc_H_matrix[] = {  {&_swigt__p_gr__fec__code__ldpc_H_matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__code__ldpc_bit_flip_decoder[] = {  {&_swigt__p_gr__fec__code__ldpc_bit_flip_decoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__code__ldpc_gen_mtrx_encoder[] = {  {&_swigt__p_gr__fec__code__ldpc_gen_mtrx_encoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__code__ldpc_par_mtrx_encoder[] = {  {&_swigt__p_gr__fec__code__ldpc_par_mtrx_encoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__code__matrix[] = {  {&_swigt__p_gr__fec__code__matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__code__polar_common[] = {  {&_swigt__p_gr__fec__code__polar_encoder_systematic, _p_gr__fec__code__polar_encoder_systematicTo_p_gr__fec__code__polar_common, 0, 0},  {&_swigt__p_gr__fec__code__polar_decoder_sc_systematic, _p_gr__fec__code__polar_decoder_sc_systematicTo_p_gr__fec__code__polar_common, 0, 0},  {&_swigt__p_gr__fec__code__polar_common, 0, 0, 0},  {&_swigt__p_gr__fec__code__polar_decoder_common, _p_gr__fec__code__polar_decoder_commonTo_p_gr__fec__code__polar_common, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__code__polar_decoder_common[] = {  {&_swigt__p_gr__fec__code__polar_decoder_sc_systematic, _p_gr__fec__code__polar_decoder_sc_systematicTo_p_gr__fec__code__polar_decoder_common, 0, 0},  {&_swigt__p_gr__fec__code__polar_decoder_common, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__code__polar_decoder_sc[] = {  {&_swigt__p_gr__fec__code__polar_decoder_sc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__code__polar_decoder_sc_list[] = {  {&_swigt__p_gr__fec__code__polar_decoder_sc_list, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__code__polar_decoder_sc_systematic[] = {  {&_swigt__p_gr__fec__code__polar_decoder_sc_systematic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__code__polar_encoder[] = {  {&_swigt__p_gr__fec__code__polar_encoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__code__polar_encoder_systematic[] = {  {&_swigt__p_gr__fec__code__polar_encoder_systematic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__code__repetition_decoder[] = {  {&_swigt__p_gr__fec__code__repetition_decoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__code__repetition_encoder[] = {  {&_swigt__p_gr__fec__code__repetition_encoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__conv_bit_corr_bb[] = {  {&_swigt__p_gr__fec__conv_bit_corr_bb, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__decode_ccsds_27_fb[] = {  {&_swigt__p_gr__fec__decode_ccsds_27_fb, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__decoder[] = {  {&_swigt__p_gr__fec__decoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__depuncture_bb[] = {  {&_swigt__p_gr__fec__depuncture_bb, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__encode_ccsds_27_bb[] = {  {&_swigt__p_gr__fec__encode_ccsds_27_bb, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__encoder[] = {  {&_swigt__p_gr__fec__encoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__generic_decoder[] = {  {&_swigt__p_gr__fec__code__polar_decoder_sc_systematic, _p_gr__fec__code__polar_decoder_sc_systematicTo_p_gr__fec__generic_decoder, 0, 0},  {&_swigt__p_gr__fec__code__polar_decoder_common, _p_gr__fec__code__polar_decoder_commonTo_p_gr__fec__generic_decoder, 0, 0},  {&_swigt__p_gr__fec__generic_decoder, 0, 0, 0},  {&_swigt__p_gr__fec__code__cc_decoder, _p_gr__fec__code__cc_decoderTo_p_gr__fec__generic_decoder, 0, 0},  {&_swigt__p_gr__fec__code__dummy_decoder, _p_gr__fec__code__dummy_decoderTo_p_gr__fec__generic_decoder, 0, 0},  {&_swigt__p_gr__fec__code__repetition_decoder, _p_gr__fec__code__repetition_decoderTo_p_gr__fec__generic_decoder, 0, 0},  {&_swigt__p_gr__fec__tpc_decoder, _p_gr__fec__tpc_decoderTo_p_gr__fec__generic_decoder, 0, 0},  {&_swigt__p_gr__fec__code__ldpc_bit_flip_decoder, _p_gr__fec__code__ldpc_bit_flip_decoderTo_p_gr__fec__generic_decoder, 0, 0},  {&_swigt__p_gr__fec__ldpc_decoder, _p_gr__fec__ldpc_decoderTo_p_gr__fec__generic_decoder, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__generic_encoder[] = {  {&_swigt__p_gr__fec__generic_encoder, 0, 0, 0},  {&_swigt__p_gr__fec__code__cc_encoder, _p_gr__fec__code__cc_encoderTo_p_gr__fec__generic_encoder, 0, 0},  {&_swigt__p_gr__fec__code__ccsds_encoder, _p_gr__fec__code__ccsds_encoderTo_p_gr__fec__generic_encoder, 0, 0},  {&_swigt__p_gr__fec__code__dummy_encoder, _p_gr__fec__code__dummy_encoderTo_p_gr__fec__generic_encoder, 0, 0},  {&_swigt__p_gr__fec__code__repetition_encoder, _p_gr__fec__code__repetition_encoderTo_p_gr__fec__generic_encoder, 0, 0},  {&_swigt__p_gr__fec__tpc_encoder, _p_gr__fec__tpc_encoderTo_p_gr__fec__generic_encoder, 0, 0},  {&_swigt__p_gr__fec__code__polar_encoder, _p_gr__fec__code__polar_encoderTo_p_gr__fec__generic_encoder, 0, 0},  {&_swigt__p_gr__fec__code__polar_encoder_systematic, _p_gr__fec__code__polar_encoder_systematicTo_p_gr__fec__generic_encoder, 0, 0},  {&_swigt__p_gr__fec__ldpc_encoder, _p_gr__fec__ldpc_encoderTo_p_gr__fec__generic_encoder, 0, 0},  {&_swigt__p_gr__fec__code__ldpc_gen_mtrx_encoder, _p_gr__fec__code__ldpc_gen_mtrx_encoderTo_p_gr__fec__generic_encoder, 0, 0},  {&_swigt__p_gr__fec__code__ldpc_par_mtrx_encoder, _p_gr__fec__code__ldpc_par_mtrx_encoderTo_p_gr__fec__generic_encoder, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__ldpc_decoder[] = {  {&_swigt__p_gr__fec__ldpc_decoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__ldpc_encoder[] = {  {&_swigt__p_gr__fec__ldpc_encoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__puncture_bb[] = {  {&_swigt__p_gr__fec__puncture_bb, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__puncture_ff[] = {  {&_swigt__p_gr__fec__puncture_ff, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__tagged_decoder[] = {  {&_swigt__p_gr__fec__tagged_decoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__tagged_encoder[] = {  {&_swigt__p_gr__fec__tagged_encoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__tpc_decoder[] = {  {&_swigt__p_gr__fec__tpc_decoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__fec__tpc_encoder[] = {  {&_swigt__p_gr__fec__tpc_encoder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__rt_status_t[] = {  {&_swigt__p_gr__rt_status_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__sync_block[] = {  {&_swigt__p_gr__fec__encode_ccsds_27_bb, _p_gr__fec__encode_ccsds_27_bbTo_p_gr__sync_block, 0, 0},  {&_swigt__p_gr__sync_decimator, _p_gr__sync_decimatorTo_p_gr__sync_block, 0, 0},  {&_swigt__p_gr__fec__decode_ccsds_27_fb, _p_gr__fec__decode_ccsds_27_fbTo_p_gr__sync_block, 0, 0},  {&_swigt__p_gr__sync_block, 0, 0, 0},  {&_swigt__p_gr__sync_interpolator, _p_gr__sync_interpolatorTo_p_gr__sync_block, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__sync_decimator[] = {  {&_swigt__p_gr__sync_decimator, 0, 0, 0},  {&_swigt__p_gr__fec__decode_ccsds_27_fb, _p_gr__fec__decode_ccsds_27_fbTo_p_gr__sync_decimator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__sync_interpolator[] = {  {&_swigt__p_gr__fec__encode_ccsds_27_bb, _p_gr__fec__encode_ccsds_27_bbTo_p_gr__sync_interpolator, 0, 0},  {&_swigt__p_gr__sync_interpolator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr__tagged_stream_block[] = {  {&_swigt__p_gr__fec__tagged_encoder, _p_gr__fec__tagged_encoderTo_p_gr__tagged_stream_block, 0, 0},  {&_swigt__p_gr__fec__tagged_decoder, _p_gr__fec__tagged_decoderTo_p_gr__tagged_stream_block, 0, 0},  {&_swigt__p_gr__tagged_stream_block, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr_vector_const_void_star[] = {  {&_swigt__p_gr_vector_const_void_star, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr_vector_int[] = {  {&_swigt__p_gr_vector_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_gr_vector_void_star[] = {  {&_swigt__p_gr_vector_void_star, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_metric_t[] = {  {&_swigt__p_metric_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_reference[] = {  {&_swigt__p_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sptr[] = {  {&_swigt__p_sptr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_double_t[] = {  {&_swigt__p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_float_t[] = {  {&_swigt__p_std__complexT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_long_long_std__allocatorT_unsigned_long_long_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_long_long_std__allocatorT_unsigned_long_long_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_v[] = {  {&_swigt__p_v, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p__cc_mode_t,
  _swigc__p_allocator_type,
  _swigc__p_boost__intrusive_ptrT_pmt__pmt_base_t,
  _swigc__p_boost__shared_ptrT_gr__basic_block_t,
  _swigc__p_boost__shared_ptrT_gr__block_detail_t,
  _swigc__p_boost__shared_ptrT_gr__block_t,
  _swigc__p_boost__shared_ptrT_gr__buffer_reader_t,
  _swigc__p_boost__shared_ptrT_gr__buffer_t,
  _swigc__p_boost__shared_ptrT_gr__fec__async_decoder_t,
  _swigc__p_boost__shared_ptrT_gr__fec__async_encoder_t,
  _swigc__p_boost__shared_ptrT_gr__fec__ber_bf_t,
  _swigc__p_boost__shared_ptrT_gr__fec__code__fec_mtrx_t,
  _swigc__p_boost__shared_ptrT_gr__fec__code__ldpc_G_matrix_t,
  _swigc__p_boost__shared_ptrT_gr__fec__code__ldpc_H_matrix_t,
  _swigc__p_boost__shared_ptrT_gr__fec__code__matrix_t,
  _swigc__p_boost__shared_ptrT_gr__fec__conv_bit_corr_bb_t,
  _swigc__p_boost__shared_ptrT_gr__fec__decode_ccsds_27_fb_t,
  _swigc__p_boost__shared_ptrT_gr__fec__decoder_t,
  _swigc__p_boost__shared_ptrT_gr__fec__depuncture_bb_t,
  _swigc__p_boost__shared_ptrT_gr__fec__encode_ccsds_27_bb_t,
  _swigc__p_boost__shared_ptrT_gr__fec__encoder_t,
  _swigc__p_boost__shared_ptrT_gr__fec__generic_decoder_t,
  _swigc__p_boost__shared_ptrT_gr__fec__generic_encoder_t,
  _swigc__p_boost__shared_ptrT_gr__fec__puncture_bb_t,
  _swigc__p_boost__shared_ptrT_gr__fec__puncture_ff_t,
  _swigc__p_boost__shared_ptrT_gr__fec__tagged_decoder_t,
  _swigc__p_boost__shared_ptrT_gr__fec__tagged_encoder_t,
  _swigc__p_boost__shared_ptrT_gr__flat_flowgraph_t,
  _swigc__p_boost__shared_ptrT_gr__flowgraph_t,
  _swigc__p_boost__shared_ptrT_gr__hier_block2_t,
  _swigc__p_boost__shared_ptrT_gr__io_signature_t,
  _swigc__p_boost__shared_ptrT_gr__top_block_t,
  _swigc__p_buf_sptr,
  _swigc__p_char,
  _swigc__p_const_reference,
  _swigc__p_decision_t,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_gr__basic_block,
  _swigc__p_gr__block,
  _swigc__p_gr__block_gateway,
  _swigc__p_gr__endianness_t,
  _swigc__p_gr__fec__async_decoder,
  _swigc__p_gr__fec__async_encoder,
  _swigc__p_gr__fec__ber_bf,
  _swigc__p_gr__fec__code__block_data,
  _swigc__p_gr__fec__code__cc_decoder,
  _swigc__p_gr__fec__code__cc_encoder,
  _swigc__p_gr__fec__code__ccsds_encoder,
  _swigc__p_gr__fec__code__dummy_decoder,
  _swigc__p_gr__fec__code__dummy_encoder,
  _swigc__p_gr__fec__code__fec_mtrx,
  _swigc__p_gr__fec__code__ldpc_G_matrix,
  _swigc__p_gr__fec__code__ldpc_H_matrix,
  _swigc__p_gr__fec__code__ldpc_bit_flip_decoder,
  _swigc__p_gr__fec__code__ldpc_gen_mtrx_encoder,
  _swigc__p_gr__fec__code__ldpc_par_mtrx_encoder,
  _swigc__p_gr__fec__code__matrix,
  _swigc__p_gr__fec__code__polar_common,
  _swigc__p_gr__fec__code__polar_decoder_common,
  _swigc__p_gr__fec__code__polar_decoder_sc,
  _swigc__p_gr__fec__code__polar_decoder_sc_list,
  _swigc__p_gr__fec__code__polar_decoder_sc_systematic,
  _swigc__p_gr__fec__code__polar_encoder,
  _swigc__p_gr__fec__code__polar_encoder_systematic,
  _swigc__p_gr__fec__code__repetition_decoder,
  _swigc__p_gr__fec__code__repetition_encoder,
  _swigc__p_gr__fec__conv_bit_corr_bb,
  _swigc__p_gr__fec__decode_ccsds_27_fb,
  _swigc__p_gr__fec__decoder,
  _swigc__p_gr__fec__depuncture_bb,
  _swigc__p_gr__fec__encode_ccsds_27_bb,
  _swigc__p_gr__fec__encoder,
  _swigc__p_gr__fec__generic_decoder,
  _swigc__p_gr__fec__generic_encoder,
  _swigc__p_gr__fec__ldpc_decoder,
  _swigc__p_gr__fec__ldpc_encoder,
  _swigc__p_gr__fec__puncture_bb,
  _swigc__p_gr__fec__puncture_ff,
  _swigc__p_gr__fec__tagged_decoder,
  _swigc__p_gr__fec__tagged_encoder,
  _swigc__p_gr__fec__tpc_decoder,
  _swigc__p_gr__fec__tpc_encoder,
  _swigc__p_gr__hier_block2,
  _swigc__p_gr__rt_status_t,
  _swigc__p_gr__sync_block,
  _swigc__p_gr__sync_decimator,
  _swigc__p_gr__sync_interpolator,
  _swigc__p_gr__tagged_stream_block,
  _swigc__p_gr__top_block,
  _swigc__p_gr_vector_const_void_star,
  _swigc__p_gr_vector_int,
  _swigc__p_gr_vector_void_star,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_metric_t,
  _swigc__p_reference,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_type,
  _swigc__p_sptr,
  _swigc__p_std__complexT_double_t,
  _swigc__p_std__complexT_float_t,
  _swigc__p_std__vectorT_unsigned_long_long_std__allocatorT_unsigned_long_long_t_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_v,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "CC_STREAMING",SWIG_From_int(static_cast< int >(CC_STREAMING)));
  SWIG_Python_SetConstant(d, "CC_TERMINATED",SWIG_From_int(static_cast< int >(CC_TERMINATED)));
  SWIG_Python_SetConstant(d, "CC_TRUNCATED",SWIG_From_int(static_cast< int >(CC_TRUNCATED)));
  SWIG_Python_SetConstant(d, "CC_TAILBITING",SWIG_From_int(static_cast< int >(CC_TAILBITING)));
  PyDict_SetItemString(md,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"generic_decoder_base_unique_id",Swig_var_generic_decoder_base_unique_id_get, Swig_var_generic_decoder_base_unique_id_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"generic_encoder_base_unique_id",Swig_var_generic_encoder_base_unique_id_get, Swig_var_generic_encoder_base_unique_id_set);
  SWIG_Python_SetConstant(d, "MAXLOG",SWIG_From_double(static_cast< double >(1e7)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}


<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classgr_1_1fec_1_1async__encoder" kind="class" prot="public" abstract="yes">
    <compoundname>gr::fec::async_encoder</compoundname>
    <basecompoundref prot="public" virt="virtual">block</basecompoundref>
    <includes refid="async__encoder_8h" local="no">async_encoder.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classgr_1_1fec_1_1async__encoder_1a7f82f62b1e384a179f9591a0217deb7e" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classgr_1_1fec_1_1async__encoder" kindref="compound">async_encoder</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;async_encoder&gt; gr::fec::async_encoder::sptr</definition>
        <argsstring></argsstring>
        <name>sptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/udooer/Downloads/gnuradio-3.7.13.4/gr-fec/include/gnuradio/fec/async_encoder.h" line="76" column="1" bodyfile="/home/udooer/Downloads/gnuradio-3.7.13.4/gr-fec/include/gnuradio/fec/async_encoder.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classgr_1_1fec_1_1async__encoder_1a725c4869987240a75dd5ac0199560e4a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgr_1_1fec_1_1async__encoder_1a7f82f62b1e384a179f9591a0217deb7e" kindref="member">sptr</ref></type>
        <definition>static sptr gr::fec::async_encoder::make</definition>
        <argsstring>(generic_encoder::sptr my_encoder, bool packed=false, bool rev_unpack=true, bool rev_pack=true, int mtu=1500)</argsstring>
        <name>make</name>
        <param>
          <type><ref refid="classgr_1_1fec_1_1generic__encoder_1ad50b0ff05c38cb33f8e8eaca97f7fd30" kindref="member">generic_encoder::sptr</ref></type>
          <declname>my_encoder</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>packed</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>rev_unpack</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>rev_pack</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>int</type>
          <declname>mtu</declname>
          <defval>1500</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build the PDU-based FEC encoder block from an FECAPI encoder object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>my_encoder</parametername>
</parameternamelist>
<parameterdescription>
<para>An FECAPI encoder object child of the <ref refid="classgr_1_1fec_1_1generic__encoder" kindref="compound">generic_encoder</ref> class. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>packed</parametername>
</parameternamelist>
<parameterdescription>
<para>True if working on packed bytes (like PDUs). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rev_unpack</parametername>
</parameternamelist>
<parameterdescription>
<para>Reverse the unpacking order from input bytes to bits. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rev_pack</parametername>
</parameternamelist>
<parameterdescription>
<para>Reverse the packing order from bits to output bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mtu</parametername>
</parameternamelist>
<parameterdescription>
<para>The Maximum Transmission Unit (MTU) of the input frame that the block will be able to process. Specified in bytes and defaults to 1500. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/udooer/Downloads/gnuradio-3.7.13.4/gr-fec/include/gnuradio/fec/async_encoder.h" line="89" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgr_1_1fec_1_1async__encoder_1ab517929073df9622510d8cd891f5705e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int gr::fec::async_encoder::general_work</definition>
        <argsstring>(int noutput_items, gr_vector_int &amp;ninput_items, gr_vector_const_void_star &amp;input_items, gr_vector_void_star &amp;output_items)=0</argsstring>
        <name>general_work</name>
        <param>
          <type>int</type>
          <declname>noutput_items</declname>
        </param>
        <param>
          <type>gr_vector_int &amp;</type>
          <declname>ninput_items</declname>
        </param>
        <param>
          <type>gr_vector_const_void_star &amp;</type>
          <declname>input_items</declname>
        </param>
        <param>
          <type>gr_vector_void_star &amp;</type>
          <declname>output_items</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/udooer/Downloads/gnuradio-3.7.13.4/gr-fec/include/gnuradio/fec/async_encoder.h" line="94" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Creates the encoder block for use in GNU Radio flowgraphs with async message from a given FEC API object derived from the <ref refid="classgr_1_1fec_1_1generic__encoder" kindref="compound">generic_encoder</ref> class. </para>    </briefdescription>
    <detaileddescription>
<para>Encodes frames received as async messages or as a PDU over a message port. This encoder works off a full message as one frame or block to encode. The message length is used as the frame length. To support this, the encoder variable used will have had its frame_size set. This block treats that initial frame_size value as the maximum transmission unit (MTU) and will not process frames larger than that.</para><para>This deployment works off messages and expects them to either be messages full of unpacked bits or PDU messages, which means full bytes of a frame from the higher layers, including things like headers, tails, CRC check bytes, etc. For handling PDUs, set the <computeroutput>packed</computeroutput> option of this deployment block to True. The block will then use the FEC API to properly unpack the bits from the PDU, pass it through the encoder, and repack them to output the PDUs for the next stage of processing.</para><para>The packed PDU form of this deployment is designed to work well with other PDU-based blocks to operate within the processing flow of data packets or frames.</para><para>Due to differences in how data is packed and processed, this block also offers the ability to change the direction of how bits are unpacked and packed, where reading or writing from the LSB or MSB. By default, the <computeroutput>rev_unpack</computeroutput> and <computeroutput>rev_pack</computeroutput> modes are set to True. Using this setup allows the async block to behave with PDUs in the same operation and format as the tagged stream encoders. That is, putting the same data into both the tagged stream encoder deployment and this with these default settings should produce the same data. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="9">
        <label>block</label>
      </node>
      <node id="8">
        <label>gr::fec::async_encoder</label>
        <link refid="classgr_1_1fec_1_1async__encoder"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="11">
        <label>block</label>
      </node>
      <node id="10">
        <label>gr::fec::async_encoder</label>
        <link refid="classgr_1_1fec_1_1async__encoder"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/udooer/Downloads/gnuradio-3.7.13.4/gr-fec/include/gnuradio/fec/async_encoder.h" line="74" column="1" bodyfile="/home/udooer/Downloads/gnuradio-3.7.13.4/gr-fec/include/gnuradio/fec/async_encoder.h" bodystart="73" bodyend="98"/>
    <listofallmembers>
      <member refid="classgr_1_1fec_1_1async__encoder_1ab517929073df9622510d8cd891f5705e" prot="public" virt="pure-virtual"><scope>gr::fec::async_encoder</scope><name>general_work</name></member>
      <member refid="classgr_1_1fec_1_1async__encoder_1a725c4869987240a75dd5ac0199560e4a" prot="public" virt="non-virtual"><scope>gr::fec::async_encoder</scope><name>make</name></member>
      <member refid="classgr_1_1fec_1_1async__encoder_1a7f82f62b1e384a179f9591a0217deb7e" prot="public" virt="non-virtual"><scope>gr::fec::async_encoder</scope><name>sptr</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

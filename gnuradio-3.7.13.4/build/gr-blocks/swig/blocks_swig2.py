# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_blocks_swig2', [dirname(__file__)])
        except ImportError:
            import _blocks_swig2
            return _blocks_swig2
        if fp is not None:
            try:
                _mod = imp.load_module('_blocks_swig2', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _blocks_swig2 = swig_import_helper()
    del swig_import_helper
else:
    import _blocks_swig2
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _blocks_swig2.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _blocks_swig2.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _blocks_swig2.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _blocks_swig2.high_res_timer_epoch()
class and_const_bb(object):
    """
    output[m] = input[m] & value for all M streams.

    Bitwise boolean AND of constant  with the data stream.

    Constructor Specific Documentation:

    Create an instance of and_const_bb.

    Args:
        k : AND constant
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned char k) -> and_const_bb_sptr

        output[m] = input[m] & value for all M streams.

        Bitwise boolean AND of constant  with the data stream.

        Constructor Specific Documentation:

        Create an instance of and_const_bb.

        Args:
            k : AND constant
        """
        return _blocks_swig2.and_const_bb_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(and_const_bb self) -> unsigned char

        Return AND constant.
        """
        return _blocks_swig2.and_const_bb_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(and_const_bb self, unsigned char k)

        Set AND constant.
        """
        return _blocks_swig2.and_const_bb_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig2.delete_and_const_bb
    __del__ = lambda self : None;
and_const_bb_swigregister = _blocks_swig2.and_const_bb_swigregister
and_const_bb_swigregister(and_const_bb)

def and_const_bb_make(*args, **kwargs):
  """
    and_const_bb_make(unsigned char k) -> and_const_bb_sptr

    output[m] = input[m] & value for all M streams.

    Bitwise boolean AND of constant  with the data stream.

    Constructor Specific Documentation:

    Create an instance of and_const_bb.

    Args:
        k : AND constant
    """
  return _blocks_swig2.and_const_bb_make(*args, **kwargs)

class and_const_ss(object):
    """
    output[m] = input[m] & value for all M streams.

    Bitwise boolean AND of constant  with the data stream.

    Constructor Specific Documentation:

    Create an instance of and_const_ss.

    Args:
        k : AND constant
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(short k) -> and_const_ss_sptr

        output[m] = input[m] & value for all M streams.

        Bitwise boolean AND of constant  with the data stream.

        Constructor Specific Documentation:

        Create an instance of and_const_ss.

        Args:
            k : AND constant
        """
        return _blocks_swig2.and_const_ss_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(and_const_ss self) -> short

        Return AND constant.
        """
        return _blocks_swig2.and_const_ss_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(and_const_ss self, short k)

        Set AND constant.
        """
        return _blocks_swig2.and_const_ss_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig2.delete_and_const_ss
    __del__ = lambda self : None;
and_const_ss_swigregister = _blocks_swig2.and_const_ss_swigregister
and_const_ss_swigregister(and_const_ss)

def and_const_ss_make(*args, **kwargs):
  """
    and_const_ss_make(short k) -> and_const_ss_sptr

    output[m] = input[m] & value for all M streams.

    Bitwise boolean AND of constant  with the data stream.

    Constructor Specific Documentation:

    Create an instance of and_const_ss.

    Args:
        k : AND constant
    """
  return _blocks_swig2.and_const_ss_make(*args, **kwargs)

class and_const_ii(object):
    """
    output[m] = input[m] & value for all M streams.

    Bitwise boolean AND of constant  with the data stream.

    Constructor Specific Documentation:

    Create an instance of and_const_ii.

    Args:
        k : AND constant
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int k) -> and_const_ii_sptr

        output[m] = input[m] & value for all M streams.

        Bitwise boolean AND of constant  with the data stream.

        Constructor Specific Documentation:

        Create an instance of and_const_ii.

        Args:
            k : AND constant
        """
        return _blocks_swig2.and_const_ii_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(and_const_ii self) -> int

        Return AND constant.
        """
        return _blocks_swig2.and_const_ii_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(and_const_ii self, int k)

        Set AND constant.
        """
        return _blocks_swig2.and_const_ii_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig2.delete_and_const_ii
    __del__ = lambda self : None;
and_const_ii_swigregister = _blocks_swig2.and_const_ii_swigregister
and_const_ii_swigregister(and_const_ii)

def and_const_ii_make(*args, **kwargs):
  """
    and_const_ii_make(int k) -> and_const_ii_sptr

    output[m] = input[m] & value for all M streams.

    Bitwise boolean AND of constant  with the data stream.

    Constructor Specific Documentation:

    Create an instance of and_const_ii.

    Args:
        k : AND constant
    """
  return _blocks_swig2.and_const_ii_make(*args, **kwargs)

class argmax_fs(object):
    """
    Compares vectors from multiple streams and determines the index in the vector and stream number where the maximum value occurred.

    Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and output two streams:

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t vlen) -> argmax_fs_sptr

        Compares vectors from multiple streams and determines the index in the vector and stream number where the maximum value occurred.

        Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and output two streams:

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.argmax_fs_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_argmax_fs
    __del__ = lambda self : None;
argmax_fs_swigregister = _blocks_swig2.argmax_fs_swigregister
argmax_fs_swigregister(argmax_fs)

def argmax_fs_make(*args, **kwargs):
  """
    argmax_fs_make(size_t vlen) -> argmax_fs_sptr

    Compares vectors from multiple streams and determines the index in the vector and stream number where the maximum value occurred.

    Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and output two streams:

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig2.argmax_fs_make(*args, **kwargs)

class argmax_is(object):
    """
    Compares vectors from multiple streams and determines the index in the vector and stream number where the maximum value occurred.

    Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and output two streams:

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t vlen) -> argmax_is_sptr

        Compares vectors from multiple streams and determines the index in the vector and stream number where the maximum value occurred.

        Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and output two streams:

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.argmax_is_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_argmax_is
    __del__ = lambda self : None;
argmax_is_swigregister = _blocks_swig2.argmax_is_swigregister
argmax_is_swigregister(argmax_is)

def argmax_is_make(*args, **kwargs):
  """
    argmax_is_make(size_t vlen) -> argmax_is_sptr

    Compares vectors from multiple streams and determines the index in the vector and stream number where the maximum value occurred.

    Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and output two streams:

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig2.argmax_is_make(*args, **kwargs)

class argmax_ss(object):
    """
    Compares vectors from multiple streams and determines the index in the vector and stream number where the maximum value occurred.

    Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and output two streams:

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t vlen) -> argmax_ss_sptr

        Compares vectors from multiple streams and determines the index in the vector and stream number where the maximum value occurred.

        Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and output two streams:

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.argmax_ss_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_argmax_ss
    __del__ = lambda self : None;
argmax_ss_swigregister = _blocks_swig2.argmax_ss_swigregister
argmax_ss_swigregister(argmax_ss)

def argmax_ss_make(*args, **kwargs):
  """
    argmax_ss_make(size_t vlen) -> argmax_ss_sptr

    Compares vectors from multiple streams and determines the index in the vector and stream number where the maximum value occurred.

    Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and output two streams:

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig2.argmax_ss_make(*args, **kwargs)

class char_to_float(object):
    """
    Convert stream of chars to a stream of float.

    Converts  length vectors of input char samples to floats and applies a scaling factor of

    Constructor Specific Documentation:

    Build a chars to float stream converter block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar divider to change the output signal scale.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(vlen=1, scale=1.0):
        """
        make(size_t vlen=1, float scale=1.0) -> char_to_float_sptr

        Convert stream of chars to a stream of float.

        Converts  length vectors of input char samples to floats and applies a scaling factor of

        Constructor Specific Documentation:

        Build a chars to float stream converter block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar divider to change the output signal scale.
        """
        return _blocks_swig2.char_to_float_make(vlen, scale)

    make = staticmethod(make)
    def scale(self):
        """
        scale(char_to_float self) -> float

        Get the scalar divider value.
        """
        return _blocks_swig2.char_to_float_scale(self)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(char_to_float self, float scale)

        Set the scalar divider value.
        """
        return _blocks_swig2.char_to_float_set_scale(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig2.delete_char_to_float
    __del__ = lambda self : None;
char_to_float_swigregister = _blocks_swig2.char_to_float_swigregister
char_to_float_swigregister(char_to_float)

def char_to_float_make(vlen=1, scale=1.0):
  """
    char_to_float_make(size_t vlen=1, float scale=1.0) -> char_to_float_sptr

    Convert stream of chars to a stream of float.

    Converts  length vectors of input char samples to floats and applies a scaling factor of

    Constructor Specific Documentation:

    Build a chars to float stream converter block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar divider to change the output signal scale.
    """
  return _blocks_swig2.char_to_float_make(vlen, scale)

class bin_statistics_f(object):
    """
    control scanning and record frequency domain statistics

    Constructor Specific Documentation:

    Build a bin statistics block. See qa_bin_statistics.py and gr-uhd/examples/python/usrp_spectrum_sense.py for examples of its use, specifically how to use the callback function.

    Args:
        vlen : vector length
        msgq : message queue
        tune : a feval_dd callback function
        tune_delay : number of samples for the tune delay
        dwell_delay : number of samples for the dwell delay
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned int vlen, msg_queue_sptr msgq, gr::feval_dd * tune, size_t tune_delay, size_t dwell_delay) -> bin_statistics_f_sptr

        control scanning and record frequency domain statistics

        Constructor Specific Documentation:

        Build a bin statistics block. See qa_bin_statistics.py and gr-uhd/examples/python/usrp_spectrum_sense.py for examples of its use, specifically how to use the callback function.

        Args:
            vlen : vector length
            msgq : message queue
            tune : a feval_dd callback function
            tune_delay : number of samples for the tune delay
            dwell_delay : number of samples for the dwell delay
        """
        return _blocks_swig2.bin_statistics_f_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_bin_statistics_f
    __del__ = lambda self : None;
bin_statistics_f_swigregister = _blocks_swig2.bin_statistics_f_swigregister
bin_statistics_f_swigregister(bin_statistics_f)

def bin_statistics_f_make(*args, **kwargs):
  """
    bin_statistics_f_make(unsigned int vlen, msg_queue_sptr msgq, gr::feval_dd * tune, size_t tune_delay, size_t dwell_delay) -> bin_statistics_f_sptr

    control scanning and record frequency domain statistics

    Constructor Specific Documentation:

    Build a bin statistics block. See qa_bin_statistics.py and gr-uhd/examples/python/usrp_spectrum_sense.py for examples of its use, specifically how to use the callback function.

    Args:
        vlen : vector length
        msgq : message queue
        tune : a feval_dd callback function
        tune_delay : number of samples for the tune delay
        dwell_delay : number of samples for the dwell delay
    """
  return _blocks_swig2.bin_statistics_f_make(*args, **kwargs)

class burst_tagger(object):
    """
    Sets a burst on/off tag based on the value of the trigger input.

    This block takes two inputs, a signal stream on the input stream 0 and a trigger stream of shorts on input stream 1. If the trigger stream goes above 0, a tag with the key "burst" will be transmitted as a pmt::PMT_T. When the trigger signal falls below 0, the "burst" tag will be transmitted as pmt::PMT_F.

    The signal on stream 0 is retransmitted to output stream 0.

    Constructor Specific Documentation:

    Build a burst tagger gnuradio/blocks.

    Args:
        itemsize : itemsize of the signal stream on input 0.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t itemsize) -> burst_tagger_sptr

        Sets a burst on/off tag based on the value of the trigger input.

        This block takes two inputs, a signal stream on the input stream 0 and a trigger stream of shorts on input stream 1. If the trigger stream goes above 0, a tag with the key "burst" will be transmitted as a pmt::PMT_T. When the trigger signal falls below 0, the "burst" tag will be transmitted as pmt::PMT_F.

        The signal on stream 0 is retransmitted to output stream 0.

        Constructor Specific Documentation:

        Build a burst tagger gnuradio/blocks.

        Args:
            itemsize : itemsize of the signal stream on input 0.
        """
        return _blocks_swig2.burst_tagger_make(*args, **kwargs)

    make = staticmethod(make)
    def set_true_tag(self, *args, **kwargs):
        """
        set_true_tag(burst_tagger self, std::string const & key, bool value)

        For the true burst tag, change the key name to  and a new value of .
        """
        return _blocks_swig2.burst_tagger_set_true_tag(self, *args, **kwargs)

    def set_false_tag(self, *args, **kwargs):
        """
        set_false_tag(burst_tagger self, std::string const & key, bool value)

        For the false burst tag, change the key name to  and a new value of .
        """
        return _blocks_swig2.burst_tagger_set_false_tag(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig2.delete_burst_tagger
    __del__ = lambda self : None;
burst_tagger_swigregister = _blocks_swig2.burst_tagger_swigregister
burst_tagger_swigregister(burst_tagger)

def burst_tagger_make(*args, **kwargs):
  """
    burst_tagger_make(size_t itemsize) -> burst_tagger_sptr

    Sets a burst on/off tag based on the value of the trigger input.

    This block takes two inputs, a signal stream on the input stream 0 and a trigger stream of shorts on input stream 1. If the trigger stream goes above 0, a tag with the key "burst" will be transmitted as a pmt::PMT_T. When the trigger signal falls below 0, the "burst" tag will be transmitted as pmt::PMT_F.

    The signal on stream 0 is retransmitted to output stream 0.

    Constructor Specific Documentation:

    Build a burst tagger gnuradio/blocks.

    Args:
        itemsize : itemsize of the signal stream on input 0.
    """
  return _blocks_swig2.burst_tagger_make(*args, **kwargs)

class char_to_short(object):
    """
    Convert stream of chars to a stream of shorts.

    Converts  length vectors of input char samples to shorts, multiplying each element by 256:

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> char_to_short_sptr

        Convert stream of chars to a stream of shorts.

        Converts  length vectors of input char samples to shorts, multiplying each element by 256:

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.char_to_short_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_char_to_short
    __del__ = lambda self : None;
char_to_short_swigregister = _blocks_swig2.char_to_short_swigregister
char_to_short_swigregister(char_to_short)

def char_to_short_make(vlen=1):
  """
    char_to_short_make(size_t vlen=1) -> char_to_short_sptr

    Convert stream of chars to a stream of shorts.

    Converts  length vectors of input char samples to shorts, multiplying each element by 256:

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig2.char_to_short_make(vlen)

class check_lfsr_32k_s(object):
    """
    sink that checks if its input stream consists of a lfsr_32k sequence.

    This sink is typically used along with gr::blocks::lfsr_32k_source_s to test the USRP using its digital loopback mode.

    Constructor Specific Documentation:


    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make():
        """
        make() -> check_lfsr_32k_s_sptr

        sink that checks if its input stream consists of a lfsr_32k sequence.

        This sink is typically used along with gr::blocks::lfsr_32k_source_s to test the USRP using its digital loopback mode.

        Constructor Specific Documentation:


        """
        return _blocks_swig2.check_lfsr_32k_s_make()

    make = staticmethod(make)
    def ntotal(self):
        """ntotal(check_lfsr_32k_s self) -> long"""
        return _blocks_swig2.check_lfsr_32k_s_ntotal(self)

    def nright(self):
        """nright(check_lfsr_32k_s self) -> long"""
        return _blocks_swig2.check_lfsr_32k_s_nright(self)

    def runlength(self):
        """runlength(check_lfsr_32k_s self) -> long"""
        return _blocks_swig2.check_lfsr_32k_s_runlength(self)

    __swig_destroy__ = _blocks_swig2.delete_check_lfsr_32k_s
    __del__ = lambda self : None;
check_lfsr_32k_s_swigregister = _blocks_swig2.check_lfsr_32k_s_swigregister
check_lfsr_32k_s_swigregister(check_lfsr_32k_s)

def check_lfsr_32k_s_make():
  """
    check_lfsr_32k_s_make() -> check_lfsr_32k_s_sptr

    sink that checks if its input stream consists of a lfsr_32k sequence.

    This sink is typically used along with gr::blocks::lfsr_32k_source_s to test the USRP using its digital loopback mode.

    Constructor Specific Documentation:


    """
  return _blocks_swig2.check_lfsr_32k_s_make()

class complex_to_interleaved_char(object):
    """
    Convert stream of complex to a stream of interleaved chars.

    The output stream contains chars with twice as many output items as input items. For every complex input item, we produce two output chars that contain the real part and imaginary part converted to chars:

    Constructor Specific Documentation:

    Build a complex to interleaved chars block.

    Args:
        vector : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vector=False):
        """
        make(bool vector=False) -> complex_to_interleaved_char_sptr

        Convert stream of complex to a stream of interleaved chars.

        The output stream contains chars with twice as many output items as input items. For every complex input item, we produce two output chars that contain the real part and imaginary part converted to chars:

        Constructor Specific Documentation:

        Build a complex to interleaved chars block.

        Args:
            vector : 
        """
        return _blocks_swig2.complex_to_interleaved_char_make(vector)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_complex_to_interleaved_char
    __del__ = lambda self : None;
complex_to_interleaved_char_swigregister = _blocks_swig2.complex_to_interleaved_char_swigregister
complex_to_interleaved_char_swigregister(complex_to_interleaved_char)

def complex_to_interleaved_char_make(vector=False):
  """
    complex_to_interleaved_char_make(bool vector=False) -> complex_to_interleaved_char_sptr

    Convert stream of complex to a stream of interleaved chars.

    The output stream contains chars with twice as many output items as input items. For every complex input item, we produce two output chars that contain the real part and imaginary part converted to chars:

    Constructor Specific Documentation:

    Build a complex to interleaved chars block.

    Args:
        vector : 
    """
  return _blocks_swig2.complex_to_interleaved_char_make(vector)

class complex_to_interleaved_short(object):
    """
    Convert stream of complex to a stream of interleaved shorts.

    The output stream contains shorts with twice as many output items as input items. For every complex input item, we produce two output shorts that contain the real part and imaginary part converted to shorts:

    Constructor Specific Documentation:

    Build a complex to interleaved shorts block.

    Args:
        vector : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vector=False):
        """
        make(bool vector=False) -> complex_to_interleaved_short_sptr

        Convert stream of complex to a stream of interleaved shorts.

        The output stream contains shorts with twice as many output items as input items. For every complex input item, we produce two output shorts that contain the real part and imaginary part converted to shorts:

        Constructor Specific Documentation:

        Build a complex to interleaved shorts block.

        Args:
            vector : 
        """
        return _blocks_swig2.complex_to_interleaved_short_make(vector)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_complex_to_interleaved_short
    __del__ = lambda self : None;
complex_to_interleaved_short_swigregister = _blocks_swig2.complex_to_interleaved_short_swigregister
complex_to_interleaved_short_swigregister(complex_to_interleaved_short)

def complex_to_interleaved_short_make(vector=False):
  """
    complex_to_interleaved_short_make(bool vector=False) -> complex_to_interleaved_short_sptr

    Convert stream of complex to a stream of interleaved shorts.

    The output stream contains shorts with twice as many output items as input items. For every complex input item, we produce two output shorts that contain the real part and imaginary part converted to shorts:

    Constructor Specific Documentation:

    Build a complex to interleaved shorts block.

    Args:
        vector : 
    """
  return _blocks_swig2.complex_to_interleaved_short_make(vector)

class complex_to_float(object):
    """
    Convert a stream of gr_complex to 1 or 2 streams of float.

    If a single output stream is attached, this will output the real part of the input complex samples. If a second output stream is connected, output[0] is the real part and output[1] is the imaginary part.

    Constructor Specific Documentation:

    Build a complex to float block.

    Args:
        vlen : vector len (default 1)
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> complex_to_float_sptr

        Convert a stream of gr_complex to 1 or 2 streams of float.

        If a single output stream is attached, this will output the real part of the input complex samples. If a second output stream is connected, output[0] is the real part and output[1] is the imaginary part.

        Constructor Specific Documentation:

        Build a complex to float block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig2.complex_to_float_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_complex_to_float
    __del__ = lambda self : None;
complex_to_float_swigregister = _blocks_swig2.complex_to_float_swigregister
complex_to_float_swigregister(complex_to_float)

def complex_to_float_make(vlen=1):
  """
    complex_to_float_make(size_t vlen=1) -> complex_to_float_sptr

    Convert a stream of gr_complex to 1 or 2 streams of float.

    If a single output stream is attached, this will output the real part of the input complex samples. If a second output stream is connected, output[0] is the real part and output[1] is the imaginary part.

    Constructor Specific Documentation:

    Build a complex to float block.

    Args:
        vlen : vector len (default 1)
    """
  return _blocks_swig2.complex_to_float_make(vlen)

class complex_to_magphase(object):
    """
    Convert a stream of gr_complex to magnitude and phase (both floats)

    output[0] is the magnitude output[1] is the phase (in radians)

    Constructor Specific Documentation:

    Build a complex to magnitude and phase block.

    Args:
        vlen : vector len (default 1)
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> complex_to_magphase_sptr

        Convert a stream of gr_complex to magnitude and phase (both floats)

        output[0] is the magnitude output[1] is the phase (in radians)

        Constructor Specific Documentation:

        Build a complex to magnitude and phase block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig2.complex_to_magphase_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_complex_to_magphase
    __del__ = lambda self : None;
complex_to_magphase_swigregister = _blocks_swig2.complex_to_magphase_swigregister
complex_to_magphase_swigregister(complex_to_magphase)

def complex_to_magphase_make(vlen=1):
  """
    complex_to_magphase_make(size_t vlen=1) -> complex_to_magphase_sptr

    Convert a stream of gr_complex to magnitude and phase (both floats)

    output[0] is the magnitude output[1] is the phase (in radians)

    Constructor Specific Documentation:

    Build a complex to magnitude and phase block.

    Args:
        vlen : vector len (default 1)
    """
  return _blocks_swig2.complex_to_magphase_make(vlen)

class complex_to_real(object):
    """
    Produces the real part (as a float0 of a complex stream.

    Constructor Specific Documentation:

    Build a complex to real part block.

    Args:
        vlen : vector len (default 1)
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> complex_to_real_sptr

        Produces the real part (as a float0 of a complex stream.

        Constructor Specific Documentation:

        Build a complex to real part block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig2.complex_to_real_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_complex_to_real
    __del__ = lambda self : None;
complex_to_real_swigregister = _blocks_swig2.complex_to_real_swigregister
complex_to_real_swigregister(complex_to_real)

def complex_to_real_make(vlen=1):
  """
    complex_to_real_make(size_t vlen=1) -> complex_to_real_sptr

    Produces the real part (as a float0 of a complex stream.

    Constructor Specific Documentation:

    Build a complex to real part block.

    Args:
        vlen : vector len (default 1)
    """
  return _blocks_swig2.complex_to_real_make(vlen)

class complex_to_imag(object):
    """
    Produces the imaginary part (as a float0 of a complex stream.

    Constructor Specific Documentation:

    Build a complex to imaginary part block.

    Args:
        vlen : vector len (default 1)
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> complex_to_imag_sptr

        Produces the imaginary part (as a float0 of a complex stream.

        Constructor Specific Documentation:

        Build a complex to imaginary part block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig2.complex_to_imag_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_complex_to_imag
    __del__ = lambda self : None;
complex_to_imag_swigregister = _blocks_swig2.complex_to_imag_swigregister
complex_to_imag_swigregister(complex_to_imag)

def complex_to_imag_make(vlen=1):
  """
    complex_to_imag_make(size_t vlen=1) -> complex_to_imag_sptr

    Produces the imaginary part (as a float0 of a complex stream.

    Constructor Specific Documentation:

    Build a complex to imaginary part block.

    Args:
        vlen : vector len (default 1)
    """
  return _blocks_swig2.complex_to_imag_make(vlen)

class complex_to_mag(object):
    """
    complex in, magnitude out (float)

    Calculates the magnitude of the complex samples:


    Or: 
    The input stream can be a vector of length , and for each vector, each item is converted using the above function. So above, m is from 0 to noutput_items*vlen for each call to work.

    Constructor Specific Documentation:

    Build a complex to magnitude block.

    Args:
        vlen : vector len (default 1)
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> complex_to_mag_sptr

        complex in, magnitude out (float)

        Calculates the magnitude of the complex samples:


        Or: 
        The input stream can be a vector of length , and for each vector, each item is converted using the above function. So above, m is from 0 to noutput_items*vlen for each call to work.

        Constructor Specific Documentation:

        Build a complex to magnitude block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig2.complex_to_mag_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_complex_to_mag
    __del__ = lambda self : None;
complex_to_mag_swigregister = _blocks_swig2.complex_to_mag_swigregister
complex_to_mag_swigregister(complex_to_mag)

def complex_to_mag_make(vlen=1):
  """
    complex_to_mag_make(size_t vlen=1) -> complex_to_mag_sptr

    complex in, magnitude out (float)

    Calculates the magnitude of the complex samples:


    Or: 
    The input stream can be a vector of length , and for each vector, each item is converted using the above function. So above, m is from 0 to noutput_items*vlen for each call to work.

    Constructor Specific Documentation:

    Build a complex to magnitude block.

    Args:
        vlen : vector len (default 1)
    """
  return _blocks_swig2.complex_to_mag_make(vlen)

class complex_to_mag_squared(object):
    """
    complex in, magnitude squared out (float)

    Calculates the magnitude squared of the complex samples:


    Or: 
    The input stream can be a vector of length , and for each vector, each item is converted using the above function. So above, m is from 0 to noutput_items*vlen for each call to work.

    Constructor Specific Documentation:

    Build a complex to magnitude squared block.

    Args:
        vlen : vector len (default 1)
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> complex_to_mag_squared_sptr

        complex in, magnitude squared out (float)

        Calculates the magnitude squared of the complex samples:


        Or: 
        The input stream can be a vector of length , and for each vector, each item is converted using the above function. So above, m is from 0 to noutput_items*vlen for each call to work.

        Constructor Specific Documentation:

        Build a complex to magnitude squared block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig2.complex_to_mag_squared_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_complex_to_mag_squared
    __del__ = lambda self : None;
complex_to_mag_squared_swigregister = _blocks_swig2.complex_to_mag_squared_swigregister
complex_to_mag_squared_swigregister(complex_to_mag_squared)

def complex_to_mag_squared_make(vlen=1):
  """
    complex_to_mag_squared_make(size_t vlen=1) -> complex_to_mag_squared_sptr

    complex in, magnitude squared out (float)

    Calculates the magnitude squared of the complex samples:


    Or: 
    The input stream can be a vector of length , and for each vector, each item is converted using the above function. So above, m is from 0 to noutput_items*vlen for each call to work.

    Constructor Specific Documentation:

    Build a complex to magnitude squared block.

    Args:
        vlen : vector len (default 1)
    """
  return _blocks_swig2.complex_to_mag_squared_make(vlen)

class complex_to_arg(object):
    """
    complex in, arg (arctan) out (float)

    Constructor Specific Documentation:

    Build a complex to arg block.

    Args:
        vlen : vector len (default 1)
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> complex_to_arg_sptr

        complex in, arg (arctan) out (float)

        Constructor Specific Documentation:

        Build a complex to arg block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig2.complex_to_arg_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_complex_to_arg
    __del__ = lambda self : None;
complex_to_arg_swigregister = _blocks_swig2.complex_to_arg_swigregister
complex_to_arg_swigregister(complex_to_arg)

def complex_to_arg_make(vlen=1):
  """
    complex_to_arg_make(size_t vlen=1) -> complex_to_arg_sptr

    complex in, arg (arctan) out (float)

    Constructor Specific Documentation:

    Build a complex to arg block.

    Args:
        vlen : vector len (default 1)
    """
  return _blocks_swig2.complex_to_arg_make(vlen)

class conjugate_cc(object):
    """
    output = complex conjugate of input

    Constructor Specific Documentation:


    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> conjugate_cc_sptr

        output = complex conjugate of input

        Constructor Specific Documentation:


        """
        return _blocks_swig2.conjugate_cc_make()

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig2.delete_conjugate_cc
    __del__ = lambda self : None;
conjugate_cc_swigregister = _blocks_swig2.conjugate_cc_swigregister
conjugate_cc_swigregister(conjugate_cc)

def conjugate_cc_make():
  """
    conjugate_cc_make() -> conjugate_cc_sptr

    output = complex conjugate of input

    Constructor Specific Documentation:


    """
  return _blocks_swig2.conjugate_cc_make()

class and_const_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::and_const_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::and_const_bb)> self) -> and_const_bb_sptr
        __init__(boost::shared_ptr<(gr::blocks::and_const_bb)> self, and_const_bb p) -> and_const_bb_sptr
        """
        this = _blocks_swig2.new_and_const_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(and_const_bb_sptr self) -> and_const_bb"""
        return _blocks_swig2.and_const_bb_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_and_const_bb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(and_const_bb_sptr self, unsigned char k) -> and_const_bb_sptr

        output[m] = input[m] & value for all M streams.

        Bitwise boolean AND of constant  with the data stream.

        Constructor Specific Documentation:

        Create an instance of and_const_bb.

        Args:
            k : AND constant
        """
        return _blocks_swig2.and_const_bb_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(and_const_bb_sptr self) -> unsigned char

        Return AND constant.
        """
        return _blocks_swig2.and_const_bb_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(and_const_bb_sptr self, unsigned char k)

        Set AND constant.
        """
        return _blocks_swig2.and_const_bb_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(and_const_bb_sptr self) -> unsigned int"""
        return _blocks_swig2.and_const_bb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(and_const_bb_sptr self, int which, int delay)
        declare_sample_delay(and_const_bb_sptr self, unsigned int delay)
        """
        return _blocks_swig2.and_const_bb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(and_const_bb_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.and_const_bb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(and_const_bb_sptr self) -> int"""
        return _blocks_swig2.and_const_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(and_const_bb_sptr self) -> double"""
        return _blocks_swig2.and_const_bb_sptr_relative_rate(self)

    def start(self):
        """start(and_const_bb_sptr self) -> bool"""
        return _blocks_swig2.and_const_bb_sptr_start(self)

    def stop(self):
        """stop(and_const_bb_sptr self) -> bool"""
        return _blocks_swig2.and_const_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(and_const_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.and_const_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(and_const_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.and_const_bb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(and_const_bb_sptr self) -> int"""
        return _blocks_swig2.and_const_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(and_const_bb_sptr self, int m)"""
        return _blocks_swig2.and_const_bb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(and_const_bb_sptr self)"""
        return _blocks_swig2.and_const_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(and_const_bb_sptr self) -> bool"""
        return _blocks_swig2.and_const_bb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(and_const_bb_sptr self, int m)"""
        return _blocks_swig2.and_const_bb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(and_const_bb_sptr self) -> int"""
        return _blocks_swig2.and_const_bb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(and_const_bb_sptr self, int i) -> long"""
        return _blocks_swig2.and_const_bb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(and_const_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(and_const_bb_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.and_const_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(and_const_bb_sptr self, int i) -> long"""
        return _blocks_swig2.and_const_bb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(and_const_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(and_const_bb_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.and_const_bb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(and_const_bb_sptr self) -> float"""
        return _blocks_swig2.and_const_bb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(and_const_bb_sptr self) -> float"""
        return _blocks_swig2.and_const_bb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(and_const_bb_sptr self) -> float"""
        return _blocks_swig2.and_const_bb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(and_const_bb_sptr self) -> float"""
        return _blocks_swig2.and_const_bb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(and_const_bb_sptr self) -> float"""
        return _blocks_swig2.and_const_bb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(and_const_bb_sptr self) -> float"""
        return _blocks_swig2.and_const_bb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(and_const_bb_sptr self, int which) -> float
        pc_input_buffers_full(and_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_bb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(and_const_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(and_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_bb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(and_const_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(and_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_bb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(and_const_bb_sptr self, int which) -> float
        pc_output_buffers_full(and_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_bb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(and_const_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(and_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_bb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(and_const_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(and_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_bb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(and_const_bb_sptr self) -> float"""
        return _blocks_swig2.and_const_bb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(and_const_bb_sptr self) -> float"""
        return _blocks_swig2.and_const_bb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(and_const_bb_sptr self) -> float"""
        return _blocks_swig2.and_const_bb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(and_const_bb_sptr self) -> float"""
        return _blocks_swig2.and_const_bb_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(and_const_bb_sptr self) -> float"""
        return _blocks_swig2.and_const_bb_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(and_const_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.and_const_bb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(and_const_bb_sptr self)"""
        return _blocks_swig2.and_const_bb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(and_const_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.and_const_bb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(and_const_bb_sptr self) -> int"""
        return _blocks_swig2.and_const_bb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(and_const_bb_sptr self) -> int"""
        return _blocks_swig2.and_const_bb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(and_const_bb_sptr self, int priority) -> int"""
        return _blocks_swig2.and_const_bb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(and_const_bb_sptr self) -> std::string"""
        return _blocks_swig2.and_const_bb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(and_const_bb_sptr self) -> std::string"""
        return _blocks_swig2.and_const_bb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(and_const_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.and_const_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(and_const_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.and_const_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(and_const_bb_sptr self) -> long"""
        return _blocks_swig2.and_const_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(and_const_bb_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.and_const_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(and_const_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.and_const_bb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(and_const_bb_sptr self) -> std::string"""
        return _blocks_swig2.and_const_bb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(and_const_bb_sptr self, std::string name)"""
        return _blocks_swig2.and_const_bb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(and_const_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.and_const_bb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(and_const_bb_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.and_const_bb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(and_const_bb_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.and_const_bb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(and_const_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.and_const_bb_sptr_message_subscribers(self, *args, **kwargs)

and_const_bb_sptr_swigregister = _blocks_swig2.and_const_bb_sptr_swigregister
and_const_bb_sptr_swigregister(and_const_bb_sptr)

and_const_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
and_const_bb = and_const_bb.make;

class and_const_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::and_const_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::and_const_ss)> self) -> and_const_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::and_const_ss)> self, and_const_ss p) -> and_const_ss_sptr
        """
        this = _blocks_swig2.new_and_const_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(and_const_ss_sptr self) -> and_const_ss"""
        return _blocks_swig2.and_const_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_and_const_ss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(and_const_ss_sptr self, short k) -> and_const_ss_sptr

        output[m] = input[m] & value for all M streams.

        Bitwise boolean AND of constant  with the data stream.

        Constructor Specific Documentation:

        Create an instance of and_const_ss.

        Args:
            k : AND constant
        """
        return _blocks_swig2.and_const_ss_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(and_const_ss_sptr self) -> short

        Return AND constant.
        """
        return _blocks_swig2.and_const_ss_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(and_const_ss_sptr self, short k)

        Set AND constant.
        """
        return _blocks_swig2.and_const_ss_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(and_const_ss_sptr self) -> unsigned int"""
        return _blocks_swig2.and_const_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(and_const_ss_sptr self, int which, int delay)
        declare_sample_delay(and_const_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig2.and_const_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(and_const_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.and_const_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(and_const_ss_sptr self) -> int"""
        return _blocks_swig2.and_const_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(and_const_ss_sptr self) -> double"""
        return _blocks_swig2.and_const_ss_sptr_relative_rate(self)

    def start(self):
        """start(and_const_ss_sptr self) -> bool"""
        return _blocks_swig2.and_const_ss_sptr_start(self)

    def stop(self):
        """stop(and_const_ss_sptr self) -> bool"""
        return _blocks_swig2.and_const_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(and_const_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.and_const_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(and_const_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.and_const_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(and_const_ss_sptr self) -> int"""
        return _blocks_swig2.and_const_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(and_const_ss_sptr self, int m)"""
        return _blocks_swig2.and_const_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(and_const_ss_sptr self)"""
        return _blocks_swig2.and_const_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(and_const_ss_sptr self) -> bool"""
        return _blocks_swig2.and_const_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(and_const_ss_sptr self, int m)"""
        return _blocks_swig2.and_const_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(and_const_ss_sptr self) -> int"""
        return _blocks_swig2.and_const_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(and_const_ss_sptr self, int i) -> long"""
        return _blocks_swig2.and_const_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(and_const_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(and_const_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.and_const_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(and_const_ss_sptr self, int i) -> long"""
        return _blocks_swig2.and_const_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(and_const_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(and_const_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.and_const_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(and_const_ss_sptr self) -> float"""
        return _blocks_swig2.and_const_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(and_const_ss_sptr self) -> float"""
        return _blocks_swig2.and_const_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(and_const_ss_sptr self) -> float"""
        return _blocks_swig2.and_const_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(and_const_ss_sptr self) -> float"""
        return _blocks_swig2.and_const_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(and_const_ss_sptr self) -> float"""
        return _blocks_swig2.and_const_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(and_const_ss_sptr self) -> float"""
        return _blocks_swig2.and_const_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(and_const_ss_sptr self, int which) -> float
        pc_input_buffers_full(and_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(and_const_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(and_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(and_const_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(and_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(and_const_ss_sptr self, int which) -> float
        pc_output_buffers_full(and_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(and_const_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(and_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(and_const_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(and_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(and_const_ss_sptr self) -> float"""
        return _blocks_swig2.and_const_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(and_const_ss_sptr self) -> float"""
        return _blocks_swig2.and_const_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(and_const_ss_sptr self) -> float"""
        return _blocks_swig2.and_const_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(and_const_ss_sptr self) -> float"""
        return _blocks_swig2.and_const_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(and_const_ss_sptr self) -> float"""
        return _blocks_swig2.and_const_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(and_const_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.and_const_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(and_const_ss_sptr self)"""
        return _blocks_swig2.and_const_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(and_const_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.and_const_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(and_const_ss_sptr self) -> int"""
        return _blocks_swig2.and_const_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(and_const_ss_sptr self) -> int"""
        return _blocks_swig2.and_const_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(and_const_ss_sptr self, int priority) -> int"""
        return _blocks_swig2.and_const_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(and_const_ss_sptr self) -> std::string"""
        return _blocks_swig2.and_const_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(and_const_ss_sptr self) -> std::string"""
        return _blocks_swig2.and_const_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(and_const_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.and_const_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(and_const_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.and_const_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(and_const_ss_sptr self) -> long"""
        return _blocks_swig2.and_const_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(and_const_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.and_const_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(and_const_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.and_const_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(and_const_ss_sptr self) -> std::string"""
        return _blocks_swig2.and_const_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(and_const_ss_sptr self, std::string name)"""
        return _blocks_swig2.and_const_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(and_const_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.and_const_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(and_const_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.and_const_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(and_const_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.and_const_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(and_const_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.and_const_ss_sptr_message_subscribers(self, *args, **kwargs)

and_const_ss_sptr_swigregister = _blocks_swig2.and_const_ss_sptr_swigregister
and_const_ss_sptr_swigregister(and_const_ss_sptr)

and_const_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
and_const_ss = and_const_ss.make;

class and_const_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::and_const_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::and_const_ii)> self) -> and_const_ii_sptr
        __init__(boost::shared_ptr<(gr::blocks::and_const_ii)> self, and_const_ii p) -> and_const_ii_sptr
        """
        this = _blocks_swig2.new_and_const_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(and_const_ii_sptr self) -> and_const_ii"""
        return _blocks_swig2.and_const_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_and_const_ii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(and_const_ii_sptr self, int k) -> and_const_ii_sptr

        output[m] = input[m] & value for all M streams.

        Bitwise boolean AND of constant  with the data stream.

        Constructor Specific Documentation:

        Create an instance of and_const_ii.

        Args:
            k : AND constant
        """
        return _blocks_swig2.and_const_ii_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(and_const_ii_sptr self) -> int

        Return AND constant.
        """
        return _blocks_swig2.and_const_ii_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(and_const_ii_sptr self, int k)

        Set AND constant.
        """
        return _blocks_swig2.and_const_ii_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(and_const_ii_sptr self) -> unsigned int"""
        return _blocks_swig2.and_const_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(and_const_ii_sptr self, int which, int delay)
        declare_sample_delay(and_const_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig2.and_const_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(and_const_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.and_const_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(and_const_ii_sptr self) -> int"""
        return _blocks_swig2.and_const_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(and_const_ii_sptr self) -> double"""
        return _blocks_swig2.and_const_ii_sptr_relative_rate(self)

    def start(self):
        """start(and_const_ii_sptr self) -> bool"""
        return _blocks_swig2.and_const_ii_sptr_start(self)

    def stop(self):
        """stop(and_const_ii_sptr self) -> bool"""
        return _blocks_swig2.and_const_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(and_const_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.and_const_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(and_const_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.and_const_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(and_const_ii_sptr self) -> int"""
        return _blocks_swig2.and_const_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(and_const_ii_sptr self, int m)"""
        return _blocks_swig2.and_const_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(and_const_ii_sptr self)"""
        return _blocks_swig2.and_const_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(and_const_ii_sptr self) -> bool"""
        return _blocks_swig2.and_const_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(and_const_ii_sptr self, int m)"""
        return _blocks_swig2.and_const_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(and_const_ii_sptr self) -> int"""
        return _blocks_swig2.and_const_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(and_const_ii_sptr self, int i) -> long"""
        return _blocks_swig2.and_const_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(and_const_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(and_const_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.and_const_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(and_const_ii_sptr self, int i) -> long"""
        return _blocks_swig2.and_const_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(and_const_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(and_const_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.and_const_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(and_const_ii_sptr self) -> float"""
        return _blocks_swig2.and_const_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(and_const_ii_sptr self) -> float"""
        return _blocks_swig2.and_const_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(and_const_ii_sptr self) -> float"""
        return _blocks_swig2.and_const_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(and_const_ii_sptr self) -> float"""
        return _blocks_swig2.and_const_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(and_const_ii_sptr self) -> float"""
        return _blocks_swig2.and_const_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(and_const_ii_sptr self) -> float"""
        return _blocks_swig2.and_const_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(and_const_ii_sptr self, int which) -> float
        pc_input_buffers_full(and_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(and_const_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(and_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(and_const_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(and_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(and_const_ii_sptr self, int which) -> float
        pc_output_buffers_full(and_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(and_const_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(and_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(and_const_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(and_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.and_const_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(and_const_ii_sptr self) -> float"""
        return _blocks_swig2.and_const_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(and_const_ii_sptr self) -> float"""
        return _blocks_swig2.and_const_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(and_const_ii_sptr self) -> float"""
        return _blocks_swig2.and_const_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(and_const_ii_sptr self) -> float"""
        return _blocks_swig2.and_const_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(and_const_ii_sptr self) -> float"""
        return _blocks_swig2.and_const_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(and_const_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.and_const_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(and_const_ii_sptr self)"""
        return _blocks_swig2.and_const_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(and_const_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.and_const_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(and_const_ii_sptr self) -> int"""
        return _blocks_swig2.and_const_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(and_const_ii_sptr self) -> int"""
        return _blocks_swig2.and_const_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(and_const_ii_sptr self, int priority) -> int"""
        return _blocks_swig2.and_const_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(and_const_ii_sptr self) -> std::string"""
        return _blocks_swig2.and_const_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(and_const_ii_sptr self) -> std::string"""
        return _blocks_swig2.and_const_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(and_const_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.and_const_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(and_const_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.and_const_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(and_const_ii_sptr self) -> long"""
        return _blocks_swig2.and_const_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(and_const_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.and_const_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(and_const_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.and_const_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(and_const_ii_sptr self) -> std::string"""
        return _blocks_swig2.and_const_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(and_const_ii_sptr self, std::string name)"""
        return _blocks_swig2.and_const_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(and_const_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.and_const_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(and_const_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.and_const_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(and_const_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.and_const_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(and_const_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.and_const_ii_sptr_message_subscribers(self, *args, **kwargs)

and_const_ii_sptr_swigregister = _blocks_swig2.and_const_ii_sptr_swigregister
and_const_ii_sptr_swigregister(and_const_ii_sptr)

and_const_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
and_const_ii = and_const_ii.make;

class argmax_fs_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::argmax_fs)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::argmax_fs)> self) -> argmax_fs_sptr
        __init__(boost::shared_ptr<(gr::blocks::argmax_fs)> self, argmax_fs p) -> argmax_fs_sptr
        """
        this = _blocks_swig2.new_argmax_fs_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(argmax_fs_sptr self) -> argmax_fs"""
        return _blocks_swig2.argmax_fs_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_argmax_fs_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(argmax_fs_sptr self, size_t vlen) -> argmax_fs_sptr

        Compares vectors from multiple streams and determines the index in the vector and stream number where the maximum value occurred.

        Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and output two streams:

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.argmax_fs_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(argmax_fs_sptr self) -> unsigned int"""
        return _blocks_swig2.argmax_fs_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(argmax_fs_sptr self, int which, int delay)
        declare_sample_delay(argmax_fs_sptr self, unsigned int delay)
        """
        return _blocks_swig2.argmax_fs_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(argmax_fs_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.argmax_fs_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(argmax_fs_sptr self) -> int"""
        return _blocks_swig2.argmax_fs_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(argmax_fs_sptr self) -> double"""
        return _blocks_swig2.argmax_fs_sptr_relative_rate(self)

    def start(self):
        """start(argmax_fs_sptr self) -> bool"""
        return _blocks_swig2.argmax_fs_sptr_start(self)

    def stop(self):
        """stop(argmax_fs_sptr self) -> bool"""
        return _blocks_swig2.argmax_fs_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(argmax_fs_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.argmax_fs_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(argmax_fs_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.argmax_fs_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(argmax_fs_sptr self) -> int"""
        return _blocks_swig2.argmax_fs_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(argmax_fs_sptr self, int m)"""
        return _blocks_swig2.argmax_fs_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(argmax_fs_sptr self)"""
        return _blocks_swig2.argmax_fs_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(argmax_fs_sptr self) -> bool"""
        return _blocks_swig2.argmax_fs_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(argmax_fs_sptr self, int m)"""
        return _blocks_swig2.argmax_fs_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(argmax_fs_sptr self) -> int"""
        return _blocks_swig2.argmax_fs_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(argmax_fs_sptr self, int i) -> long"""
        return _blocks_swig2.argmax_fs_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(argmax_fs_sptr self, long max_output_buffer)
        set_max_output_buffer(argmax_fs_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.argmax_fs_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(argmax_fs_sptr self, int i) -> long"""
        return _blocks_swig2.argmax_fs_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(argmax_fs_sptr self, long min_output_buffer)
        set_min_output_buffer(argmax_fs_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.argmax_fs_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(argmax_fs_sptr self) -> float"""
        return _blocks_swig2.argmax_fs_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(argmax_fs_sptr self) -> float"""
        return _blocks_swig2.argmax_fs_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(argmax_fs_sptr self) -> float"""
        return _blocks_swig2.argmax_fs_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(argmax_fs_sptr self) -> float"""
        return _blocks_swig2.argmax_fs_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(argmax_fs_sptr self) -> float"""
        return _blocks_swig2.argmax_fs_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(argmax_fs_sptr self) -> float"""
        return _blocks_swig2.argmax_fs_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(argmax_fs_sptr self, int which) -> float
        pc_input_buffers_full(argmax_fs_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_fs_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(argmax_fs_sptr self, int which) -> float
        pc_input_buffers_full_avg(argmax_fs_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_fs_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(argmax_fs_sptr self, int which) -> float
        pc_input_buffers_full_var(argmax_fs_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_fs_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(argmax_fs_sptr self, int which) -> float
        pc_output_buffers_full(argmax_fs_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_fs_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(argmax_fs_sptr self, int which) -> float
        pc_output_buffers_full_avg(argmax_fs_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_fs_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(argmax_fs_sptr self, int which) -> float
        pc_output_buffers_full_var(argmax_fs_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_fs_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(argmax_fs_sptr self) -> float"""
        return _blocks_swig2.argmax_fs_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(argmax_fs_sptr self) -> float"""
        return _blocks_swig2.argmax_fs_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(argmax_fs_sptr self) -> float"""
        return _blocks_swig2.argmax_fs_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(argmax_fs_sptr self) -> float"""
        return _blocks_swig2.argmax_fs_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(argmax_fs_sptr self) -> float"""
        return _blocks_swig2.argmax_fs_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(argmax_fs_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.argmax_fs_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(argmax_fs_sptr self)"""
        return _blocks_swig2.argmax_fs_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(argmax_fs_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.argmax_fs_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(argmax_fs_sptr self) -> int"""
        return _blocks_swig2.argmax_fs_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(argmax_fs_sptr self) -> int"""
        return _blocks_swig2.argmax_fs_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(argmax_fs_sptr self, int priority) -> int"""
        return _blocks_swig2.argmax_fs_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(argmax_fs_sptr self) -> std::string"""
        return _blocks_swig2.argmax_fs_sptr_name(self)

    def symbol_name(self):
        """symbol_name(argmax_fs_sptr self) -> std::string"""
        return _blocks_swig2.argmax_fs_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(argmax_fs_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.argmax_fs_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(argmax_fs_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.argmax_fs_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(argmax_fs_sptr self) -> long"""
        return _blocks_swig2.argmax_fs_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(argmax_fs_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.argmax_fs_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(argmax_fs_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.argmax_fs_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(argmax_fs_sptr self) -> std::string"""
        return _blocks_swig2.argmax_fs_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(argmax_fs_sptr self, std::string name)"""
        return _blocks_swig2.argmax_fs_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(argmax_fs_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.argmax_fs_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(argmax_fs_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.argmax_fs_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(argmax_fs_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.argmax_fs_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(argmax_fs_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.argmax_fs_sptr_message_subscribers(self, *args, **kwargs)

argmax_fs_sptr_swigregister = _blocks_swig2.argmax_fs_sptr_swigregister
argmax_fs_sptr_swigregister(argmax_fs_sptr)

argmax_fs_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
argmax_fs = argmax_fs.make;

class argmax_is_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::argmax_is)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::argmax_is)> self) -> argmax_is_sptr
        __init__(boost::shared_ptr<(gr::blocks::argmax_is)> self, argmax_is p) -> argmax_is_sptr
        """
        this = _blocks_swig2.new_argmax_is_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(argmax_is_sptr self) -> argmax_is"""
        return _blocks_swig2.argmax_is_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_argmax_is_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(argmax_is_sptr self, size_t vlen) -> argmax_is_sptr

        Compares vectors from multiple streams and determines the index in the vector and stream number where the maximum value occurred.

        Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and output two streams:

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.argmax_is_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(argmax_is_sptr self) -> unsigned int"""
        return _blocks_swig2.argmax_is_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(argmax_is_sptr self, int which, int delay)
        declare_sample_delay(argmax_is_sptr self, unsigned int delay)
        """
        return _blocks_swig2.argmax_is_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(argmax_is_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.argmax_is_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(argmax_is_sptr self) -> int"""
        return _blocks_swig2.argmax_is_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(argmax_is_sptr self) -> double"""
        return _blocks_swig2.argmax_is_sptr_relative_rate(self)

    def start(self):
        """start(argmax_is_sptr self) -> bool"""
        return _blocks_swig2.argmax_is_sptr_start(self)

    def stop(self):
        """stop(argmax_is_sptr self) -> bool"""
        return _blocks_swig2.argmax_is_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(argmax_is_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.argmax_is_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(argmax_is_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.argmax_is_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(argmax_is_sptr self) -> int"""
        return _blocks_swig2.argmax_is_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(argmax_is_sptr self, int m)"""
        return _blocks_swig2.argmax_is_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(argmax_is_sptr self)"""
        return _blocks_swig2.argmax_is_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(argmax_is_sptr self) -> bool"""
        return _blocks_swig2.argmax_is_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(argmax_is_sptr self, int m)"""
        return _blocks_swig2.argmax_is_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(argmax_is_sptr self) -> int"""
        return _blocks_swig2.argmax_is_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(argmax_is_sptr self, int i) -> long"""
        return _blocks_swig2.argmax_is_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(argmax_is_sptr self, long max_output_buffer)
        set_max_output_buffer(argmax_is_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.argmax_is_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(argmax_is_sptr self, int i) -> long"""
        return _blocks_swig2.argmax_is_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(argmax_is_sptr self, long min_output_buffer)
        set_min_output_buffer(argmax_is_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.argmax_is_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(argmax_is_sptr self) -> float"""
        return _blocks_swig2.argmax_is_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(argmax_is_sptr self) -> float"""
        return _blocks_swig2.argmax_is_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(argmax_is_sptr self) -> float"""
        return _blocks_swig2.argmax_is_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(argmax_is_sptr self) -> float"""
        return _blocks_swig2.argmax_is_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(argmax_is_sptr self) -> float"""
        return _blocks_swig2.argmax_is_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(argmax_is_sptr self) -> float"""
        return _blocks_swig2.argmax_is_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(argmax_is_sptr self, int which) -> float
        pc_input_buffers_full(argmax_is_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_is_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(argmax_is_sptr self, int which) -> float
        pc_input_buffers_full_avg(argmax_is_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_is_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(argmax_is_sptr self, int which) -> float
        pc_input_buffers_full_var(argmax_is_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_is_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(argmax_is_sptr self, int which) -> float
        pc_output_buffers_full(argmax_is_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_is_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(argmax_is_sptr self, int which) -> float
        pc_output_buffers_full_avg(argmax_is_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_is_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(argmax_is_sptr self, int which) -> float
        pc_output_buffers_full_var(argmax_is_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_is_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(argmax_is_sptr self) -> float"""
        return _blocks_swig2.argmax_is_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(argmax_is_sptr self) -> float"""
        return _blocks_swig2.argmax_is_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(argmax_is_sptr self) -> float"""
        return _blocks_swig2.argmax_is_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(argmax_is_sptr self) -> float"""
        return _blocks_swig2.argmax_is_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(argmax_is_sptr self) -> float"""
        return _blocks_swig2.argmax_is_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(argmax_is_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.argmax_is_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(argmax_is_sptr self)"""
        return _blocks_swig2.argmax_is_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(argmax_is_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.argmax_is_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(argmax_is_sptr self) -> int"""
        return _blocks_swig2.argmax_is_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(argmax_is_sptr self) -> int"""
        return _blocks_swig2.argmax_is_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(argmax_is_sptr self, int priority) -> int"""
        return _blocks_swig2.argmax_is_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(argmax_is_sptr self) -> std::string"""
        return _blocks_swig2.argmax_is_sptr_name(self)

    def symbol_name(self):
        """symbol_name(argmax_is_sptr self) -> std::string"""
        return _blocks_swig2.argmax_is_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(argmax_is_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.argmax_is_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(argmax_is_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.argmax_is_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(argmax_is_sptr self) -> long"""
        return _blocks_swig2.argmax_is_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(argmax_is_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.argmax_is_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(argmax_is_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.argmax_is_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(argmax_is_sptr self) -> std::string"""
        return _blocks_swig2.argmax_is_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(argmax_is_sptr self, std::string name)"""
        return _blocks_swig2.argmax_is_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(argmax_is_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.argmax_is_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(argmax_is_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.argmax_is_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(argmax_is_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.argmax_is_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(argmax_is_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.argmax_is_sptr_message_subscribers(self, *args, **kwargs)

argmax_is_sptr_swigregister = _blocks_swig2.argmax_is_sptr_swigregister
argmax_is_sptr_swigregister(argmax_is_sptr)

argmax_is_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
argmax_is = argmax_is.make;

class argmax_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::argmax_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::argmax_ss)> self) -> argmax_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::argmax_ss)> self, argmax_ss p) -> argmax_ss_sptr
        """
        this = _blocks_swig2.new_argmax_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(argmax_ss_sptr self) -> argmax_ss"""
        return _blocks_swig2.argmax_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_argmax_ss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(argmax_ss_sptr self, size_t vlen) -> argmax_ss_sptr

        Compares vectors from multiple streams and determines the index in the vector and stream number where the maximum value occurred.

        Data is passed in as a vector of length  from multiple input sources. It will look through these streams of  data items and output two streams:

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.argmax_ss_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(argmax_ss_sptr self) -> unsigned int"""
        return _blocks_swig2.argmax_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(argmax_ss_sptr self, int which, int delay)
        declare_sample_delay(argmax_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig2.argmax_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(argmax_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.argmax_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(argmax_ss_sptr self) -> int"""
        return _blocks_swig2.argmax_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(argmax_ss_sptr self) -> double"""
        return _blocks_swig2.argmax_ss_sptr_relative_rate(self)

    def start(self):
        """start(argmax_ss_sptr self) -> bool"""
        return _blocks_swig2.argmax_ss_sptr_start(self)

    def stop(self):
        """stop(argmax_ss_sptr self) -> bool"""
        return _blocks_swig2.argmax_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(argmax_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.argmax_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(argmax_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.argmax_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(argmax_ss_sptr self) -> int"""
        return _blocks_swig2.argmax_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(argmax_ss_sptr self, int m)"""
        return _blocks_swig2.argmax_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(argmax_ss_sptr self)"""
        return _blocks_swig2.argmax_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(argmax_ss_sptr self) -> bool"""
        return _blocks_swig2.argmax_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(argmax_ss_sptr self, int m)"""
        return _blocks_swig2.argmax_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(argmax_ss_sptr self) -> int"""
        return _blocks_swig2.argmax_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(argmax_ss_sptr self, int i) -> long"""
        return _blocks_swig2.argmax_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(argmax_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(argmax_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.argmax_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(argmax_ss_sptr self, int i) -> long"""
        return _blocks_swig2.argmax_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(argmax_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(argmax_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.argmax_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(argmax_ss_sptr self) -> float"""
        return _blocks_swig2.argmax_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(argmax_ss_sptr self) -> float"""
        return _blocks_swig2.argmax_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(argmax_ss_sptr self) -> float"""
        return _blocks_swig2.argmax_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(argmax_ss_sptr self) -> float"""
        return _blocks_swig2.argmax_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(argmax_ss_sptr self) -> float"""
        return _blocks_swig2.argmax_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(argmax_ss_sptr self) -> float"""
        return _blocks_swig2.argmax_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(argmax_ss_sptr self, int which) -> float
        pc_input_buffers_full(argmax_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(argmax_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(argmax_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(argmax_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(argmax_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(argmax_ss_sptr self, int which) -> float
        pc_output_buffers_full(argmax_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(argmax_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(argmax_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(argmax_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(argmax_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.argmax_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(argmax_ss_sptr self) -> float"""
        return _blocks_swig2.argmax_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(argmax_ss_sptr self) -> float"""
        return _blocks_swig2.argmax_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(argmax_ss_sptr self) -> float"""
        return _blocks_swig2.argmax_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(argmax_ss_sptr self) -> float"""
        return _blocks_swig2.argmax_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(argmax_ss_sptr self) -> float"""
        return _blocks_swig2.argmax_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(argmax_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.argmax_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(argmax_ss_sptr self)"""
        return _blocks_swig2.argmax_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(argmax_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.argmax_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(argmax_ss_sptr self) -> int"""
        return _blocks_swig2.argmax_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(argmax_ss_sptr self) -> int"""
        return _blocks_swig2.argmax_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(argmax_ss_sptr self, int priority) -> int"""
        return _blocks_swig2.argmax_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(argmax_ss_sptr self) -> std::string"""
        return _blocks_swig2.argmax_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(argmax_ss_sptr self) -> std::string"""
        return _blocks_swig2.argmax_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(argmax_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.argmax_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(argmax_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.argmax_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(argmax_ss_sptr self) -> long"""
        return _blocks_swig2.argmax_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(argmax_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.argmax_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(argmax_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.argmax_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(argmax_ss_sptr self) -> std::string"""
        return _blocks_swig2.argmax_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(argmax_ss_sptr self, std::string name)"""
        return _blocks_swig2.argmax_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(argmax_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.argmax_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(argmax_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.argmax_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(argmax_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.argmax_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(argmax_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.argmax_ss_sptr_message_subscribers(self, *args, **kwargs)

argmax_ss_sptr_swigregister = _blocks_swig2.argmax_ss_sptr_swigregister
argmax_ss_sptr_swigregister(argmax_ss_sptr)

argmax_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
argmax_ss = argmax_ss.make;

class bin_statistics_f_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::bin_statistics_f)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::bin_statistics_f)> self) -> bin_statistics_f_sptr
        __init__(boost::shared_ptr<(gr::blocks::bin_statistics_f)> self, bin_statistics_f p) -> bin_statistics_f_sptr
        """
        this = _blocks_swig2.new_bin_statistics_f_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(bin_statistics_f_sptr self) -> bin_statistics_f"""
        return _blocks_swig2.bin_statistics_f_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_bin_statistics_f_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(bin_statistics_f_sptr self, unsigned int vlen, msg_queue_sptr msgq, gr::feval_dd * tune, size_t tune_delay, size_t dwell_delay) -> bin_statistics_f_sptr

        control scanning and record frequency domain statistics

        Constructor Specific Documentation:

        Build a bin statistics block. See qa_bin_statistics.py and gr-uhd/examples/python/usrp_spectrum_sense.py for examples of its use, specifically how to use the callback function.

        Args:
            vlen : vector length
            msgq : message queue
            tune : a feval_dd callback function
            tune_delay : number of samples for the tune delay
            dwell_delay : number of samples for the dwell delay
        """
        return _blocks_swig2.bin_statistics_f_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(bin_statistics_f_sptr self) -> unsigned int"""
        return _blocks_swig2.bin_statistics_f_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(bin_statistics_f_sptr self, int which, int delay)
        declare_sample_delay(bin_statistics_f_sptr self, unsigned int delay)
        """
        return _blocks_swig2.bin_statistics_f_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(bin_statistics_f_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.bin_statistics_f_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(bin_statistics_f_sptr self) -> int"""
        return _blocks_swig2.bin_statistics_f_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(bin_statistics_f_sptr self) -> double"""
        return _blocks_swig2.bin_statistics_f_sptr_relative_rate(self)

    def start(self):
        """start(bin_statistics_f_sptr self) -> bool"""
        return _blocks_swig2.bin_statistics_f_sptr_start(self)

    def stop(self):
        """stop(bin_statistics_f_sptr self) -> bool"""
        return _blocks_swig2.bin_statistics_f_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(bin_statistics_f_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.bin_statistics_f_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(bin_statistics_f_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.bin_statistics_f_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(bin_statistics_f_sptr self) -> int"""
        return _blocks_swig2.bin_statistics_f_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(bin_statistics_f_sptr self, int m)"""
        return _blocks_swig2.bin_statistics_f_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(bin_statistics_f_sptr self)"""
        return _blocks_swig2.bin_statistics_f_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(bin_statistics_f_sptr self) -> bool"""
        return _blocks_swig2.bin_statistics_f_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(bin_statistics_f_sptr self, int m)"""
        return _blocks_swig2.bin_statistics_f_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(bin_statistics_f_sptr self) -> int"""
        return _blocks_swig2.bin_statistics_f_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(bin_statistics_f_sptr self, int i) -> long"""
        return _blocks_swig2.bin_statistics_f_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(bin_statistics_f_sptr self, long max_output_buffer)
        set_max_output_buffer(bin_statistics_f_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.bin_statistics_f_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(bin_statistics_f_sptr self, int i) -> long"""
        return _blocks_swig2.bin_statistics_f_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(bin_statistics_f_sptr self, long min_output_buffer)
        set_min_output_buffer(bin_statistics_f_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.bin_statistics_f_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(bin_statistics_f_sptr self) -> float"""
        return _blocks_swig2.bin_statistics_f_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(bin_statistics_f_sptr self) -> float"""
        return _blocks_swig2.bin_statistics_f_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(bin_statistics_f_sptr self) -> float"""
        return _blocks_swig2.bin_statistics_f_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(bin_statistics_f_sptr self) -> float"""
        return _blocks_swig2.bin_statistics_f_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(bin_statistics_f_sptr self) -> float"""
        return _blocks_swig2.bin_statistics_f_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(bin_statistics_f_sptr self) -> float"""
        return _blocks_swig2.bin_statistics_f_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(bin_statistics_f_sptr self, int which) -> float
        pc_input_buffers_full(bin_statistics_f_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.bin_statistics_f_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(bin_statistics_f_sptr self, int which) -> float
        pc_input_buffers_full_avg(bin_statistics_f_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.bin_statistics_f_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(bin_statistics_f_sptr self, int which) -> float
        pc_input_buffers_full_var(bin_statistics_f_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.bin_statistics_f_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(bin_statistics_f_sptr self, int which) -> float
        pc_output_buffers_full(bin_statistics_f_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.bin_statistics_f_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(bin_statistics_f_sptr self, int which) -> float
        pc_output_buffers_full_avg(bin_statistics_f_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.bin_statistics_f_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(bin_statistics_f_sptr self, int which) -> float
        pc_output_buffers_full_var(bin_statistics_f_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.bin_statistics_f_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(bin_statistics_f_sptr self) -> float"""
        return _blocks_swig2.bin_statistics_f_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(bin_statistics_f_sptr self) -> float"""
        return _blocks_swig2.bin_statistics_f_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(bin_statistics_f_sptr self) -> float"""
        return _blocks_swig2.bin_statistics_f_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(bin_statistics_f_sptr self) -> float"""
        return _blocks_swig2.bin_statistics_f_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(bin_statistics_f_sptr self) -> float"""
        return _blocks_swig2.bin_statistics_f_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(bin_statistics_f_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.bin_statistics_f_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(bin_statistics_f_sptr self)"""
        return _blocks_swig2.bin_statistics_f_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(bin_statistics_f_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.bin_statistics_f_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(bin_statistics_f_sptr self) -> int"""
        return _blocks_swig2.bin_statistics_f_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(bin_statistics_f_sptr self) -> int"""
        return _blocks_swig2.bin_statistics_f_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(bin_statistics_f_sptr self, int priority) -> int"""
        return _blocks_swig2.bin_statistics_f_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(bin_statistics_f_sptr self) -> std::string"""
        return _blocks_swig2.bin_statistics_f_sptr_name(self)

    def symbol_name(self):
        """symbol_name(bin_statistics_f_sptr self) -> std::string"""
        return _blocks_swig2.bin_statistics_f_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(bin_statistics_f_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.bin_statistics_f_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(bin_statistics_f_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.bin_statistics_f_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(bin_statistics_f_sptr self) -> long"""
        return _blocks_swig2.bin_statistics_f_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(bin_statistics_f_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.bin_statistics_f_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(bin_statistics_f_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.bin_statistics_f_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(bin_statistics_f_sptr self) -> std::string"""
        return _blocks_swig2.bin_statistics_f_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(bin_statistics_f_sptr self, std::string name)"""
        return _blocks_swig2.bin_statistics_f_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(bin_statistics_f_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.bin_statistics_f_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(bin_statistics_f_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.bin_statistics_f_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(bin_statistics_f_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.bin_statistics_f_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(bin_statistics_f_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.bin_statistics_f_sptr_message_subscribers(self, *args, **kwargs)

bin_statistics_f_sptr_swigregister = _blocks_swig2.bin_statistics_f_sptr_swigregister
bin_statistics_f_sptr_swigregister(bin_statistics_f_sptr)

bin_statistics_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
bin_statistics_f = bin_statistics_f.make;

class burst_tagger_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::burst_tagger)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::burst_tagger)> self) -> burst_tagger_sptr
        __init__(boost::shared_ptr<(gr::blocks::burst_tagger)> self, burst_tagger p) -> burst_tagger_sptr
        """
        this = _blocks_swig2.new_burst_tagger_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(burst_tagger_sptr self) -> burst_tagger"""
        return _blocks_swig2.burst_tagger_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_burst_tagger_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(burst_tagger_sptr self, size_t itemsize) -> burst_tagger_sptr

        Sets a burst on/off tag based on the value of the trigger input.

        This block takes two inputs, a signal stream on the input stream 0 and a trigger stream of shorts on input stream 1. If the trigger stream goes above 0, a tag with the key "burst" will be transmitted as a pmt::PMT_T. When the trigger signal falls below 0, the "burst" tag will be transmitted as pmt::PMT_F.

        The signal on stream 0 is retransmitted to output stream 0.

        Constructor Specific Documentation:

        Build a burst tagger gnuradio/blocks.

        Args:
            itemsize : itemsize of the signal stream on input 0.
        """
        return _blocks_swig2.burst_tagger_sptr_make(self, *args, **kwargs)

    def set_true_tag(self, *args, **kwargs):
        """
        set_true_tag(burst_tagger_sptr self, std::string const & key, bool value)

        For the true burst tag, change the key name to  and a new value of .
        """
        return _blocks_swig2.burst_tagger_sptr_set_true_tag(self, *args, **kwargs)

    def set_false_tag(self, *args, **kwargs):
        """
        set_false_tag(burst_tagger_sptr self, std::string const & key, bool value)

        For the false burst tag, change the key name to  and a new value of .
        """
        return _blocks_swig2.burst_tagger_sptr_set_false_tag(self, *args, **kwargs)

    def history(self):
        """history(burst_tagger_sptr self) -> unsigned int"""
        return _blocks_swig2.burst_tagger_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(burst_tagger_sptr self, int which, int delay)
        declare_sample_delay(burst_tagger_sptr self, unsigned int delay)
        """
        return _blocks_swig2.burst_tagger_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(burst_tagger_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.burst_tagger_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(burst_tagger_sptr self) -> int"""
        return _blocks_swig2.burst_tagger_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(burst_tagger_sptr self) -> double"""
        return _blocks_swig2.burst_tagger_sptr_relative_rate(self)

    def start(self):
        """start(burst_tagger_sptr self) -> bool"""
        return _blocks_swig2.burst_tagger_sptr_start(self)

    def stop(self):
        """stop(burst_tagger_sptr self) -> bool"""
        return _blocks_swig2.burst_tagger_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(burst_tagger_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.burst_tagger_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(burst_tagger_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.burst_tagger_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(burst_tagger_sptr self) -> int"""
        return _blocks_swig2.burst_tagger_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(burst_tagger_sptr self, int m)"""
        return _blocks_swig2.burst_tagger_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(burst_tagger_sptr self)"""
        return _blocks_swig2.burst_tagger_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(burst_tagger_sptr self) -> bool"""
        return _blocks_swig2.burst_tagger_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(burst_tagger_sptr self, int m)"""
        return _blocks_swig2.burst_tagger_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(burst_tagger_sptr self) -> int"""
        return _blocks_swig2.burst_tagger_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(burst_tagger_sptr self, int i) -> long"""
        return _blocks_swig2.burst_tagger_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(burst_tagger_sptr self, long max_output_buffer)
        set_max_output_buffer(burst_tagger_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.burst_tagger_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(burst_tagger_sptr self, int i) -> long"""
        return _blocks_swig2.burst_tagger_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(burst_tagger_sptr self, long min_output_buffer)
        set_min_output_buffer(burst_tagger_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.burst_tagger_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(burst_tagger_sptr self) -> float"""
        return _blocks_swig2.burst_tagger_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(burst_tagger_sptr self) -> float"""
        return _blocks_swig2.burst_tagger_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(burst_tagger_sptr self) -> float"""
        return _blocks_swig2.burst_tagger_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(burst_tagger_sptr self) -> float"""
        return _blocks_swig2.burst_tagger_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(burst_tagger_sptr self) -> float"""
        return _blocks_swig2.burst_tagger_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(burst_tagger_sptr self) -> float"""
        return _blocks_swig2.burst_tagger_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(burst_tagger_sptr self, int which) -> float
        pc_input_buffers_full(burst_tagger_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.burst_tagger_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(burst_tagger_sptr self, int which) -> float
        pc_input_buffers_full_avg(burst_tagger_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.burst_tagger_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(burst_tagger_sptr self, int which) -> float
        pc_input_buffers_full_var(burst_tagger_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.burst_tagger_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(burst_tagger_sptr self, int which) -> float
        pc_output_buffers_full(burst_tagger_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.burst_tagger_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(burst_tagger_sptr self, int which) -> float
        pc_output_buffers_full_avg(burst_tagger_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.burst_tagger_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(burst_tagger_sptr self, int which) -> float
        pc_output_buffers_full_var(burst_tagger_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.burst_tagger_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(burst_tagger_sptr self) -> float"""
        return _blocks_swig2.burst_tagger_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(burst_tagger_sptr self) -> float"""
        return _blocks_swig2.burst_tagger_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(burst_tagger_sptr self) -> float"""
        return _blocks_swig2.burst_tagger_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(burst_tagger_sptr self) -> float"""
        return _blocks_swig2.burst_tagger_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(burst_tagger_sptr self) -> float"""
        return _blocks_swig2.burst_tagger_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(burst_tagger_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.burst_tagger_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(burst_tagger_sptr self)"""
        return _blocks_swig2.burst_tagger_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(burst_tagger_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.burst_tagger_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(burst_tagger_sptr self) -> int"""
        return _blocks_swig2.burst_tagger_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(burst_tagger_sptr self) -> int"""
        return _blocks_swig2.burst_tagger_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(burst_tagger_sptr self, int priority) -> int"""
        return _blocks_swig2.burst_tagger_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(burst_tagger_sptr self) -> std::string"""
        return _blocks_swig2.burst_tagger_sptr_name(self)

    def symbol_name(self):
        """symbol_name(burst_tagger_sptr self) -> std::string"""
        return _blocks_swig2.burst_tagger_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(burst_tagger_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.burst_tagger_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(burst_tagger_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.burst_tagger_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(burst_tagger_sptr self) -> long"""
        return _blocks_swig2.burst_tagger_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(burst_tagger_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.burst_tagger_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(burst_tagger_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.burst_tagger_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(burst_tagger_sptr self) -> std::string"""
        return _blocks_swig2.burst_tagger_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(burst_tagger_sptr self, std::string name)"""
        return _blocks_swig2.burst_tagger_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(burst_tagger_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.burst_tagger_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(burst_tagger_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.burst_tagger_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(burst_tagger_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.burst_tagger_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(burst_tagger_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.burst_tagger_sptr_message_subscribers(self, *args, **kwargs)

burst_tagger_sptr_swigregister = _blocks_swig2.burst_tagger_sptr_swigregister
burst_tagger_sptr_swigregister(burst_tagger_sptr)

burst_tagger_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
burst_tagger = burst_tagger.make;

class char_to_float_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::char_to_float)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::char_to_float)> self) -> char_to_float_sptr
        __init__(boost::shared_ptr<(gr::blocks::char_to_float)> self, char_to_float p) -> char_to_float_sptr
        """
        this = _blocks_swig2.new_char_to_float_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(char_to_float_sptr self) -> char_to_float"""
        return _blocks_swig2.char_to_float_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_char_to_float_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1, scale=1.0):
        """
        make(char_to_float_sptr self, size_t vlen=1, float scale=1.0) -> char_to_float_sptr

        Convert stream of chars to a stream of float.

        Converts  length vectors of input char samples to floats and applies a scaling factor of

        Constructor Specific Documentation:

        Build a chars to float stream converter block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar divider to change the output signal scale.
        """
        return _blocks_swig2.char_to_float_sptr_make(self, vlen, scale)

    def scale(self):
        """
        scale(char_to_float_sptr self) -> float

        Get the scalar divider value.
        """
        return _blocks_swig2.char_to_float_sptr_scale(self)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(char_to_float_sptr self, float scale)

        Set the scalar divider value.
        """
        return _blocks_swig2.char_to_float_sptr_set_scale(self, *args, **kwargs)

    def history(self):
        """history(char_to_float_sptr self) -> unsigned int"""
        return _blocks_swig2.char_to_float_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(char_to_float_sptr self, int which, int delay)
        declare_sample_delay(char_to_float_sptr self, unsigned int delay)
        """
        return _blocks_swig2.char_to_float_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(char_to_float_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.char_to_float_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(char_to_float_sptr self) -> int"""
        return _blocks_swig2.char_to_float_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(char_to_float_sptr self) -> double"""
        return _blocks_swig2.char_to_float_sptr_relative_rate(self)

    def start(self):
        """start(char_to_float_sptr self) -> bool"""
        return _blocks_swig2.char_to_float_sptr_start(self)

    def stop(self):
        """stop(char_to_float_sptr self) -> bool"""
        return _blocks_swig2.char_to_float_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(char_to_float_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.char_to_float_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(char_to_float_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.char_to_float_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(char_to_float_sptr self) -> int"""
        return _blocks_swig2.char_to_float_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(char_to_float_sptr self, int m)"""
        return _blocks_swig2.char_to_float_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(char_to_float_sptr self)"""
        return _blocks_swig2.char_to_float_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(char_to_float_sptr self) -> bool"""
        return _blocks_swig2.char_to_float_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(char_to_float_sptr self, int m)"""
        return _blocks_swig2.char_to_float_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(char_to_float_sptr self) -> int"""
        return _blocks_swig2.char_to_float_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(char_to_float_sptr self, int i) -> long"""
        return _blocks_swig2.char_to_float_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(char_to_float_sptr self, long max_output_buffer)
        set_max_output_buffer(char_to_float_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.char_to_float_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(char_to_float_sptr self, int i) -> long"""
        return _blocks_swig2.char_to_float_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(char_to_float_sptr self, long min_output_buffer)
        set_min_output_buffer(char_to_float_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.char_to_float_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(char_to_float_sptr self) -> float"""
        return _blocks_swig2.char_to_float_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(char_to_float_sptr self) -> float"""
        return _blocks_swig2.char_to_float_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(char_to_float_sptr self) -> float"""
        return _blocks_swig2.char_to_float_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(char_to_float_sptr self) -> float"""
        return _blocks_swig2.char_to_float_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(char_to_float_sptr self) -> float"""
        return _blocks_swig2.char_to_float_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(char_to_float_sptr self) -> float"""
        return _blocks_swig2.char_to_float_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(char_to_float_sptr self, int which) -> float
        pc_input_buffers_full(char_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.char_to_float_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(char_to_float_sptr self, int which) -> float
        pc_input_buffers_full_avg(char_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.char_to_float_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(char_to_float_sptr self, int which) -> float
        pc_input_buffers_full_var(char_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.char_to_float_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(char_to_float_sptr self, int which) -> float
        pc_output_buffers_full(char_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.char_to_float_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(char_to_float_sptr self, int which) -> float
        pc_output_buffers_full_avg(char_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.char_to_float_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(char_to_float_sptr self, int which) -> float
        pc_output_buffers_full_var(char_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.char_to_float_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(char_to_float_sptr self) -> float"""
        return _blocks_swig2.char_to_float_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(char_to_float_sptr self) -> float"""
        return _blocks_swig2.char_to_float_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(char_to_float_sptr self) -> float"""
        return _blocks_swig2.char_to_float_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(char_to_float_sptr self) -> float"""
        return _blocks_swig2.char_to_float_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(char_to_float_sptr self) -> float"""
        return _blocks_swig2.char_to_float_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(char_to_float_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.char_to_float_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(char_to_float_sptr self)"""
        return _blocks_swig2.char_to_float_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(char_to_float_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.char_to_float_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(char_to_float_sptr self) -> int"""
        return _blocks_swig2.char_to_float_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(char_to_float_sptr self) -> int"""
        return _blocks_swig2.char_to_float_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(char_to_float_sptr self, int priority) -> int"""
        return _blocks_swig2.char_to_float_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(char_to_float_sptr self) -> std::string"""
        return _blocks_swig2.char_to_float_sptr_name(self)

    def symbol_name(self):
        """symbol_name(char_to_float_sptr self) -> std::string"""
        return _blocks_swig2.char_to_float_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(char_to_float_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.char_to_float_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(char_to_float_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.char_to_float_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(char_to_float_sptr self) -> long"""
        return _blocks_swig2.char_to_float_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(char_to_float_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.char_to_float_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(char_to_float_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.char_to_float_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(char_to_float_sptr self) -> std::string"""
        return _blocks_swig2.char_to_float_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(char_to_float_sptr self, std::string name)"""
        return _blocks_swig2.char_to_float_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(char_to_float_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.char_to_float_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(char_to_float_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.char_to_float_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(char_to_float_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.char_to_float_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(char_to_float_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.char_to_float_sptr_message_subscribers(self, *args, **kwargs)

char_to_float_sptr_swigregister = _blocks_swig2.char_to_float_sptr_swigregister
char_to_float_sptr_swigregister(char_to_float_sptr)

char_to_float_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
char_to_float = char_to_float.make;

class char_to_short_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::char_to_short)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::char_to_short)> self) -> char_to_short_sptr
        __init__(boost::shared_ptr<(gr::blocks::char_to_short)> self, char_to_short p) -> char_to_short_sptr
        """
        this = _blocks_swig2.new_char_to_short_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(char_to_short_sptr self) -> char_to_short"""
        return _blocks_swig2.char_to_short_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_char_to_short_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(char_to_short_sptr self, size_t vlen=1) -> char_to_short_sptr

        Convert stream of chars to a stream of shorts.

        Converts  length vectors of input char samples to shorts, multiplying each element by 256:

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig2.char_to_short_sptr_make(self, vlen)

    def history(self):
        """history(char_to_short_sptr self) -> unsigned int"""
        return _blocks_swig2.char_to_short_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(char_to_short_sptr self, int which, int delay)
        declare_sample_delay(char_to_short_sptr self, unsigned int delay)
        """
        return _blocks_swig2.char_to_short_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(char_to_short_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.char_to_short_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(char_to_short_sptr self) -> int"""
        return _blocks_swig2.char_to_short_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(char_to_short_sptr self) -> double"""
        return _blocks_swig2.char_to_short_sptr_relative_rate(self)

    def start(self):
        """start(char_to_short_sptr self) -> bool"""
        return _blocks_swig2.char_to_short_sptr_start(self)

    def stop(self):
        """stop(char_to_short_sptr self) -> bool"""
        return _blocks_swig2.char_to_short_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(char_to_short_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.char_to_short_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(char_to_short_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.char_to_short_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(char_to_short_sptr self) -> int"""
        return _blocks_swig2.char_to_short_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(char_to_short_sptr self, int m)"""
        return _blocks_swig2.char_to_short_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(char_to_short_sptr self)"""
        return _blocks_swig2.char_to_short_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(char_to_short_sptr self) -> bool"""
        return _blocks_swig2.char_to_short_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(char_to_short_sptr self, int m)"""
        return _blocks_swig2.char_to_short_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(char_to_short_sptr self) -> int"""
        return _blocks_swig2.char_to_short_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(char_to_short_sptr self, int i) -> long"""
        return _blocks_swig2.char_to_short_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(char_to_short_sptr self, long max_output_buffer)
        set_max_output_buffer(char_to_short_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.char_to_short_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(char_to_short_sptr self, int i) -> long"""
        return _blocks_swig2.char_to_short_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(char_to_short_sptr self, long min_output_buffer)
        set_min_output_buffer(char_to_short_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.char_to_short_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(char_to_short_sptr self) -> float"""
        return _blocks_swig2.char_to_short_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(char_to_short_sptr self) -> float"""
        return _blocks_swig2.char_to_short_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(char_to_short_sptr self) -> float"""
        return _blocks_swig2.char_to_short_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(char_to_short_sptr self) -> float"""
        return _blocks_swig2.char_to_short_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(char_to_short_sptr self) -> float"""
        return _blocks_swig2.char_to_short_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(char_to_short_sptr self) -> float"""
        return _blocks_swig2.char_to_short_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(char_to_short_sptr self, int which) -> float
        pc_input_buffers_full(char_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.char_to_short_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(char_to_short_sptr self, int which) -> float
        pc_input_buffers_full_avg(char_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.char_to_short_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(char_to_short_sptr self, int which) -> float
        pc_input_buffers_full_var(char_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.char_to_short_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(char_to_short_sptr self, int which) -> float
        pc_output_buffers_full(char_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.char_to_short_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(char_to_short_sptr self, int which) -> float
        pc_output_buffers_full_avg(char_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.char_to_short_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(char_to_short_sptr self, int which) -> float
        pc_output_buffers_full_var(char_to_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.char_to_short_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(char_to_short_sptr self) -> float"""
        return _blocks_swig2.char_to_short_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(char_to_short_sptr self) -> float"""
        return _blocks_swig2.char_to_short_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(char_to_short_sptr self) -> float"""
        return _blocks_swig2.char_to_short_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(char_to_short_sptr self) -> float"""
        return _blocks_swig2.char_to_short_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(char_to_short_sptr self) -> float"""
        return _blocks_swig2.char_to_short_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(char_to_short_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.char_to_short_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(char_to_short_sptr self)"""
        return _blocks_swig2.char_to_short_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(char_to_short_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.char_to_short_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(char_to_short_sptr self) -> int"""
        return _blocks_swig2.char_to_short_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(char_to_short_sptr self) -> int"""
        return _blocks_swig2.char_to_short_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(char_to_short_sptr self, int priority) -> int"""
        return _blocks_swig2.char_to_short_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(char_to_short_sptr self) -> std::string"""
        return _blocks_swig2.char_to_short_sptr_name(self)

    def symbol_name(self):
        """symbol_name(char_to_short_sptr self) -> std::string"""
        return _blocks_swig2.char_to_short_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(char_to_short_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.char_to_short_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(char_to_short_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.char_to_short_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(char_to_short_sptr self) -> long"""
        return _blocks_swig2.char_to_short_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(char_to_short_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.char_to_short_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(char_to_short_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.char_to_short_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(char_to_short_sptr self) -> std::string"""
        return _blocks_swig2.char_to_short_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(char_to_short_sptr self, std::string name)"""
        return _blocks_swig2.char_to_short_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(char_to_short_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.char_to_short_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(char_to_short_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.char_to_short_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(char_to_short_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.char_to_short_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(char_to_short_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.char_to_short_sptr_message_subscribers(self, *args, **kwargs)

char_to_short_sptr_swigregister = _blocks_swig2.char_to_short_sptr_swigregister
char_to_short_sptr_swigregister(char_to_short_sptr)

char_to_short_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
char_to_short = char_to_short.make;

class check_lfsr_32k_s_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::check_lfsr_32k_s)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::check_lfsr_32k_s)> self) -> check_lfsr_32k_s_sptr
        __init__(boost::shared_ptr<(gr::blocks::check_lfsr_32k_s)> self, check_lfsr_32k_s p) -> check_lfsr_32k_s_sptr
        """
        this = _blocks_swig2.new_check_lfsr_32k_s_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(check_lfsr_32k_s_sptr self) -> check_lfsr_32k_s"""
        return _blocks_swig2.check_lfsr_32k_s_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_check_lfsr_32k_s_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(check_lfsr_32k_s_sptr self) -> check_lfsr_32k_s_sptr

        sink that checks if its input stream consists of a lfsr_32k sequence.

        This sink is typically used along with gr::blocks::lfsr_32k_source_s to test the USRP using its digital loopback mode.

        Constructor Specific Documentation:


        """
        return _blocks_swig2.check_lfsr_32k_s_sptr_make(self)

    def ntotal(self):
        """ntotal(check_lfsr_32k_s_sptr self) -> long"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_ntotal(self)

    def nright(self):
        """nright(check_lfsr_32k_s_sptr self) -> long"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_nright(self)

    def runlength(self):
        """runlength(check_lfsr_32k_s_sptr self) -> long"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_runlength(self)

    def history(self):
        """history(check_lfsr_32k_s_sptr self) -> unsigned int"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(check_lfsr_32k_s_sptr self, int which, int delay)
        declare_sample_delay(check_lfsr_32k_s_sptr self, unsigned int delay)
        """
        return _blocks_swig2.check_lfsr_32k_s_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(check_lfsr_32k_s_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(check_lfsr_32k_s_sptr self) -> int"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(check_lfsr_32k_s_sptr self) -> double"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_relative_rate(self)

    def start(self):
        """start(check_lfsr_32k_s_sptr self) -> bool"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_start(self)

    def stop(self):
        """stop(check_lfsr_32k_s_sptr self) -> bool"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(check_lfsr_32k_s_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(check_lfsr_32k_s_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(check_lfsr_32k_s_sptr self) -> int"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(check_lfsr_32k_s_sptr self, int m)"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(check_lfsr_32k_s_sptr self)"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(check_lfsr_32k_s_sptr self) -> bool"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(check_lfsr_32k_s_sptr self, int m)"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(check_lfsr_32k_s_sptr self) -> int"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(check_lfsr_32k_s_sptr self, int i) -> long"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(check_lfsr_32k_s_sptr self, long max_output_buffer)
        set_max_output_buffer(check_lfsr_32k_s_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.check_lfsr_32k_s_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(check_lfsr_32k_s_sptr self, int i) -> long"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(check_lfsr_32k_s_sptr self, long min_output_buffer)
        set_min_output_buffer(check_lfsr_32k_s_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.check_lfsr_32k_s_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(check_lfsr_32k_s_sptr self) -> float"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(check_lfsr_32k_s_sptr self) -> float"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(check_lfsr_32k_s_sptr self) -> float"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(check_lfsr_32k_s_sptr self) -> float"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(check_lfsr_32k_s_sptr self) -> float"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(check_lfsr_32k_s_sptr self) -> float"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(check_lfsr_32k_s_sptr self, int which) -> float
        pc_input_buffers_full(check_lfsr_32k_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(check_lfsr_32k_s_sptr self, int which) -> float
        pc_input_buffers_full_avg(check_lfsr_32k_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(check_lfsr_32k_s_sptr self, int which) -> float
        pc_input_buffers_full_var(check_lfsr_32k_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(check_lfsr_32k_s_sptr self, int which) -> float
        pc_output_buffers_full(check_lfsr_32k_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(check_lfsr_32k_s_sptr self, int which) -> float
        pc_output_buffers_full_avg(check_lfsr_32k_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(check_lfsr_32k_s_sptr self, int which) -> float
        pc_output_buffers_full_var(check_lfsr_32k_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(check_lfsr_32k_s_sptr self) -> float"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(check_lfsr_32k_s_sptr self) -> float"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(check_lfsr_32k_s_sptr self) -> float"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(check_lfsr_32k_s_sptr self) -> float"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(check_lfsr_32k_s_sptr self) -> float"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(check_lfsr_32k_s_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(check_lfsr_32k_s_sptr self)"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(check_lfsr_32k_s_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(check_lfsr_32k_s_sptr self) -> int"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(check_lfsr_32k_s_sptr self) -> int"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(check_lfsr_32k_s_sptr self, int priority) -> int"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(check_lfsr_32k_s_sptr self) -> std::string"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_name(self)

    def symbol_name(self):
        """symbol_name(check_lfsr_32k_s_sptr self) -> std::string"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(check_lfsr_32k_s_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(check_lfsr_32k_s_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(check_lfsr_32k_s_sptr self) -> long"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(check_lfsr_32k_s_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(check_lfsr_32k_s_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(check_lfsr_32k_s_sptr self) -> std::string"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(check_lfsr_32k_s_sptr self, std::string name)"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(check_lfsr_32k_s_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.check_lfsr_32k_s_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(check_lfsr_32k_s_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(check_lfsr_32k_s_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(check_lfsr_32k_s_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.check_lfsr_32k_s_sptr_message_subscribers(self, *args, **kwargs)

check_lfsr_32k_s_sptr_swigregister = _blocks_swig2.check_lfsr_32k_s_sptr_swigregister
check_lfsr_32k_s_sptr_swigregister(check_lfsr_32k_s_sptr)

check_lfsr_32k_s_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
check_lfsr_32k_s = check_lfsr_32k_s.make;

class complex_to_interleaved_char_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::complex_to_interleaved_char)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::complex_to_interleaved_char)> self) -> complex_to_interleaved_char_sptr
        __init__(boost::shared_ptr<(gr::blocks::complex_to_interleaved_char)> self, complex_to_interleaved_char p) -> complex_to_interleaved_char_sptr
        """
        this = _blocks_swig2.new_complex_to_interleaved_char_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(complex_to_interleaved_char_sptr self) -> complex_to_interleaved_char"""
        return _blocks_swig2.complex_to_interleaved_char_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_complex_to_interleaved_char_sptr
    __del__ = lambda self : None;
    def make(self, vector=False):
        """
        make(complex_to_interleaved_char_sptr self, bool vector=False) -> complex_to_interleaved_char_sptr

        Convert stream of complex to a stream of interleaved chars.

        The output stream contains chars with twice as many output items as input items. For every complex input item, we produce two output chars that contain the real part and imaginary part converted to chars:

        Constructor Specific Documentation:

        Build a complex to interleaved chars block.

        Args:
            vector : 
        """
        return _blocks_swig2.complex_to_interleaved_char_sptr_make(self, vector)

    def history(self):
        """history(complex_to_interleaved_char_sptr self) -> unsigned int"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(complex_to_interleaved_char_sptr self, int which, int delay)
        declare_sample_delay(complex_to_interleaved_char_sptr self, unsigned int delay)
        """
        return _blocks_swig2.complex_to_interleaved_char_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(complex_to_interleaved_char_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(complex_to_interleaved_char_sptr self) -> int"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(complex_to_interleaved_char_sptr self) -> double"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_relative_rate(self)

    def start(self):
        """start(complex_to_interleaved_char_sptr self) -> bool"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_start(self)

    def stop(self):
        """stop(complex_to_interleaved_char_sptr self) -> bool"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(complex_to_interleaved_char_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(complex_to_interleaved_char_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(complex_to_interleaved_char_sptr self) -> int"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(complex_to_interleaved_char_sptr self, int m)"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(complex_to_interleaved_char_sptr self)"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(complex_to_interleaved_char_sptr self) -> bool"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(complex_to_interleaved_char_sptr self, int m)"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(complex_to_interleaved_char_sptr self) -> int"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(complex_to_interleaved_char_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(complex_to_interleaved_char_sptr self, long max_output_buffer)
        set_max_output_buffer(complex_to_interleaved_char_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.complex_to_interleaved_char_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(complex_to_interleaved_char_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(complex_to_interleaved_char_sptr self, long min_output_buffer)
        set_min_output_buffer(complex_to_interleaved_char_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.complex_to_interleaved_char_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(complex_to_interleaved_char_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(complex_to_interleaved_char_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(complex_to_interleaved_char_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(complex_to_interleaved_char_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(complex_to_interleaved_char_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(complex_to_interleaved_char_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(complex_to_interleaved_char_sptr self, int which) -> float
        pc_input_buffers_full(complex_to_interleaved_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_interleaved_char_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(complex_to_interleaved_char_sptr self, int which) -> float
        pc_input_buffers_full_avg(complex_to_interleaved_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_interleaved_char_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(complex_to_interleaved_char_sptr self, int which) -> float
        pc_input_buffers_full_var(complex_to_interleaved_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_interleaved_char_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(complex_to_interleaved_char_sptr self, int which) -> float
        pc_output_buffers_full(complex_to_interleaved_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_interleaved_char_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(complex_to_interleaved_char_sptr self, int which) -> float
        pc_output_buffers_full_avg(complex_to_interleaved_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_interleaved_char_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(complex_to_interleaved_char_sptr self, int which) -> float
        pc_output_buffers_full_var(complex_to_interleaved_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_interleaved_char_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(complex_to_interleaved_char_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(complex_to_interleaved_char_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(complex_to_interleaved_char_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(complex_to_interleaved_char_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(complex_to_interleaved_char_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(complex_to_interleaved_char_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(complex_to_interleaved_char_sptr self)"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(complex_to_interleaved_char_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(complex_to_interleaved_char_sptr self) -> int"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(complex_to_interleaved_char_sptr self) -> int"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(complex_to_interleaved_char_sptr self, int priority) -> int"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(complex_to_interleaved_char_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_name(self)

    def symbol_name(self):
        """symbol_name(complex_to_interleaved_char_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(complex_to_interleaved_char_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(complex_to_interleaved_char_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(complex_to_interleaved_char_sptr self) -> long"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(complex_to_interleaved_char_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(complex_to_interleaved_char_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(complex_to_interleaved_char_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(complex_to_interleaved_char_sptr self, std::string name)"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(complex_to_interleaved_char_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.complex_to_interleaved_char_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(complex_to_interleaved_char_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(complex_to_interleaved_char_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(complex_to_interleaved_char_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_interleaved_char_sptr_message_subscribers(self, *args, **kwargs)

complex_to_interleaved_char_sptr_swigregister = _blocks_swig2.complex_to_interleaved_char_sptr_swigregister
complex_to_interleaved_char_sptr_swigregister(complex_to_interleaved_char_sptr)

complex_to_interleaved_char_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
complex_to_interleaved_char = complex_to_interleaved_char.make;

class complex_to_interleaved_short_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::complex_to_interleaved_short)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::complex_to_interleaved_short)> self) -> complex_to_interleaved_short_sptr
        __init__(boost::shared_ptr<(gr::blocks::complex_to_interleaved_short)> self, complex_to_interleaved_short p) -> complex_to_interleaved_short_sptr
        """
        this = _blocks_swig2.new_complex_to_interleaved_short_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(complex_to_interleaved_short_sptr self) -> complex_to_interleaved_short"""
        return _blocks_swig2.complex_to_interleaved_short_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_complex_to_interleaved_short_sptr
    __del__ = lambda self : None;
    def make(self, vector=False):
        """
        make(complex_to_interleaved_short_sptr self, bool vector=False) -> complex_to_interleaved_short_sptr

        Convert stream of complex to a stream of interleaved shorts.

        The output stream contains shorts with twice as many output items as input items. For every complex input item, we produce two output shorts that contain the real part and imaginary part converted to shorts:

        Constructor Specific Documentation:

        Build a complex to interleaved shorts block.

        Args:
            vector : 
        """
        return _blocks_swig2.complex_to_interleaved_short_sptr_make(self, vector)

    def history(self):
        """history(complex_to_interleaved_short_sptr self) -> unsigned int"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(complex_to_interleaved_short_sptr self, int which, int delay)
        declare_sample_delay(complex_to_interleaved_short_sptr self, unsigned int delay)
        """
        return _blocks_swig2.complex_to_interleaved_short_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(complex_to_interleaved_short_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(complex_to_interleaved_short_sptr self) -> int"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(complex_to_interleaved_short_sptr self) -> double"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_relative_rate(self)

    def start(self):
        """start(complex_to_interleaved_short_sptr self) -> bool"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_start(self)

    def stop(self):
        """stop(complex_to_interleaved_short_sptr self) -> bool"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(complex_to_interleaved_short_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(complex_to_interleaved_short_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(complex_to_interleaved_short_sptr self) -> int"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(complex_to_interleaved_short_sptr self, int m)"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(complex_to_interleaved_short_sptr self)"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(complex_to_interleaved_short_sptr self) -> bool"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(complex_to_interleaved_short_sptr self, int m)"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(complex_to_interleaved_short_sptr self) -> int"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(complex_to_interleaved_short_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(complex_to_interleaved_short_sptr self, long max_output_buffer)
        set_max_output_buffer(complex_to_interleaved_short_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.complex_to_interleaved_short_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(complex_to_interleaved_short_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(complex_to_interleaved_short_sptr self, long min_output_buffer)
        set_min_output_buffer(complex_to_interleaved_short_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.complex_to_interleaved_short_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(complex_to_interleaved_short_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(complex_to_interleaved_short_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(complex_to_interleaved_short_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(complex_to_interleaved_short_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(complex_to_interleaved_short_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(complex_to_interleaved_short_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(complex_to_interleaved_short_sptr self, int which) -> float
        pc_input_buffers_full(complex_to_interleaved_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(complex_to_interleaved_short_sptr self, int which) -> float
        pc_input_buffers_full_avg(complex_to_interleaved_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(complex_to_interleaved_short_sptr self, int which) -> float
        pc_input_buffers_full_var(complex_to_interleaved_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(complex_to_interleaved_short_sptr self, int which) -> float
        pc_output_buffers_full(complex_to_interleaved_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(complex_to_interleaved_short_sptr self, int which) -> float
        pc_output_buffers_full_avg(complex_to_interleaved_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(complex_to_interleaved_short_sptr self, int which) -> float
        pc_output_buffers_full_var(complex_to_interleaved_short_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(complex_to_interleaved_short_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(complex_to_interleaved_short_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(complex_to_interleaved_short_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(complex_to_interleaved_short_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(complex_to_interleaved_short_sptr self) -> float"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(complex_to_interleaved_short_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(complex_to_interleaved_short_sptr self)"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(complex_to_interleaved_short_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(complex_to_interleaved_short_sptr self) -> int"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(complex_to_interleaved_short_sptr self) -> int"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(complex_to_interleaved_short_sptr self, int priority) -> int"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(complex_to_interleaved_short_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_name(self)

    def symbol_name(self):
        """symbol_name(complex_to_interleaved_short_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(complex_to_interleaved_short_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(complex_to_interleaved_short_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(complex_to_interleaved_short_sptr self) -> long"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(complex_to_interleaved_short_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(complex_to_interleaved_short_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(complex_to_interleaved_short_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(complex_to_interleaved_short_sptr self, std::string name)"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(complex_to_interleaved_short_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.complex_to_interleaved_short_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(complex_to_interleaved_short_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(complex_to_interleaved_short_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(complex_to_interleaved_short_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_interleaved_short_sptr_message_subscribers(self, *args, **kwargs)

complex_to_interleaved_short_sptr_swigregister = _blocks_swig2.complex_to_interleaved_short_sptr_swigregister
complex_to_interleaved_short_sptr_swigregister(complex_to_interleaved_short_sptr)

complex_to_interleaved_short_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
complex_to_interleaved_short = complex_to_interleaved_short.make;

class complex_to_float_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::complex_to_float)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::complex_to_float)> self) -> complex_to_float_sptr
        __init__(boost::shared_ptr<(gr::blocks::complex_to_float)> self, complex_to_float p) -> complex_to_float_sptr
        """
        this = _blocks_swig2.new_complex_to_float_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(complex_to_float_sptr self) -> complex_to_float"""
        return _blocks_swig2.complex_to_float_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_complex_to_float_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(complex_to_float_sptr self, size_t vlen=1) -> complex_to_float_sptr

        Convert a stream of gr_complex to 1 or 2 streams of float.

        If a single output stream is attached, this will output the real part of the input complex samples. If a second output stream is connected, output[0] is the real part and output[1] is the imaginary part.

        Constructor Specific Documentation:

        Build a complex to float block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig2.complex_to_float_sptr_make(self, vlen)

    def history(self):
        """history(complex_to_float_sptr self) -> unsigned int"""
        return _blocks_swig2.complex_to_float_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(complex_to_float_sptr self, int which, int delay)
        declare_sample_delay(complex_to_float_sptr self, unsigned int delay)
        """
        return _blocks_swig2.complex_to_float_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(complex_to_float_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.complex_to_float_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(complex_to_float_sptr self) -> int"""
        return _blocks_swig2.complex_to_float_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(complex_to_float_sptr self) -> double"""
        return _blocks_swig2.complex_to_float_sptr_relative_rate(self)

    def start(self):
        """start(complex_to_float_sptr self) -> bool"""
        return _blocks_swig2.complex_to_float_sptr_start(self)

    def stop(self):
        """stop(complex_to_float_sptr self) -> bool"""
        return _blocks_swig2.complex_to_float_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(complex_to_float_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.complex_to_float_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(complex_to_float_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.complex_to_float_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(complex_to_float_sptr self) -> int"""
        return _blocks_swig2.complex_to_float_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(complex_to_float_sptr self, int m)"""
        return _blocks_swig2.complex_to_float_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(complex_to_float_sptr self)"""
        return _blocks_swig2.complex_to_float_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(complex_to_float_sptr self) -> bool"""
        return _blocks_swig2.complex_to_float_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(complex_to_float_sptr self, int m)"""
        return _blocks_swig2.complex_to_float_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(complex_to_float_sptr self) -> int"""
        return _blocks_swig2.complex_to_float_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(complex_to_float_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_float_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(complex_to_float_sptr self, long max_output_buffer)
        set_max_output_buffer(complex_to_float_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.complex_to_float_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(complex_to_float_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_float_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(complex_to_float_sptr self, long min_output_buffer)
        set_min_output_buffer(complex_to_float_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.complex_to_float_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(complex_to_float_sptr self) -> float"""
        return _blocks_swig2.complex_to_float_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(complex_to_float_sptr self) -> float"""
        return _blocks_swig2.complex_to_float_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(complex_to_float_sptr self) -> float"""
        return _blocks_swig2.complex_to_float_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(complex_to_float_sptr self) -> float"""
        return _blocks_swig2.complex_to_float_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(complex_to_float_sptr self) -> float"""
        return _blocks_swig2.complex_to_float_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(complex_to_float_sptr self) -> float"""
        return _blocks_swig2.complex_to_float_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(complex_to_float_sptr self, int which) -> float
        pc_input_buffers_full(complex_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_float_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(complex_to_float_sptr self, int which) -> float
        pc_input_buffers_full_avg(complex_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_float_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(complex_to_float_sptr self, int which) -> float
        pc_input_buffers_full_var(complex_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_float_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(complex_to_float_sptr self, int which) -> float
        pc_output_buffers_full(complex_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_float_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(complex_to_float_sptr self, int which) -> float
        pc_output_buffers_full_avg(complex_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_float_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(complex_to_float_sptr self, int which) -> float
        pc_output_buffers_full_var(complex_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_float_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(complex_to_float_sptr self) -> float"""
        return _blocks_swig2.complex_to_float_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(complex_to_float_sptr self) -> float"""
        return _blocks_swig2.complex_to_float_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(complex_to_float_sptr self) -> float"""
        return _blocks_swig2.complex_to_float_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(complex_to_float_sptr self) -> float"""
        return _blocks_swig2.complex_to_float_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(complex_to_float_sptr self) -> float"""
        return _blocks_swig2.complex_to_float_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(complex_to_float_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.complex_to_float_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(complex_to_float_sptr self)"""
        return _blocks_swig2.complex_to_float_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(complex_to_float_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.complex_to_float_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(complex_to_float_sptr self) -> int"""
        return _blocks_swig2.complex_to_float_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(complex_to_float_sptr self) -> int"""
        return _blocks_swig2.complex_to_float_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(complex_to_float_sptr self, int priority) -> int"""
        return _blocks_swig2.complex_to_float_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(complex_to_float_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_float_sptr_name(self)

    def symbol_name(self):
        """symbol_name(complex_to_float_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_float_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(complex_to_float_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_float_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(complex_to_float_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_float_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(complex_to_float_sptr self) -> long"""
        return _blocks_swig2.complex_to_float_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(complex_to_float_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.complex_to_float_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(complex_to_float_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.complex_to_float_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(complex_to_float_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_float_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(complex_to_float_sptr self, std::string name)"""
        return _blocks_swig2.complex_to_float_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(complex_to_float_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.complex_to_float_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(complex_to_float_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_float_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(complex_to_float_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_float_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(complex_to_float_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_float_sptr_message_subscribers(self, *args, **kwargs)

complex_to_float_sptr_swigregister = _blocks_swig2.complex_to_float_sptr_swigregister
complex_to_float_sptr_swigregister(complex_to_float_sptr)

complex_to_float_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
complex_to_float = complex_to_float.make;

class complex_to_magphase_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::complex_to_magphase)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::complex_to_magphase)> self) -> complex_to_magphase_sptr
        __init__(boost::shared_ptr<(gr::blocks::complex_to_magphase)> self, complex_to_magphase p) -> complex_to_magphase_sptr
        """
        this = _blocks_swig2.new_complex_to_magphase_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(complex_to_magphase_sptr self) -> complex_to_magphase"""
        return _blocks_swig2.complex_to_magphase_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_complex_to_magphase_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(complex_to_magphase_sptr self, size_t vlen=1) -> complex_to_magphase_sptr

        Convert a stream of gr_complex to magnitude and phase (both floats)

        output[0] is the magnitude output[1] is the phase (in radians)

        Constructor Specific Documentation:

        Build a complex to magnitude and phase block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig2.complex_to_magphase_sptr_make(self, vlen)

    def history(self):
        """history(complex_to_magphase_sptr self) -> unsigned int"""
        return _blocks_swig2.complex_to_magphase_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(complex_to_magphase_sptr self, int which, int delay)
        declare_sample_delay(complex_to_magphase_sptr self, unsigned int delay)
        """
        return _blocks_swig2.complex_to_magphase_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(complex_to_magphase_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.complex_to_magphase_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(complex_to_magphase_sptr self) -> int"""
        return _blocks_swig2.complex_to_magphase_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(complex_to_magphase_sptr self) -> double"""
        return _blocks_swig2.complex_to_magphase_sptr_relative_rate(self)

    def start(self):
        """start(complex_to_magphase_sptr self) -> bool"""
        return _blocks_swig2.complex_to_magphase_sptr_start(self)

    def stop(self):
        """stop(complex_to_magphase_sptr self) -> bool"""
        return _blocks_swig2.complex_to_magphase_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(complex_to_magphase_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.complex_to_magphase_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(complex_to_magphase_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.complex_to_magphase_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(complex_to_magphase_sptr self) -> int"""
        return _blocks_swig2.complex_to_magphase_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(complex_to_magphase_sptr self, int m)"""
        return _blocks_swig2.complex_to_magphase_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(complex_to_magphase_sptr self)"""
        return _blocks_swig2.complex_to_magphase_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(complex_to_magphase_sptr self) -> bool"""
        return _blocks_swig2.complex_to_magphase_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(complex_to_magphase_sptr self, int m)"""
        return _blocks_swig2.complex_to_magphase_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(complex_to_magphase_sptr self) -> int"""
        return _blocks_swig2.complex_to_magphase_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(complex_to_magphase_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_magphase_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(complex_to_magphase_sptr self, long max_output_buffer)
        set_max_output_buffer(complex_to_magphase_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.complex_to_magphase_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(complex_to_magphase_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_magphase_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(complex_to_magphase_sptr self, long min_output_buffer)
        set_min_output_buffer(complex_to_magphase_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.complex_to_magphase_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(complex_to_magphase_sptr self) -> float"""
        return _blocks_swig2.complex_to_magphase_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(complex_to_magphase_sptr self) -> float"""
        return _blocks_swig2.complex_to_magphase_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(complex_to_magphase_sptr self) -> float"""
        return _blocks_swig2.complex_to_magphase_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(complex_to_magphase_sptr self) -> float"""
        return _blocks_swig2.complex_to_magphase_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(complex_to_magphase_sptr self) -> float"""
        return _blocks_swig2.complex_to_magphase_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(complex_to_magphase_sptr self) -> float"""
        return _blocks_swig2.complex_to_magphase_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(complex_to_magphase_sptr self, int which) -> float
        pc_input_buffers_full(complex_to_magphase_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_magphase_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(complex_to_magphase_sptr self, int which) -> float
        pc_input_buffers_full_avg(complex_to_magphase_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_magphase_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(complex_to_magphase_sptr self, int which) -> float
        pc_input_buffers_full_var(complex_to_magphase_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_magphase_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(complex_to_magphase_sptr self, int which) -> float
        pc_output_buffers_full(complex_to_magphase_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_magphase_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(complex_to_magphase_sptr self, int which) -> float
        pc_output_buffers_full_avg(complex_to_magphase_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_magphase_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(complex_to_magphase_sptr self, int which) -> float
        pc_output_buffers_full_var(complex_to_magphase_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_magphase_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(complex_to_magphase_sptr self) -> float"""
        return _blocks_swig2.complex_to_magphase_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(complex_to_magphase_sptr self) -> float"""
        return _blocks_swig2.complex_to_magphase_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(complex_to_magphase_sptr self) -> float"""
        return _blocks_swig2.complex_to_magphase_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(complex_to_magphase_sptr self) -> float"""
        return _blocks_swig2.complex_to_magphase_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(complex_to_magphase_sptr self) -> float"""
        return _blocks_swig2.complex_to_magphase_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(complex_to_magphase_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.complex_to_magphase_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(complex_to_magphase_sptr self)"""
        return _blocks_swig2.complex_to_magphase_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(complex_to_magphase_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.complex_to_magphase_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(complex_to_magphase_sptr self) -> int"""
        return _blocks_swig2.complex_to_magphase_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(complex_to_magphase_sptr self) -> int"""
        return _blocks_swig2.complex_to_magphase_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(complex_to_magphase_sptr self, int priority) -> int"""
        return _blocks_swig2.complex_to_magphase_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(complex_to_magphase_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_magphase_sptr_name(self)

    def symbol_name(self):
        """symbol_name(complex_to_magphase_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_magphase_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(complex_to_magphase_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_magphase_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(complex_to_magphase_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_magphase_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(complex_to_magphase_sptr self) -> long"""
        return _blocks_swig2.complex_to_magphase_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(complex_to_magphase_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.complex_to_magphase_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(complex_to_magphase_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.complex_to_magphase_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(complex_to_magphase_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_magphase_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(complex_to_magphase_sptr self, std::string name)"""
        return _blocks_swig2.complex_to_magphase_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(complex_to_magphase_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.complex_to_magphase_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(complex_to_magphase_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_magphase_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(complex_to_magphase_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_magphase_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(complex_to_magphase_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_magphase_sptr_message_subscribers(self, *args, **kwargs)

complex_to_magphase_sptr_swigregister = _blocks_swig2.complex_to_magphase_sptr_swigregister
complex_to_magphase_sptr_swigregister(complex_to_magphase_sptr)

complex_to_magphase_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
complex_to_magphase = complex_to_magphase.make;

class complex_to_real_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::complex_to_real)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::complex_to_real)> self) -> complex_to_real_sptr
        __init__(boost::shared_ptr<(gr::blocks::complex_to_real)> self, complex_to_real p) -> complex_to_real_sptr
        """
        this = _blocks_swig2.new_complex_to_real_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(complex_to_real_sptr self) -> complex_to_real"""
        return _blocks_swig2.complex_to_real_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_complex_to_real_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(complex_to_real_sptr self, size_t vlen=1) -> complex_to_real_sptr

        Produces the real part (as a float0 of a complex stream.

        Constructor Specific Documentation:

        Build a complex to real part block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig2.complex_to_real_sptr_make(self, vlen)

    def history(self):
        """history(complex_to_real_sptr self) -> unsigned int"""
        return _blocks_swig2.complex_to_real_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(complex_to_real_sptr self, int which, int delay)
        declare_sample_delay(complex_to_real_sptr self, unsigned int delay)
        """
        return _blocks_swig2.complex_to_real_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(complex_to_real_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.complex_to_real_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(complex_to_real_sptr self) -> int"""
        return _blocks_swig2.complex_to_real_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(complex_to_real_sptr self) -> double"""
        return _blocks_swig2.complex_to_real_sptr_relative_rate(self)

    def start(self):
        """start(complex_to_real_sptr self) -> bool"""
        return _blocks_swig2.complex_to_real_sptr_start(self)

    def stop(self):
        """stop(complex_to_real_sptr self) -> bool"""
        return _blocks_swig2.complex_to_real_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(complex_to_real_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.complex_to_real_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(complex_to_real_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.complex_to_real_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(complex_to_real_sptr self) -> int"""
        return _blocks_swig2.complex_to_real_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(complex_to_real_sptr self, int m)"""
        return _blocks_swig2.complex_to_real_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(complex_to_real_sptr self)"""
        return _blocks_swig2.complex_to_real_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(complex_to_real_sptr self) -> bool"""
        return _blocks_swig2.complex_to_real_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(complex_to_real_sptr self, int m)"""
        return _blocks_swig2.complex_to_real_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(complex_to_real_sptr self) -> int"""
        return _blocks_swig2.complex_to_real_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(complex_to_real_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_real_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(complex_to_real_sptr self, long max_output_buffer)
        set_max_output_buffer(complex_to_real_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.complex_to_real_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(complex_to_real_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_real_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(complex_to_real_sptr self, long min_output_buffer)
        set_min_output_buffer(complex_to_real_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.complex_to_real_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(complex_to_real_sptr self) -> float"""
        return _blocks_swig2.complex_to_real_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(complex_to_real_sptr self) -> float"""
        return _blocks_swig2.complex_to_real_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(complex_to_real_sptr self) -> float"""
        return _blocks_swig2.complex_to_real_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(complex_to_real_sptr self) -> float"""
        return _blocks_swig2.complex_to_real_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(complex_to_real_sptr self) -> float"""
        return _blocks_swig2.complex_to_real_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(complex_to_real_sptr self) -> float"""
        return _blocks_swig2.complex_to_real_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(complex_to_real_sptr self, int which) -> float
        pc_input_buffers_full(complex_to_real_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_real_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(complex_to_real_sptr self, int which) -> float
        pc_input_buffers_full_avg(complex_to_real_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_real_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(complex_to_real_sptr self, int which) -> float
        pc_input_buffers_full_var(complex_to_real_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_real_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(complex_to_real_sptr self, int which) -> float
        pc_output_buffers_full(complex_to_real_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_real_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(complex_to_real_sptr self, int which) -> float
        pc_output_buffers_full_avg(complex_to_real_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_real_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(complex_to_real_sptr self, int which) -> float
        pc_output_buffers_full_var(complex_to_real_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_real_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(complex_to_real_sptr self) -> float"""
        return _blocks_swig2.complex_to_real_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(complex_to_real_sptr self) -> float"""
        return _blocks_swig2.complex_to_real_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(complex_to_real_sptr self) -> float"""
        return _blocks_swig2.complex_to_real_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(complex_to_real_sptr self) -> float"""
        return _blocks_swig2.complex_to_real_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(complex_to_real_sptr self) -> float"""
        return _blocks_swig2.complex_to_real_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(complex_to_real_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.complex_to_real_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(complex_to_real_sptr self)"""
        return _blocks_swig2.complex_to_real_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(complex_to_real_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.complex_to_real_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(complex_to_real_sptr self) -> int"""
        return _blocks_swig2.complex_to_real_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(complex_to_real_sptr self) -> int"""
        return _blocks_swig2.complex_to_real_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(complex_to_real_sptr self, int priority) -> int"""
        return _blocks_swig2.complex_to_real_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(complex_to_real_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_real_sptr_name(self)

    def symbol_name(self):
        """symbol_name(complex_to_real_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_real_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(complex_to_real_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_real_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(complex_to_real_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_real_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(complex_to_real_sptr self) -> long"""
        return _blocks_swig2.complex_to_real_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(complex_to_real_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.complex_to_real_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(complex_to_real_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.complex_to_real_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(complex_to_real_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_real_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(complex_to_real_sptr self, std::string name)"""
        return _blocks_swig2.complex_to_real_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(complex_to_real_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.complex_to_real_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(complex_to_real_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_real_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(complex_to_real_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_real_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(complex_to_real_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_real_sptr_message_subscribers(self, *args, **kwargs)

complex_to_real_sptr_swigregister = _blocks_swig2.complex_to_real_sptr_swigregister
complex_to_real_sptr_swigregister(complex_to_real_sptr)

complex_to_real_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
complex_to_real = complex_to_real.make;

class complex_to_imag_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::complex_to_imag)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::complex_to_imag)> self) -> complex_to_imag_sptr
        __init__(boost::shared_ptr<(gr::blocks::complex_to_imag)> self, complex_to_imag p) -> complex_to_imag_sptr
        """
        this = _blocks_swig2.new_complex_to_imag_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(complex_to_imag_sptr self) -> complex_to_imag"""
        return _blocks_swig2.complex_to_imag_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_complex_to_imag_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(complex_to_imag_sptr self, size_t vlen=1) -> complex_to_imag_sptr

        Produces the imaginary part (as a float0 of a complex stream.

        Constructor Specific Documentation:

        Build a complex to imaginary part block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig2.complex_to_imag_sptr_make(self, vlen)

    def history(self):
        """history(complex_to_imag_sptr self) -> unsigned int"""
        return _blocks_swig2.complex_to_imag_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(complex_to_imag_sptr self, int which, int delay)
        declare_sample_delay(complex_to_imag_sptr self, unsigned int delay)
        """
        return _blocks_swig2.complex_to_imag_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(complex_to_imag_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.complex_to_imag_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(complex_to_imag_sptr self) -> int"""
        return _blocks_swig2.complex_to_imag_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(complex_to_imag_sptr self) -> double"""
        return _blocks_swig2.complex_to_imag_sptr_relative_rate(self)

    def start(self):
        """start(complex_to_imag_sptr self) -> bool"""
        return _blocks_swig2.complex_to_imag_sptr_start(self)

    def stop(self):
        """stop(complex_to_imag_sptr self) -> bool"""
        return _blocks_swig2.complex_to_imag_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(complex_to_imag_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.complex_to_imag_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(complex_to_imag_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.complex_to_imag_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(complex_to_imag_sptr self) -> int"""
        return _blocks_swig2.complex_to_imag_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(complex_to_imag_sptr self, int m)"""
        return _blocks_swig2.complex_to_imag_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(complex_to_imag_sptr self)"""
        return _blocks_swig2.complex_to_imag_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(complex_to_imag_sptr self) -> bool"""
        return _blocks_swig2.complex_to_imag_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(complex_to_imag_sptr self, int m)"""
        return _blocks_swig2.complex_to_imag_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(complex_to_imag_sptr self) -> int"""
        return _blocks_swig2.complex_to_imag_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(complex_to_imag_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_imag_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(complex_to_imag_sptr self, long max_output_buffer)
        set_max_output_buffer(complex_to_imag_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.complex_to_imag_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(complex_to_imag_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_imag_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(complex_to_imag_sptr self, long min_output_buffer)
        set_min_output_buffer(complex_to_imag_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.complex_to_imag_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(complex_to_imag_sptr self) -> float"""
        return _blocks_swig2.complex_to_imag_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(complex_to_imag_sptr self) -> float"""
        return _blocks_swig2.complex_to_imag_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(complex_to_imag_sptr self) -> float"""
        return _blocks_swig2.complex_to_imag_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(complex_to_imag_sptr self) -> float"""
        return _blocks_swig2.complex_to_imag_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(complex_to_imag_sptr self) -> float"""
        return _blocks_swig2.complex_to_imag_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(complex_to_imag_sptr self) -> float"""
        return _blocks_swig2.complex_to_imag_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(complex_to_imag_sptr self, int which) -> float
        pc_input_buffers_full(complex_to_imag_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_imag_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(complex_to_imag_sptr self, int which) -> float
        pc_input_buffers_full_avg(complex_to_imag_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_imag_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(complex_to_imag_sptr self, int which) -> float
        pc_input_buffers_full_var(complex_to_imag_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_imag_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(complex_to_imag_sptr self, int which) -> float
        pc_output_buffers_full(complex_to_imag_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_imag_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(complex_to_imag_sptr self, int which) -> float
        pc_output_buffers_full_avg(complex_to_imag_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_imag_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(complex_to_imag_sptr self, int which) -> float
        pc_output_buffers_full_var(complex_to_imag_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_imag_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(complex_to_imag_sptr self) -> float"""
        return _blocks_swig2.complex_to_imag_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(complex_to_imag_sptr self) -> float"""
        return _blocks_swig2.complex_to_imag_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(complex_to_imag_sptr self) -> float"""
        return _blocks_swig2.complex_to_imag_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(complex_to_imag_sptr self) -> float"""
        return _blocks_swig2.complex_to_imag_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(complex_to_imag_sptr self) -> float"""
        return _blocks_swig2.complex_to_imag_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(complex_to_imag_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.complex_to_imag_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(complex_to_imag_sptr self)"""
        return _blocks_swig2.complex_to_imag_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(complex_to_imag_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.complex_to_imag_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(complex_to_imag_sptr self) -> int"""
        return _blocks_swig2.complex_to_imag_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(complex_to_imag_sptr self) -> int"""
        return _blocks_swig2.complex_to_imag_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(complex_to_imag_sptr self, int priority) -> int"""
        return _blocks_swig2.complex_to_imag_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(complex_to_imag_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_imag_sptr_name(self)

    def symbol_name(self):
        """symbol_name(complex_to_imag_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_imag_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(complex_to_imag_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_imag_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(complex_to_imag_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_imag_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(complex_to_imag_sptr self) -> long"""
        return _blocks_swig2.complex_to_imag_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(complex_to_imag_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.complex_to_imag_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(complex_to_imag_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.complex_to_imag_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(complex_to_imag_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_imag_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(complex_to_imag_sptr self, std::string name)"""
        return _blocks_swig2.complex_to_imag_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(complex_to_imag_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.complex_to_imag_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(complex_to_imag_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_imag_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(complex_to_imag_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_imag_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(complex_to_imag_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_imag_sptr_message_subscribers(self, *args, **kwargs)

complex_to_imag_sptr_swigregister = _blocks_swig2.complex_to_imag_sptr_swigregister
complex_to_imag_sptr_swigregister(complex_to_imag_sptr)

complex_to_imag_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
complex_to_imag = complex_to_imag.make;

class complex_to_mag_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::complex_to_mag)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::complex_to_mag)> self) -> complex_to_mag_sptr
        __init__(boost::shared_ptr<(gr::blocks::complex_to_mag)> self, complex_to_mag p) -> complex_to_mag_sptr
        """
        this = _blocks_swig2.new_complex_to_mag_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(complex_to_mag_sptr self) -> complex_to_mag"""
        return _blocks_swig2.complex_to_mag_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_complex_to_mag_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(complex_to_mag_sptr self, size_t vlen=1) -> complex_to_mag_sptr

        complex in, magnitude out (float)

        Calculates the magnitude of the complex samples:


        Or: 
        The input stream can be a vector of length , and for each vector, each item is converted using the above function. So above, m is from 0 to noutput_items*vlen for each call to work.

        Constructor Specific Documentation:

        Build a complex to magnitude block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig2.complex_to_mag_sptr_make(self, vlen)

    def history(self):
        """history(complex_to_mag_sptr self) -> unsigned int"""
        return _blocks_swig2.complex_to_mag_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(complex_to_mag_sptr self, int which, int delay)
        declare_sample_delay(complex_to_mag_sptr self, unsigned int delay)
        """
        return _blocks_swig2.complex_to_mag_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(complex_to_mag_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.complex_to_mag_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(complex_to_mag_sptr self) -> int"""
        return _blocks_swig2.complex_to_mag_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(complex_to_mag_sptr self) -> double"""
        return _blocks_swig2.complex_to_mag_sptr_relative_rate(self)

    def start(self):
        """start(complex_to_mag_sptr self) -> bool"""
        return _blocks_swig2.complex_to_mag_sptr_start(self)

    def stop(self):
        """stop(complex_to_mag_sptr self) -> bool"""
        return _blocks_swig2.complex_to_mag_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(complex_to_mag_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.complex_to_mag_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(complex_to_mag_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.complex_to_mag_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(complex_to_mag_sptr self) -> int"""
        return _blocks_swig2.complex_to_mag_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(complex_to_mag_sptr self, int m)"""
        return _blocks_swig2.complex_to_mag_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(complex_to_mag_sptr self)"""
        return _blocks_swig2.complex_to_mag_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(complex_to_mag_sptr self) -> bool"""
        return _blocks_swig2.complex_to_mag_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(complex_to_mag_sptr self, int m)"""
        return _blocks_swig2.complex_to_mag_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(complex_to_mag_sptr self) -> int"""
        return _blocks_swig2.complex_to_mag_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(complex_to_mag_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_mag_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(complex_to_mag_sptr self, long max_output_buffer)
        set_max_output_buffer(complex_to_mag_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.complex_to_mag_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(complex_to_mag_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_mag_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(complex_to_mag_sptr self, long min_output_buffer)
        set_min_output_buffer(complex_to_mag_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.complex_to_mag_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(complex_to_mag_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(complex_to_mag_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(complex_to_mag_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(complex_to_mag_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(complex_to_mag_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(complex_to_mag_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(complex_to_mag_sptr self, int which) -> float
        pc_input_buffers_full(complex_to_mag_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_mag_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(complex_to_mag_sptr self, int which) -> float
        pc_input_buffers_full_avg(complex_to_mag_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_mag_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(complex_to_mag_sptr self, int which) -> float
        pc_input_buffers_full_var(complex_to_mag_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_mag_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(complex_to_mag_sptr self, int which) -> float
        pc_output_buffers_full(complex_to_mag_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_mag_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(complex_to_mag_sptr self, int which) -> float
        pc_output_buffers_full_avg(complex_to_mag_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_mag_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(complex_to_mag_sptr self, int which) -> float
        pc_output_buffers_full_var(complex_to_mag_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_mag_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(complex_to_mag_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(complex_to_mag_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(complex_to_mag_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(complex_to_mag_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(complex_to_mag_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(complex_to_mag_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.complex_to_mag_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(complex_to_mag_sptr self)"""
        return _blocks_swig2.complex_to_mag_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(complex_to_mag_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.complex_to_mag_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(complex_to_mag_sptr self) -> int"""
        return _blocks_swig2.complex_to_mag_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(complex_to_mag_sptr self) -> int"""
        return _blocks_swig2.complex_to_mag_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(complex_to_mag_sptr self, int priority) -> int"""
        return _blocks_swig2.complex_to_mag_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(complex_to_mag_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_mag_sptr_name(self)

    def symbol_name(self):
        """symbol_name(complex_to_mag_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_mag_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(complex_to_mag_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_mag_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(complex_to_mag_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_mag_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(complex_to_mag_sptr self) -> long"""
        return _blocks_swig2.complex_to_mag_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(complex_to_mag_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.complex_to_mag_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(complex_to_mag_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.complex_to_mag_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(complex_to_mag_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_mag_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(complex_to_mag_sptr self, std::string name)"""
        return _blocks_swig2.complex_to_mag_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(complex_to_mag_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.complex_to_mag_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(complex_to_mag_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_mag_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(complex_to_mag_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_mag_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(complex_to_mag_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_mag_sptr_message_subscribers(self, *args, **kwargs)

complex_to_mag_sptr_swigregister = _blocks_swig2.complex_to_mag_sptr_swigregister
complex_to_mag_sptr_swigregister(complex_to_mag_sptr)

complex_to_mag_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
complex_to_mag = complex_to_mag.make;

class complex_to_mag_squared_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::complex_to_mag_squared)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::complex_to_mag_squared)> self) -> complex_to_mag_squared_sptr
        __init__(boost::shared_ptr<(gr::blocks::complex_to_mag_squared)> self, complex_to_mag_squared p) -> complex_to_mag_squared_sptr
        """
        this = _blocks_swig2.new_complex_to_mag_squared_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(complex_to_mag_squared_sptr self) -> complex_to_mag_squared"""
        return _blocks_swig2.complex_to_mag_squared_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_complex_to_mag_squared_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(complex_to_mag_squared_sptr self, size_t vlen=1) -> complex_to_mag_squared_sptr

        complex in, magnitude squared out (float)

        Calculates the magnitude squared of the complex samples:


        Or: 
        The input stream can be a vector of length , and for each vector, each item is converted using the above function. So above, m is from 0 to noutput_items*vlen for each call to work.

        Constructor Specific Documentation:

        Build a complex to magnitude squared block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig2.complex_to_mag_squared_sptr_make(self, vlen)

    def history(self):
        """history(complex_to_mag_squared_sptr self) -> unsigned int"""
        return _blocks_swig2.complex_to_mag_squared_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(complex_to_mag_squared_sptr self, int which, int delay)
        declare_sample_delay(complex_to_mag_squared_sptr self, unsigned int delay)
        """
        return _blocks_swig2.complex_to_mag_squared_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(complex_to_mag_squared_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.complex_to_mag_squared_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(complex_to_mag_squared_sptr self) -> int"""
        return _blocks_swig2.complex_to_mag_squared_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(complex_to_mag_squared_sptr self) -> double"""
        return _blocks_swig2.complex_to_mag_squared_sptr_relative_rate(self)

    def start(self):
        """start(complex_to_mag_squared_sptr self) -> bool"""
        return _blocks_swig2.complex_to_mag_squared_sptr_start(self)

    def stop(self):
        """stop(complex_to_mag_squared_sptr self) -> bool"""
        return _blocks_swig2.complex_to_mag_squared_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(complex_to_mag_squared_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.complex_to_mag_squared_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(complex_to_mag_squared_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.complex_to_mag_squared_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(complex_to_mag_squared_sptr self) -> int"""
        return _blocks_swig2.complex_to_mag_squared_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(complex_to_mag_squared_sptr self, int m)"""
        return _blocks_swig2.complex_to_mag_squared_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(complex_to_mag_squared_sptr self)"""
        return _blocks_swig2.complex_to_mag_squared_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(complex_to_mag_squared_sptr self) -> bool"""
        return _blocks_swig2.complex_to_mag_squared_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(complex_to_mag_squared_sptr self, int m)"""
        return _blocks_swig2.complex_to_mag_squared_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(complex_to_mag_squared_sptr self) -> int"""
        return _blocks_swig2.complex_to_mag_squared_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(complex_to_mag_squared_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_mag_squared_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(complex_to_mag_squared_sptr self, long max_output_buffer)
        set_max_output_buffer(complex_to_mag_squared_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.complex_to_mag_squared_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(complex_to_mag_squared_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_mag_squared_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(complex_to_mag_squared_sptr self, long min_output_buffer)
        set_min_output_buffer(complex_to_mag_squared_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.complex_to_mag_squared_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(complex_to_mag_squared_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(complex_to_mag_squared_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(complex_to_mag_squared_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(complex_to_mag_squared_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(complex_to_mag_squared_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(complex_to_mag_squared_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(complex_to_mag_squared_sptr self, int which) -> float
        pc_input_buffers_full(complex_to_mag_squared_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(complex_to_mag_squared_sptr self, int which) -> float
        pc_input_buffers_full_avg(complex_to_mag_squared_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(complex_to_mag_squared_sptr self, int which) -> float
        pc_input_buffers_full_var(complex_to_mag_squared_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(complex_to_mag_squared_sptr self, int which) -> float
        pc_output_buffers_full(complex_to_mag_squared_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(complex_to_mag_squared_sptr self, int which) -> float
        pc_output_buffers_full_avg(complex_to_mag_squared_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(complex_to_mag_squared_sptr self, int which) -> float
        pc_output_buffers_full_var(complex_to_mag_squared_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(complex_to_mag_squared_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(complex_to_mag_squared_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(complex_to_mag_squared_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(complex_to_mag_squared_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(complex_to_mag_squared_sptr self) -> float"""
        return _blocks_swig2.complex_to_mag_squared_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(complex_to_mag_squared_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.complex_to_mag_squared_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(complex_to_mag_squared_sptr self)"""
        return _blocks_swig2.complex_to_mag_squared_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(complex_to_mag_squared_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.complex_to_mag_squared_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(complex_to_mag_squared_sptr self) -> int"""
        return _blocks_swig2.complex_to_mag_squared_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(complex_to_mag_squared_sptr self) -> int"""
        return _blocks_swig2.complex_to_mag_squared_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(complex_to_mag_squared_sptr self, int priority) -> int"""
        return _blocks_swig2.complex_to_mag_squared_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(complex_to_mag_squared_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_mag_squared_sptr_name(self)

    def symbol_name(self):
        """symbol_name(complex_to_mag_squared_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_mag_squared_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(complex_to_mag_squared_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_mag_squared_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(complex_to_mag_squared_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_mag_squared_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(complex_to_mag_squared_sptr self) -> long"""
        return _blocks_swig2.complex_to_mag_squared_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(complex_to_mag_squared_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.complex_to_mag_squared_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(complex_to_mag_squared_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.complex_to_mag_squared_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(complex_to_mag_squared_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_mag_squared_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(complex_to_mag_squared_sptr self, std::string name)"""
        return _blocks_swig2.complex_to_mag_squared_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(complex_to_mag_squared_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.complex_to_mag_squared_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(complex_to_mag_squared_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_mag_squared_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(complex_to_mag_squared_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_mag_squared_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(complex_to_mag_squared_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_mag_squared_sptr_message_subscribers(self, *args, **kwargs)

complex_to_mag_squared_sptr_swigregister = _blocks_swig2.complex_to_mag_squared_sptr_swigregister
complex_to_mag_squared_sptr_swigregister(complex_to_mag_squared_sptr)

complex_to_mag_squared_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
complex_to_mag_squared = complex_to_mag_squared.make;

class complex_to_arg_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::complex_to_arg)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::complex_to_arg)> self) -> complex_to_arg_sptr
        __init__(boost::shared_ptr<(gr::blocks::complex_to_arg)> self, complex_to_arg p) -> complex_to_arg_sptr
        """
        this = _blocks_swig2.new_complex_to_arg_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(complex_to_arg_sptr self) -> complex_to_arg"""
        return _blocks_swig2.complex_to_arg_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_complex_to_arg_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(complex_to_arg_sptr self, size_t vlen=1) -> complex_to_arg_sptr

        complex in, arg (arctan) out (float)

        Constructor Specific Documentation:

        Build a complex to arg block.

        Args:
            vlen : vector len (default 1)
        """
        return _blocks_swig2.complex_to_arg_sptr_make(self, vlen)

    def history(self):
        """history(complex_to_arg_sptr self) -> unsigned int"""
        return _blocks_swig2.complex_to_arg_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(complex_to_arg_sptr self, int which, int delay)
        declare_sample_delay(complex_to_arg_sptr self, unsigned int delay)
        """
        return _blocks_swig2.complex_to_arg_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(complex_to_arg_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.complex_to_arg_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(complex_to_arg_sptr self) -> int"""
        return _blocks_swig2.complex_to_arg_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(complex_to_arg_sptr self) -> double"""
        return _blocks_swig2.complex_to_arg_sptr_relative_rate(self)

    def start(self):
        """start(complex_to_arg_sptr self) -> bool"""
        return _blocks_swig2.complex_to_arg_sptr_start(self)

    def stop(self):
        """stop(complex_to_arg_sptr self) -> bool"""
        return _blocks_swig2.complex_to_arg_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(complex_to_arg_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.complex_to_arg_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(complex_to_arg_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.complex_to_arg_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(complex_to_arg_sptr self) -> int"""
        return _blocks_swig2.complex_to_arg_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(complex_to_arg_sptr self, int m)"""
        return _blocks_swig2.complex_to_arg_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(complex_to_arg_sptr self)"""
        return _blocks_swig2.complex_to_arg_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(complex_to_arg_sptr self) -> bool"""
        return _blocks_swig2.complex_to_arg_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(complex_to_arg_sptr self, int m)"""
        return _blocks_swig2.complex_to_arg_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(complex_to_arg_sptr self) -> int"""
        return _blocks_swig2.complex_to_arg_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(complex_to_arg_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_arg_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(complex_to_arg_sptr self, long max_output_buffer)
        set_max_output_buffer(complex_to_arg_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.complex_to_arg_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(complex_to_arg_sptr self, int i) -> long"""
        return _blocks_swig2.complex_to_arg_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(complex_to_arg_sptr self, long min_output_buffer)
        set_min_output_buffer(complex_to_arg_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.complex_to_arg_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(complex_to_arg_sptr self) -> float"""
        return _blocks_swig2.complex_to_arg_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(complex_to_arg_sptr self) -> float"""
        return _blocks_swig2.complex_to_arg_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(complex_to_arg_sptr self) -> float"""
        return _blocks_swig2.complex_to_arg_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(complex_to_arg_sptr self) -> float"""
        return _blocks_swig2.complex_to_arg_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(complex_to_arg_sptr self) -> float"""
        return _blocks_swig2.complex_to_arg_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(complex_to_arg_sptr self) -> float"""
        return _blocks_swig2.complex_to_arg_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(complex_to_arg_sptr self, int which) -> float
        pc_input_buffers_full(complex_to_arg_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_arg_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(complex_to_arg_sptr self, int which) -> float
        pc_input_buffers_full_avg(complex_to_arg_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_arg_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(complex_to_arg_sptr self, int which) -> float
        pc_input_buffers_full_var(complex_to_arg_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_arg_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(complex_to_arg_sptr self, int which) -> float
        pc_output_buffers_full(complex_to_arg_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_arg_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(complex_to_arg_sptr self, int which) -> float
        pc_output_buffers_full_avg(complex_to_arg_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_arg_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(complex_to_arg_sptr self, int which) -> float
        pc_output_buffers_full_var(complex_to_arg_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.complex_to_arg_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(complex_to_arg_sptr self) -> float"""
        return _blocks_swig2.complex_to_arg_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(complex_to_arg_sptr self) -> float"""
        return _blocks_swig2.complex_to_arg_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(complex_to_arg_sptr self) -> float"""
        return _blocks_swig2.complex_to_arg_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(complex_to_arg_sptr self) -> float"""
        return _blocks_swig2.complex_to_arg_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(complex_to_arg_sptr self) -> float"""
        return _blocks_swig2.complex_to_arg_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(complex_to_arg_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.complex_to_arg_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(complex_to_arg_sptr self)"""
        return _blocks_swig2.complex_to_arg_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(complex_to_arg_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.complex_to_arg_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(complex_to_arg_sptr self) -> int"""
        return _blocks_swig2.complex_to_arg_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(complex_to_arg_sptr self) -> int"""
        return _blocks_swig2.complex_to_arg_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(complex_to_arg_sptr self, int priority) -> int"""
        return _blocks_swig2.complex_to_arg_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(complex_to_arg_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_arg_sptr_name(self)

    def symbol_name(self):
        """symbol_name(complex_to_arg_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_arg_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(complex_to_arg_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_arg_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(complex_to_arg_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.complex_to_arg_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(complex_to_arg_sptr self) -> long"""
        return _blocks_swig2.complex_to_arg_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(complex_to_arg_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.complex_to_arg_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(complex_to_arg_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.complex_to_arg_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(complex_to_arg_sptr self) -> std::string"""
        return _blocks_swig2.complex_to_arg_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(complex_to_arg_sptr self, std::string name)"""
        return _blocks_swig2.complex_to_arg_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(complex_to_arg_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.complex_to_arg_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(complex_to_arg_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_arg_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(complex_to_arg_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_arg_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(complex_to_arg_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.complex_to_arg_sptr_message_subscribers(self, *args, **kwargs)

complex_to_arg_sptr_swigregister = _blocks_swig2.complex_to_arg_sptr_swigregister
complex_to_arg_sptr_swigregister(complex_to_arg_sptr)

complex_to_arg_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
complex_to_arg = complex_to_arg.make;

class conjugate_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::conjugate_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::conjugate_cc)> self) -> conjugate_cc_sptr
        __init__(boost::shared_ptr<(gr::blocks::conjugate_cc)> self, conjugate_cc p) -> conjugate_cc_sptr
        """
        this = _blocks_swig2.new_conjugate_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(conjugate_cc_sptr self) -> conjugate_cc"""
        return _blocks_swig2.conjugate_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig2.delete_conjugate_cc_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(conjugate_cc_sptr self) -> conjugate_cc_sptr

        output = complex conjugate of input

        Constructor Specific Documentation:


        """
        return _blocks_swig2.conjugate_cc_sptr_make(self)

    def history(self):
        """history(conjugate_cc_sptr self) -> unsigned int"""
        return _blocks_swig2.conjugate_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(conjugate_cc_sptr self, int which, int delay)
        declare_sample_delay(conjugate_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig2.conjugate_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(conjugate_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig2.conjugate_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(conjugate_cc_sptr self) -> int"""
        return _blocks_swig2.conjugate_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(conjugate_cc_sptr self) -> double"""
        return _blocks_swig2.conjugate_cc_sptr_relative_rate(self)

    def start(self):
        """start(conjugate_cc_sptr self) -> bool"""
        return _blocks_swig2.conjugate_cc_sptr_start(self)

    def stop(self):
        """stop(conjugate_cc_sptr self) -> bool"""
        return _blocks_swig2.conjugate_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(conjugate_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig2.conjugate_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(conjugate_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig2.conjugate_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(conjugate_cc_sptr self) -> int"""
        return _blocks_swig2.conjugate_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(conjugate_cc_sptr self, int m)"""
        return _blocks_swig2.conjugate_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(conjugate_cc_sptr self)"""
        return _blocks_swig2.conjugate_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(conjugate_cc_sptr self) -> bool"""
        return _blocks_swig2.conjugate_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(conjugate_cc_sptr self, int m)"""
        return _blocks_swig2.conjugate_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(conjugate_cc_sptr self) -> int"""
        return _blocks_swig2.conjugate_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(conjugate_cc_sptr self, int i) -> long"""
        return _blocks_swig2.conjugate_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(conjugate_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(conjugate_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig2.conjugate_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(conjugate_cc_sptr self, int i) -> long"""
        return _blocks_swig2.conjugate_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(conjugate_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(conjugate_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig2.conjugate_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(conjugate_cc_sptr self) -> float"""
        return _blocks_swig2.conjugate_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(conjugate_cc_sptr self) -> float"""
        return _blocks_swig2.conjugate_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(conjugate_cc_sptr self) -> float"""
        return _blocks_swig2.conjugate_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(conjugate_cc_sptr self) -> float"""
        return _blocks_swig2.conjugate_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(conjugate_cc_sptr self) -> float"""
        return _blocks_swig2.conjugate_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(conjugate_cc_sptr self) -> float"""
        return _blocks_swig2.conjugate_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(conjugate_cc_sptr self, int which) -> float
        pc_input_buffers_full(conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.conjugate_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(conjugate_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.conjugate_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(conjugate_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.conjugate_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(conjugate_cc_sptr self, int which) -> float
        pc_output_buffers_full(conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.conjugate_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(conjugate_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.conjugate_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(conjugate_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig2.conjugate_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(conjugate_cc_sptr self) -> float"""
        return _blocks_swig2.conjugate_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(conjugate_cc_sptr self) -> float"""
        return _blocks_swig2.conjugate_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(conjugate_cc_sptr self) -> float"""
        return _blocks_swig2.conjugate_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(conjugate_cc_sptr self) -> float"""
        return _blocks_swig2.conjugate_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(conjugate_cc_sptr self) -> float"""
        return _blocks_swig2.conjugate_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(conjugate_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig2.conjugate_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(conjugate_cc_sptr self)"""
        return _blocks_swig2.conjugate_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(conjugate_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig2.conjugate_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(conjugate_cc_sptr self) -> int"""
        return _blocks_swig2.conjugate_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(conjugate_cc_sptr self) -> int"""
        return _blocks_swig2.conjugate_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(conjugate_cc_sptr self, int priority) -> int"""
        return _blocks_swig2.conjugate_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(conjugate_cc_sptr self) -> std::string"""
        return _blocks_swig2.conjugate_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(conjugate_cc_sptr self) -> std::string"""
        return _blocks_swig2.conjugate_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(conjugate_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.conjugate_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(conjugate_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig2.conjugate_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(conjugate_cc_sptr self) -> long"""
        return _blocks_swig2.conjugate_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(conjugate_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig2.conjugate_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(conjugate_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig2.conjugate_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(conjugate_cc_sptr self) -> std::string"""
        return _blocks_swig2.conjugate_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(conjugate_cc_sptr self, std::string name)"""
        return _blocks_swig2.conjugate_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(conjugate_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig2.conjugate_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(conjugate_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.conjugate_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(conjugate_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig2.conjugate_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(conjugate_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig2.conjugate_cc_sptr_message_subscribers(self, *args, **kwargs)

conjugate_cc_sptr_swigregister = _blocks_swig2.conjugate_cc_sptr_swigregister
conjugate_cc_sptr_swigregister(conjugate_cc_sptr)

conjugate_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
conjugate_cc = conjugate_cc.make;




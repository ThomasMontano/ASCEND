# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_blocks_swig3', [dirname(__file__)])
        except ImportError:
            import _blocks_swig3
            return _blocks_swig3
        if fp is not None:
            try:
                _mod = imp.load_module('_blocks_swig3', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _blocks_swig3 = swig_import_helper()
    del swig_import_helper
else:
    import _blocks_swig3
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _blocks_swig3.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _blocks_swig3.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _blocks_swig3.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _blocks_swig3.high_res_timer_epoch()
class multiply_ss(object):
    """
    output = prod (input_0, input_1, ...)

    Multiply across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> multiply_ss_sptr

        output = prod (input_0, input_1, ...)

        Multiply across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig3.multiply_ss_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig3.delete_multiply_ss
    __del__ = lambda self : None;
multiply_ss_swigregister = _blocks_swig3.multiply_ss_swigregister
multiply_ss_swigregister(multiply_ss)

def multiply_ss_make(vlen=1):
  """
    multiply_ss_make(size_t vlen=1) -> multiply_ss_sptr

    output = prod (input_0, input_1, ...)

    Multiply across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig3.multiply_ss_make(vlen)

class multiply_ii(object):
    """
    output = prod (input_0, input_1, ...)

    Multiply across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> multiply_ii_sptr

        output = prod (input_0, input_1, ...)

        Multiply across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig3.multiply_ii_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig3.delete_multiply_ii
    __del__ = lambda self : None;
multiply_ii_swigregister = _blocks_swig3.multiply_ii_swigregister
multiply_ii_swigregister(multiply_ii)

def multiply_ii_make(vlen=1):
  """
    multiply_ii_make(size_t vlen=1) -> multiply_ii_sptr

    output = prod (input_0, input_1, ...)

    Multiply across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig3.multiply_ii_make(vlen)

class multiply_ff(object):
    """
    output = prod (input_0, input_1, ...)

    Multiply across all input streams.

    Constructor Specific Documentation:

    Multiply streams of float values.

    Args:
        vlen : Vector length
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> multiply_ff_sptr

        output = prod (input_0, input_1, ...)

        Multiply across all input streams.

        Constructor Specific Documentation:

        Multiply streams of float values.

        Args:
            vlen : Vector length
        """
        return _blocks_swig3.multiply_ff_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig3.delete_multiply_ff
    __del__ = lambda self : None;
multiply_ff_swigregister = _blocks_swig3.multiply_ff_swigregister
multiply_ff_swigregister(multiply_ff)

def multiply_ff_make(vlen=1):
  """
    multiply_ff_make(size_t vlen=1) -> multiply_ff_sptr

    output = prod (input_0, input_1, ...)

    Multiply across all input streams.

    Constructor Specific Documentation:

    Multiply streams of float values.

    Args:
        vlen : Vector length
    """
  return _blocks_swig3.multiply_ff_make(vlen)

class multiply_cc(object):
    """
    output = prod (input_0, input_1, ...)

    Multiply across all input streams.

    Constructor Specific Documentation:

    Multiply streams of complex values.

    Args:
        vlen : Vector length
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> multiply_cc_sptr

        output = prod (input_0, input_1, ...)

        Multiply across all input streams.

        Constructor Specific Documentation:

        Multiply streams of complex values.

        Args:
            vlen : Vector length
        """
        return _blocks_swig3.multiply_cc_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig3.delete_multiply_cc
    __del__ = lambda self : None;
multiply_cc_swigregister = _blocks_swig3.multiply_cc_swigregister
multiply_cc_swigregister(multiply_cc)

def multiply_cc_make(vlen=1):
  """
    multiply_cc_make(size_t vlen=1) -> multiply_cc_sptr

    output = prod (input_0, input_1, ...)

    Multiply across all input streams.

    Constructor Specific Documentation:

    Multiply streams of complex values.

    Args:
        vlen : Vector length
    """
  return _blocks_swig3.multiply_cc_make(vlen)

class multiply_conjugate_cc(object):
    """
    Multiplies stream 0 by the complex conjugate of stream 1.

    Constructor Specific Documentation:

    Multiplies a streams by the conjugate of a second stream.

    Args:
        vlen : Vector length
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> multiply_conjugate_cc_sptr

        Multiplies stream 0 by the complex conjugate of stream 1.

        Constructor Specific Documentation:

        Multiplies a streams by the conjugate of a second stream.

        Args:
            vlen : Vector length
        """
        return _blocks_swig3.multiply_conjugate_cc_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig3.delete_multiply_conjugate_cc
    __del__ = lambda self : None;
multiply_conjugate_cc_swigregister = _blocks_swig3.multiply_conjugate_cc_swigregister
multiply_conjugate_cc_swigregister(multiply_conjugate_cc)

def multiply_conjugate_cc_make(vlen=1):
  """
    multiply_conjugate_cc_make(size_t vlen=1) -> multiply_conjugate_cc_sptr

    Multiplies stream 0 by the complex conjugate of stream 1.

    Constructor Specific Documentation:

    Multiplies a streams by the conjugate of a second stream.

    Args:
        vlen : Vector length
    """
  return _blocks_swig3.multiply_conjugate_cc_make(vlen)

class multiply_const_ss(object):
    """
    output = input * constant

    Constructor Specific Documentation:

    Create an instance of multiply_const_ss.

    Args:
        k : multiplicative constant
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(short k) -> multiply_const_ss_sptr

        output = input * constant

        Constructor Specific Documentation:

        Create an instance of multiply_const_ss.

        Args:
            k : multiplicative constant
        """
        return _blocks_swig3.multiply_const_ss_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(multiply_const_ss self) -> short

        Return multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ss_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_ss self, short k)

        Set multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ss_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_ss
    __del__ = lambda self : None;
multiply_const_ss_swigregister = _blocks_swig3.multiply_const_ss_swigregister
multiply_const_ss_swigregister(multiply_const_ss)

def multiply_const_ss_make(*args, **kwargs):
  """
    multiply_const_ss_make(short k) -> multiply_const_ss_sptr

    output = input * constant

    Constructor Specific Documentation:

    Create an instance of multiply_const_ss.

    Args:
        k : multiplicative constant
    """
  return _blocks_swig3.multiply_const_ss_make(*args, **kwargs)

class multiply_const_ii(object):
    """
    output = input * constant

    Constructor Specific Documentation:

    Create an instance of multiply_const_ii.

    Args:
        k : multiplicative constant
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int k) -> multiply_const_ii_sptr

        output = input * constant

        Constructor Specific Documentation:

        Create an instance of multiply_const_ii.

        Args:
            k : multiplicative constant
        """
        return _blocks_swig3.multiply_const_ii_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(multiply_const_ii self) -> int

        Return multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ii_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_ii self, int k)

        Set multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ii_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_ii
    __del__ = lambda self : None;
multiply_const_ii_swigregister = _blocks_swig3.multiply_const_ii_swigregister
multiply_const_ii_swigregister(multiply_const_ii)

def multiply_const_ii_make(*args, **kwargs):
  """
    multiply_const_ii_make(int k) -> multiply_const_ii_sptr

    output = input * constant

    Constructor Specific Documentation:

    Create an instance of multiply_const_ii.

    Args:
        k : multiplicative constant
    """
  return _blocks_swig3.multiply_const_ii_make(*args, **kwargs)

class multiply_const_ff(object):
    """
    output = input * real constant

    Constructor Specific Documentation:

    Create an instance of multiply_const_ff.

    Args:
        k : real multiplicative constant
        vlen : Vector length of incoming stream
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(float k, size_t vlen=1) -> multiply_const_ff_sptr

        output = input * real constant

        Constructor Specific Documentation:

        Create an instance of multiply_const_ff.

        Args:
            k : real multiplicative constant
            vlen : Vector length of incoming stream
        """
        return _blocks_swig3.multiply_const_ff_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(multiply_const_ff self) -> float

        Return real multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ff_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_ff self, float k)

        Set real multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ff_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_ff
    __del__ = lambda self : None;
multiply_const_ff_swigregister = _blocks_swig3.multiply_const_ff_swigregister
multiply_const_ff_swigregister(multiply_const_ff)

def multiply_const_ff_make(*args, **kwargs):
  """
    multiply_const_ff_make(float k, size_t vlen=1) -> multiply_const_ff_sptr

    output = input * real constant

    Constructor Specific Documentation:

    Create an instance of multiply_const_ff.

    Args:
        k : real multiplicative constant
        vlen : Vector length of incoming stream
    """
  return _blocks_swig3.multiply_const_ff_make(*args, **kwargs)

class multiply_const_cc(object):
    """
    output = input * complex constant

    Constructor Specific Documentation:

    Create an instance of multiply_const_cc.

    Args:
        k : complex multiplicative constant
        vlen : Vector length of incoming stream
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(gr_complex k, size_t vlen=1) -> multiply_const_cc_sptr

        output = input * complex constant

        Constructor Specific Documentation:

        Create an instance of multiply_const_cc.

        Args:
            k : complex multiplicative constant
            vlen : Vector length of incoming stream
        """
        return _blocks_swig3.multiply_const_cc_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(multiply_const_cc self) -> gr_complex

        Return complex multiplicative constant.
        """
        return _blocks_swig3.multiply_const_cc_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_cc self, gr_complex k)

        Set complex multiplicative constant.
        """
        return _blocks_swig3.multiply_const_cc_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_cc
    __del__ = lambda self : None;
multiply_const_cc_swigregister = _blocks_swig3.multiply_const_cc_swigregister
multiply_const_cc_swigregister(multiply_const_cc)

def multiply_const_cc_make(*args, **kwargs):
  """
    multiply_const_cc_make(gr_complex k, size_t vlen=1) -> multiply_const_cc_sptr

    output = input * complex constant

    Constructor Specific Documentation:

    Create an instance of multiply_const_cc.

    Args:
        k : complex multiplicative constant
        vlen : Vector length of incoming stream
    """
  return _blocks_swig3.multiply_const_cc_make(*args, **kwargs)

class multiply_const_vss(object):
    """
    output = input * constant vector (element-wise)

    Constructor Specific Documentation:

    Create an instance of multiply_const_vss.

    Args:
        k : multiplicative constant vector
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(std::vector< short,std::allocator< short > > k) -> multiply_const_vss_sptr

        output = input * constant vector (element-wise)

        Constructor Specific Documentation:

        Create an instance of multiply_const_vss.

        Args:
            k : multiplicative constant vector
        """
        return _blocks_swig3.multiply_const_vss_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(multiply_const_vss self) -> std::vector< short,std::allocator< short > >

        Return multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vss_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_vss self, std::vector< short,std::allocator< short > > k)

        Set multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vss_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_vss
    __del__ = lambda self : None;
multiply_const_vss_swigregister = _blocks_swig3.multiply_const_vss_swigregister
multiply_const_vss_swigregister(multiply_const_vss)

def multiply_const_vss_make(*args, **kwargs):
  """
    multiply_const_vss_make(std::vector< short,std::allocator< short > > k) -> multiply_const_vss_sptr

    output = input * constant vector (element-wise)

    Constructor Specific Documentation:

    Create an instance of multiply_const_vss.

    Args:
        k : multiplicative constant vector
    """
  return _blocks_swig3.multiply_const_vss_make(*args, **kwargs)

class multiply_const_vii(object):
    """
    output = input * constant vector (element-wise)

    Constructor Specific Documentation:

    Create an instance of multiply_const_vii.

    Args:
        k : multiplicative constant vector
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(std::vector< int,std::allocator< int > > k) -> multiply_const_vii_sptr

        output = input * constant vector (element-wise)

        Constructor Specific Documentation:

        Create an instance of multiply_const_vii.

        Args:
            k : multiplicative constant vector
        """
        return _blocks_swig3.multiply_const_vii_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(multiply_const_vii self) -> std::vector< int,std::allocator< int > >

        Return multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vii_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_vii self, std::vector< int,std::allocator< int > > k)

        Set multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vii_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_vii
    __del__ = lambda self : None;
multiply_const_vii_swigregister = _blocks_swig3.multiply_const_vii_swigregister
multiply_const_vii_swigregister(multiply_const_vii)

def multiply_const_vii_make(*args, **kwargs):
  """
    multiply_const_vii_make(std::vector< int,std::allocator< int > > k) -> multiply_const_vii_sptr

    output = input * constant vector (element-wise)

    Constructor Specific Documentation:

    Create an instance of multiply_const_vii.

    Args:
        k : multiplicative constant vector
    """
  return _blocks_swig3.multiply_const_vii_make(*args, **kwargs)

class multiply_const_vff(object):
    """
    output = input * constant vector (element-wise)

    Constructor Specific Documentation:

    Create an instance of multiply_const_vff.

    Args:
        k : multiplicative constant vector
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(pmt_vector_float k) -> multiply_const_vff_sptr

        output = input * constant vector (element-wise)

        Constructor Specific Documentation:

        Create an instance of multiply_const_vff.

        Args:
            k : multiplicative constant vector
        """
        return _blocks_swig3.multiply_const_vff_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(multiply_const_vff self) -> pmt_vector_float

        Return multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vff_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_vff self, pmt_vector_float k)

        Set multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vff_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_vff
    __del__ = lambda self : None;
multiply_const_vff_swigregister = _blocks_swig3.multiply_const_vff_swigregister
multiply_const_vff_swigregister(multiply_const_vff)

def multiply_const_vff_make(*args, **kwargs):
  """
    multiply_const_vff_make(pmt_vector_float k) -> multiply_const_vff_sptr

    output = input * constant vector (element-wise)

    Constructor Specific Documentation:

    Create an instance of multiply_const_vff.

    Args:
        k : multiplicative constant vector
    """
  return _blocks_swig3.multiply_const_vff_make(*args, **kwargs)

class multiply_const_vcc(object):
    """
    output = input * constant vector (element-wise)

    Constructor Specific Documentation:

    Create an instance of multiply_const_vcc.

    Args:
        k : multiplicative constant vector
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(pmt_vector_cfloat k) -> multiply_const_vcc_sptr

        output = input * constant vector (element-wise)

        Constructor Specific Documentation:

        Create an instance of multiply_const_vcc.

        Args:
            k : multiplicative constant vector
        """
        return _blocks_swig3.multiply_const_vcc_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(multiply_const_vcc self) -> pmt_vector_cfloat

        Return multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vcc_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_vcc self, pmt_vector_cfloat k)

        Set multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vcc_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_vcc
    __del__ = lambda self : None;
multiply_const_vcc_swigregister = _blocks_swig3.multiply_const_vcc_swigregister
multiply_const_vcc_swigregister(multiply_const_vcc)

def multiply_const_vcc_make(*args, **kwargs):
  """
    multiply_const_vcc_make(pmt_vector_cfloat k) -> multiply_const_vcc_sptr

    output = input * constant vector (element-wise)

    Constructor Specific Documentation:

    Create an instance of multiply_const_vcc.

    Args:
        k : multiplicative constant vector
    """
  return _blocks_swig3.multiply_const_vcc_make(*args, **kwargs)

class multiply_matrix_cc(object):
    """
    Matrix multiplexer/multiplier: y(k) = A x(k)

    This block is similar to gr::blocks::multiply_const_ff, the difference being it can handle several inputs and outputs, and the input-to-output relation can be described by the following mathematical equation:   and  are column-vectors describing the elements on the input port at time step  (this is a sync block with no memory).

    Examples for where to use this block include:


    This block features a special tag propagation mode: When setting the tag propagation policy to gr::block::TPP_CUSTOM, a tag is propagated from input  to output , if .


    Message Ports
    This block as one input message port (). A message sent to this port will be converted to a std::vector<std::vector<gr_complex> >, and then passed on to set_A(). If no conversion is possible, a warning is issued via the logging interface, and A remains unchanged.

    : It is not possible to change the dimension of the matrix after initialization, as this affects the I/O signature! If a matrix of invalid size is passed to the block, an alert is raised via the logging interface, and A remains unchanged.

    Constructor Specific Documentation:



    Args:
        A : The matrix
        tag_propagation_policy : The tag propagation policy. Note this can be any gr::block::tag_propagation_policy_t value. In case of TPP_CUSTOM, tags are only transferred from input  to output .
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(gr_vector_vector_complexf A, gr::block::tag_propagation_policy_t tag_propagation_policy=gr::block::TPP_ALL_TO_ALL) -> multiply_matrix_cc_sptr

        Matrix multiplexer/multiplier: y(k) = A x(k)

        This block is similar to gr::blocks::multiply_const_ff, the difference being it can handle several inputs and outputs, and the input-to-output relation can be described by the following mathematical equation:   and  are column-vectors describing the elements on the input port at time step  (this is a sync block with no memory).

        Examples for where to use this block include:


        This block features a special tag propagation mode: When setting the tag propagation policy to gr::block::TPP_CUSTOM, a tag is propagated from input  to output , if .


        Message Ports
        This block as one input message port (). A message sent to this port will be converted to a std::vector<std::vector<gr_complex> >, and then passed on to set_A(). If no conversion is possible, a warning is issued via the logging interface, and A remains unchanged.

        : It is not possible to change the dimension of the matrix after initialization, as this affects the I/O signature! If a matrix of invalid size is passed to the block, an alert is raised via the logging interface, and A remains unchanged.

        Constructor Specific Documentation:



        Args:
            A : The matrix
            tag_propagation_policy : The tag propagation policy. Note this can be any gr::block::tag_propagation_policy_t value. In case of TPP_CUSTOM, tags are only transferred from input  to output .
        """
        return _blocks_swig3.multiply_matrix_cc_make(*args, **kwargs)

    make = staticmethod(make)
    def get_A(self):
        """
        get_A(multiply_matrix_cc self) -> gr_vector_vector_complexf

        Returns the current matrix.
        """
        return _blocks_swig3.multiply_matrix_cc_get_A(self)

    def set_A(self, *args, **kwargs):
        """
        set_A(multiply_matrix_cc self, gr_vector_vector_complexf new_A) -> bool

        Sets the matrix to a new value . Returns true if the new matrix was valid and could be changed.
        """
        return _blocks_swig3.multiply_matrix_cc_set_A(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig3.delete_multiply_matrix_cc
    __del__ = lambda self : None;
multiply_matrix_cc_swigregister = _blocks_swig3.multiply_matrix_cc_swigregister
multiply_matrix_cc_swigregister(multiply_matrix_cc)

def multiply_matrix_cc_make(*args, **kwargs):
  """
    multiply_matrix_cc_make(gr_vector_vector_complexf A, gr::block::tag_propagation_policy_t tag_propagation_policy=gr::block::TPP_ALL_TO_ALL) -> multiply_matrix_cc_sptr

    Matrix multiplexer/multiplier: y(k) = A x(k)

    This block is similar to gr::blocks::multiply_const_ff, the difference being it can handle several inputs and outputs, and the input-to-output relation can be described by the following mathematical equation:   and  are column-vectors describing the elements on the input port at time step  (this is a sync block with no memory).

    Examples for where to use this block include:


    This block features a special tag propagation mode: When setting the tag propagation policy to gr::block::TPP_CUSTOM, a tag is propagated from input  to output , if .


    Message Ports
    This block as one input message port (). A message sent to this port will be converted to a std::vector<std::vector<gr_complex> >, and then passed on to set_A(). If no conversion is possible, a warning is issued via the logging interface, and A remains unchanged.

    : It is not possible to change the dimension of the matrix after initialization, as this affects the I/O signature! If a matrix of invalid size is passed to the block, an alert is raised via the logging interface, and A remains unchanged.

    Constructor Specific Documentation:



    Args:
        A : The matrix
        tag_propagation_policy : The tag propagation policy. Note this can be any gr::block::tag_propagation_policy_t value. In case of TPP_CUSTOM, tags are only transferred from input  to output .
    """
  return _blocks_swig3.multiply_matrix_cc_make(*args, **kwargs)
cvar = _blocks_swig3.cvar
multiply_matrix_cc.MSG_PORT_NAME_SET_A = _blocks_swig3.cvar.multiply_matrix_cc_MSG_PORT_NAME_SET_A

class multiply_matrix_ff(object):
    """
    Matrix multiplexer/multiplier: y(k) = A x(k)

    This block is similar to gr::blocks::multiply_const_ff, the difference being it can handle several inputs and outputs, and the input-to-output relation can be described by the following mathematical equation:   and  are column-vectors describing the elements on the input port at time step  (this is a sync block with no memory).

    Examples for where to use this block include:


    This block features a special tag propagation mode: When setting the tag propagation policy to gr::block::TPP_CUSTOM, a tag is propagated from input  to output , if .


    Message Ports
    This block as one input message port (). A message sent to this port will be converted to a std::vector<std::vector<float> >, and then passed on to set_A(). If no conversion is possible, a warning is issued via the logging interface, and A remains unchanged.

    : It is not possible to change the dimension of the matrix after initialization, as this affects the I/O signature! If a matrix of invalid size is passed to the block, an alert is raised via the logging interface, and A remains unchanged.

    Constructor Specific Documentation:



    Args:
        A : The matrix
        tag_propagation_policy : The tag propagation policy. Note this can be any gr::block::tag_propagation_policy_t value. In case of TPP_CUSTOM, tags are only transferred from input  to output .
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > A, 
            gr::block::tag_propagation_policy_t tag_propagation_policy=gr::block::TPP_ALL_TO_ALL) -> multiply_matrix_ff_sptr

        Matrix multiplexer/multiplier: y(k) = A x(k)

        This block is similar to gr::blocks::multiply_const_ff, the difference being it can handle several inputs and outputs, and the input-to-output relation can be described by the following mathematical equation:   and  are column-vectors describing the elements on the input port at time step  (this is a sync block with no memory).

        Examples for where to use this block include:


        This block features a special tag propagation mode: When setting the tag propagation policy to gr::block::TPP_CUSTOM, a tag is propagated from input  to output , if .


        Message Ports
        This block as one input message port (). A message sent to this port will be converted to a std::vector<std::vector<float> >, and then passed on to set_A(). If no conversion is possible, a warning is issued via the logging interface, and A remains unchanged.

        : It is not possible to change the dimension of the matrix after initialization, as this affects the I/O signature! If a matrix of invalid size is passed to the block, an alert is raised via the logging interface, and A remains unchanged.

        Constructor Specific Documentation:



        Args:
            A : The matrix
            tag_propagation_policy : The tag propagation policy. Note this can be any gr::block::tag_propagation_policy_t value. In case of TPP_CUSTOM, tags are only transferred from input  to output .
        """
        return _blocks_swig3.multiply_matrix_ff_make(*args, **kwargs)

    make = staticmethod(make)
    def get_A(self):
        """
        get_A(multiply_matrix_ff self) -> std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const &

        Returns the current matrix.
        """
        return _blocks_swig3.multiply_matrix_ff_get_A(self)

    def set_A(self, *args, **kwargs):
        """
        set_A(multiply_matrix_ff self, std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const & new_A) -> bool

        Sets the matrix to a new value . Returns true if the new matrix was valid and could be changed.
        """
        return _blocks_swig3.multiply_matrix_ff_set_A(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig3.delete_multiply_matrix_ff
    __del__ = lambda self : None;
multiply_matrix_ff_swigregister = _blocks_swig3.multiply_matrix_ff_swigregister
multiply_matrix_ff_swigregister(multiply_matrix_ff)

def multiply_matrix_ff_make(*args, **kwargs):
  """
    multiply_matrix_ff_make(std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > A, 
        gr::block::tag_propagation_policy_t tag_propagation_policy=gr::block::TPP_ALL_TO_ALL) -> multiply_matrix_ff_sptr

    Matrix multiplexer/multiplier: y(k) = A x(k)

    This block is similar to gr::blocks::multiply_const_ff, the difference being it can handle several inputs and outputs, and the input-to-output relation can be described by the following mathematical equation:   and  are column-vectors describing the elements on the input port at time step  (this is a sync block with no memory).

    Examples for where to use this block include:


    This block features a special tag propagation mode: When setting the tag propagation policy to gr::block::TPP_CUSTOM, a tag is propagated from input  to output , if .


    Message Ports
    This block as one input message port (). A message sent to this port will be converted to a std::vector<std::vector<float> >, and then passed on to set_A(). If no conversion is possible, a warning is issued via the logging interface, and A remains unchanged.

    : It is not possible to change the dimension of the matrix after initialization, as this affects the I/O signature! If a matrix of invalid size is passed to the block, an alert is raised via the logging interface, and A remains unchanged.

    Constructor Specific Documentation:



    Args:
        A : The matrix
        tag_propagation_policy : The tag propagation policy. Note this can be any gr::block::tag_propagation_policy_t value. In case of TPP_CUSTOM, tags are only transferred from input  to output .
    """
  return _blocks_swig3.multiply_matrix_ff_make(*args, **kwargs)
multiply_matrix_ff.MSG_PORT_NAME_SET_A = _blocks_swig3.cvar.multiply_matrix_ff_MSG_PORT_NAME_SET_A

class multiply_by_tag_value_cc(object):
    """
    output = input * complex constant

    The complex constant used by this block is found from a tag with the name specified by . The tag must contain a float/double or complex PMT value that will be converted into a gr_complex value. All input data is multiplied by this value until a new tag with an update value is found. The block starts with a value of '1.0' for the multiplier constant.

    Constructor Specific Documentation:

    Create an instance of multiply_by_tag_value_cc.

    Args:
        tag_name : Tag's key that it will use to get the multiplicative constant.
        vlen : Vector length of incoming stream
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(std::string const & tag_name, size_t vlen=1) -> multiply_by_tag_value_cc_sptr

        output = input * complex constant

        The complex constant used by this block is found from a tag with the name specified by . The tag must contain a float/double or complex PMT value that will be converted into a gr_complex value. All input data is multiplied by this value until a new tag with an update value is found. The block starts with a value of '1.0' for the multiplier constant.

        Constructor Specific Documentation:

        Create an instance of multiply_by_tag_value_cc.

        Args:
            tag_name : Tag's key that it will use to get the multiplicative constant.
            vlen : Vector length of incoming stream
        """
        return _blocks_swig3.multiply_by_tag_value_cc_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(multiply_by_tag_value_cc self) -> gr_complex

        Get the current multiplicative constant. This block does not allow external setters.
        """
        return _blocks_swig3.multiply_by_tag_value_cc_k(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_by_tag_value_cc
    __del__ = lambda self : None;
multiply_by_tag_value_cc_swigregister = _blocks_swig3.multiply_by_tag_value_cc_swigregister
multiply_by_tag_value_cc_swigregister(multiply_by_tag_value_cc)

def multiply_by_tag_value_cc_make(*args, **kwargs):
  """
    multiply_by_tag_value_cc_make(std::string const & tag_name, size_t vlen=1) -> multiply_by_tag_value_cc_sptr

    output = input * complex constant

    The complex constant used by this block is found from a tag with the name specified by . The tag must contain a float/double or complex PMT value that will be converted into a gr_complex value. All input data is multiplied by this value until a new tag with an update value is found. The block starts with a value of '1.0' for the multiplier constant.

    Constructor Specific Documentation:

    Create an instance of multiply_by_tag_value_cc.

    Args:
        tag_name : Tag's key that it will use to get the multiplicative constant.
        vlen : Vector length of incoming stream
    """
  return _blocks_swig3.multiply_by_tag_value_cc_make(*args, **kwargs)

class mute_ss(object):
    """
    output = input or zero if muted.

    Constructor Specific Documentation:



    Args:
        mute : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(mute=False):
        """
        make(bool mute=False) -> mute_ss_sptr

        output = input or zero if muted.

        Constructor Specific Documentation:



        Args:
            mute : 
        """
        return _blocks_swig3.mute_ss_make(mute)

    make = staticmethod(make)
    def mute(self):
        """mute(mute_ss self) -> bool"""
        return _blocks_swig3.mute_ss_mute(self)

    def set_mute(self, mute=False):
        """set_mute(mute_ss self, bool mute=False)"""
        return _blocks_swig3.mute_ss_set_mute(self, mute)

    __swig_destroy__ = _blocks_swig3.delete_mute_ss
    __del__ = lambda self : None;
mute_ss_swigregister = _blocks_swig3.mute_ss_swigregister
mute_ss_swigregister(mute_ss)

def mute_ss_make(mute=False):
  """
    mute_ss_make(bool mute=False) -> mute_ss_sptr

    output = input or zero if muted.

    Constructor Specific Documentation:



    Args:
        mute : 
    """
  return _blocks_swig3.mute_ss_make(mute)

class mute_ii(object):
    """
    output = input or zero if muted.

    Constructor Specific Documentation:



    Args:
        mute : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(mute=False):
        """
        make(bool mute=False) -> mute_ii_sptr

        output = input or zero if muted.

        Constructor Specific Documentation:



        Args:
            mute : 
        """
        return _blocks_swig3.mute_ii_make(mute)

    make = staticmethod(make)
    def mute(self):
        """mute(mute_ii self) -> bool"""
        return _blocks_swig3.mute_ii_mute(self)

    def set_mute(self, mute=False):
        """set_mute(mute_ii self, bool mute=False)"""
        return _blocks_swig3.mute_ii_set_mute(self, mute)

    __swig_destroy__ = _blocks_swig3.delete_mute_ii
    __del__ = lambda self : None;
mute_ii_swigregister = _blocks_swig3.mute_ii_swigregister
mute_ii_swigregister(mute_ii)

def mute_ii_make(mute=False):
  """
    mute_ii_make(bool mute=False) -> mute_ii_sptr

    output = input or zero if muted.

    Constructor Specific Documentation:



    Args:
        mute : 
    """
  return _blocks_swig3.mute_ii_make(mute)

class mute_ff(object):
    """
    output = input or zero if muted.

    Constructor Specific Documentation:



    Args:
        mute : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(mute=False):
        """
        make(bool mute=False) -> mute_ff_sptr

        output = input or zero if muted.

        Constructor Specific Documentation:



        Args:
            mute : 
        """
        return _blocks_swig3.mute_ff_make(mute)

    make = staticmethod(make)
    def mute(self):
        """mute(mute_ff self) -> bool"""
        return _blocks_swig3.mute_ff_mute(self)

    def set_mute(self, mute=False):
        """set_mute(mute_ff self, bool mute=False)"""
        return _blocks_swig3.mute_ff_set_mute(self, mute)

    __swig_destroy__ = _blocks_swig3.delete_mute_ff
    __del__ = lambda self : None;
mute_ff_swigregister = _blocks_swig3.mute_ff_swigregister
mute_ff_swigregister(mute_ff)

def mute_ff_make(mute=False):
  """
    mute_ff_make(bool mute=False) -> mute_ff_sptr

    output = input or zero if muted.

    Constructor Specific Documentation:



    Args:
        mute : 
    """
  return _blocks_swig3.mute_ff_make(mute)

class mute_cc(object):
    """
    output = input or zero if muted.

    Constructor Specific Documentation:



    Args:
        mute : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(mute=False):
        """
        make(bool mute=False) -> mute_cc_sptr

        output = input or zero if muted.

        Constructor Specific Documentation:



        Args:
            mute : 
        """
        return _blocks_swig3.mute_cc_make(mute)

    make = staticmethod(make)
    def mute(self):
        """mute(mute_cc self) -> bool"""
        return _blocks_swig3.mute_cc_mute(self)

    def set_mute(self, mute=False):
        """set_mute(mute_cc self, bool mute=False)"""
        return _blocks_swig3.mute_cc_set_mute(self, mute)

    __swig_destroy__ = _blocks_swig3.delete_mute_cc
    __del__ = lambda self : None;
mute_cc_swigregister = _blocks_swig3.mute_cc_swigregister
mute_cc_swigregister(mute_cc)

def mute_cc_make(mute=False):
  """
    mute_cc_make(bool mute=False) -> mute_cc_sptr

    output = input or zero if muted.

    Constructor Specific Documentation:



    Args:
        mute : 
    """
  return _blocks_swig3.mute_cc_make(mute)

class multiply_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::multiply_ss)> self) -> multiply_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::multiply_ss)> self, multiply_ss p) -> multiply_ss_sptr
        """
        this = _blocks_swig3.new_multiply_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multiply_ss_sptr self) -> multiply_ss"""
        return _blocks_swig3.multiply_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_ss_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(multiply_ss_sptr self, size_t vlen=1) -> multiply_ss_sptr

        output = prod (input_0, input_1, ...)

        Multiply across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig3.multiply_ss_sptr_make(self, vlen)

    def history(self):
        """history(multiply_ss_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_ss_sptr self, int which, int delay)
        declare_sample_delay(multiply_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multiply_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multiply_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multiply_ss_sptr self) -> double"""
        return _blocks_swig3.multiply_ss_sptr_relative_rate(self)

    def start(self):
        """start(multiply_ss_sptr self) -> bool"""
        return _blocks_swig3.multiply_ss_sptr_start(self)

    def stop(self):
        """stop(multiply_ss_sptr self) -> bool"""
        return _blocks_swig3.multiply_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multiply_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multiply_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multiply_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multiply_ss_sptr self, int m)"""
        return _blocks_swig3.multiply_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_ss_sptr self)"""
        return _blocks_swig3.multiply_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_ss_sptr self) -> bool"""
        return _blocks_swig3.multiply_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multiply_ss_sptr self, int m)"""
        return _blocks_swig3.multiply_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multiply_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multiply_ss_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multiply_ss_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_ss_sptr self, int which) -> float
        pc_input_buffers_full(multiply_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_ss_sptr self, int which) -> float
        pc_output_buffers_full(multiply_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(multiply_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multiply_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_ss_sptr self)"""
        return _blocks_swig3.multiply_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multiply_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multiply_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multiply_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multiply_ss_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multiply_ss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multiply_ss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multiply_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multiply_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multiply_ss_sptr self) -> long"""
        return _blocks_swig3.multiply_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multiply_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multiply_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multiply_ss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multiply_ss_sptr self, std::string name)"""
        return _blocks_swig3.multiply_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multiply_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.multiply_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multiply_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multiply_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multiply_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.multiply_ss_sptr_message_subscribers(self, *args, **kwargs)

multiply_ss_sptr_swigregister = _blocks_swig3.multiply_ss_sptr_swigregister
multiply_ss_sptr_swigregister(multiply_ss_sptr)

multiply_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_ss = multiply_ss.make;

class multiply_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::multiply_ii)> self) -> multiply_ii_sptr
        __init__(boost::shared_ptr<(gr::blocks::multiply_ii)> self, multiply_ii p) -> multiply_ii_sptr
        """
        this = _blocks_swig3.new_multiply_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multiply_ii_sptr self) -> multiply_ii"""
        return _blocks_swig3.multiply_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_ii_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(multiply_ii_sptr self, size_t vlen=1) -> multiply_ii_sptr

        output = prod (input_0, input_1, ...)

        Multiply across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig3.multiply_ii_sptr_make(self, vlen)

    def history(self):
        """history(multiply_ii_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_ii_sptr self, int which, int delay)
        declare_sample_delay(multiply_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multiply_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multiply_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multiply_ii_sptr self) -> double"""
        return _blocks_swig3.multiply_ii_sptr_relative_rate(self)

    def start(self):
        """start(multiply_ii_sptr self) -> bool"""
        return _blocks_swig3.multiply_ii_sptr_start(self)

    def stop(self):
        """stop(multiply_ii_sptr self) -> bool"""
        return _blocks_swig3.multiply_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multiply_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multiply_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multiply_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multiply_ii_sptr self, int m)"""
        return _blocks_swig3.multiply_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_ii_sptr self)"""
        return _blocks_swig3.multiply_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_ii_sptr self) -> bool"""
        return _blocks_swig3.multiply_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multiply_ii_sptr self, int m)"""
        return _blocks_swig3.multiply_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multiply_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multiply_ii_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multiply_ii_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_ii_sptr self, int which) -> float
        pc_input_buffers_full(multiply_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_ii_sptr self, int which) -> float
        pc_output_buffers_full(multiply_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(multiply_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multiply_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_ii_sptr self)"""
        return _blocks_swig3.multiply_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multiply_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multiply_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multiply_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multiply_ii_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multiply_ii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multiply_ii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multiply_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multiply_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multiply_ii_sptr self) -> long"""
        return _blocks_swig3.multiply_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multiply_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multiply_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multiply_ii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multiply_ii_sptr self, std::string name)"""
        return _blocks_swig3.multiply_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multiply_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.multiply_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multiply_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multiply_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multiply_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.multiply_ii_sptr_message_subscribers(self, *args, **kwargs)

multiply_ii_sptr_swigregister = _blocks_swig3.multiply_ii_sptr_swigregister
multiply_ii_sptr_swigregister(multiply_ii_sptr)

multiply_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_ii = multiply_ii.make;

class multiply_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::multiply_ff)> self) -> multiply_ff_sptr
        __init__(boost::shared_ptr<(gr::blocks::multiply_ff)> self, multiply_ff p) -> multiply_ff_sptr
        """
        this = _blocks_swig3.new_multiply_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multiply_ff_sptr self) -> multiply_ff"""
        return _blocks_swig3.multiply_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_ff_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(multiply_ff_sptr self, size_t vlen=1) -> multiply_ff_sptr

        output = prod (input_0, input_1, ...)

        Multiply across all input streams.

        Constructor Specific Documentation:

        Multiply streams of float values.

        Args:
            vlen : Vector length
        """
        return _blocks_swig3.multiply_ff_sptr_make(self, vlen)

    def history(self):
        """history(multiply_ff_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_ff_sptr self, int which, int delay)
        declare_sample_delay(multiply_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multiply_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multiply_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multiply_ff_sptr self) -> double"""
        return _blocks_swig3.multiply_ff_sptr_relative_rate(self)

    def start(self):
        """start(multiply_ff_sptr self) -> bool"""
        return _blocks_swig3.multiply_ff_sptr_start(self)

    def stop(self):
        """stop(multiply_ff_sptr self) -> bool"""
        return _blocks_swig3.multiply_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multiply_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multiply_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multiply_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multiply_ff_sptr self, int m)"""
        return _blocks_swig3.multiply_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_ff_sptr self)"""
        return _blocks_swig3.multiply_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_ff_sptr self) -> bool"""
        return _blocks_swig3.multiply_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multiply_ff_sptr self, int m)"""
        return _blocks_swig3.multiply_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multiply_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multiply_ff_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multiply_ff_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_ff_sptr self, int which) -> float
        pc_input_buffers_full(multiply_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_ff_sptr self, int which) -> float
        pc_output_buffers_full(multiply_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(multiply_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multiply_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_ff_sptr self)"""
        return _blocks_swig3.multiply_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multiply_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multiply_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multiply_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multiply_ff_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multiply_ff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multiply_ff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multiply_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multiply_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multiply_ff_sptr self) -> long"""
        return _blocks_swig3.multiply_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multiply_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multiply_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multiply_ff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multiply_ff_sptr self, std::string name)"""
        return _blocks_swig3.multiply_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multiply_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.multiply_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multiply_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multiply_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multiply_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.multiply_ff_sptr_message_subscribers(self, *args, **kwargs)

multiply_ff_sptr_swigregister = _blocks_swig3.multiply_ff_sptr_swigregister
multiply_ff_sptr_swigregister(multiply_ff_sptr)

multiply_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_ff = multiply_ff.make;

class multiply_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::multiply_cc)> self) -> multiply_cc_sptr
        __init__(boost::shared_ptr<(gr::blocks::multiply_cc)> self, multiply_cc p) -> multiply_cc_sptr
        """
        this = _blocks_swig3.new_multiply_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multiply_cc_sptr self) -> multiply_cc"""
        return _blocks_swig3.multiply_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_cc_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(multiply_cc_sptr self, size_t vlen=1) -> multiply_cc_sptr

        output = prod (input_0, input_1, ...)

        Multiply across all input streams.

        Constructor Specific Documentation:

        Multiply streams of complex values.

        Args:
            vlen : Vector length
        """
        return _blocks_swig3.multiply_cc_sptr_make(self, vlen)

    def history(self):
        """history(multiply_cc_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_cc_sptr self, int which, int delay)
        declare_sample_delay(multiply_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multiply_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multiply_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multiply_cc_sptr self) -> double"""
        return _blocks_swig3.multiply_cc_sptr_relative_rate(self)

    def start(self):
        """start(multiply_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_cc_sptr_start(self)

    def stop(self):
        """stop(multiply_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multiply_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multiply_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multiply_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multiply_cc_sptr self, int m)"""
        return _blocks_swig3.multiply_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_cc_sptr self)"""
        return _blocks_swig3.multiply_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multiply_cc_sptr self, int m)"""
        return _blocks_swig3.multiply_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multiply_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multiply_cc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multiply_cc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_cc_sptr self, int which) -> float
        pc_input_buffers_full(multiply_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_cc_sptr self, int which) -> float
        pc_output_buffers_full(multiply_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(multiply_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multiply_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_cc_sptr self)"""
        return _blocks_swig3.multiply_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multiply_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multiply_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multiply_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multiply_cc_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multiply_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multiply_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multiply_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multiply_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multiply_cc_sptr self) -> long"""
        return _blocks_swig3.multiply_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multiply_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multiply_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multiply_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multiply_cc_sptr self, std::string name)"""
        return _blocks_swig3.multiply_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multiply_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.multiply_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multiply_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multiply_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multiply_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.multiply_cc_sptr_message_subscribers(self, *args, **kwargs)

multiply_cc_sptr_swigregister = _blocks_swig3.multiply_cc_sptr_swigregister
multiply_cc_sptr_swigregister(multiply_cc_sptr)

multiply_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_cc = multiply_cc.make;

class multiply_conjugate_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_conjugate_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::multiply_conjugate_cc)> self) -> multiply_conjugate_cc_sptr
        __init__(boost::shared_ptr<(gr::blocks::multiply_conjugate_cc)> self, multiply_conjugate_cc p) -> multiply_conjugate_cc_sptr
        """
        this = _blocks_swig3.new_multiply_conjugate_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multiply_conjugate_cc_sptr self) -> multiply_conjugate_cc"""
        return _blocks_swig3.multiply_conjugate_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_conjugate_cc_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(multiply_conjugate_cc_sptr self, size_t vlen=1) -> multiply_conjugate_cc_sptr

        Multiplies stream 0 by the complex conjugate of stream 1.

        Constructor Specific Documentation:

        Multiplies a streams by the conjugate of a second stream.

        Args:
            vlen : Vector length
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_make(self, vlen)

    def history(self):
        """history(multiply_conjugate_cc_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_conjugate_cc_sptr self, int which, int delay)
        declare_sample_delay(multiply_conjugate_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multiply_conjugate_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multiply_conjugate_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multiply_conjugate_cc_sptr self) -> double"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_relative_rate(self)

    def start(self):
        """start(multiply_conjugate_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_start(self)

    def stop(self):
        """stop(multiply_conjugate_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multiply_conjugate_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multiply_conjugate_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multiply_conjugate_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multiply_conjugate_cc_sptr self, int m)"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_conjugate_cc_sptr self)"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_conjugate_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multiply_conjugate_cc_sptr self, int m)"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multiply_conjugate_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multiply_conjugate_cc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_conjugate_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_conjugate_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multiply_conjugate_cc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_conjugate_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_conjugate_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_conjugate_cc_sptr self, int which) -> float
        pc_input_buffers_full(multiply_conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_conjugate_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_conjugate_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_conjugate_cc_sptr self, int which) -> float
        pc_output_buffers_full(multiply_conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_conjugate_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_conjugate_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_conjugate_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(multiply_conjugate_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multiply_conjugate_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_conjugate_cc_sptr self)"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multiply_conjugate_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multiply_conjugate_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multiply_conjugate_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multiply_conjugate_cc_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multiply_conjugate_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multiply_conjugate_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multiply_conjugate_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multiply_conjugate_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multiply_conjugate_cc_sptr self) -> long"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multiply_conjugate_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multiply_conjugate_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multiply_conjugate_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multiply_conjugate_cc_sptr self, std::string name)"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multiply_conjugate_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.multiply_conjugate_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multiply_conjugate_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multiply_conjugate_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multiply_conjugate_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.multiply_conjugate_cc_sptr_message_subscribers(self, *args, **kwargs)

multiply_conjugate_cc_sptr_swigregister = _blocks_swig3.multiply_conjugate_cc_sptr_swigregister
multiply_conjugate_cc_sptr_swigregister(multiply_conjugate_cc_sptr)

multiply_conjugate_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_conjugate_cc = multiply_conjugate_cc.make;

class multiply_const_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_const_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_ss)> self) -> multiply_const_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_ss)> self, multiply_const_ss p) -> multiply_const_ss_sptr
        """
        this = _blocks_swig3.new_multiply_const_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multiply_const_ss_sptr self) -> multiply_const_ss"""
        return _blocks_swig3.multiply_const_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_ss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(multiply_const_ss_sptr self, short k) -> multiply_const_ss_sptr

        output = input * constant

        Constructor Specific Documentation:

        Create an instance of multiply_const_ss.

        Args:
            k : multiplicative constant
        """
        return _blocks_swig3.multiply_const_ss_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(multiply_const_ss_sptr self) -> short

        Return multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ss_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_ss_sptr self, short k)

        Set multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ss_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(multiply_const_ss_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_const_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_const_ss_sptr self, int which, int delay)
        declare_sample_delay(multiply_const_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_const_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multiply_const_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_const_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multiply_const_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multiply_const_ss_sptr self) -> double"""
        return _blocks_swig3.multiply_const_ss_sptr_relative_rate(self)

    def start(self):
        """start(multiply_const_ss_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_ss_sptr_start(self)

    def stop(self):
        """stop(multiply_const_ss_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multiply_const_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_const_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multiply_const_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_const_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multiply_const_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multiply_const_ss_sptr self, int m)"""
        return _blocks_swig3.multiply_const_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_const_ss_sptr self)"""
        return _blocks_swig3.multiply_const_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_const_ss_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multiply_const_ss_sptr self, int m)"""
        return _blocks_swig3.multiply_const_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multiply_const_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multiply_const_ss_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_const_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_const_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_const_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multiply_const_ss_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_const_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_const_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_const_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_const_ss_sptr self, int which) -> float
        pc_input_buffers_full(multiply_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_const_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_const_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_const_ss_sptr self, int which) -> float
        pc_output_buffers_full(multiply_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_const_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_const_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(multiply_const_ss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multiply_const_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_const_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_const_ss_sptr self)"""
        return _blocks_swig3.multiply_const_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multiply_const_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_const_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multiply_const_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multiply_const_ss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multiply_const_ss_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_const_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multiply_const_ss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multiply_const_ss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multiply_const_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multiply_const_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multiply_const_ss_sptr self) -> long"""
        return _blocks_swig3.multiply_const_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multiply_const_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_const_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multiply_const_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_const_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multiply_const_ss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multiply_const_ss_sptr self, std::string name)"""
        return _blocks_swig3.multiply_const_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multiply_const_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.multiply_const_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multiply_const_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multiply_const_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multiply_const_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_ss_sptr_message_subscribers(self, *args, **kwargs)

multiply_const_ss_sptr_swigregister = _blocks_swig3.multiply_const_ss_sptr_swigregister
multiply_const_ss_sptr_swigregister(multiply_const_ss_sptr)

multiply_const_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_ss = multiply_const_ss.make;

class multiply_const_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_const_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_ii)> self) -> multiply_const_ii_sptr
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_ii)> self, multiply_const_ii p) -> multiply_const_ii_sptr
        """
        this = _blocks_swig3.new_multiply_const_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multiply_const_ii_sptr self) -> multiply_const_ii"""
        return _blocks_swig3.multiply_const_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_ii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(multiply_const_ii_sptr self, int k) -> multiply_const_ii_sptr

        output = input * constant

        Constructor Specific Documentation:

        Create an instance of multiply_const_ii.

        Args:
            k : multiplicative constant
        """
        return _blocks_swig3.multiply_const_ii_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(multiply_const_ii_sptr self) -> int

        Return multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ii_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_ii_sptr self, int k)

        Set multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ii_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(multiply_const_ii_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_const_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_const_ii_sptr self, int which, int delay)
        declare_sample_delay(multiply_const_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_const_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multiply_const_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_const_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multiply_const_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multiply_const_ii_sptr self) -> double"""
        return _blocks_swig3.multiply_const_ii_sptr_relative_rate(self)

    def start(self):
        """start(multiply_const_ii_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_ii_sptr_start(self)

    def stop(self):
        """stop(multiply_const_ii_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multiply_const_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_const_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multiply_const_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_const_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multiply_const_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multiply_const_ii_sptr self, int m)"""
        return _blocks_swig3.multiply_const_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_const_ii_sptr self)"""
        return _blocks_swig3.multiply_const_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_const_ii_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multiply_const_ii_sptr self, int m)"""
        return _blocks_swig3.multiply_const_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multiply_const_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multiply_const_ii_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_const_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_const_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_const_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multiply_const_ii_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_const_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_const_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_const_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_const_ii_sptr self, int which) -> float
        pc_input_buffers_full(multiply_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_const_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_const_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_const_ii_sptr self, int which) -> float
        pc_output_buffers_full(multiply_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_const_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_const_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(multiply_const_ii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multiply_const_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_const_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_const_ii_sptr self)"""
        return _blocks_swig3.multiply_const_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multiply_const_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_const_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multiply_const_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multiply_const_ii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multiply_const_ii_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_const_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multiply_const_ii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multiply_const_ii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multiply_const_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multiply_const_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multiply_const_ii_sptr self) -> long"""
        return _blocks_swig3.multiply_const_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multiply_const_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_const_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multiply_const_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_const_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multiply_const_ii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multiply_const_ii_sptr self, std::string name)"""
        return _blocks_swig3.multiply_const_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multiply_const_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.multiply_const_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multiply_const_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multiply_const_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multiply_const_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_ii_sptr_message_subscribers(self, *args, **kwargs)

multiply_const_ii_sptr_swigregister = _blocks_swig3.multiply_const_ii_sptr_swigregister
multiply_const_ii_sptr_swigregister(multiply_const_ii_sptr)

multiply_const_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_ii = multiply_const_ii.make;

class multiply_const_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_const_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_ff)> self) -> multiply_const_ff_sptr
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_ff)> self, multiply_const_ff p) -> multiply_const_ff_sptr
        """
        this = _blocks_swig3.new_multiply_const_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multiply_const_ff_sptr self) -> multiply_const_ff"""
        return _blocks_swig3.multiply_const_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(multiply_const_ff_sptr self, float k, size_t vlen=1) -> multiply_const_ff_sptr

        output = input * real constant

        Constructor Specific Documentation:

        Create an instance of multiply_const_ff.

        Args:
            k : real multiplicative constant
            vlen : Vector length of incoming stream
        """
        return _blocks_swig3.multiply_const_ff_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(multiply_const_ff_sptr self) -> float

        Return real multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ff_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_ff_sptr self, float k)

        Set real multiplicative constant.
        """
        return _blocks_swig3.multiply_const_ff_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(multiply_const_ff_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_const_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_const_ff_sptr self, int which, int delay)
        declare_sample_delay(multiply_const_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_const_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multiply_const_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_const_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multiply_const_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multiply_const_ff_sptr self) -> double"""
        return _blocks_swig3.multiply_const_ff_sptr_relative_rate(self)

    def start(self):
        """start(multiply_const_ff_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_ff_sptr_start(self)

    def stop(self):
        """stop(multiply_const_ff_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multiply_const_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_const_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multiply_const_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_const_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multiply_const_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multiply_const_ff_sptr self, int m)"""
        return _blocks_swig3.multiply_const_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_const_ff_sptr self)"""
        return _blocks_swig3.multiply_const_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_const_ff_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multiply_const_ff_sptr self, int m)"""
        return _blocks_swig3.multiply_const_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multiply_const_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multiply_const_ff_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_const_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_const_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_const_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multiply_const_ff_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_const_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_const_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_const_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_const_ff_sptr self, int which) -> float
        pc_input_buffers_full(multiply_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_const_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_const_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_const_ff_sptr self, int which) -> float
        pc_output_buffers_full(multiply_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_const_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_const_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(multiply_const_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multiply_const_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_const_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_const_ff_sptr self)"""
        return _blocks_swig3.multiply_const_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multiply_const_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_const_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multiply_const_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multiply_const_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multiply_const_ff_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_const_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multiply_const_ff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multiply_const_ff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multiply_const_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multiply_const_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multiply_const_ff_sptr self) -> long"""
        return _blocks_swig3.multiply_const_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multiply_const_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_const_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multiply_const_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_const_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multiply_const_ff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multiply_const_ff_sptr self, std::string name)"""
        return _blocks_swig3.multiply_const_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multiply_const_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.multiply_const_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multiply_const_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multiply_const_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multiply_const_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_ff_sptr_message_subscribers(self, *args, **kwargs)

multiply_const_ff_sptr_swigregister = _blocks_swig3.multiply_const_ff_sptr_swigregister
multiply_const_ff_sptr_swigregister(multiply_const_ff_sptr)

multiply_const_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_ff = multiply_const_ff.make;

class multiply_const_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_const_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_cc)> self) -> multiply_const_cc_sptr
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_cc)> self, multiply_const_cc p) -> multiply_const_cc_sptr
        """
        this = _blocks_swig3.new_multiply_const_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multiply_const_cc_sptr self) -> multiply_const_cc"""
        return _blocks_swig3.multiply_const_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(multiply_const_cc_sptr self, gr_complex k, size_t vlen=1) -> multiply_const_cc_sptr

        output = input * complex constant

        Constructor Specific Documentation:

        Create an instance of multiply_const_cc.

        Args:
            k : complex multiplicative constant
            vlen : Vector length of incoming stream
        """
        return _blocks_swig3.multiply_const_cc_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(multiply_const_cc_sptr self) -> gr_complex

        Return complex multiplicative constant.
        """
        return _blocks_swig3.multiply_const_cc_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_cc_sptr self, gr_complex k)

        Set complex multiplicative constant.
        """
        return _blocks_swig3.multiply_const_cc_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(multiply_const_cc_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_const_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_const_cc_sptr self, int which, int delay)
        declare_sample_delay(multiply_const_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_const_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multiply_const_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_const_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multiply_const_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multiply_const_cc_sptr self) -> double"""
        return _blocks_swig3.multiply_const_cc_sptr_relative_rate(self)

    def start(self):
        """start(multiply_const_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_cc_sptr_start(self)

    def stop(self):
        """stop(multiply_const_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multiply_const_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_const_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multiply_const_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_const_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multiply_const_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multiply_const_cc_sptr self, int m)"""
        return _blocks_swig3.multiply_const_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_const_cc_sptr self)"""
        return _blocks_swig3.multiply_const_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_const_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multiply_const_cc_sptr self, int m)"""
        return _blocks_swig3.multiply_const_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multiply_const_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multiply_const_cc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_const_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_const_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_const_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multiply_const_cc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_const_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_const_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_const_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_const_cc_sptr self, int which) -> float
        pc_input_buffers_full(multiply_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_const_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_const_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_const_cc_sptr self, int which) -> float
        pc_output_buffers_full(multiply_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_const_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_const_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(multiply_const_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multiply_const_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_const_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_const_cc_sptr self)"""
        return _blocks_swig3.multiply_const_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multiply_const_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_const_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multiply_const_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multiply_const_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multiply_const_cc_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_const_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multiply_const_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multiply_const_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multiply_const_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multiply_const_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multiply_const_cc_sptr self) -> long"""
        return _blocks_swig3.multiply_const_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multiply_const_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_const_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multiply_const_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_const_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multiply_const_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multiply_const_cc_sptr self, std::string name)"""
        return _blocks_swig3.multiply_const_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multiply_const_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.multiply_const_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multiply_const_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multiply_const_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multiply_const_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_cc_sptr_message_subscribers(self, *args, **kwargs)

multiply_const_cc_sptr_swigregister = _blocks_swig3.multiply_const_cc_sptr_swigregister
multiply_const_cc_sptr_swigregister(multiply_const_cc_sptr)

multiply_const_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_cc = multiply_const_cc.make;

class multiply_const_vss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_const_vss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_vss)> self) -> multiply_const_vss_sptr
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_vss)> self, multiply_const_vss p) -> multiply_const_vss_sptr
        """
        this = _blocks_swig3.new_multiply_const_vss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multiply_const_vss_sptr self) -> multiply_const_vss"""
        return _blocks_swig3.multiply_const_vss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_vss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(multiply_const_vss_sptr self, std::vector< short,std::allocator< short > > k) -> multiply_const_vss_sptr

        output = input * constant vector (element-wise)

        Constructor Specific Documentation:

        Create an instance of multiply_const_vss.

        Args:
            k : multiplicative constant vector
        """
        return _blocks_swig3.multiply_const_vss_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(multiply_const_vss_sptr self) -> std::vector< short,std::allocator< short > >

        Return multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vss_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_vss_sptr self, std::vector< short,std::allocator< short > > k)

        Set multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vss_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(multiply_const_vss_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_const_vss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_const_vss_sptr self, int which, int delay)
        declare_sample_delay(multiply_const_vss_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_const_vss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multiply_const_vss_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_const_vss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multiply_const_vss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multiply_const_vss_sptr self) -> double"""
        return _blocks_swig3.multiply_const_vss_sptr_relative_rate(self)

    def start(self):
        """start(multiply_const_vss_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vss_sptr_start(self)

    def stop(self):
        """stop(multiply_const_vss_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multiply_const_vss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_const_vss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multiply_const_vss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_const_vss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multiply_const_vss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multiply_const_vss_sptr self, int m)"""
        return _blocks_swig3.multiply_const_vss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_const_vss_sptr self)"""
        return _blocks_swig3.multiply_const_vss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_const_vss_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multiply_const_vss_sptr self, int m)"""
        return _blocks_swig3.multiply_const_vss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multiply_const_vss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multiply_const_vss_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_vss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_const_vss_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_const_vss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_const_vss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multiply_const_vss_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_vss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_const_vss_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_const_vss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_const_vss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_const_vss_sptr self, int which) -> float
        pc_input_buffers_full(multiply_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_const_vss_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_const_vss_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_const_vss_sptr self, int which) -> float
        pc_output_buffers_full(multiply_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_const_vss_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_const_vss_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(multiply_const_vss_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multiply_const_vss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_const_vss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_const_vss_sptr self)"""
        return _blocks_swig3.multiply_const_vss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multiply_const_vss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_const_vss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multiply_const_vss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multiply_const_vss_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multiply_const_vss_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_const_vss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multiply_const_vss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multiply_const_vss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multiply_const_vss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_vss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multiply_const_vss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_vss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multiply_const_vss_sptr self) -> long"""
        return _blocks_swig3.multiply_const_vss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multiply_const_vss_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_const_vss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multiply_const_vss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_const_vss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multiply_const_vss_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multiply_const_vss_sptr self, std::string name)"""
        return _blocks_swig3.multiply_const_vss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multiply_const_vss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.multiply_const_vss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multiply_const_vss_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_vss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multiply_const_vss_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_vss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multiply_const_vss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_vss_sptr_message_subscribers(self, *args, **kwargs)

multiply_const_vss_sptr_swigregister = _blocks_swig3.multiply_const_vss_sptr_swigregister
multiply_const_vss_sptr_swigregister(multiply_const_vss_sptr)

multiply_const_vss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_vss = multiply_const_vss.make;

class multiply_const_vii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_const_vii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_vii)> self) -> multiply_const_vii_sptr
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_vii)> self, multiply_const_vii p) -> multiply_const_vii_sptr
        """
        this = _blocks_swig3.new_multiply_const_vii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multiply_const_vii_sptr self) -> multiply_const_vii"""
        return _blocks_swig3.multiply_const_vii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_vii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(multiply_const_vii_sptr self, std::vector< int,std::allocator< int > > k) -> multiply_const_vii_sptr

        output = input * constant vector (element-wise)

        Constructor Specific Documentation:

        Create an instance of multiply_const_vii.

        Args:
            k : multiplicative constant vector
        """
        return _blocks_swig3.multiply_const_vii_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(multiply_const_vii_sptr self) -> std::vector< int,std::allocator< int > >

        Return multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vii_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_vii_sptr self, std::vector< int,std::allocator< int > > k)

        Set multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vii_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(multiply_const_vii_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_const_vii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_const_vii_sptr self, int which, int delay)
        declare_sample_delay(multiply_const_vii_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_const_vii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multiply_const_vii_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_const_vii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multiply_const_vii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multiply_const_vii_sptr self) -> double"""
        return _blocks_swig3.multiply_const_vii_sptr_relative_rate(self)

    def start(self):
        """start(multiply_const_vii_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vii_sptr_start(self)

    def stop(self):
        """stop(multiply_const_vii_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multiply_const_vii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_const_vii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multiply_const_vii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_const_vii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multiply_const_vii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multiply_const_vii_sptr self, int m)"""
        return _blocks_swig3.multiply_const_vii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_const_vii_sptr self)"""
        return _blocks_swig3.multiply_const_vii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_const_vii_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multiply_const_vii_sptr self, int m)"""
        return _blocks_swig3.multiply_const_vii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multiply_const_vii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multiply_const_vii_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_vii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_const_vii_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_const_vii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_const_vii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multiply_const_vii_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_vii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_const_vii_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_const_vii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_const_vii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_const_vii_sptr self, int which) -> float
        pc_input_buffers_full(multiply_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_const_vii_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_const_vii_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_const_vii_sptr self, int which) -> float
        pc_output_buffers_full(multiply_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_const_vii_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_const_vii_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(multiply_const_vii_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multiply_const_vii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_const_vii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_const_vii_sptr self)"""
        return _blocks_swig3.multiply_const_vii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multiply_const_vii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_const_vii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multiply_const_vii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multiply_const_vii_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multiply_const_vii_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_const_vii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multiply_const_vii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multiply_const_vii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multiply_const_vii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_vii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multiply_const_vii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_vii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multiply_const_vii_sptr self) -> long"""
        return _blocks_swig3.multiply_const_vii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multiply_const_vii_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_const_vii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multiply_const_vii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_const_vii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multiply_const_vii_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multiply_const_vii_sptr self, std::string name)"""
        return _blocks_swig3.multiply_const_vii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multiply_const_vii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.multiply_const_vii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multiply_const_vii_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_vii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multiply_const_vii_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_vii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multiply_const_vii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_vii_sptr_message_subscribers(self, *args, **kwargs)

multiply_const_vii_sptr_swigregister = _blocks_swig3.multiply_const_vii_sptr_swigregister
multiply_const_vii_sptr_swigregister(multiply_const_vii_sptr)

multiply_const_vii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_vii = multiply_const_vii.make;

class multiply_const_vff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_const_vff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_vff)> self) -> multiply_const_vff_sptr
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_vff)> self, multiply_const_vff p) -> multiply_const_vff_sptr
        """
        this = _blocks_swig3.new_multiply_const_vff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multiply_const_vff_sptr self) -> multiply_const_vff"""
        return _blocks_swig3.multiply_const_vff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_vff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(multiply_const_vff_sptr self, pmt_vector_float k) -> multiply_const_vff_sptr

        output = input * constant vector (element-wise)

        Constructor Specific Documentation:

        Create an instance of multiply_const_vff.

        Args:
            k : multiplicative constant vector
        """
        return _blocks_swig3.multiply_const_vff_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(multiply_const_vff_sptr self) -> pmt_vector_float

        Return multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vff_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_vff_sptr self, pmt_vector_float k)

        Set multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vff_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(multiply_const_vff_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_const_vff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_const_vff_sptr self, int which, int delay)
        declare_sample_delay(multiply_const_vff_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_const_vff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multiply_const_vff_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_const_vff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multiply_const_vff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multiply_const_vff_sptr self) -> double"""
        return _blocks_swig3.multiply_const_vff_sptr_relative_rate(self)

    def start(self):
        """start(multiply_const_vff_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vff_sptr_start(self)

    def stop(self):
        """stop(multiply_const_vff_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multiply_const_vff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_const_vff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multiply_const_vff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_const_vff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multiply_const_vff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multiply_const_vff_sptr self, int m)"""
        return _blocks_swig3.multiply_const_vff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_const_vff_sptr self)"""
        return _blocks_swig3.multiply_const_vff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_const_vff_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multiply_const_vff_sptr self, int m)"""
        return _blocks_swig3.multiply_const_vff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multiply_const_vff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multiply_const_vff_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_vff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_const_vff_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_const_vff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_const_vff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multiply_const_vff_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_vff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_const_vff_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_const_vff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_const_vff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_const_vff_sptr self, int which) -> float
        pc_input_buffers_full(multiply_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_const_vff_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_const_vff_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_const_vff_sptr self, int which) -> float
        pc_output_buffers_full(multiply_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_const_vff_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_const_vff_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(multiply_const_vff_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multiply_const_vff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_const_vff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_const_vff_sptr self)"""
        return _blocks_swig3.multiply_const_vff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multiply_const_vff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_const_vff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multiply_const_vff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multiply_const_vff_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multiply_const_vff_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_const_vff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multiply_const_vff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multiply_const_vff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multiply_const_vff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_vff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multiply_const_vff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_vff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multiply_const_vff_sptr self) -> long"""
        return _blocks_swig3.multiply_const_vff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multiply_const_vff_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_const_vff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multiply_const_vff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_const_vff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multiply_const_vff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multiply_const_vff_sptr self, std::string name)"""
        return _blocks_swig3.multiply_const_vff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multiply_const_vff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.multiply_const_vff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multiply_const_vff_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_vff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multiply_const_vff_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_vff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multiply_const_vff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_vff_sptr_message_subscribers(self, *args, **kwargs)

multiply_const_vff_sptr_swigregister = _blocks_swig3.multiply_const_vff_sptr_swigregister
multiply_const_vff_sptr_swigregister(multiply_const_vff_sptr)

multiply_const_vff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_vff = multiply_const_vff.make;

class multiply_const_vcc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_const_vcc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_vcc)> self) -> multiply_const_vcc_sptr
        __init__(boost::shared_ptr<(gr::blocks::multiply_const_vcc)> self, multiply_const_vcc p) -> multiply_const_vcc_sptr
        """
        this = _blocks_swig3.new_multiply_const_vcc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multiply_const_vcc_sptr self) -> multiply_const_vcc"""
        return _blocks_swig3.multiply_const_vcc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_const_vcc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(multiply_const_vcc_sptr self, pmt_vector_cfloat k) -> multiply_const_vcc_sptr

        output = input * constant vector (element-wise)

        Constructor Specific Documentation:

        Create an instance of multiply_const_vcc.

        Args:
            k : multiplicative constant vector
        """
        return _blocks_swig3.multiply_const_vcc_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(multiply_const_vcc_sptr self) -> pmt_vector_cfloat

        Return multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vcc_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(multiply_const_vcc_sptr self, pmt_vector_cfloat k)

        Set multiplicative constant vector.
        """
        return _blocks_swig3.multiply_const_vcc_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(multiply_const_vcc_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_const_vcc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_const_vcc_sptr self, int which, int delay)
        declare_sample_delay(multiply_const_vcc_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_const_vcc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multiply_const_vcc_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_const_vcc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multiply_const_vcc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vcc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multiply_const_vcc_sptr self) -> double"""
        return _blocks_swig3.multiply_const_vcc_sptr_relative_rate(self)

    def start(self):
        """start(multiply_const_vcc_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vcc_sptr_start(self)

    def stop(self):
        """stop(multiply_const_vcc_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vcc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multiply_const_vcc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_const_vcc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multiply_const_vcc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_const_vcc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multiply_const_vcc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vcc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multiply_const_vcc_sptr self, int m)"""
        return _blocks_swig3.multiply_const_vcc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_const_vcc_sptr self)"""
        return _blocks_swig3.multiply_const_vcc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_const_vcc_sptr self) -> bool"""
        return _blocks_swig3.multiply_const_vcc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multiply_const_vcc_sptr self, int m)"""
        return _blocks_swig3.multiply_const_vcc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multiply_const_vcc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vcc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multiply_const_vcc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_vcc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_const_vcc_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_const_vcc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_const_vcc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multiply_const_vcc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_const_vcc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_const_vcc_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_const_vcc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_const_vcc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_const_vcc_sptr self, int which) -> float
        pc_input_buffers_full(multiply_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vcc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_const_vcc_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vcc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_const_vcc_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vcc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_const_vcc_sptr self, int which) -> float
        pc_output_buffers_full(multiply_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vcc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_const_vcc_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vcc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_const_vcc_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_const_vcc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(multiply_const_vcc_sptr self) -> float"""
        return _blocks_swig3.multiply_const_vcc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multiply_const_vcc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_const_vcc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_const_vcc_sptr self)"""
        return _blocks_swig3.multiply_const_vcc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multiply_const_vcc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_const_vcc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multiply_const_vcc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vcc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multiply_const_vcc_sptr self) -> int"""
        return _blocks_swig3.multiply_const_vcc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multiply_const_vcc_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_const_vcc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multiply_const_vcc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vcc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multiply_const_vcc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vcc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multiply_const_vcc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_vcc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multiply_const_vcc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_const_vcc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multiply_const_vcc_sptr self) -> long"""
        return _blocks_swig3.multiply_const_vcc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multiply_const_vcc_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_const_vcc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multiply_const_vcc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_const_vcc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multiply_const_vcc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_const_vcc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multiply_const_vcc_sptr self, std::string name)"""
        return _blocks_swig3.multiply_const_vcc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multiply_const_vcc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.multiply_const_vcc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multiply_const_vcc_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_vcc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multiply_const_vcc_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_vcc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multiply_const_vcc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.multiply_const_vcc_sptr_message_subscribers(self, *args, **kwargs)

multiply_const_vcc_sptr_swigregister = _blocks_swig3.multiply_const_vcc_sptr_swigregister
multiply_const_vcc_sptr_swigregister(multiply_const_vcc_sptr)

multiply_const_vcc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_const_vcc = multiply_const_vcc.make;

class multiply_matrix_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_matrix_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::multiply_matrix_cc)> self) -> multiply_matrix_cc_sptr
        __init__(boost::shared_ptr<(gr::blocks::multiply_matrix_cc)> self, multiply_matrix_cc p) -> multiply_matrix_cc_sptr
        """
        this = _blocks_swig3.new_multiply_matrix_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multiply_matrix_cc_sptr self) -> multiply_matrix_cc"""
        return _blocks_swig3.multiply_matrix_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_matrix_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(multiply_matrix_cc_sptr self, gr_vector_vector_complexf A, gr::block::tag_propagation_policy_t tag_propagation_policy=gr::block::TPP_ALL_TO_ALL) -> multiply_matrix_cc_sptr

        Matrix multiplexer/multiplier: y(k) = A x(k)

        This block is similar to gr::blocks::multiply_const_ff, the difference being it can handle several inputs and outputs, and the input-to-output relation can be described by the following mathematical equation:   and  are column-vectors describing the elements on the input port at time step  (this is a sync block with no memory).

        Examples for where to use this block include:


        This block features a special tag propagation mode: When setting the tag propagation policy to gr::block::TPP_CUSTOM, a tag is propagated from input  to output , if .


        Message Ports
        This block as one input message port (). A message sent to this port will be converted to a std::vector<std::vector<gr_complex> >, and then passed on to set_A(). If no conversion is possible, a warning is issued via the logging interface, and A remains unchanged.

        : It is not possible to change the dimension of the matrix after initialization, as this affects the I/O signature! If a matrix of invalid size is passed to the block, an alert is raised via the logging interface, and A remains unchanged.

        Constructor Specific Documentation:



        Args:
            A : The matrix
            tag_propagation_policy : The tag propagation policy. Note this can be any gr::block::tag_propagation_policy_t value. In case of TPP_CUSTOM, tags are only transferred from input  to output .
        """
        return _blocks_swig3.multiply_matrix_cc_sptr_make(self, *args, **kwargs)

    def get_A(self):
        """
        get_A(multiply_matrix_cc_sptr self) -> gr_vector_vector_complexf

        Returns the current matrix.
        """
        return _blocks_swig3.multiply_matrix_cc_sptr_get_A(self)

    def set_A(self, *args, **kwargs):
        """
        set_A(multiply_matrix_cc_sptr self, gr_vector_vector_complexf new_A) -> bool

        Sets the matrix to a new value . Returns true if the new matrix was valid and could be changed.
        """
        return _blocks_swig3.multiply_matrix_cc_sptr_set_A(self, *args, **kwargs)

    MSG_PORT_NAME_SET_A = _swig_property(_blocks_swig3.multiply_matrix_cc_sptr_MSG_PORT_NAME_SET_A_get)
    def history(self):
        """history(multiply_matrix_cc_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_matrix_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_matrix_cc_sptr self, int which, int delay)
        declare_sample_delay(multiply_matrix_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_matrix_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multiply_matrix_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_matrix_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multiply_matrix_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_matrix_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multiply_matrix_cc_sptr self) -> double"""
        return _blocks_swig3.multiply_matrix_cc_sptr_relative_rate(self)

    def start(self):
        """start(multiply_matrix_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_matrix_cc_sptr_start(self)

    def stop(self):
        """stop(multiply_matrix_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_matrix_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multiply_matrix_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_matrix_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multiply_matrix_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_matrix_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multiply_matrix_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_matrix_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multiply_matrix_cc_sptr self, int m)"""
        return _blocks_swig3.multiply_matrix_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_matrix_cc_sptr self)"""
        return _blocks_swig3.multiply_matrix_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_matrix_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_matrix_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multiply_matrix_cc_sptr self, int m)"""
        return _blocks_swig3.multiply_matrix_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multiply_matrix_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_matrix_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multiply_matrix_cc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_matrix_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_matrix_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_matrix_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_matrix_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multiply_matrix_cc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_matrix_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_matrix_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_matrix_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_matrix_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multiply_matrix_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_matrix_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_matrix_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multiply_matrix_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_matrix_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_matrix_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_matrix_cc_sptr self, int which) -> float
        pc_input_buffers_full(multiply_matrix_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_matrix_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_matrix_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_matrix_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_matrix_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_matrix_cc_sptr self, int which) -> float
        pc_output_buffers_full(multiply_matrix_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_matrix_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_matrix_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_matrix_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_matrix_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multiply_matrix_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_matrix_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multiply_matrix_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multiply_matrix_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(multiply_matrix_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multiply_matrix_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_matrix_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_matrix_cc_sptr self)"""
        return _blocks_swig3.multiply_matrix_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multiply_matrix_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_matrix_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multiply_matrix_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_matrix_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multiply_matrix_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_matrix_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multiply_matrix_cc_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_matrix_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multiply_matrix_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_matrix_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multiply_matrix_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_matrix_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multiply_matrix_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_matrix_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multiply_matrix_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_matrix_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multiply_matrix_cc_sptr self) -> long"""
        return _blocks_swig3.multiply_matrix_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multiply_matrix_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_matrix_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multiply_matrix_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_matrix_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multiply_matrix_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_matrix_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multiply_matrix_cc_sptr self, std::string name)"""
        return _blocks_swig3.multiply_matrix_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multiply_matrix_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.multiply_matrix_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multiply_matrix_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_matrix_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multiply_matrix_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_matrix_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multiply_matrix_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.multiply_matrix_cc_sptr_message_subscribers(self, *args, **kwargs)

multiply_matrix_cc_sptr_swigregister = _blocks_swig3.multiply_matrix_cc_sptr_swigregister
multiply_matrix_cc_sptr_swigregister(multiply_matrix_cc_sptr)

multiply_matrix_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_matrix_cc = multiply_matrix_cc.make;

class multiply_matrix_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_matrix_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::multiply_matrix_ff)> self) -> multiply_matrix_ff_sptr
        __init__(boost::shared_ptr<(gr::blocks::multiply_matrix_ff)> self, multiply_matrix_ff p) -> multiply_matrix_ff_sptr
        """
        this = _blocks_swig3.new_multiply_matrix_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multiply_matrix_ff_sptr self) -> multiply_matrix_ff"""
        return _blocks_swig3.multiply_matrix_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_matrix_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(multiply_matrix_ff_sptr self, std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > A, 
            gr::block::tag_propagation_policy_t tag_propagation_policy=gr::block::TPP_ALL_TO_ALL) -> multiply_matrix_ff_sptr

        Matrix multiplexer/multiplier: y(k) = A x(k)

        This block is similar to gr::blocks::multiply_const_ff, the difference being it can handle several inputs and outputs, and the input-to-output relation can be described by the following mathematical equation:   and  are column-vectors describing the elements on the input port at time step  (this is a sync block with no memory).

        Examples for where to use this block include:


        This block features a special tag propagation mode: When setting the tag propagation policy to gr::block::TPP_CUSTOM, a tag is propagated from input  to output , if .


        Message Ports
        This block as one input message port (). A message sent to this port will be converted to a std::vector<std::vector<float> >, and then passed on to set_A(). If no conversion is possible, a warning is issued via the logging interface, and A remains unchanged.

        : It is not possible to change the dimension of the matrix after initialization, as this affects the I/O signature! If a matrix of invalid size is passed to the block, an alert is raised via the logging interface, and A remains unchanged.

        Constructor Specific Documentation:



        Args:
            A : The matrix
            tag_propagation_policy : The tag propagation policy. Note this can be any gr::block::tag_propagation_policy_t value. In case of TPP_CUSTOM, tags are only transferred from input  to output .
        """
        return _blocks_swig3.multiply_matrix_ff_sptr_make(self, *args, **kwargs)

    def get_A(self):
        """
        get_A(multiply_matrix_ff_sptr self) -> std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const &

        Returns the current matrix.
        """
        return _blocks_swig3.multiply_matrix_ff_sptr_get_A(self)

    def set_A(self, *args, **kwargs):
        """
        set_A(multiply_matrix_ff_sptr self, std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const & new_A) -> bool

        Sets the matrix to a new value . Returns true if the new matrix was valid and could be changed.
        """
        return _blocks_swig3.multiply_matrix_ff_sptr_set_A(self, *args, **kwargs)

    MSG_PORT_NAME_SET_A = _swig_property(_blocks_swig3.multiply_matrix_ff_sptr_MSG_PORT_NAME_SET_A_get)
    def history(self):
        """history(multiply_matrix_ff_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_matrix_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_matrix_ff_sptr self, int which, int delay)
        declare_sample_delay(multiply_matrix_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_matrix_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multiply_matrix_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_matrix_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multiply_matrix_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_matrix_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multiply_matrix_ff_sptr self) -> double"""
        return _blocks_swig3.multiply_matrix_ff_sptr_relative_rate(self)

    def start(self):
        """start(multiply_matrix_ff_sptr self) -> bool"""
        return _blocks_swig3.multiply_matrix_ff_sptr_start(self)

    def stop(self):
        """stop(multiply_matrix_ff_sptr self) -> bool"""
        return _blocks_swig3.multiply_matrix_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multiply_matrix_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_matrix_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multiply_matrix_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_matrix_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multiply_matrix_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_matrix_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multiply_matrix_ff_sptr self, int m)"""
        return _blocks_swig3.multiply_matrix_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_matrix_ff_sptr self)"""
        return _blocks_swig3.multiply_matrix_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_matrix_ff_sptr self) -> bool"""
        return _blocks_swig3.multiply_matrix_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multiply_matrix_ff_sptr self, int m)"""
        return _blocks_swig3.multiply_matrix_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multiply_matrix_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_matrix_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multiply_matrix_ff_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_matrix_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_matrix_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_matrix_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_matrix_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multiply_matrix_ff_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_matrix_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_matrix_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_matrix_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_matrix_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multiply_matrix_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_matrix_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_matrix_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multiply_matrix_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_matrix_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_matrix_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_matrix_ff_sptr self, int which) -> float
        pc_input_buffers_full(multiply_matrix_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_matrix_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_matrix_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_matrix_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_matrix_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_matrix_ff_sptr self, int which) -> float
        pc_output_buffers_full(multiply_matrix_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_matrix_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_matrix_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_matrix_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_matrix_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multiply_matrix_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_matrix_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multiply_matrix_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multiply_matrix_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(multiply_matrix_ff_sptr self) -> float"""
        return _blocks_swig3.multiply_matrix_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multiply_matrix_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_matrix_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_matrix_ff_sptr self)"""
        return _blocks_swig3.multiply_matrix_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multiply_matrix_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_matrix_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multiply_matrix_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_matrix_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multiply_matrix_ff_sptr self) -> int"""
        return _blocks_swig3.multiply_matrix_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multiply_matrix_ff_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_matrix_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multiply_matrix_ff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_matrix_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multiply_matrix_ff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_matrix_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multiply_matrix_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_matrix_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multiply_matrix_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_matrix_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multiply_matrix_ff_sptr self) -> long"""
        return _blocks_swig3.multiply_matrix_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multiply_matrix_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_matrix_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multiply_matrix_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_matrix_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multiply_matrix_ff_sptr self) -> std::string"""
        return _blocks_swig3.multiply_matrix_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multiply_matrix_ff_sptr self, std::string name)"""
        return _blocks_swig3.multiply_matrix_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multiply_matrix_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.multiply_matrix_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multiply_matrix_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_matrix_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multiply_matrix_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_matrix_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multiply_matrix_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.multiply_matrix_ff_sptr_message_subscribers(self, *args, **kwargs)

multiply_matrix_ff_sptr_swigregister = _blocks_swig3.multiply_matrix_ff_sptr_swigregister
multiply_matrix_ff_sptr_swigregister(multiply_matrix_ff_sptr)

multiply_matrix_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_matrix_ff = multiply_matrix_ff.make;

class multiply_by_tag_value_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::multiply_by_tag_value_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::multiply_by_tag_value_cc)> self) -> multiply_by_tag_value_cc_sptr
        __init__(boost::shared_ptr<(gr::blocks::multiply_by_tag_value_cc)> self, multiply_by_tag_value_cc p) -> multiply_by_tag_value_cc_sptr
        """
        this = _blocks_swig3.new_multiply_by_tag_value_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(multiply_by_tag_value_cc_sptr self) -> multiply_by_tag_value_cc"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_multiply_by_tag_value_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(multiply_by_tag_value_cc_sptr self, std::string const & tag_name, size_t vlen=1) -> multiply_by_tag_value_cc_sptr

        output = input * complex constant

        The complex constant used by this block is found from a tag with the name specified by . The tag must contain a float/double or complex PMT value that will be converted into a gr_complex value. All input data is multiplied by this value until a new tag with an update value is found. The block starts with a value of '1.0' for the multiplier constant.

        Constructor Specific Documentation:

        Create an instance of multiply_by_tag_value_cc.

        Args:
            tag_name : Tag's key that it will use to get the multiplicative constant.
            vlen : Vector length of incoming stream
        """
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(multiply_by_tag_value_cc_sptr self) -> gr_complex

        Get the current multiplicative constant. This block does not allow external setters.
        """
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_k(self)

    def history(self):
        """history(multiply_by_tag_value_cc_sptr self) -> unsigned int"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(multiply_by_tag_value_cc_sptr self, int which, int delay)
        declare_sample_delay(multiply_by_tag_value_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(multiply_by_tag_value_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(multiply_by_tag_value_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(multiply_by_tag_value_cc_sptr self) -> double"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_relative_rate(self)

    def start(self):
        """start(multiply_by_tag_value_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_start(self)

    def stop(self):
        """stop(multiply_by_tag_value_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(multiply_by_tag_value_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(multiply_by_tag_value_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(multiply_by_tag_value_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(multiply_by_tag_value_cc_sptr self, int m)"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(multiply_by_tag_value_cc_sptr self)"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(multiply_by_tag_value_cc_sptr self) -> bool"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(multiply_by_tag_value_cc_sptr self, int m)"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(multiply_by_tag_value_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(multiply_by_tag_value_cc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(multiply_by_tag_value_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(multiply_by_tag_value_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(multiply_by_tag_value_cc_sptr self, int i) -> long"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(multiply_by_tag_value_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(multiply_by_tag_value_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(multiply_by_tag_value_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(multiply_by_tag_value_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(multiply_by_tag_value_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(multiply_by_tag_value_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(multiply_by_tag_value_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(multiply_by_tag_value_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(multiply_by_tag_value_cc_sptr self, int which) -> float
        pc_input_buffers_full(multiply_by_tag_value_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(multiply_by_tag_value_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(multiply_by_tag_value_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(multiply_by_tag_value_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(multiply_by_tag_value_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(multiply_by_tag_value_cc_sptr self, int which) -> float
        pc_output_buffers_full(multiply_by_tag_value_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(multiply_by_tag_value_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(multiply_by_tag_value_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(multiply_by_tag_value_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(multiply_by_tag_value_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(multiply_by_tag_value_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(multiply_by_tag_value_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(multiply_by_tag_value_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(multiply_by_tag_value_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(multiply_by_tag_value_cc_sptr self) -> float"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(multiply_by_tag_value_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(multiply_by_tag_value_cc_sptr self)"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(multiply_by_tag_value_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(multiply_by_tag_value_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(multiply_by_tag_value_cc_sptr self) -> int"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(multiply_by_tag_value_cc_sptr self, int priority) -> int"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(multiply_by_tag_value_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(multiply_by_tag_value_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(multiply_by_tag_value_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(multiply_by_tag_value_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(multiply_by_tag_value_cc_sptr self) -> long"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(multiply_by_tag_value_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(multiply_by_tag_value_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(multiply_by_tag_value_cc_sptr self) -> std::string"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(multiply_by_tag_value_cc_sptr self, std::string name)"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(multiply_by_tag_value_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(multiply_by_tag_value_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(multiply_by_tag_value_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(multiply_by_tag_value_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.multiply_by_tag_value_cc_sptr_message_subscribers(self, *args, **kwargs)

multiply_by_tag_value_cc_sptr_swigregister = _blocks_swig3.multiply_by_tag_value_cc_sptr_swigregister
multiply_by_tag_value_cc_sptr_swigregister(multiply_by_tag_value_cc_sptr)

multiply_by_tag_value_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
multiply_by_tag_value_cc = multiply_by_tag_value_cc.make;

class mute_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::mute_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::mute_ss)> self) -> mute_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::mute_ss)> self, mute_ss p) -> mute_ss_sptr
        """
        this = _blocks_swig3.new_mute_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(mute_ss_sptr self) -> mute_ss"""
        return _blocks_swig3.mute_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_mute_ss_sptr
    __del__ = lambda self : None;
    def make(self, mute=False):
        """
        make(mute_ss_sptr self, bool mute=False) -> mute_ss_sptr

        output = input or zero if muted.

        Constructor Specific Documentation:



        Args:
            mute : 
        """
        return _blocks_swig3.mute_ss_sptr_make(self, mute)

    def mute(self):
        """mute(mute_ss_sptr self) -> bool"""
        return _blocks_swig3.mute_ss_sptr_mute(self)

    def set_mute(self, mute=False):
        """set_mute(mute_ss_sptr self, bool mute=False)"""
        return _blocks_swig3.mute_ss_sptr_set_mute(self, mute)

    def history(self):
        """history(mute_ss_sptr self) -> unsigned int"""
        return _blocks_swig3.mute_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mute_ss_sptr self, int which, int delay)
        declare_sample_delay(mute_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig3.mute_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(mute_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.mute_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(mute_ss_sptr self) -> int"""
        return _blocks_swig3.mute_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(mute_ss_sptr self) -> double"""
        return _blocks_swig3.mute_ss_sptr_relative_rate(self)

    def start(self):
        """start(mute_ss_sptr self) -> bool"""
        return _blocks_swig3.mute_ss_sptr_start(self)

    def stop(self):
        """stop(mute_ss_sptr self) -> bool"""
        return _blocks_swig3.mute_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(mute_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.mute_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(mute_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.mute_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(mute_ss_sptr self) -> int"""
        return _blocks_swig3.mute_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(mute_ss_sptr self, int m)"""
        return _blocks_swig3.mute_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mute_ss_sptr self)"""
        return _blocks_swig3.mute_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mute_ss_sptr self) -> bool"""
        return _blocks_swig3.mute_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(mute_ss_sptr self, int m)"""
        return _blocks_swig3.mute_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(mute_ss_sptr self) -> int"""
        return _blocks_swig3.mute_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(mute_ss_sptr self, int i) -> long"""
        return _blocks_swig3.mute_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mute_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(mute_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.mute_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(mute_ss_sptr self, int i) -> long"""
        return _blocks_swig3.mute_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mute_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(mute_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.mute_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mute_ss_sptr self, int which) -> float
        pc_input_buffers_full(mute_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mute_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(mute_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mute_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(mute_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mute_ss_sptr self, int which) -> float
        pc_output_buffers_full(mute_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mute_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(mute_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mute_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(mute_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(mute_ss_sptr self) -> float"""
        return _blocks_swig3.mute_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(mute_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.mute_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(mute_ss_sptr self)"""
        return _blocks_swig3.mute_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(mute_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.mute_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(mute_ss_sptr self) -> int"""
        return _blocks_swig3.mute_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(mute_ss_sptr self) -> int"""
        return _blocks_swig3.mute_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(mute_ss_sptr self, int priority) -> int"""
        return _blocks_swig3.mute_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(mute_ss_sptr self) -> std::string"""
        return _blocks_swig3.mute_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(mute_ss_sptr self) -> std::string"""
        return _blocks_swig3.mute_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(mute_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.mute_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(mute_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.mute_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(mute_ss_sptr self) -> long"""
        return _blocks_swig3.mute_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(mute_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.mute_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(mute_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.mute_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(mute_ss_sptr self) -> std::string"""
        return _blocks_swig3.mute_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(mute_ss_sptr self, std::string name)"""
        return _blocks_swig3.mute_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(mute_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.mute_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(mute_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.mute_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(mute_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.mute_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(mute_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.mute_ss_sptr_message_subscribers(self, *args, **kwargs)

mute_ss_sptr_swigregister = _blocks_swig3.mute_ss_sptr_swigregister
mute_ss_sptr_swigregister(mute_ss_sptr)

mute_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mute_ss = mute_ss.make;

class mute_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::mute_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::mute_ii)> self) -> mute_ii_sptr
        __init__(boost::shared_ptr<(gr::blocks::mute_ii)> self, mute_ii p) -> mute_ii_sptr
        """
        this = _blocks_swig3.new_mute_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(mute_ii_sptr self) -> mute_ii"""
        return _blocks_swig3.mute_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_mute_ii_sptr
    __del__ = lambda self : None;
    def make(self, mute=False):
        """
        make(mute_ii_sptr self, bool mute=False) -> mute_ii_sptr

        output = input or zero if muted.

        Constructor Specific Documentation:



        Args:
            mute : 
        """
        return _blocks_swig3.mute_ii_sptr_make(self, mute)

    def mute(self):
        """mute(mute_ii_sptr self) -> bool"""
        return _blocks_swig3.mute_ii_sptr_mute(self)

    def set_mute(self, mute=False):
        """set_mute(mute_ii_sptr self, bool mute=False)"""
        return _blocks_swig3.mute_ii_sptr_set_mute(self, mute)

    def history(self):
        """history(mute_ii_sptr self) -> unsigned int"""
        return _blocks_swig3.mute_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mute_ii_sptr self, int which, int delay)
        declare_sample_delay(mute_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig3.mute_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(mute_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.mute_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(mute_ii_sptr self) -> int"""
        return _blocks_swig3.mute_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(mute_ii_sptr self) -> double"""
        return _blocks_swig3.mute_ii_sptr_relative_rate(self)

    def start(self):
        """start(mute_ii_sptr self) -> bool"""
        return _blocks_swig3.mute_ii_sptr_start(self)

    def stop(self):
        """stop(mute_ii_sptr self) -> bool"""
        return _blocks_swig3.mute_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(mute_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.mute_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(mute_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.mute_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(mute_ii_sptr self) -> int"""
        return _blocks_swig3.mute_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(mute_ii_sptr self, int m)"""
        return _blocks_swig3.mute_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mute_ii_sptr self)"""
        return _blocks_swig3.mute_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mute_ii_sptr self) -> bool"""
        return _blocks_swig3.mute_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(mute_ii_sptr self, int m)"""
        return _blocks_swig3.mute_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(mute_ii_sptr self) -> int"""
        return _blocks_swig3.mute_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(mute_ii_sptr self, int i) -> long"""
        return _blocks_swig3.mute_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mute_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(mute_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.mute_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(mute_ii_sptr self, int i) -> long"""
        return _blocks_swig3.mute_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mute_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(mute_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.mute_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mute_ii_sptr self, int which) -> float
        pc_input_buffers_full(mute_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mute_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(mute_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mute_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(mute_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mute_ii_sptr self, int which) -> float
        pc_output_buffers_full(mute_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mute_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(mute_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mute_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(mute_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(mute_ii_sptr self) -> float"""
        return _blocks_swig3.mute_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(mute_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.mute_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(mute_ii_sptr self)"""
        return _blocks_swig3.mute_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(mute_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.mute_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(mute_ii_sptr self) -> int"""
        return _blocks_swig3.mute_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(mute_ii_sptr self) -> int"""
        return _blocks_swig3.mute_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(mute_ii_sptr self, int priority) -> int"""
        return _blocks_swig3.mute_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(mute_ii_sptr self) -> std::string"""
        return _blocks_swig3.mute_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(mute_ii_sptr self) -> std::string"""
        return _blocks_swig3.mute_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(mute_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.mute_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(mute_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.mute_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(mute_ii_sptr self) -> long"""
        return _blocks_swig3.mute_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(mute_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.mute_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(mute_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.mute_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(mute_ii_sptr self) -> std::string"""
        return _blocks_swig3.mute_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(mute_ii_sptr self, std::string name)"""
        return _blocks_swig3.mute_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(mute_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.mute_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(mute_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.mute_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(mute_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.mute_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(mute_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.mute_ii_sptr_message_subscribers(self, *args, **kwargs)

mute_ii_sptr_swigregister = _blocks_swig3.mute_ii_sptr_swigregister
mute_ii_sptr_swigregister(mute_ii_sptr)

mute_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mute_ii = mute_ii.make;

class mute_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::mute_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::mute_ff)> self) -> mute_ff_sptr
        __init__(boost::shared_ptr<(gr::blocks::mute_ff)> self, mute_ff p) -> mute_ff_sptr
        """
        this = _blocks_swig3.new_mute_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(mute_ff_sptr self) -> mute_ff"""
        return _blocks_swig3.mute_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_mute_ff_sptr
    __del__ = lambda self : None;
    def make(self, mute=False):
        """
        make(mute_ff_sptr self, bool mute=False) -> mute_ff_sptr

        output = input or zero if muted.

        Constructor Specific Documentation:



        Args:
            mute : 
        """
        return _blocks_swig3.mute_ff_sptr_make(self, mute)

    def mute(self):
        """mute(mute_ff_sptr self) -> bool"""
        return _blocks_swig3.mute_ff_sptr_mute(self)

    def set_mute(self, mute=False):
        """set_mute(mute_ff_sptr self, bool mute=False)"""
        return _blocks_swig3.mute_ff_sptr_set_mute(self, mute)

    def history(self):
        """history(mute_ff_sptr self) -> unsigned int"""
        return _blocks_swig3.mute_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mute_ff_sptr self, int which, int delay)
        declare_sample_delay(mute_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig3.mute_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(mute_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.mute_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(mute_ff_sptr self) -> int"""
        return _blocks_swig3.mute_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(mute_ff_sptr self) -> double"""
        return _blocks_swig3.mute_ff_sptr_relative_rate(self)

    def start(self):
        """start(mute_ff_sptr self) -> bool"""
        return _blocks_swig3.mute_ff_sptr_start(self)

    def stop(self):
        """stop(mute_ff_sptr self) -> bool"""
        return _blocks_swig3.mute_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(mute_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.mute_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(mute_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.mute_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(mute_ff_sptr self) -> int"""
        return _blocks_swig3.mute_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(mute_ff_sptr self, int m)"""
        return _blocks_swig3.mute_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mute_ff_sptr self)"""
        return _blocks_swig3.mute_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mute_ff_sptr self) -> bool"""
        return _blocks_swig3.mute_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(mute_ff_sptr self, int m)"""
        return _blocks_swig3.mute_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(mute_ff_sptr self) -> int"""
        return _blocks_swig3.mute_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(mute_ff_sptr self, int i) -> long"""
        return _blocks_swig3.mute_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mute_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(mute_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.mute_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(mute_ff_sptr self, int i) -> long"""
        return _blocks_swig3.mute_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mute_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(mute_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.mute_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mute_ff_sptr self, int which) -> float
        pc_input_buffers_full(mute_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mute_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(mute_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mute_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(mute_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mute_ff_sptr self, int which) -> float
        pc_output_buffers_full(mute_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mute_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(mute_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mute_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(mute_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(mute_ff_sptr self) -> float"""
        return _blocks_swig3.mute_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(mute_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.mute_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(mute_ff_sptr self)"""
        return _blocks_swig3.mute_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(mute_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.mute_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(mute_ff_sptr self) -> int"""
        return _blocks_swig3.mute_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(mute_ff_sptr self) -> int"""
        return _blocks_swig3.mute_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(mute_ff_sptr self, int priority) -> int"""
        return _blocks_swig3.mute_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(mute_ff_sptr self) -> std::string"""
        return _blocks_swig3.mute_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(mute_ff_sptr self) -> std::string"""
        return _blocks_swig3.mute_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(mute_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.mute_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(mute_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.mute_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(mute_ff_sptr self) -> long"""
        return _blocks_swig3.mute_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(mute_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.mute_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(mute_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.mute_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(mute_ff_sptr self) -> std::string"""
        return _blocks_swig3.mute_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(mute_ff_sptr self, std::string name)"""
        return _blocks_swig3.mute_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(mute_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.mute_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(mute_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.mute_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(mute_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.mute_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(mute_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.mute_ff_sptr_message_subscribers(self, *args, **kwargs)

mute_ff_sptr_swigregister = _blocks_swig3.mute_ff_sptr_swigregister
mute_ff_sptr_swigregister(mute_ff_sptr)

mute_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mute_ff = mute_ff.make;

class mute_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::mute_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::mute_cc)> self) -> mute_cc_sptr
        __init__(boost::shared_ptr<(gr::blocks::mute_cc)> self, mute_cc p) -> mute_cc_sptr
        """
        this = _blocks_swig3.new_mute_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(mute_cc_sptr self) -> mute_cc"""
        return _blocks_swig3.mute_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig3.delete_mute_cc_sptr
    __del__ = lambda self : None;
    def make(self, mute=False):
        """
        make(mute_cc_sptr self, bool mute=False) -> mute_cc_sptr

        output = input or zero if muted.

        Constructor Specific Documentation:



        Args:
            mute : 
        """
        return _blocks_swig3.mute_cc_sptr_make(self, mute)

    def mute(self):
        """mute(mute_cc_sptr self) -> bool"""
        return _blocks_swig3.mute_cc_sptr_mute(self)

    def set_mute(self, mute=False):
        """set_mute(mute_cc_sptr self, bool mute=False)"""
        return _blocks_swig3.mute_cc_sptr_set_mute(self, mute)

    def history(self):
        """history(mute_cc_sptr self) -> unsigned int"""
        return _blocks_swig3.mute_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mute_cc_sptr self, int which, int delay)
        declare_sample_delay(mute_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig3.mute_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(mute_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig3.mute_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(mute_cc_sptr self) -> int"""
        return _blocks_swig3.mute_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(mute_cc_sptr self) -> double"""
        return _blocks_swig3.mute_cc_sptr_relative_rate(self)

    def start(self):
        """start(mute_cc_sptr self) -> bool"""
        return _blocks_swig3.mute_cc_sptr_start(self)

    def stop(self):
        """stop(mute_cc_sptr self) -> bool"""
        return _blocks_swig3.mute_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(mute_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig3.mute_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(mute_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig3.mute_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(mute_cc_sptr self) -> int"""
        return _blocks_swig3.mute_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(mute_cc_sptr self, int m)"""
        return _blocks_swig3.mute_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mute_cc_sptr self)"""
        return _blocks_swig3.mute_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mute_cc_sptr self) -> bool"""
        return _blocks_swig3.mute_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(mute_cc_sptr self, int m)"""
        return _blocks_swig3.mute_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(mute_cc_sptr self) -> int"""
        return _blocks_swig3.mute_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(mute_cc_sptr self, int i) -> long"""
        return _blocks_swig3.mute_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mute_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(mute_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig3.mute_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(mute_cc_sptr self, int i) -> long"""
        return _blocks_swig3.mute_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mute_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(mute_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig3.mute_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mute_cc_sptr self, int which) -> float
        pc_input_buffers_full(mute_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mute_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(mute_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mute_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(mute_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mute_cc_sptr self, int which) -> float
        pc_output_buffers_full(mute_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mute_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(mute_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mute_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(mute_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig3.mute_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(mute_cc_sptr self) -> float"""
        return _blocks_swig3.mute_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(mute_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig3.mute_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(mute_cc_sptr self)"""
        return _blocks_swig3.mute_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(mute_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig3.mute_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(mute_cc_sptr self) -> int"""
        return _blocks_swig3.mute_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(mute_cc_sptr self) -> int"""
        return _blocks_swig3.mute_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(mute_cc_sptr self, int priority) -> int"""
        return _blocks_swig3.mute_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(mute_cc_sptr self) -> std::string"""
        return _blocks_swig3.mute_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(mute_cc_sptr self) -> std::string"""
        return _blocks_swig3.mute_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(mute_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.mute_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(mute_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig3.mute_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(mute_cc_sptr self) -> long"""
        return _blocks_swig3.mute_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(mute_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig3.mute_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(mute_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig3.mute_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(mute_cc_sptr self) -> std::string"""
        return _blocks_swig3.mute_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(mute_cc_sptr self, std::string name)"""
        return _blocks_swig3.mute_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(mute_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig3.mute_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(mute_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.mute_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(mute_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig3.mute_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(mute_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig3.mute_cc_sptr_message_subscribers(self, *args, **kwargs)

mute_cc_sptr_swigregister = _blocks_swig3.mute_cc_sptr_swigregister
mute_cc_sptr_swigregister(mute_cc_sptr)

mute_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mute_cc = mute_cc.make;




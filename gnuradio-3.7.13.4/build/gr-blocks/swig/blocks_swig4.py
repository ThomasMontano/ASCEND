# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_blocks_swig4', [dirname(__file__)])
        except ImportError:
            import _blocks_swig4
            return _blocks_swig4
        if fp is not None:
            try:
                _mod = imp.load_module('_blocks_swig4', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _blocks_swig4 = swig_import_helper()
    del swig_import_helper
else:
    import _blocks_swig4
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _blocks_swig4.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _blocks_swig4.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _blocks_swig4.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _blocks_swig4.high_res_timer_epoch()
byte_t = _blocks_swig4.byte_t
float_t = _blocks_swig4.float_t
complex_t = _blocks_swig4.complex_t

def pdu_port_id():
  """pdu_port_id() -> swig_int_ptr"""
  return _blocks_swig4.pdu_port_id()

def itemsize(*args, **kwargs):
  """itemsize(gr::blocks::pdu::vector_type type) -> size_t"""
  return _blocks_swig4.itemsize(*args, **kwargs)

def type_matches(*args, **kwargs):
  """type_matches(gr::blocks::pdu::vector_type type, swig_int_ptr v) -> bool"""
  return _blocks_swig4.type_matches(*args, **kwargs)

def make_pdu_vector(*args, **kwargs):
  """make_pdu_vector(gr::blocks::pdu::vector_type type, uint8_t const * buf, size_t items) -> swig_int_ptr"""
  return _blocks_swig4.make_pdu_vector(*args, **kwargs)

def type_from_pmt(*args, **kwargs):
  """type_from_pmt(swig_int_ptr vector) -> gr::blocks::pdu::vector_type"""
  return _blocks_swig4.type_from_pmt(*args, **kwargs)
class probe_signal_b(object):
    """
    Sink that allows a sample to be grabbed from Python.

    Constructor Specific Documentation:


    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make():
        """
        make() -> probe_signal_b_sptr

        Sink that allows a sample to be grabbed from Python.

        Constructor Specific Documentation:


        """
        return _blocks_swig4.probe_signal_b_make()

    make = staticmethod(make)
    def level(self):
        """level(probe_signal_b self) -> unsigned char"""
        return _blocks_swig4.probe_signal_b_level(self)

    __swig_destroy__ = _blocks_swig4.delete_probe_signal_b
    __del__ = lambda self : None;
probe_signal_b_swigregister = _blocks_swig4.probe_signal_b_swigregister
probe_signal_b_swigregister(probe_signal_b)

def probe_signal_b_make():
  """
    probe_signal_b_make() -> probe_signal_b_sptr

    Sink that allows a sample to be grabbed from Python.

    Constructor Specific Documentation:


    """
  return _blocks_swig4.probe_signal_b_make()

class probe_signal_s(object):
    """
    Sink that allows a sample to be grabbed from Python.

    Constructor Specific Documentation:


    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make():
        """
        make() -> probe_signal_s_sptr

        Sink that allows a sample to be grabbed from Python.

        Constructor Specific Documentation:


        """
        return _blocks_swig4.probe_signal_s_make()

    make = staticmethod(make)
    def level(self):
        """level(probe_signal_s self) -> short"""
        return _blocks_swig4.probe_signal_s_level(self)

    __swig_destroy__ = _blocks_swig4.delete_probe_signal_s
    __del__ = lambda self : None;
probe_signal_s_swigregister = _blocks_swig4.probe_signal_s_swigregister
probe_signal_s_swigregister(probe_signal_s)

def probe_signal_s_make():
  """
    probe_signal_s_make() -> probe_signal_s_sptr

    Sink that allows a sample to be grabbed from Python.

    Constructor Specific Documentation:


    """
  return _blocks_swig4.probe_signal_s_make()

class probe_signal_i(object):
    """
    Sink that allows a sample to be grabbed from Python.

    Constructor Specific Documentation:


    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make():
        """
        make() -> probe_signal_i_sptr

        Sink that allows a sample to be grabbed from Python.

        Constructor Specific Documentation:


        """
        return _blocks_swig4.probe_signal_i_make()

    make = staticmethod(make)
    def level(self):
        """level(probe_signal_i self) -> int"""
        return _blocks_swig4.probe_signal_i_level(self)

    __swig_destroy__ = _blocks_swig4.delete_probe_signal_i
    __del__ = lambda self : None;
probe_signal_i_swigregister = _blocks_swig4.probe_signal_i_swigregister
probe_signal_i_swigregister(probe_signal_i)

def probe_signal_i_make():
  """
    probe_signal_i_make() -> probe_signal_i_sptr

    Sink that allows a sample to be grabbed from Python.

    Constructor Specific Documentation:


    """
  return _blocks_swig4.probe_signal_i_make()

class probe_signal_f(object):
    """
    Sink that allows a sample to be grabbed from Python.

    Constructor Specific Documentation:


    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make():
        """
        make() -> probe_signal_f_sptr

        Sink that allows a sample to be grabbed from Python.

        Constructor Specific Documentation:


        """
        return _blocks_swig4.probe_signal_f_make()

    make = staticmethod(make)
    def level(self):
        """level(probe_signal_f self) -> float"""
        return _blocks_swig4.probe_signal_f_level(self)

    __swig_destroy__ = _blocks_swig4.delete_probe_signal_f
    __del__ = lambda self : None;
probe_signal_f_swigregister = _blocks_swig4.probe_signal_f_swigregister
probe_signal_f_swigregister(probe_signal_f)

def probe_signal_f_make():
  """
    probe_signal_f_make() -> probe_signal_f_sptr

    Sink that allows a sample to be grabbed from Python.

    Constructor Specific Documentation:


    """
  return _blocks_swig4.probe_signal_f_make()

class probe_signal_c(object):
    """
    Sink that allows a sample to be grabbed from Python.

    Constructor Specific Documentation:


    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make():
        """
        make() -> probe_signal_c_sptr

        Sink that allows a sample to be grabbed from Python.

        Constructor Specific Documentation:


        """
        return _blocks_swig4.probe_signal_c_make()

    make = staticmethod(make)
    def level(self):
        """level(probe_signal_c self) -> gr_complex"""
        return _blocks_swig4.probe_signal_c_level(self)

    __swig_destroy__ = _blocks_swig4.delete_probe_signal_c
    __del__ = lambda self : None;
probe_signal_c_swigregister = _blocks_swig4.probe_signal_c_swigregister
probe_signal_c_swigregister(probe_signal_c)

def probe_signal_c_make():
  """
    probe_signal_c_make() -> probe_signal_c_sptr

    Sink that allows a sample to be grabbed from Python.

    Constructor Specific Documentation:


    """
  return _blocks_swig4.probe_signal_c_make()

class probe_signal_vb(object):
    """
    Sink that allows a vector of samples to be grabbed from Python.

    Constructor Specific Documentation:



    Args:
        size : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t size) -> probe_signal_vb_sptr

        Sink that allows a vector of samples to be grabbed from Python.

        Constructor Specific Documentation:



        Args:
            size : 
        """
        return _blocks_swig4.probe_signal_vb_make(*args, **kwargs)

    make = staticmethod(make)
    def level(self):
        """level(probe_signal_vb self) -> std::vector< unsigned char,std::allocator< unsigned char > >"""
        return _blocks_swig4.probe_signal_vb_level(self)

    __swig_destroy__ = _blocks_swig4.delete_probe_signal_vb
    __del__ = lambda self : None;
probe_signal_vb_swigregister = _blocks_swig4.probe_signal_vb_swigregister
probe_signal_vb_swigregister(probe_signal_vb)

def probe_signal_vb_make(*args, **kwargs):
  """
    probe_signal_vb_make(size_t size) -> probe_signal_vb_sptr

    Sink that allows a vector of samples to be grabbed from Python.

    Constructor Specific Documentation:



    Args:
        size : 
    """
  return _blocks_swig4.probe_signal_vb_make(*args, **kwargs)

class probe_signal_vs(object):
    """
    Sink that allows a vector of samples to be grabbed from Python.

    Constructor Specific Documentation:



    Args:
        size : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t size) -> probe_signal_vs_sptr

        Sink that allows a vector of samples to be grabbed from Python.

        Constructor Specific Documentation:



        Args:
            size : 
        """
        return _blocks_swig4.probe_signal_vs_make(*args, **kwargs)

    make = staticmethod(make)
    def level(self):
        """level(probe_signal_vs self) -> std::vector< short,std::allocator< short > >"""
        return _blocks_swig4.probe_signal_vs_level(self)

    __swig_destroy__ = _blocks_swig4.delete_probe_signal_vs
    __del__ = lambda self : None;
probe_signal_vs_swigregister = _blocks_swig4.probe_signal_vs_swigregister
probe_signal_vs_swigregister(probe_signal_vs)

def probe_signal_vs_make(*args, **kwargs):
  """
    probe_signal_vs_make(size_t size) -> probe_signal_vs_sptr

    Sink that allows a vector of samples to be grabbed from Python.

    Constructor Specific Documentation:



    Args:
        size : 
    """
  return _blocks_swig4.probe_signal_vs_make(*args, **kwargs)

class probe_signal_vi(object):
    """
    Sink that allows a vector of samples to be grabbed from Python.

    Constructor Specific Documentation:



    Args:
        size : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t size) -> probe_signal_vi_sptr

        Sink that allows a vector of samples to be grabbed from Python.

        Constructor Specific Documentation:



        Args:
            size : 
        """
        return _blocks_swig4.probe_signal_vi_make(*args, **kwargs)

    make = staticmethod(make)
    def level(self):
        """level(probe_signal_vi self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig4.probe_signal_vi_level(self)

    __swig_destroy__ = _blocks_swig4.delete_probe_signal_vi
    __del__ = lambda self : None;
probe_signal_vi_swigregister = _blocks_swig4.probe_signal_vi_swigregister
probe_signal_vi_swigregister(probe_signal_vi)

def probe_signal_vi_make(*args, **kwargs):
  """
    probe_signal_vi_make(size_t size) -> probe_signal_vi_sptr

    Sink that allows a vector of samples to be grabbed from Python.

    Constructor Specific Documentation:



    Args:
        size : 
    """
  return _blocks_swig4.probe_signal_vi_make(*args, **kwargs)

class probe_signal_vf(object):
    """
    Sink that allows a vector of samples to be grabbed from Python.

    Constructor Specific Documentation:



    Args:
        size : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t size) -> probe_signal_vf_sptr

        Sink that allows a vector of samples to be grabbed from Python.

        Constructor Specific Documentation:



        Args:
            size : 
        """
        return _blocks_swig4.probe_signal_vf_make(*args, **kwargs)

    make = staticmethod(make)
    def level(self):
        """level(probe_signal_vf self) -> pmt_vector_float"""
        return _blocks_swig4.probe_signal_vf_level(self)

    __swig_destroy__ = _blocks_swig4.delete_probe_signal_vf
    __del__ = lambda self : None;
probe_signal_vf_swigregister = _blocks_swig4.probe_signal_vf_swigregister
probe_signal_vf_swigregister(probe_signal_vf)

def probe_signal_vf_make(*args, **kwargs):
  """
    probe_signal_vf_make(size_t size) -> probe_signal_vf_sptr

    Sink that allows a vector of samples to be grabbed from Python.

    Constructor Specific Documentation:



    Args:
        size : 
    """
  return _blocks_swig4.probe_signal_vf_make(*args, **kwargs)

class probe_signal_vc(object):
    """
    Sink that allows a vector of samples to be grabbed from Python.

    Constructor Specific Documentation:



    Args:
        size : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t size) -> probe_signal_vc_sptr

        Sink that allows a vector of samples to be grabbed from Python.

        Constructor Specific Documentation:



        Args:
            size : 
        """
        return _blocks_swig4.probe_signal_vc_make(*args, **kwargs)

    make = staticmethod(make)
    def level(self):
        """level(probe_signal_vc self) -> pmt_vector_cfloat"""
        return _blocks_swig4.probe_signal_vc_level(self)

    __swig_destroy__ = _blocks_swig4.delete_probe_signal_vc
    __del__ = lambda self : None;
probe_signal_vc_swigregister = _blocks_swig4.probe_signal_vc_swigregister
probe_signal_vc_swigregister(probe_signal_vc)

def probe_signal_vc_make(*args, **kwargs):
  """
    probe_signal_vc_make(size_t size) -> probe_signal_vc_sptr

    Sink that allows a vector of samples to be grabbed from Python.

    Constructor Specific Documentation:



    Args:
        size : 
    """
  return _blocks_swig4.probe_signal_vc_make(*args, **kwargs)

class pdu_filter(object):
    """
    Propagates only pdus containing k=>v in meta.

    Constructor Specific Documentation:

    Construct a PDU filter.

    Args:
        k : 
        v : 
        invert : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(swig_int_ptr k, swig_int_ptr v, bool invert=False) -> pdu_filter_sptr

        Propagates only pdus containing k=>v in meta.

        Constructor Specific Documentation:

        Construct a PDU filter.

        Args:
            k : 
            v : 
            invert : 
        """
        return _blocks_swig4.pdu_filter_make(*args, **kwargs)

    make = staticmethod(make)
    def set_key(self, *args, **kwargs):
        """set_key(pdu_filter self, swig_int_ptr key)"""
        return _blocks_swig4.pdu_filter_set_key(self, *args, **kwargs)

    def set_val(self, *args, **kwargs):
        """set_val(pdu_filter self, swig_int_ptr val)"""
        return _blocks_swig4.pdu_filter_set_val(self, *args, **kwargs)

    def set_inversion(self, *args, **kwargs):
        """set_inversion(pdu_filter self, bool invert)"""
        return _blocks_swig4.pdu_filter_set_inversion(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig4.delete_pdu_filter
    __del__ = lambda self : None;
pdu_filter_swigregister = _blocks_swig4.pdu_filter_swigregister
pdu_filter_swigregister(pdu_filter)

def pdu_filter_make(*args, **kwargs):
  """
    pdu_filter_make(swig_int_ptr k, swig_int_ptr v, bool invert=False) -> pdu_filter_sptr

    Propagates only pdus containing k=>v in meta.

    Constructor Specific Documentation:

    Construct a PDU filter.

    Args:
        k : 
        v : 
        invert : 
    """
  return _blocks_swig4.pdu_filter_make(*args, **kwargs)

class pdu_set(object):
    """
    Set k=>v in pdu's meta field and pass on.

    Constructor Specific Documentation:

    Construct a PDU meta set block.

    Args:
        k : 
        v : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(swig_int_ptr k, swig_int_ptr v) -> pdu_set_sptr

        Set k=>v in pdu's meta field and pass on.

        Constructor Specific Documentation:

        Construct a PDU meta set block.

        Args:
            k : 
            v : 
        """
        return _blocks_swig4.pdu_set_make(*args, **kwargs)

    make = staticmethod(make)
    def set_key(self, *args, **kwargs):
        """set_key(pdu_set self, swig_int_ptr key)"""
        return _blocks_swig4.pdu_set_set_key(self, *args, **kwargs)

    def set_val(self, *args, **kwargs):
        """set_val(pdu_set self, swig_int_ptr val)"""
        return _blocks_swig4.pdu_set_set_val(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig4.delete_pdu_set
    __del__ = lambda self : None;
pdu_set_swigregister = _blocks_swig4.pdu_set_swigregister
pdu_set_swigregister(pdu_set)

def pdu_set_make(*args, **kwargs):
  """
    pdu_set_make(swig_int_ptr k, swig_int_ptr v) -> pdu_set_sptr

    Set k=>v in pdu's meta field and pass on.

    Constructor Specific Documentation:

    Construct a PDU meta set block.

    Args:
        k : 
        v : 
    """
  return _blocks_swig4.pdu_set_make(*args, **kwargs)

class pdu_remove(object):
    """
    remove key k in pdu's meta field and pass on

    Constructor Specific Documentation:

    Construct a PDU meta remove block.

    Args:
        k : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(swig_int_ptr k) -> pdu_remove_sptr

        remove key k in pdu's meta field and pass on

        Constructor Specific Documentation:

        Construct a PDU meta remove block.

        Args:
            k : 
        """
        return _blocks_swig4.pdu_remove_make(*args, **kwargs)

    make = staticmethod(make)
    def set_key(self, *args, **kwargs):
        """set_key(pdu_remove self, swig_int_ptr key)"""
        return _blocks_swig4.pdu_remove_set_key(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig4.delete_pdu_remove
    __del__ = lambda self : None;
pdu_remove_swigregister = _blocks_swig4.pdu_remove_swigregister
pdu_remove_swigregister(pdu_remove)

def pdu_remove_make(*args, **kwargs):
  """
    pdu_remove_make(swig_int_ptr k) -> pdu_remove_sptr

    remove key k in pdu's meta field and pass on

    Constructor Specific Documentation:

    Construct a PDU meta remove block.

    Args:
        k : 
    """
  return _blocks_swig4.pdu_remove_make(*args, **kwargs)

class pdu_to_tagged_stream(object):
    """
    Turns received PDUs into a tagged stream of items.

    Constructor Specific Documentation:

    Construct a pdu_to_tagged_stream block.

    Args:
        type : PDU type of pdu::vector_type
        lengthtagname : The name of the tag that specifies how long the packet is. Defaults to 'packet_len'.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(gr::blocks::pdu::vector_type type, std::string const & lengthtagname="packet_len") -> pdu_to_tagged_stream_sptr

        Turns received PDUs into a tagged stream of items.

        Constructor Specific Documentation:

        Construct a pdu_to_tagged_stream block.

        Args:
            type : PDU type of pdu::vector_type
            lengthtagname : The name of the tag that specifies how long the packet is. Defaults to 'packet_len'.
        """
        return _blocks_swig4.pdu_to_tagged_stream_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig4.delete_pdu_to_tagged_stream
    __del__ = lambda self : None;
pdu_to_tagged_stream_swigregister = _blocks_swig4.pdu_to_tagged_stream_swigregister
pdu_to_tagged_stream_swigregister(pdu_to_tagged_stream)

def pdu_to_tagged_stream_make(*args, **kwargs):
  """
    pdu_to_tagged_stream_make(gr::blocks::pdu::vector_type type, std::string const & lengthtagname="packet_len") -> pdu_to_tagged_stream_sptr

    Turns received PDUs into a tagged stream of items.

    Constructor Specific Documentation:

    Construct a pdu_to_tagged_stream block.

    Args:
        type : PDU type of pdu::vector_type
        lengthtagname : The name of the tag that specifies how long the packet is. Defaults to 'packet_len'.
    """
  return _blocks_swig4.pdu_to_tagged_stream_make(*args, **kwargs)

class peak_detector_fb(object):
    """
    Detect the peak of a signal.

    If a peak is detected, this block outputs a 1, or it outputs 0's.

    Constructor Specific Documentation:

    Make a peak detector block.

    Args:
        threshold_factor_rise : The threshold factor determines when a peak has started. An average of the signal is calculated and when the value of the signal goes over threshold_factor_rise*average, we start looking for a peak.
        threshold_factor_fall : The threshold factor determines when a peak has ended. An average of the signal is calculated and when the value of the signal goes below threshold_factor_fall*average, we stop looking for a peak.
        look_ahead : The look-ahead value is used when the threshold is found to look if there another peak within this step range. If there is a larger value, we set that as the peak and look ahead again. This is continued until the highest point is found with This look-ahead range.
        alpha : The gain value of a moving average filter
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(threshold_factor_rise=0.25, threshold_factor_fall=0.40, look_ahead=10, alpha=0.001):
        """
        make(float threshold_factor_rise=0.25, float threshold_factor_fall=0.40, int look_ahead=10, 
            float alpha=0.001) -> peak_detector_fb_sptr

        Detect the peak of a signal.

        If a peak is detected, this block outputs a 1, or it outputs 0's.

        Constructor Specific Documentation:

        Make a peak detector block.

        Args:
            threshold_factor_rise : The threshold factor determines when a peak has started. An average of the signal is calculated and when the value of the signal goes over threshold_factor_rise*average, we start looking for a peak.
            threshold_factor_fall : The threshold factor determines when a peak has ended. An average of the signal is calculated and when the value of the signal goes below threshold_factor_fall*average, we stop looking for a peak.
            look_ahead : The look-ahead value is used when the threshold is found to look if there another peak within this step range. If there is a larger value, we set that as the peak and look ahead again. This is continued until the highest point is found with This look-ahead range.
            alpha : The gain value of a moving average filter
        """
        return _blocks_swig4.peak_detector_fb_make(threshold_factor_rise, threshold_factor_fall, look_ahead, alpha)

    make = staticmethod(make)
    def set_threshold_factor_rise(self, *args, **kwargs):
        """
        set_threshold_factor_rise(peak_detector_fb self, float thr)

        Set the threshold factor value for the rise time.
        """
        return _blocks_swig4.peak_detector_fb_set_threshold_factor_rise(self, *args, **kwargs)

    def set_threshold_factor_fall(self, *args, **kwargs):
        """
        set_threshold_factor_fall(peak_detector_fb self, float thr)

        Set the threshold factor value for the fall time.
        """
        return _blocks_swig4.peak_detector_fb_set_threshold_factor_fall(self, *args, **kwargs)

    def set_look_ahead(self, *args, **kwargs):
        """
        set_look_ahead(peak_detector_fb self, int look)

        Set the look-ahead factor.
        """
        return _blocks_swig4.peak_detector_fb_set_look_ahead(self, *args, **kwargs)

    def set_alpha(self, *args, **kwargs):
        """
        set_alpha(peak_detector_fb self, float alpha)

        Set the running average alpha.
        """
        return _blocks_swig4.peak_detector_fb_set_alpha(self, *args, **kwargs)

    def threshold_factor_rise(self):
        """
        threshold_factor_rise(peak_detector_fb self) -> float

        Get the threshold factor value for the rise time.
        """
        return _blocks_swig4.peak_detector_fb_threshold_factor_rise(self)

    def threshold_factor_fall(self):
        """
        threshold_factor_fall(peak_detector_fb self) -> float

        Get the threshold factor value for the fall time.
        """
        return _blocks_swig4.peak_detector_fb_threshold_factor_fall(self)

    def look_ahead(self):
        """
        look_ahead(peak_detector_fb self) -> int

        Get the look-ahead factor value.
        """
        return _blocks_swig4.peak_detector_fb_look_ahead(self)

    def alpha(self):
        """
        alpha(peak_detector_fb self) -> float

        Get the alpha value of the running average.
        """
        return _blocks_swig4.peak_detector_fb_alpha(self)

    __swig_destroy__ = _blocks_swig4.delete_peak_detector_fb
    __del__ = lambda self : None;
peak_detector_fb_swigregister = _blocks_swig4.peak_detector_fb_swigregister
peak_detector_fb_swigregister(peak_detector_fb)

def peak_detector_fb_make(threshold_factor_rise=0.25, threshold_factor_fall=0.40, look_ahead=10, alpha=0.001):
  """
    peak_detector_fb_make(float threshold_factor_rise=0.25, float threshold_factor_fall=0.40, int look_ahead=10, 
        float alpha=0.001) -> peak_detector_fb_sptr

    Detect the peak of a signal.

    If a peak is detected, this block outputs a 1, or it outputs 0's.

    Constructor Specific Documentation:

    Make a peak detector block.

    Args:
        threshold_factor_rise : The threshold factor determines when a peak has started. An average of the signal is calculated and when the value of the signal goes over threshold_factor_rise*average, we start looking for a peak.
        threshold_factor_fall : The threshold factor determines when a peak has ended. An average of the signal is calculated and when the value of the signal goes below threshold_factor_fall*average, we stop looking for a peak.
        look_ahead : The look-ahead value is used when the threshold is found to look if there another peak within this step range. If there is a larger value, we set that as the peak and look ahead again. This is continued until the highest point is found with This look-ahead range.
        alpha : The gain value of a moving average filter
    """
  return _blocks_swig4.peak_detector_fb_make(threshold_factor_rise, threshold_factor_fall, look_ahead, alpha)

class peak_detector_ib(object):
    """
    Detect the peak of a signal.

    If a peak is detected, this block outputs a 1, or it outputs 0's.

    Constructor Specific Documentation:

    Make a peak detector block.

    Args:
        threshold_factor_rise : The threshold factor determines when a peak has started. An average of the signal is calculated and when the value of the signal goes over threshold_factor_rise*average, we start looking for a peak.
        threshold_factor_fall : The threshold factor determines when a peak has ended. An average of the signal is calculated and when the value of the signal goes below threshold_factor_fall*average, we stop looking for a peak.
        look_ahead : The look-ahead value is used when the threshold is found to look if there another peak within this step range. If there is a larger value, we set that as the peak and look ahead again. This is continued until the highest point is found with This look-ahead range.
        alpha : The gain value of a moving average filter
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(threshold_factor_rise=0.25, threshold_factor_fall=0.40, look_ahead=10, alpha=0.001):
        """
        make(float threshold_factor_rise=0.25, float threshold_factor_fall=0.40, int look_ahead=10, 
            float alpha=0.001) -> peak_detector_ib_sptr

        Detect the peak of a signal.

        If a peak is detected, this block outputs a 1, or it outputs 0's.

        Constructor Specific Documentation:

        Make a peak detector block.

        Args:
            threshold_factor_rise : The threshold factor determines when a peak has started. An average of the signal is calculated and when the value of the signal goes over threshold_factor_rise*average, we start looking for a peak.
            threshold_factor_fall : The threshold factor determines when a peak has ended. An average of the signal is calculated and when the value of the signal goes below threshold_factor_fall*average, we stop looking for a peak.
            look_ahead : The look-ahead value is used when the threshold is found to look if there another peak within this step range. If there is a larger value, we set that as the peak and look ahead again. This is continued until the highest point is found with This look-ahead range.
            alpha : The gain value of a moving average filter
        """
        return _blocks_swig4.peak_detector_ib_make(threshold_factor_rise, threshold_factor_fall, look_ahead, alpha)

    make = staticmethod(make)
    def set_threshold_factor_rise(self, *args, **kwargs):
        """
        set_threshold_factor_rise(peak_detector_ib self, float thr)

        Set the threshold factor value for the rise time.
        """
        return _blocks_swig4.peak_detector_ib_set_threshold_factor_rise(self, *args, **kwargs)

    def set_threshold_factor_fall(self, *args, **kwargs):
        """
        set_threshold_factor_fall(peak_detector_ib self, float thr)

        Set the threshold factor value for the fall time.
        """
        return _blocks_swig4.peak_detector_ib_set_threshold_factor_fall(self, *args, **kwargs)

    def set_look_ahead(self, *args, **kwargs):
        """
        set_look_ahead(peak_detector_ib self, int look)

        Set the look-ahead factor.
        """
        return _blocks_swig4.peak_detector_ib_set_look_ahead(self, *args, **kwargs)

    def set_alpha(self, *args, **kwargs):
        """
        set_alpha(peak_detector_ib self, float alpha)

        Set the running average alpha.
        """
        return _blocks_swig4.peak_detector_ib_set_alpha(self, *args, **kwargs)

    def threshold_factor_rise(self):
        """
        threshold_factor_rise(peak_detector_ib self) -> float

        Get the threshold factor value for the rise time.
        """
        return _blocks_swig4.peak_detector_ib_threshold_factor_rise(self)

    def threshold_factor_fall(self):
        """
        threshold_factor_fall(peak_detector_ib self) -> float

        Get the threshold factor value for the fall time.
        """
        return _blocks_swig4.peak_detector_ib_threshold_factor_fall(self)

    def look_ahead(self):
        """
        look_ahead(peak_detector_ib self) -> int

        Get the look-ahead factor value.
        """
        return _blocks_swig4.peak_detector_ib_look_ahead(self)

    def alpha(self):
        """
        alpha(peak_detector_ib self) -> float

        Get the alpha value of the running average.
        """
        return _blocks_swig4.peak_detector_ib_alpha(self)

    __swig_destroy__ = _blocks_swig4.delete_peak_detector_ib
    __del__ = lambda self : None;
peak_detector_ib_swigregister = _blocks_swig4.peak_detector_ib_swigregister
peak_detector_ib_swigregister(peak_detector_ib)

def peak_detector_ib_make(threshold_factor_rise=0.25, threshold_factor_fall=0.40, look_ahead=10, alpha=0.001):
  """
    peak_detector_ib_make(float threshold_factor_rise=0.25, float threshold_factor_fall=0.40, int look_ahead=10, 
        float alpha=0.001) -> peak_detector_ib_sptr

    Detect the peak of a signal.

    If a peak is detected, this block outputs a 1, or it outputs 0's.

    Constructor Specific Documentation:

    Make a peak detector block.

    Args:
        threshold_factor_rise : The threshold factor determines when a peak has started. An average of the signal is calculated and when the value of the signal goes over threshold_factor_rise*average, we start looking for a peak.
        threshold_factor_fall : The threshold factor determines when a peak has ended. An average of the signal is calculated and when the value of the signal goes below threshold_factor_fall*average, we stop looking for a peak.
        look_ahead : The look-ahead value is used when the threshold is found to look if there another peak within this step range. If there is a larger value, we set that as the peak and look ahead again. This is continued until the highest point is found with This look-ahead range.
        alpha : The gain value of a moving average filter
    """
  return _blocks_swig4.peak_detector_ib_make(threshold_factor_rise, threshold_factor_fall, look_ahead, alpha)

class peak_detector_sb(object):
    """
    Detect the peak of a signal.

    If a peak is detected, this block outputs a 1, or it outputs 0's.

    Constructor Specific Documentation:

    Make a peak detector block.

    Args:
        threshold_factor_rise : The threshold factor determines when a peak has started. An average of the signal is calculated and when the value of the signal goes over threshold_factor_rise*average, we start looking for a peak.
        threshold_factor_fall : The threshold factor determines when a peak has ended. An average of the signal is calculated and when the value of the signal goes below threshold_factor_fall*average, we stop looking for a peak.
        look_ahead : The look-ahead value is used when the threshold is found to look if there another peak within this step range. If there is a larger value, we set that as the peak and look ahead again. This is continued until the highest point is found with This look-ahead range.
        alpha : The gain value of a moving average filter
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(threshold_factor_rise=0.25, threshold_factor_fall=0.40, look_ahead=10, alpha=0.001):
        """
        make(float threshold_factor_rise=0.25, float threshold_factor_fall=0.40, int look_ahead=10, 
            float alpha=0.001) -> peak_detector_sb_sptr

        Detect the peak of a signal.

        If a peak is detected, this block outputs a 1, or it outputs 0's.

        Constructor Specific Documentation:

        Make a peak detector block.

        Args:
            threshold_factor_rise : The threshold factor determines when a peak has started. An average of the signal is calculated and when the value of the signal goes over threshold_factor_rise*average, we start looking for a peak.
            threshold_factor_fall : The threshold factor determines when a peak has ended. An average of the signal is calculated and when the value of the signal goes below threshold_factor_fall*average, we stop looking for a peak.
            look_ahead : The look-ahead value is used when the threshold is found to look if there another peak within this step range. If there is a larger value, we set that as the peak and look ahead again. This is continued until the highest point is found with This look-ahead range.
            alpha : The gain value of a moving average filter
        """
        return _blocks_swig4.peak_detector_sb_make(threshold_factor_rise, threshold_factor_fall, look_ahead, alpha)

    make = staticmethod(make)
    def set_threshold_factor_rise(self, *args, **kwargs):
        """
        set_threshold_factor_rise(peak_detector_sb self, float thr)

        Set the threshold factor value for the rise time.
        """
        return _blocks_swig4.peak_detector_sb_set_threshold_factor_rise(self, *args, **kwargs)

    def set_threshold_factor_fall(self, *args, **kwargs):
        """
        set_threshold_factor_fall(peak_detector_sb self, float thr)

        Set the threshold factor value for the fall time.
        """
        return _blocks_swig4.peak_detector_sb_set_threshold_factor_fall(self, *args, **kwargs)

    def set_look_ahead(self, *args, **kwargs):
        """
        set_look_ahead(peak_detector_sb self, int look)

        Set the look-ahead factor.
        """
        return _blocks_swig4.peak_detector_sb_set_look_ahead(self, *args, **kwargs)

    def set_alpha(self, *args, **kwargs):
        """
        set_alpha(peak_detector_sb self, float alpha)

        Set the running average alpha.
        """
        return _blocks_swig4.peak_detector_sb_set_alpha(self, *args, **kwargs)

    def threshold_factor_rise(self):
        """
        threshold_factor_rise(peak_detector_sb self) -> float

        Get the threshold factor value for the rise time.
        """
        return _blocks_swig4.peak_detector_sb_threshold_factor_rise(self)

    def threshold_factor_fall(self):
        """
        threshold_factor_fall(peak_detector_sb self) -> float

        Get the threshold factor value for the fall time.
        """
        return _blocks_swig4.peak_detector_sb_threshold_factor_fall(self)

    def look_ahead(self):
        """
        look_ahead(peak_detector_sb self) -> int

        Get the look-ahead factor value.
        """
        return _blocks_swig4.peak_detector_sb_look_ahead(self)

    def alpha(self):
        """
        alpha(peak_detector_sb self) -> float

        Get the alpha value of the running average.
        """
        return _blocks_swig4.peak_detector_sb_alpha(self)

    __swig_destroy__ = _blocks_swig4.delete_peak_detector_sb
    __del__ = lambda self : None;
peak_detector_sb_swigregister = _blocks_swig4.peak_detector_sb_swigregister
peak_detector_sb_swigregister(peak_detector_sb)

def peak_detector_sb_make(threshold_factor_rise=0.25, threshold_factor_fall=0.40, look_ahead=10, alpha=0.001):
  """
    peak_detector_sb_make(float threshold_factor_rise=0.25, float threshold_factor_fall=0.40, int look_ahead=10, 
        float alpha=0.001) -> peak_detector_sb_sptr

    Detect the peak of a signal.

    If a peak is detected, this block outputs a 1, or it outputs 0's.

    Constructor Specific Documentation:

    Make a peak detector block.

    Args:
        threshold_factor_rise : The threshold factor determines when a peak has started. An average of the signal is calculated and when the value of the signal goes over threshold_factor_rise*average, we start looking for a peak.
        threshold_factor_fall : The threshold factor determines when a peak has ended. An average of the signal is calculated and when the value of the signal goes below threshold_factor_fall*average, we stop looking for a peak.
        look_ahead : The look-ahead value is used when the threshold is found to look if there another peak within this step range. If there is a larger value, we set that as the peak and look ahead again. This is continued until the highest point is found with This look-ahead range.
        alpha : The gain value of a moving average filter
    """
  return _blocks_swig4.peak_detector_sb_make(threshold_factor_rise, threshold_factor_fall, look_ahead, alpha)

class peak_detector2_fb(object):
    """
    Detect the peak of a signal.

    If a peak is detected, this block outputs a 1, or it outputs 0's. A separate debug output may be connected, to view the internal estimated mean described below.

    Constructor Specific Documentation:

    Build a peak detector block with float in, byte out.

    Args:
        threshold_factor_rise : The threshold factor determines when a peak is present. An average of the input signal is calculated (through a single-pole autoregressive filter) and when the value of the input signal goes over threshold_factor_rise*average, we assume we are in the neighborhood of a peak. The block will then find the position of the maximum within a window of look_ahead samples starting at the point where the threshold was crossed upwards.
        look_ahead : The look-ahead value is used when the threshold is crossed upwards to locate the peak within this range.
        alpha : One minus the pole of a single-pole autoregressive filter that evaluates the average of the input signal.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(threshold_factor_rise=7, look_ahead=1000, alpha=0.001):
        """
        make(float threshold_factor_rise=7, int look_ahead=1000, float alpha=0.001) -> peak_detector2_fb_sptr

        Detect the peak of a signal.

        If a peak is detected, this block outputs a 1, or it outputs 0's. A separate debug output may be connected, to view the internal estimated mean described below.

        Constructor Specific Documentation:

        Build a peak detector block with float in, byte out.

        Args:
            threshold_factor_rise : The threshold factor determines when a peak is present. An average of the input signal is calculated (through a single-pole autoregressive filter) and when the value of the input signal goes over threshold_factor_rise*average, we assume we are in the neighborhood of a peak. The block will then find the position of the maximum within a window of look_ahead samples starting at the point where the threshold was crossed upwards.
            look_ahead : The look-ahead value is used when the threshold is crossed upwards to locate the peak within this range.
            alpha : One minus the pole of a single-pole autoregressive filter that evaluates the average of the input signal.
        """
        return _blocks_swig4.peak_detector2_fb_make(threshold_factor_rise, look_ahead, alpha)

    make = staticmethod(make)
    def set_threshold_factor_rise(self, *args, **kwargs):
        """
        set_threshold_factor_rise(peak_detector2_fb self, float thr)

        Set the threshold factor value for the rise time.
        """
        return _blocks_swig4.peak_detector2_fb_set_threshold_factor_rise(self, *args, **kwargs)

    def set_look_ahead(self, *args, **kwargs):
        """
        set_look_ahead(peak_detector2_fb self, int look)

        Set the look-ahead factor.
        """
        return _blocks_swig4.peak_detector2_fb_set_look_ahead(self, *args, **kwargs)

    def set_alpha(self, *args, **kwargs):
        """
        set_alpha(peak_detector2_fb self, float alpha)

        Set the running average alpha.
        """
        return _blocks_swig4.peak_detector2_fb_set_alpha(self, *args, **kwargs)

    def threshold_factor_rise(self):
        """
        threshold_factor_rise(peak_detector2_fb self) -> float

        Get the threshold factor value for the rise time.
        """
        return _blocks_swig4.peak_detector2_fb_threshold_factor_rise(self)

    def look_ahead(self):
        """
        look_ahead(peak_detector2_fb self) -> int

        Get the look-ahead factor value.
        """
        return _blocks_swig4.peak_detector2_fb_look_ahead(self)

    def alpha(self):
        """
        alpha(peak_detector2_fb self) -> float

        Get the alpha value of the running average.
        """
        return _blocks_swig4.peak_detector2_fb_alpha(self)

    __swig_destroy__ = _blocks_swig4.delete_peak_detector2_fb
    __del__ = lambda self : None;
peak_detector2_fb_swigregister = _blocks_swig4.peak_detector2_fb_swigregister
peak_detector2_fb_swigregister(peak_detector2_fb)

def peak_detector2_fb_make(threshold_factor_rise=7, look_ahead=1000, alpha=0.001):
  """
    peak_detector2_fb_make(float threshold_factor_rise=7, int look_ahead=1000, float alpha=0.001) -> peak_detector2_fb_sptr

    Detect the peak of a signal.

    If a peak is detected, this block outputs a 1, or it outputs 0's. A separate debug output may be connected, to view the internal estimated mean described below.

    Constructor Specific Documentation:

    Build a peak detector block with float in, byte out.

    Args:
        threshold_factor_rise : The threshold factor determines when a peak is present. An average of the input signal is calculated (through a single-pole autoregressive filter) and when the value of the input signal goes over threshold_factor_rise*average, we assume we are in the neighborhood of a peak. The block will then find the position of the maximum within a window of look_ahead samples starting at the point where the threshold was crossed upwards.
        look_ahead : The look-ahead value is used when the threshold is crossed upwards to locate the peak within this range.
        alpha : One minus the pole of a single-pole autoregressive filter that evaluates the average of the input signal.
    """
  return _blocks_swig4.peak_detector2_fb_make(threshold_factor_rise, look_ahead, alpha)

class plateau_detector_fb(object):
    """
    Detects a plateau and marks the middle.

    Detect a plateau of a-priori known height. Input is a stream of floats, the output is a stream of bytes. Whenever a plateau is detected, the middle of that plateau is marked with a '1' on the output stream (all other samples are left at zero).

    You can use this in a Schmidl & Cox synchronisation algorithm to interpret the output of the normalized correlator. Just pass the length of the cyclic prefix (in samples) as the max_len parameter).

    Unlike the peak detectors, you must the now the absolute height of the plateau. Whenever the amplitude exceeds the given threshold, it starts assuming the presence of a plateau.

    An implicit hysteresis is provided by the fact that after detecting one plateau, it waits at least max_len samples before the next plateau can be detected.

    Constructor Specific Documentation:



    Args:
        max_len : Maximum length of the plateau
        threshold : Anything above this value is considered a plateau
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int max_len, float threshold=0.9) -> plateau_detector_fb_sptr

        Detects a plateau and marks the middle.

        Detect a plateau of a-priori known height. Input is a stream of floats, the output is a stream of bytes. Whenever a plateau is detected, the middle of that plateau is marked with a '1' on the output stream (all other samples are left at zero).

        You can use this in a Schmidl & Cox synchronisation algorithm to interpret the output of the normalized correlator. Just pass the length of the cyclic prefix (in samples) as the max_len parameter).

        Unlike the peak detectors, you must the now the absolute height of the plateau. Whenever the amplitude exceeds the given threshold, it starts assuming the presence of a plateau.

        An implicit hysteresis is provided by the fact that after detecting one plateau, it waits at least max_len samples before the next plateau can be detected.

        Constructor Specific Documentation:



        Args:
            max_len : Maximum length of the plateau
            threshold : Anything above this value is considered a plateau
        """
        return _blocks_swig4.plateau_detector_fb_make(*args, **kwargs)

    make = staticmethod(make)
    def set_threshold(self, *args, **kwargs):
        """set_threshold(plateau_detector_fb self, float threshold)"""
        return _blocks_swig4.plateau_detector_fb_set_threshold(self, *args, **kwargs)

    def threshold(self):
        """threshold(plateau_detector_fb self) -> float"""
        return _blocks_swig4.plateau_detector_fb_threshold(self)

    __swig_destroy__ = _blocks_swig4.delete_plateau_detector_fb
    __del__ = lambda self : None;
plateau_detector_fb_swigregister = _blocks_swig4.plateau_detector_fb_swigregister
plateau_detector_fb_swigregister(plateau_detector_fb)

def plateau_detector_fb_make(*args, **kwargs):
  """
    plateau_detector_fb_make(int max_len, float threshold=0.9) -> plateau_detector_fb_sptr

    Detects a plateau and marks the middle.

    Detect a plateau of a-priori known height. Input is a stream of floats, the output is a stream of bytes. Whenever a plateau is detected, the middle of that plateau is marked with a '1' on the output stream (all other samples are left at zero).

    You can use this in a Schmidl & Cox synchronisation algorithm to interpret the output of the normalized correlator. Just pass the length of the cyclic prefix (in samples) as the max_len parameter).

    Unlike the peak detectors, you must the now the absolute height of the plateau. Whenever the amplitude exceeds the given threshold, it starts assuming the presence of a plateau.

    An implicit hysteresis is provided by the fact that after detecting one plateau, it waits at least max_len samples before the next plateau can be detected.

    Constructor Specific Documentation:



    Args:
        max_len : Maximum length of the plateau
        threshold : Anything above this value is considered a plateau
    """
  return _blocks_swig4.plateau_detector_fb_make(*args, **kwargs)

class probe_rate(object):
    """
    throughput measurement

    Constructor Specific Documentation:

    Make a throughput measurement block.

    Args:
        itemsize : size of each stream item
        update_rate_ms : minimum update time in milliseconds
        alpha : gain for running average filter
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t itemsize, double update_rate_ms=500.0, double alpha=0.0001) -> probe_rate_sptr

        throughput measurement

        Constructor Specific Documentation:

        Make a throughput measurement block.

        Args:
            itemsize : size of each stream item
            update_rate_ms : minimum update time in milliseconds
            alpha : gain for running average filter
        """
        return _blocks_swig4.probe_rate_make(*args, **kwargs)

    make = staticmethod(make)
    def set_alpha(self, *args, **kwargs):
        """set_alpha(probe_rate self, double alpha)"""
        return _blocks_swig4.probe_rate_set_alpha(self, *args, **kwargs)

    def rate(self):
        """rate(probe_rate self) -> double"""
        return _blocks_swig4.probe_rate_rate(self)

    def start(self):
        """start(probe_rate self) -> bool"""
        return _blocks_swig4.probe_rate_start(self)

    def stop(self):
        """stop(probe_rate self) -> bool"""
        return _blocks_swig4.probe_rate_stop(self)

    __swig_destroy__ = _blocks_swig4.delete_probe_rate
    __del__ = lambda self : None;
probe_rate_swigregister = _blocks_swig4.probe_rate_swigregister
probe_rate_swigregister(probe_rate)

def probe_rate_make(*args, **kwargs):
  """
    probe_rate_make(size_t itemsize, double update_rate_ms=500.0, double alpha=0.0001) -> probe_rate_sptr

    throughput measurement

    Constructor Specific Documentation:

    Make a throughput measurement block.

    Args:
        itemsize : size of each stream item
        update_rate_ms : minimum update time in milliseconds
        alpha : gain for running average filter
    """
  return _blocks_swig4.probe_rate_make(*args, **kwargs)

class peak_detector_fb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::peak_detector_fb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::peak_detector_fb)> self) -> peak_detector_fb_sptr
        __init__(boost::shared_ptr<(gr::blocks::peak_detector_fb)> self, peak_detector_fb p) -> peak_detector_fb_sptr
        """
        this = _blocks_swig4.new_peak_detector_fb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(peak_detector_fb_sptr self) -> peak_detector_fb"""
        return _blocks_swig4.peak_detector_fb_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig4.delete_peak_detector_fb_sptr
    __del__ = lambda self : None;
    def make(self, threshold_factor_rise=0.25, threshold_factor_fall=0.40, look_ahead=10, alpha=0.001):
        """
        make(peak_detector_fb_sptr self, float threshold_factor_rise=0.25, float threshold_factor_fall=0.40, int look_ahead=10, 
            float alpha=0.001) -> peak_detector_fb_sptr

        Detect the peak of a signal.

        If a peak is detected, this block outputs a 1, or it outputs 0's.

        Constructor Specific Documentation:

        Make a peak detector block.

        Args:
            threshold_factor_rise : The threshold factor determines when a peak has started. An average of the signal is calculated and when the value of the signal goes over threshold_factor_rise*average, we start looking for a peak.
            threshold_factor_fall : The threshold factor determines when a peak has ended. An average of the signal is calculated and when the value of the signal goes below threshold_factor_fall*average, we stop looking for a peak.
            look_ahead : The look-ahead value is used when the threshold is found to look if there another peak within this step range. If there is a larger value, we set that as the peak and look ahead again. This is continued until the highest point is found with This look-ahead range.
            alpha : The gain value of a moving average filter
        """
        return _blocks_swig4.peak_detector_fb_sptr_make(self, threshold_factor_rise, threshold_factor_fall, look_ahead, alpha)

    def set_threshold_factor_rise(self, *args, **kwargs):
        """
        set_threshold_factor_rise(peak_detector_fb_sptr self, float thr)

        Set the threshold factor value for the rise time.
        """
        return _blocks_swig4.peak_detector_fb_sptr_set_threshold_factor_rise(self, *args, **kwargs)

    def set_threshold_factor_fall(self, *args, **kwargs):
        """
        set_threshold_factor_fall(peak_detector_fb_sptr self, float thr)

        Set the threshold factor value for the fall time.
        """
        return _blocks_swig4.peak_detector_fb_sptr_set_threshold_factor_fall(self, *args, **kwargs)

    def set_look_ahead(self, *args, **kwargs):
        """
        set_look_ahead(peak_detector_fb_sptr self, int look)

        Set the look-ahead factor.
        """
        return _blocks_swig4.peak_detector_fb_sptr_set_look_ahead(self, *args, **kwargs)

    def set_alpha(self, *args, **kwargs):
        """
        set_alpha(peak_detector_fb_sptr self, float alpha)

        Set the running average alpha.
        """
        return _blocks_swig4.peak_detector_fb_sptr_set_alpha(self, *args, **kwargs)

    def threshold_factor_rise(self):
        """
        threshold_factor_rise(peak_detector_fb_sptr self) -> float

        Get the threshold factor value for the rise time.
        """
        return _blocks_swig4.peak_detector_fb_sptr_threshold_factor_rise(self)

    def threshold_factor_fall(self):
        """
        threshold_factor_fall(peak_detector_fb_sptr self) -> float

        Get the threshold factor value for the fall time.
        """
        return _blocks_swig4.peak_detector_fb_sptr_threshold_factor_fall(self)

    def look_ahead(self):
        """
        look_ahead(peak_detector_fb_sptr self) -> int

        Get the look-ahead factor value.
        """
        return _blocks_swig4.peak_detector_fb_sptr_look_ahead(self)

    def alpha(self):
        """
        alpha(peak_detector_fb_sptr self) -> float

        Get the alpha value of the running average.
        """
        return _blocks_swig4.peak_detector_fb_sptr_alpha(self)

    def history(self):
        """history(peak_detector_fb_sptr self) -> unsigned int"""
        return _blocks_swig4.peak_detector_fb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(peak_detector_fb_sptr self, int which, int delay)
        declare_sample_delay(peak_detector_fb_sptr self, unsigned int delay)
        """
        return _blocks_swig4.peak_detector_fb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(peak_detector_fb_sptr self, int which) -> unsigned int"""
        return _blocks_swig4.peak_detector_fb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(peak_detector_fb_sptr self) -> int"""
        return _blocks_swig4.peak_detector_fb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(peak_detector_fb_sptr self) -> double"""
        return _blocks_swig4.peak_detector_fb_sptr_relative_rate(self)

    def start(self):
        """start(peak_detector_fb_sptr self) -> bool"""
        return _blocks_swig4.peak_detector_fb_sptr_start(self)

    def stop(self):
        """stop(peak_detector_fb_sptr self) -> bool"""
        return _blocks_swig4.peak_detector_fb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(peak_detector_fb_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig4.peak_detector_fb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(peak_detector_fb_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig4.peak_detector_fb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(peak_detector_fb_sptr self) -> int"""
        return _blocks_swig4.peak_detector_fb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(peak_detector_fb_sptr self, int m)"""
        return _blocks_swig4.peak_detector_fb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(peak_detector_fb_sptr self)"""
        return _blocks_swig4.peak_detector_fb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(peak_detector_fb_sptr self) -> bool"""
        return _blocks_swig4.peak_detector_fb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(peak_detector_fb_sptr self, int m)"""
        return _blocks_swig4.peak_detector_fb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(peak_detector_fb_sptr self) -> int"""
        return _blocks_swig4.peak_detector_fb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(peak_detector_fb_sptr self, int i) -> long"""
        return _blocks_swig4.peak_detector_fb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(peak_detector_fb_sptr self, long max_output_buffer)
        set_max_output_buffer(peak_detector_fb_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig4.peak_detector_fb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(peak_detector_fb_sptr self, int i) -> long"""
        return _blocks_swig4.peak_detector_fb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(peak_detector_fb_sptr self, long min_output_buffer)
        set_min_output_buffer(peak_detector_fb_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig4.peak_detector_fb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(peak_detector_fb_sptr self) -> float"""
        return _blocks_swig4.peak_detector_fb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(peak_detector_fb_sptr self) -> float"""
        return _blocks_swig4.peak_detector_fb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(peak_detector_fb_sptr self) -> float"""
        return _blocks_swig4.peak_detector_fb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(peak_detector_fb_sptr self) -> float"""
        return _blocks_swig4.peak_detector_fb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(peak_detector_fb_sptr self) -> float"""
        return _blocks_swig4.peak_detector_fb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(peak_detector_fb_sptr self) -> float"""
        return _blocks_swig4.peak_detector_fb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(peak_detector_fb_sptr self, int which) -> float
        pc_input_buffers_full(peak_detector_fb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.peak_detector_fb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(peak_detector_fb_sptr self, int which) -> float
        pc_input_buffers_full_avg(peak_detector_fb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.peak_detector_fb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(peak_detector_fb_sptr self, int which) -> float
        pc_input_buffers_full_var(peak_detector_fb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.peak_detector_fb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(peak_detector_fb_sptr self, int which) -> float
        pc_output_buffers_full(peak_detector_fb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.peak_detector_fb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(peak_detector_fb_sptr self, int which) -> float
        pc_output_buffers_full_avg(peak_detector_fb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.peak_detector_fb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(peak_detector_fb_sptr self, int which) -> float
        pc_output_buffers_full_var(peak_detector_fb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.peak_detector_fb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(peak_detector_fb_sptr self) -> float"""
        return _blocks_swig4.peak_detector_fb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(peak_detector_fb_sptr self) -> float"""
        return _blocks_swig4.peak_detector_fb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(peak_detector_fb_sptr self) -> float"""
        return _blocks_swig4.peak_detector_fb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(peak_detector_fb_sptr self) -> float"""
        return _blocks_swig4.peak_detector_fb_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(peak_detector_fb_sptr self) -> float"""
        return _blocks_swig4.peak_detector_fb_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(peak_detector_fb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig4.peak_detector_fb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(peak_detector_fb_sptr self)"""
        return _blocks_swig4.peak_detector_fb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(peak_detector_fb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig4.peak_detector_fb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(peak_detector_fb_sptr self) -> int"""
        return _blocks_swig4.peak_detector_fb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(peak_detector_fb_sptr self) -> int"""
        return _blocks_swig4.peak_detector_fb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(peak_detector_fb_sptr self, int priority) -> int"""
        return _blocks_swig4.peak_detector_fb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(peak_detector_fb_sptr self) -> std::string"""
        return _blocks_swig4.peak_detector_fb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(peak_detector_fb_sptr self) -> std::string"""
        return _blocks_swig4.peak_detector_fb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(peak_detector_fb_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.peak_detector_fb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(peak_detector_fb_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.peak_detector_fb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(peak_detector_fb_sptr self) -> long"""
        return _blocks_swig4.peak_detector_fb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(peak_detector_fb_sptr self) -> basic_block_sptr"""
        return _blocks_swig4.peak_detector_fb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(peak_detector_fb_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig4.peak_detector_fb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(peak_detector_fb_sptr self) -> std::string"""
        return _blocks_swig4.peak_detector_fb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(peak_detector_fb_sptr self, std::string name)"""
        return _blocks_swig4.peak_detector_fb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(peak_detector_fb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig4.peak_detector_fb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(peak_detector_fb_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.peak_detector_fb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(peak_detector_fb_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.peak_detector_fb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(peak_detector_fb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig4.peak_detector_fb_sptr_message_subscribers(self, *args, **kwargs)

peak_detector_fb_sptr_swigregister = _blocks_swig4.peak_detector_fb_sptr_swigregister
peak_detector_fb_sptr_swigregister(peak_detector_fb_sptr)

peak_detector_fb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
peak_detector_fb = peak_detector_fb.make;

class peak_detector_ib_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::peak_detector_ib)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::peak_detector_ib)> self) -> peak_detector_ib_sptr
        __init__(boost::shared_ptr<(gr::blocks::peak_detector_ib)> self, peak_detector_ib p) -> peak_detector_ib_sptr
        """
        this = _blocks_swig4.new_peak_detector_ib_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(peak_detector_ib_sptr self) -> peak_detector_ib"""
        return _blocks_swig4.peak_detector_ib_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig4.delete_peak_detector_ib_sptr
    __del__ = lambda self : None;
    def make(self, threshold_factor_rise=0.25, threshold_factor_fall=0.40, look_ahead=10, alpha=0.001):
        """
        make(peak_detector_ib_sptr self, float threshold_factor_rise=0.25, float threshold_factor_fall=0.40, int look_ahead=10, 
            float alpha=0.001) -> peak_detector_ib_sptr

        Detect the peak of a signal.

        If a peak is detected, this block outputs a 1, or it outputs 0's.

        Constructor Specific Documentation:

        Make a peak detector block.

        Args:
            threshold_factor_rise : The threshold factor determines when a peak has started. An average of the signal is calculated and when the value of the signal goes over threshold_factor_rise*average, we start looking for a peak.
            threshold_factor_fall : The threshold factor determines when a peak has ended. An average of the signal is calculated and when the value of the signal goes below threshold_factor_fall*average, we stop looking for a peak.
            look_ahead : The look-ahead value is used when the threshold is found to look if there another peak within this step range. If there is a larger value, we set that as the peak and look ahead again. This is continued until the highest point is found with This look-ahead range.
            alpha : The gain value of a moving average filter
        """
        return _blocks_swig4.peak_detector_ib_sptr_make(self, threshold_factor_rise, threshold_factor_fall, look_ahead, alpha)

    def set_threshold_factor_rise(self, *args, **kwargs):
        """
        set_threshold_factor_rise(peak_detector_ib_sptr self, float thr)

        Set the threshold factor value for the rise time.
        """
        return _blocks_swig4.peak_detector_ib_sptr_set_threshold_factor_rise(self, *args, **kwargs)

    def set_threshold_factor_fall(self, *args, **kwargs):
        """
        set_threshold_factor_fall(peak_detector_ib_sptr self, float thr)

        Set the threshold factor value for the fall time.
        """
        return _blocks_swig4.peak_detector_ib_sptr_set_threshold_factor_fall(self, *args, **kwargs)

    def set_look_ahead(self, *args, **kwargs):
        """
        set_look_ahead(peak_detector_ib_sptr self, int look)

        Set the look-ahead factor.
        """
        return _blocks_swig4.peak_detector_ib_sptr_set_look_ahead(self, *args, **kwargs)

    def set_alpha(self, *args, **kwargs):
        """
        set_alpha(peak_detector_ib_sptr self, float alpha)

        Set the running average alpha.
        """
        return _blocks_swig4.peak_detector_ib_sptr_set_alpha(self, *args, **kwargs)

    def threshold_factor_rise(self):
        """
        threshold_factor_rise(peak_detector_ib_sptr self) -> float

        Get the threshold factor value for the rise time.
        """
        return _blocks_swig4.peak_detector_ib_sptr_threshold_factor_rise(self)

    def threshold_factor_fall(self):
        """
        threshold_factor_fall(peak_detector_ib_sptr self) -> float

        Get the threshold factor value for the fall time.
        """
        return _blocks_swig4.peak_detector_ib_sptr_threshold_factor_fall(self)

    def look_ahead(self):
        """
        look_ahead(peak_detector_ib_sptr self) -> int

        Get the look-ahead factor value.
        """
        return _blocks_swig4.peak_detector_ib_sptr_look_ahead(self)

    def alpha(self):
        """
        alpha(peak_detector_ib_sptr self) -> float

        Get the alpha value of the running average.
        """
        return _blocks_swig4.peak_detector_ib_sptr_alpha(self)

    def history(self):
        """history(peak_detector_ib_sptr self) -> unsigned int"""
        return _blocks_swig4.peak_detector_ib_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(peak_detector_ib_sptr self, int which, int delay)
        declare_sample_delay(peak_detector_ib_sptr self, unsigned int delay)
        """
        return _blocks_swig4.peak_detector_ib_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(peak_detector_ib_sptr self, int which) -> unsigned int"""
        return _blocks_swig4.peak_detector_ib_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(peak_detector_ib_sptr self) -> int"""
        return _blocks_swig4.peak_detector_ib_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(peak_detector_ib_sptr self) -> double"""
        return _blocks_swig4.peak_detector_ib_sptr_relative_rate(self)

    def start(self):
        """start(peak_detector_ib_sptr self) -> bool"""
        return _blocks_swig4.peak_detector_ib_sptr_start(self)

    def stop(self):
        """stop(peak_detector_ib_sptr self) -> bool"""
        return _blocks_swig4.peak_detector_ib_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(peak_detector_ib_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig4.peak_detector_ib_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(peak_detector_ib_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig4.peak_detector_ib_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(peak_detector_ib_sptr self) -> int"""
        return _blocks_swig4.peak_detector_ib_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(peak_detector_ib_sptr self, int m)"""
        return _blocks_swig4.peak_detector_ib_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(peak_detector_ib_sptr self)"""
        return _blocks_swig4.peak_detector_ib_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(peak_detector_ib_sptr self) -> bool"""
        return _blocks_swig4.peak_detector_ib_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(peak_detector_ib_sptr self, int m)"""
        return _blocks_swig4.peak_detector_ib_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(peak_detector_ib_sptr self) -> int"""
        return _blocks_swig4.peak_detector_ib_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(peak_detector_ib_sptr self, int i) -> long"""
        return _blocks_swig4.peak_detector_ib_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(peak_detector_ib_sptr self, long max_output_buffer)
        set_max_output_buffer(peak_detector_ib_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig4.peak_detector_ib_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(peak_detector_ib_sptr self, int i) -> long"""
        return _blocks_swig4.peak_detector_ib_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(peak_detector_ib_sptr self, long min_output_buffer)
        set_min_output_buffer(peak_detector_ib_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig4.peak_detector_ib_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(peak_detector_ib_sptr self) -> float"""
        return _blocks_swig4.peak_detector_ib_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(peak_detector_ib_sptr self) -> float"""
        return _blocks_swig4.peak_detector_ib_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(peak_detector_ib_sptr self) -> float"""
        return _blocks_swig4.peak_detector_ib_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(peak_detector_ib_sptr self) -> float"""
        return _blocks_swig4.peak_detector_ib_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(peak_detector_ib_sptr self) -> float"""
        return _blocks_swig4.peak_detector_ib_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(peak_detector_ib_sptr self) -> float"""
        return _blocks_swig4.peak_detector_ib_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(peak_detector_ib_sptr self, int which) -> float
        pc_input_buffers_full(peak_detector_ib_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.peak_detector_ib_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(peak_detector_ib_sptr self, int which) -> float
        pc_input_buffers_full_avg(peak_detector_ib_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.peak_detector_ib_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(peak_detector_ib_sptr self, int which) -> float
        pc_input_buffers_full_var(peak_detector_ib_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.peak_detector_ib_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(peak_detector_ib_sptr self, int which) -> float
        pc_output_buffers_full(peak_detector_ib_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.peak_detector_ib_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(peak_detector_ib_sptr self, int which) -> float
        pc_output_buffers_full_avg(peak_detector_ib_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.peak_detector_ib_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(peak_detector_ib_sptr self, int which) -> float
        pc_output_buffers_full_var(peak_detector_ib_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.peak_detector_ib_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(peak_detector_ib_sptr self) -> float"""
        return _blocks_swig4.peak_detector_ib_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(peak_detector_ib_sptr self) -> float"""
        return _blocks_swig4.peak_detector_ib_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(peak_detector_ib_sptr self) -> float"""
        return _blocks_swig4.peak_detector_ib_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(peak_detector_ib_sptr self) -> float"""
        return _blocks_swig4.peak_detector_ib_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(peak_detector_ib_sptr self) -> float"""
        return _blocks_swig4.peak_detector_ib_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(peak_detector_ib_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig4.peak_detector_ib_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(peak_detector_ib_sptr self)"""
        return _blocks_swig4.peak_detector_ib_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(peak_detector_ib_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig4.peak_detector_ib_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(peak_detector_ib_sptr self) -> int"""
        return _blocks_swig4.peak_detector_ib_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(peak_detector_ib_sptr self) -> int"""
        return _blocks_swig4.peak_detector_ib_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(peak_detector_ib_sptr self, int priority) -> int"""
        return _blocks_swig4.peak_detector_ib_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(peak_detector_ib_sptr self) -> std::string"""
        return _blocks_swig4.peak_detector_ib_sptr_name(self)

    def symbol_name(self):
        """symbol_name(peak_detector_ib_sptr self) -> std::string"""
        return _blocks_swig4.peak_detector_ib_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(peak_detector_ib_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.peak_detector_ib_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(peak_detector_ib_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.peak_detector_ib_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(peak_detector_ib_sptr self) -> long"""
        return _blocks_swig4.peak_detector_ib_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(peak_detector_ib_sptr self) -> basic_block_sptr"""
        return _blocks_swig4.peak_detector_ib_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(peak_detector_ib_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig4.peak_detector_ib_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(peak_detector_ib_sptr self) -> std::string"""
        return _blocks_swig4.peak_detector_ib_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(peak_detector_ib_sptr self, std::string name)"""
        return _blocks_swig4.peak_detector_ib_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(peak_detector_ib_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig4.peak_detector_ib_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(peak_detector_ib_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.peak_detector_ib_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(peak_detector_ib_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.peak_detector_ib_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(peak_detector_ib_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig4.peak_detector_ib_sptr_message_subscribers(self, *args, **kwargs)

peak_detector_ib_sptr_swigregister = _blocks_swig4.peak_detector_ib_sptr_swigregister
peak_detector_ib_sptr_swigregister(peak_detector_ib_sptr)

peak_detector_ib_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
peak_detector_ib = peak_detector_ib.make;

class peak_detector_sb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::peak_detector_sb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::peak_detector_sb)> self) -> peak_detector_sb_sptr
        __init__(boost::shared_ptr<(gr::blocks::peak_detector_sb)> self, peak_detector_sb p) -> peak_detector_sb_sptr
        """
        this = _blocks_swig4.new_peak_detector_sb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(peak_detector_sb_sptr self) -> peak_detector_sb"""
        return _blocks_swig4.peak_detector_sb_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig4.delete_peak_detector_sb_sptr
    __del__ = lambda self : None;
    def make(self, threshold_factor_rise=0.25, threshold_factor_fall=0.40, look_ahead=10, alpha=0.001):
        """
        make(peak_detector_sb_sptr self, float threshold_factor_rise=0.25, float threshold_factor_fall=0.40, int look_ahead=10, 
            float alpha=0.001) -> peak_detector_sb_sptr

        Detect the peak of a signal.

        If a peak is detected, this block outputs a 1, or it outputs 0's.

        Constructor Specific Documentation:

        Make a peak detector block.

        Args:
            threshold_factor_rise : The threshold factor determines when a peak has started. An average of the signal is calculated and when the value of the signal goes over threshold_factor_rise*average, we start looking for a peak.
            threshold_factor_fall : The threshold factor determines when a peak has ended. An average of the signal is calculated and when the value of the signal goes below threshold_factor_fall*average, we stop looking for a peak.
            look_ahead : The look-ahead value is used when the threshold is found to look if there another peak within this step range. If there is a larger value, we set that as the peak and look ahead again. This is continued until the highest point is found with This look-ahead range.
            alpha : The gain value of a moving average filter
        """
        return _blocks_swig4.peak_detector_sb_sptr_make(self, threshold_factor_rise, threshold_factor_fall, look_ahead, alpha)

    def set_threshold_factor_rise(self, *args, **kwargs):
        """
        set_threshold_factor_rise(peak_detector_sb_sptr self, float thr)

        Set the threshold factor value for the rise time.
        """
        return _blocks_swig4.peak_detector_sb_sptr_set_threshold_factor_rise(self, *args, **kwargs)

    def set_threshold_factor_fall(self, *args, **kwargs):
        """
        set_threshold_factor_fall(peak_detector_sb_sptr self, float thr)

        Set the threshold factor value for the fall time.
        """
        return _blocks_swig4.peak_detector_sb_sptr_set_threshold_factor_fall(self, *args, **kwargs)

    def set_look_ahead(self, *args, **kwargs):
        """
        set_look_ahead(peak_detector_sb_sptr self, int look)

        Set the look-ahead factor.
        """
        return _blocks_swig4.peak_detector_sb_sptr_set_look_ahead(self, *args, **kwargs)

    def set_alpha(self, *args, **kwargs):
        """
        set_alpha(peak_detector_sb_sptr self, float alpha)

        Set the running average alpha.
        """
        return _blocks_swig4.peak_detector_sb_sptr_set_alpha(self, *args, **kwargs)

    def threshold_factor_rise(self):
        """
        threshold_factor_rise(peak_detector_sb_sptr self) -> float

        Get the threshold factor value for the rise time.
        """
        return _blocks_swig4.peak_detector_sb_sptr_threshold_factor_rise(self)

    def threshold_factor_fall(self):
        """
        threshold_factor_fall(peak_detector_sb_sptr self) -> float

        Get the threshold factor value for the fall time.
        """
        return _blocks_swig4.peak_detector_sb_sptr_threshold_factor_fall(self)

    def look_ahead(self):
        """
        look_ahead(peak_detector_sb_sptr self) -> int

        Get the look-ahead factor value.
        """
        return _blocks_swig4.peak_detector_sb_sptr_look_ahead(self)

    def alpha(self):
        """
        alpha(peak_detector_sb_sptr self) -> float

        Get the alpha value of the running average.
        """
        return _blocks_swig4.peak_detector_sb_sptr_alpha(self)

    def history(self):
        """history(peak_detector_sb_sptr self) -> unsigned int"""
        return _blocks_swig4.peak_detector_sb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(peak_detector_sb_sptr self, int which, int delay)
        declare_sample_delay(peak_detector_sb_sptr self, unsigned int delay)
        """
        return _blocks_swig4.peak_detector_sb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(peak_detector_sb_sptr self, int which) -> unsigned int"""
        return _blocks_swig4.peak_detector_sb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(peak_detector_sb_sptr self) -> int"""
        return _blocks_swig4.peak_detector_sb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(peak_detector_sb_sptr self) -> double"""
        return _blocks_swig4.peak_detector_sb_sptr_relative_rate(self)

    def start(self):
        """start(peak_detector_sb_sptr self) -> bool"""
        return _blocks_swig4.peak_detector_sb_sptr_start(self)

    def stop(self):
        """stop(peak_detector_sb_sptr self) -> bool"""
        return _blocks_swig4.peak_detector_sb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(peak_detector_sb_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig4.peak_detector_sb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(peak_detector_sb_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig4.peak_detector_sb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(peak_detector_sb_sptr self) -> int"""
        return _blocks_swig4.peak_detector_sb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(peak_detector_sb_sptr self, int m)"""
        return _blocks_swig4.peak_detector_sb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(peak_detector_sb_sptr self)"""
        return _blocks_swig4.peak_detector_sb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(peak_detector_sb_sptr self) -> bool"""
        return _blocks_swig4.peak_detector_sb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(peak_detector_sb_sptr self, int m)"""
        return _blocks_swig4.peak_detector_sb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(peak_detector_sb_sptr self) -> int"""
        return _blocks_swig4.peak_detector_sb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(peak_detector_sb_sptr self, int i) -> long"""
        return _blocks_swig4.peak_detector_sb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(peak_detector_sb_sptr self, long max_output_buffer)
        set_max_output_buffer(peak_detector_sb_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig4.peak_detector_sb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(peak_detector_sb_sptr self, int i) -> long"""
        return _blocks_swig4.peak_detector_sb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(peak_detector_sb_sptr self, long min_output_buffer)
        set_min_output_buffer(peak_detector_sb_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig4.peak_detector_sb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(peak_detector_sb_sptr self) -> float"""
        return _blocks_swig4.peak_detector_sb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(peak_detector_sb_sptr self) -> float"""
        return _blocks_swig4.peak_detector_sb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(peak_detector_sb_sptr self) -> float"""
        return _blocks_swig4.peak_detector_sb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(peak_detector_sb_sptr self) -> float"""
        return _blocks_swig4.peak_detector_sb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(peak_detector_sb_sptr self) -> float"""
        return _blocks_swig4.peak_detector_sb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(peak_detector_sb_sptr self) -> float"""
        return _blocks_swig4.peak_detector_sb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(peak_detector_sb_sptr self, int which) -> float
        pc_input_buffers_full(peak_detector_sb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.peak_detector_sb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(peak_detector_sb_sptr self, int which) -> float
        pc_input_buffers_full_avg(peak_detector_sb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.peak_detector_sb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(peak_detector_sb_sptr self, int which) -> float
        pc_input_buffers_full_var(peak_detector_sb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.peak_detector_sb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(peak_detector_sb_sptr self, int which) -> float
        pc_output_buffers_full(peak_detector_sb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.peak_detector_sb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(peak_detector_sb_sptr self, int which) -> float
        pc_output_buffers_full_avg(peak_detector_sb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.peak_detector_sb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(peak_detector_sb_sptr self, int which) -> float
        pc_output_buffers_full_var(peak_detector_sb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.peak_detector_sb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(peak_detector_sb_sptr self) -> float"""
        return _blocks_swig4.peak_detector_sb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(peak_detector_sb_sptr self) -> float"""
        return _blocks_swig4.peak_detector_sb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(peak_detector_sb_sptr self) -> float"""
        return _blocks_swig4.peak_detector_sb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(peak_detector_sb_sptr self) -> float"""
        return _blocks_swig4.peak_detector_sb_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(peak_detector_sb_sptr self) -> float"""
        return _blocks_swig4.peak_detector_sb_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(peak_detector_sb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig4.peak_detector_sb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(peak_detector_sb_sptr self)"""
        return _blocks_swig4.peak_detector_sb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(peak_detector_sb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig4.peak_detector_sb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(peak_detector_sb_sptr self) -> int"""
        return _blocks_swig4.peak_detector_sb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(peak_detector_sb_sptr self) -> int"""
        return _blocks_swig4.peak_detector_sb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(peak_detector_sb_sptr self, int priority) -> int"""
        return _blocks_swig4.peak_detector_sb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(peak_detector_sb_sptr self) -> std::string"""
        return _blocks_swig4.peak_detector_sb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(peak_detector_sb_sptr self) -> std::string"""
        return _blocks_swig4.peak_detector_sb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(peak_detector_sb_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.peak_detector_sb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(peak_detector_sb_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.peak_detector_sb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(peak_detector_sb_sptr self) -> long"""
        return _blocks_swig4.peak_detector_sb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(peak_detector_sb_sptr self) -> basic_block_sptr"""
        return _blocks_swig4.peak_detector_sb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(peak_detector_sb_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig4.peak_detector_sb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(peak_detector_sb_sptr self) -> std::string"""
        return _blocks_swig4.peak_detector_sb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(peak_detector_sb_sptr self, std::string name)"""
        return _blocks_swig4.peak_detector_sb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(peak_detector_sb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig4.peak_detector_sb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(peak_detector_sb_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.peak_detector_sb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(peak_detector_sb_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.peak_detector_sb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(peak_detector_sb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig4.peak_detector_sb_sptr_message_subscribers(self, *args, **kwargs)

peak_detector_sb_sptr_swigregister = _blocks_swig4.peak_detector_sb_sptr_swigregister
peak_detector_sb_sptr_swigregister(peak_detector_sb_sptr)

peak_detector_sb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
peak_detector_sb = peak_detector_sb.make;

class peak_detector2_fb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::peak_detector2_fb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::peak_detector2_fb)> self) -> peak_detector2_fb_sptr
        __init__(boost::shared_ptr<(gr::blocks::peak_detector2_fb)> self, peak_detector2_fb p) -> peak_detector2_fb_sptr
        """
        this = _blocks_swig4.new_peak_detector2_fb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(peak_detector2_fb_sptr self) -> peak_detector2_fb"""
        return _blocks_swig4.peak_detector2_fb_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig4.delete_peak_detector2_fb_sptr
    __del__ = lambda self : None;
    def make(self, threshold_factor_rise=7, look_ahead=1000, alpha=0.001):
        """
        make(peak_detector2_fb_sptr self, float threshold_factor_rise=7, int look_ahead=1000, float alpha=0.001) -> peak_detector2_fb_sptr

        Detect the peak of a signal.

        If a peak is detected, this block outputs a 1, or it outputs 0's. A separate debug output may be connected, to view the internal estimated mean described below.

        Constructor Specific Documentation:

        Build a peak detector block with float in, byte out.

        Args:
            threshold_factor_rise : The threshold factor determines when a peak is present. An average of the input signal is calculated (through a single-pole autoregressive filter) and when the value of the input signal goes over threshold_factor_rise*average, we assume we are in the neighborhood of a peak. The block will then find the position of the maximum within a window of look_ahead samples starting at the point where the threshold was crossed upwards.
            look_ahead : The look-ahead value is used when the threshold is crossed upwards to locate the peak within this range.
            alpha : One minus the pole of a single-pole autoregressive filter that evaluates the average of the input signal.
        """
        return _blocks_swig4.peak_detector2_fb_sptr_make(self, threshold_factor_rise, look_ahead, alpha)

    def set_threshold_factor_rise(self, *args, **kwargs):
        """
        set_threshold_factor_rise(peak_detector2_fb_sptr self, float thr)

        Set the threshold factor value for the rise time.
        """
        return _blocks_swig4.peak_detector2_fb_sptr_set_threshold_factor_rise(self, *args, **kwargs)

    def set_look_ahead(self, *args, **kwargs):
        """
        set_look_ahead(peak_detector2_fb_sptr self, int look)

        Set the look-ahead factor.
        """
        return _blocks_swig4.peak_detector2_fb_sptr_set_look_ahead(self, *args, **kwargs)

    def set_alpha(self, *args, **kwargs):
        """
        set_alpha(peak_detector2_fb_sptr self, float alpha)

        Set the running average alpha.
        """
        return _blocks_swig4.peak_detector2_fb_sptr_set_alpha(self, *args, **kwargs)

    def threshold_factor_rise(self):
        """
        threshold_factor_rise(peak_detector2_fb_sptr self) -> float

        Get the threshold factor value for the rise time.
        """
        return _blocks_swig4.peak_detector2_fb_sptr_threshold_factor_rise(self)

    def look_ahead(self):
        """
        look_ahead(peak_detector2_fb_sptr self) -> int

        Get the look-ahead factor value.
        """
        return _blocks_swig4.peak_detector2_fb_sptr_look_ahead(self)

    def alpha(self):
        """
        alpha(peak_detector2_fb_sptr self) -> float

        Get the alpha value of the running average.
        """
        return _blocks_swig4.peak_detector2_fb_sptr_alpha(self)

    def history(self):
        """history(peak_detector2_fb_sptr self) -> unsigned int"""
        return _blocks_swig4.peak_detector2_fb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(peak_detector2_fb_sptr self, int which, int delay)
        declare_sample_delay(peak_detector2_fb_sptr self, unsigned int delay)
        """
        return _blocks_swig4.peak_detector2_fb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(peak_detector2_fb_sptr self, int which) -> unsigned int"""
        return _blocks_swig4.peak_detector2_fb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(peak_detector2_fb_sptr self) -> int"""
        return _blocks_swig4.peak_detector2_fb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(peak_detector2_fb_sptr self) -> double"""
        return _blocks_swig4.peak_detector2_fb_sptr_relative_rate(self)

    def start(self):
        """start(peak_detector2_fb_sptr self) -> bool"""
        return _blocks_swig4.peak_detector2_fb_sptr_start(self)

    def stop(self):
        """stop(peak_detector2_fb_sptr self) -> bool"""
        return _blocks_swig4.peak_detector2_fb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(peak_detector2_fb_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig4.peak_detector2_fb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(peak_detector2_fb_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig4.peak_detector2_fb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(peak_detector2_fb_sptr self) -> int"""
        return _blocks_swig4.peak_detector2_fb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(peak_detector2_fb_sptr self, int m)"""
        return _blocks_swig4.peak_detector2_fb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(peak_detector2_fb_sptr self)"""
        return _blocks_swig4.peak_detector2_fb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(peak_detector2_fb_sptr self) -> bool"""
        return _blocks_swig4.peak_detector2_fb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(peak_detector2_fb_sptr self, int m)"""
        return _blocks_swig4.peak_detector2_fb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(peak_detector2_fb_sptr self) -> int"""
        return _blocks_swig4.peak_detector2_fb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(peak_detector2_fb_sptr self, int i) -> long"""
        return _blocks_swig4.peak_detector2_fb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(peak_detector2_fb_sptr self, long max_output_buffer)
        set_max_output_buffer(peak_detector2_fb_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig4.peak_detector2_fb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(peak_detector2_fb_sptr self, int i) -> long"""
        return _blocks_swig4.peak_detector2_fb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(peak_detector2_fb_sptr self, long min_output_buffer)
        set_min_output_buffer(peak_detector2_fb_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig4.peak_detector2_fb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(peak_detector2_fb_sptr self) -> float"""
        return _blocks_swig4.peak_detector2_fb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(peak_detector2_fb_sptr self) -> float"""
        return _blocks_swig4.peak_detector2_fb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(peak_detector2_fb_sptr self) -> float"""
        return _blocks_swig4.peak_detector2_fb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(peak_detector2_fb_sptr self) -> float"""
        return _blocks_swig4.peak_detector2_fb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(peak_detector2_fb_sptr self) -> float"""
        return _blocks_swig4.peak_detector2_fb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(peak_detector2_fb_sptr self) -> float"""
        return _blocks_swig4.peak_detector2_fb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(peak_detector2_fb_sptr self, int which) -> float
        pc_input_buffers_full(peak_detector2_fb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.peak_detector2_fb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(peak_detector2_fb_sptr self, int which) -> float
        pc_input_buffers_full_avg(peak_detector2_fb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.peak_detector2_fb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(peak_detector2_fb_sptr self, int which) -> float
        pc_input_buffers_full_var(peak_detector2_fb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.peak_detector2_fb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(peak_detector2_fb_sptr self, int which) -> float
        pc_output_buffers_full(peak_detector2_fb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.peak_detector2_fb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(peak_detector2_fb_sptr self, int which) -> float
        pc_output_buffers_full_avg(peak_detector2_fb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.peak_detector2_fb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(peak_detector2_fb_sptr self, int which) -> float
        pc_output_buffers_full_var(peak_detector2_fb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.peak_detector2_fb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(peak_detector2_fb_sptr self) -> float"""
        return _blocks_swig4.peak_detector2_fb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(peak_detector2_fb_sptr self) -> float"""
        return _blocks_swig4.peak_detector2_fb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(peak_detector2_fb_sptr self) -> float"""
        return _blocks_swig4.peak_detector2_fb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(peak_detector2_fb_sptr self) -> float"""
        return _blocks_swig4.peak_detector2_fb_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(peak_detector2_fb_sptr self) -> float"""
        return _blocks_swig4.peak_detector2_fb_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(peak_detector2_fb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig4.peak_detector2_fb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(peak_detector2_fb_sptr self)"""
        return _blocks_swig4.peak_detector2_fb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(peak_detector2_fb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig4.peak_detector2_fb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(peak_detector2_fb_sptr self) -> int"""
        return _blocks_swig4.peak_detector2_fb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(peak_detector2_fb_sptr self) -> int"""
        return _blocks_swig4.peak_detector2_fb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(peak_detector2_fb_sptr self, int priority) -> int"""
        return _blocks_swig4.peak_detector2_fb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(peak_detector2_fb_sptr self) -> std::string"""
        return _blocks_swig4.peak_detector2_fb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(peak_detector2_fb_sptr self) -> std::string"""
        return _blocks_swig4.peak_detector2_fb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(peak_detector2_fb_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.peak_detector2_fb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(peak_detector2_fb_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.peak_detector2_fb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(peak_detector2_fb_sptr self) -> long"""
        return _blocks_swig4.peak_detector2_fb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(peak_detector2_fb_sptr self) -> basic_block_sptr"""
        return _blocks_swig4.peak_detector2_fb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(peak_detector2_fb_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig4.peak_detector2_fb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(peak_detector2_fb_sptr self) -> std::string"""
        return _blocks_swig4.peak_detector2_fb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(peak_detector2_fb_sptr self, std::string name)"""
        return _blocks_swig4.peak_detector2_fb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(peak_detector2_fb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig4.peak_detector2_fb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(peak_detector2_fb_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.peak_detector2_fb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(peak_detector2_fb_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.peak_detector2_fb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(peak_detector2_fb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig4.peak_detector2_fb_sptr_message_subscribers(self, *args, **kwargs)

peak_detector2_fb_sptr_swigregister = _blocks_swig4.peak_detector2_fb_sptr_swigregister
peak_detector2_fb_sptr_swigregister(peak_detector2_fb_sptr)

peak_detector2_fb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
peak_detector2_fb = peak_detector2_fb.make;

class plateau_detector_fb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::plateau_detector_fb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::plateau_detector_fb)> self) -> plateau_detector_fb_sptr
        __init__(boost::shared_ptr<(gr::blocks::plateau_detector_fb)> self, plateau_detector_fb p) -> plateau_detector_fb_sptr
        """
        this = _blocks_swig4.new_plateau_detector_fb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(plateau_detector_fb_sptr self) -> plateau_detector_fb"""
        return _blocks_swig4.plateau_detector_fb_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig4.delete_plateau_detector_fb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(plateau_detector_fb_sptr self, int max_len, float threshold=0.9) -> plateau_detector_fb_sptr

        Detects a plateau and marks the middle.

        Detect a plateau of a-priori known height. Input is a stream of floats, the output is a stream of bytes. Whenever a plateau is detected, the middle of that plateau is marked with a '1' on the output stream (all other samples are left at zero).

        You can use this in a Schmidl & Cox synchronisation algorithm to interpret the output of the normalized correlator. Just pass the length of the cyclic prefix (in samples) as the max_len parameter).

        Unlike the peak detectors, you must the now the absolute height of the plateau. Whenever the amplitude exceeds the given threshold, it starts assuming the presence of a plateau.

        An implicit hysteresis is provided by the fact that after detecting one plateau, it waits at least max_len samples before the next plateau can be detected.

        Constructor Specific Documentation:



        Args:
            max_len : Maximum length of the plateau
            threshold : Anything above this value is considered a plateau
        """
        return _blocks_swig4.plateau_detector_fb_sptr_make(self, *args, **kwargs)

    def set_threshold(self, *args, **kwargs):
        """set_threshold(plateau_detector_fb_sptr self, float threshold)"""
        return _blocks_swig4.plateau_detector_fb_sptr_set_threshold(self, *args, **kwargs)

    def threshold(self):
        """threshold(plateau_detector_fb_sptr self) -> float"""
        return _blocks_swig4.plateau_detector_fb_sptr_threshold(self)

    def history(self):
        """history(plateau_detector_fb_sptr self) -> unsigned int"""
        return _blocks_swig4.plateau_detector_fb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(plateau_detector_fb_sptr self, int which, int delay)
        declare_sample_delay(plateau_detector_fb_sptr self, unsigned int delay)
        """
        return _blocks_swig4.plateau_detector_fb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(plateau_detector_fb_sptr self, int which) -> unsigned int"""
        return _blocks_swig4.plateau_detector_fb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(plateau_detector_fb_sptr self) -> int"""
        return _blocks_swig4.plateau_detector_fb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(plateau_detector_fb_sptr self) -> double"""
        return _blocks_swig4.plateau_detector_fb_sptr_relative_rate(self)

    def start(self):
        """start(plateau_detector_fb_sptr self) -> bool"""
        return _blocks_swig4.plateau_detector_fb_sptr_start(self)

    def stop(self):
        """stop(plateau_detector_fb_sptr self) -> bool"""
        return _blocks_swig4.plateau_detector_fb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(plateau_detector_fb_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig4.plateau_detector_fb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(plateau_detector_fb_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig4.plateau_detector_fb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(plateau_detector_fb_sptr self) -> int"""
        return _blocks_swig4.plateau_detector_fb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(plateau_detector_fb_sptr self, int m)"""
        return _blocks_swig4.plateau_detector_fb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(plateau_detector_fb_sptr self)"""
        return _blocks_swig4.plateau_detector_fb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(plateau_detector_fb_sptr self) -> bool"""
        return _blocks_swig4.plateau_detector_fb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(plateau_detector_fb_sptr self, int m)"""
        return _blocks_swig4.plateau_detector_fb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(plateau_detector_fb_sptr self) -> int"""
        return _blocks_swig4.plateau_detector_fb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(plateau_detector_fb_sptr self, int i) -> long"""
        return _blocks_swig4.plateau_detector_fb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(plateau_detector_fb_sptr self, long max_output_buffer)
        set_max_output_buffer(plateau_detector_fb_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig4.plateau_detector_fb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(plateau_detector_fb_sptr self, int i) -> long"""
        return _blocks_swig4.plateau_detector_fb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(plateau_detector_fb_sptr self, long min_output_buffer)
        set_min_output_buffer(plateau_detector_fb_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig4.plateau_detector_fb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(plateau_detector_fb_sptr self) -> float"""
        return _blocks_swig4.plateau_detector_fb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(plateau_detector_fb_sptr self) -> float"""
        return _blocks_swig4.plateau_detector_fb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(plateau_detector_fb_sptr self) -> float"""
        return _blocks_swig4.plateau_detector_fb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(plateau_detector_fb_sptr self) -> float"""
        return _blocks_swig4.plateau_detector_fb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(plateau_detector_fb_sptr self) -> float"""
        return _blocks_swig4.plateau_detector_fb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(plateau_detector_fb_sptr self) -> float"""
        return _blocks_swig4.plateau_detector_fb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(plateau_detector_fb_sptr self, int which) -> float
        pc_input_buffers_full(plateau_detector_fb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.plateau_detector_fb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(plateau_detector_fb_sptr self, int which) -> float
        pc_input_buffers_full_avg(plateau_detector_fb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.plateau_detector_fb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(plateau_detector_fb_sptr self, int which) -> float
        pc_input_buffers_full_var(plateau_detector_fb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.plateau_detector_fb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(plateau_detector_fb_sptr self, int which) -> float
        pc_output_buffers_full(plateau_detector_fb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.plateau_detector_fb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(plateau_detector_fb_sptr self, int which) -> float
        pc_output_buffers_full_avg(plateau_detector_fb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.plateau_detector_fb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(plateau_detector_fb_sptr self, int which) -> float
        pc_output_buffers_full_var(plateau_detector_fb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.plateau_detector_fb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(plateau_detector_fb_sptr self) -> float"""
        return _blocks_swig4.plateau_detector_fb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(plateau_detector_fb_sptr self) -> float"""
        return _blocks_swig4.plateau_detector_fb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(plateau_detector_fb_sptr self) -> float"""
        return _blocks_swig4.plateau_detector_fb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(plateau_detector_fb_sptr self) -> float"""
        return _blocks_swig4.plateau_detector_fb_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(plateau_detector_fb_sptr self) -> float"""
        return _blocks_swig4.plateau_detector_fb_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(plateau_detector_fb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig4.plateau_detector_fb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(plateau_detector_fb_sptr self)"""
        return _blocks_swig4.plateau_detector_fb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(plateau_detector_fb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig4.plateau_detector_fb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(plateau_detector_fb_sptr self) -> int"""
        return _blocks_swig4.plateau_detector_fb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(plateau_detector_fb_sptr self) -> int"""
        return _blocks_swig4.plateau_detector_fb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(plateau_detector_fb_sptr self, int priority) -> int"""
        return _blocks_swig4.plateau_detector_fb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(plateau_detector_fb_sptr self) -> std::string"""
        return _blocks_swig4.plateau_detector_fb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(plateau_detector_fb_sptr self) -> std::string"""
        return _blocks_swig4.plateau_detector_fb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(plateau_detector_fb_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.plateau_detector_fb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(plateau_detector_fb_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.plateau_detector_fb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(plateau_detector_fb_sptr self) -> long"""
        return _blocks_swig4.plateau_detector_fb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(plateau_detector_fb_sptr self) -> basic_block_sptr"""
        return _blocks_swig4.plateau_detector_fb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(plateau_detector_fb_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig4.plateau_detector_fb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(plateau_detector_fb_sptr self) -> std::string"""
        return _blocks_swig4.plateau_detector_fb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(plateau_detector_fb_sptr self, std::string name)"""
        return _blocks_swig4.plateau_detector_fb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(plateau_detector_fb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig4.plateau_detector_fb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(plateau_detector_fb_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.plateau_detector_fb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(plateau_detector_fb_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.plateau_detector_fb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(plateau_detector_fb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig4.plateau_detector_fb_sptr_message_subscribers(self, *args, **kwargs)

plateau_detector_fb_sptr_swigregister = _blocks_swig4.plateau_detector_fb_sptr_swigregister
plateau_detector_fb_sptr_swigregister(plateau_detector_fb_sptr)

plateau_detector_fb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
plateau_detector_fb = plateau_detector_fb.make;

class pdu_filter_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::pdu_filter)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::pdu_filter)> self) -> pdu_filter_sptr
        __init__(boost::shared_ptr<(gr::blocks::pdu_filter)> self, pdu_filter p) -> pdu_filter_sptr
        """
        this = _blocks_swig4.new_pdu_filter_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pdu_filter_sptr self) -> pdu_filter"""
        return _blocks_swig4.pdu_filter_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig4.delete_pdu_filter_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(pdu_filter_sptr self, swig_int_ptr k, swig_int_ptr v, bool invert=False) -> pdu_filter_sptr

        Propagates only pdus containing k=>v in meta.

        Constructor Specific Documentation:

        Construct a PDU filter.

        Args:
            k : 
            v : 
            invert : 
        """
        return _blocks_swig4.pdu_filter_sptr_make(self, *args, **kwargs)

    def set_key(self, *args, **kwargs):
        """set_key(pdu_filter_sptr self, swig_int_ptr key)"""
        return _blocks_swig4.pdu_filter_sptr_set_key(self, *args, **kwargs)

    def set_val(self, *args, **kwargs):
        """set_val(pdu_filter_sptr self, swig_int_ptr val)"""
        return _blocks_swig4.pdu_filter_sptr_set_val(self, *args, **kwargs)

    def set_inversion(self, *args, **kwargs):
        """set_inversion(pdu_filter_sptr self, bool invert)"""
        return _blocks_swig4.pdu_filter_sptr_set_inversion(self, *args, **kwargs)

    def history(self):
        """history(pdu_filter_sptr self) -> unsigned int"""
        return _blocks_swig4.pdu_filter_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pdu_filter_sptr self, int which, int delay)
        declare_sample_delay(pdu_filter_sptr self, unsigned int delay)
        """
        return _blocks_swig4.pdu_filter_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pdu_filter_sptr self, int which) -> unsigned int"""
        return _blocks_swig4.pdu_filter_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pdu_filter_sptr self) -> int"""
        return _blocks_swig4.pdu_filter_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pdu_filter_sptr self) -> double"""
        return _blocks_swig4.pdu_filter_sptr_relative_rate(self)

    def start(self):
        """start(pdu_filter_sptr self) -> bool"""
        return _blocks_swig4.pdu_filter_sptr_start(self)

    def stop(self):
        """stop(pdu_filter_sptr self) -> bool"""
        return _blocks_swig4.pdu_filter_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pdu_filter_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig4.pdu_filter_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pdu_filter_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig4.pdu_filter_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pdu_filter_sptr self) -> int"""
        return _blocks_swig4.pdu_filter_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pdu_filter_sptr self, int m)"""
        return _blocks_swig4.pdu_filter_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pdu_filter_sptr self)"""
        return _blocks_swig4.pdu_filter_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pdu_filter_sptr self) -> bool"""
        return _blocks_swig4.pdu_filter_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pdu_filter_sptr self, int m)"""
        return _blocks_swig4.pdu_filter_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pdu_filter_sptr self) -> int"""
        return _blocks_swig4.pdu_filter_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pdu_filter_sptr self, int i) -> long"""
        return _blocks_swig4.pdu_filter_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pdu_filter_sptr self, long max_output_buffer)
        set_max_output_buffer(pdu_filter_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig4.pdu_filter_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pdu_filter_sptr self, int i) -> long"""
        return _blocks_swig4.pdu_filter_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pdu_filter_sptr self, long min_output_buffer)
        set_min_output_buffer(pdu_filter_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig4.pdu_filter_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pdu_filter_sptr self) -> float"""
        return _blocks_swig4.pdu_filter_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pdu_filter_sptr self) -> float"""
        return _blocks_swig4.pdu_filter_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pdu_filter_sptr self) -> float"""
        return _blocks_swig4.pdu_filter_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pdu_filter_sptr self) -> float"""
        return _blocks_swig4.pdu_filter_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pdu_filter_sptr self) -> float"""
        return _blocks_swig4.pdu_filter_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pdu_filter_sptr self) -> float"""
        return _blocks_swig4.pdu_filter_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pdu_filter_sptr self, int which) -> float
        pc_input_buffers_full(pdu_filter_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.pdu_filter_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pdu_filter_sptr self, int which) -> float
        pc_input_buffers_full_avg(pdu_filter_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.pdu_filter_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pdu_filter_sptr self, int which) -> float
        pc_input_buffers_full_var(pdu_filter_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.pdu_filter_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pdu_filter_sptr self, int which) -> float
        pc_output_buffers_full(pdu_filter_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.pdu_filter_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pdu_filter_sptr self, int which) -> float
        pc_output_buffers_full_avg(pdu_filter_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.pdu_filter_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pdu_filter_sptr self, int which) -> float
        pc_output_buffers_full_var(pdu_filter_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.pdu_filter_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pdu_filter_sptr self) -> float"""
        return _blocks_swig4.pdu_filter_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pdu_filter_sptr self) -> float"""
        return _blocks_swig4.pdu_filter_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pdu_filter_sptr self) -> float"""
        return _blocks_swig4.pdu_filter_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pdu_filter_sptr self) -> float"""
        return _blocks_swig4.pdu_filter_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(pdu_filter_sptr self) -> float"""
        return _blocks_swig4.pdu_filter_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pdu_filter_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig4.pdu_filter_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pdu_filter_sptr self)"""
        return _blocks_swig4.pdu_filter_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pdu_filter_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig4.pdu_filter_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pdu_filter_sptr self) -> int"""
        return _blocks_swig4.pdu_filter_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pdu_filter_sptr self) -> int"""
        return _blocks_swig4.pdu_filter_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pdu_filter_sptr self, int priority) -> int"""
        return _blocks_swig4.pdu_filter_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pdu_filter_sptr self) -> std::string"""
        return _blocks_swig4.pdu_filter_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pdu_filter_sptr self) -> std::string"""
        return _blocks_swig4.pdu_filter_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pdu_filter_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.pdu_filter_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pdu_filter_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.pdu_filter_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pdu_filter_sptr self) -> long"""
        return _blocks_swig4.pdu_filter_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pdu_filter_sptr self) -> basic_block_sptr"""
        return _blocks_swig4.pdu_filter_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pdu_filter_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig4.pdu_filter_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pdu_filter_sptr self) -> std::string"""
        return _blocks_swig4.pdu_filter_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pdu_filter_sptr self, std::string name)"""
        return _blocks_swig4.pdu_filter_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pdu_filter_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig4.pdu_filter_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pdu_filter_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.pdu_filter_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pdu_filter_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.pdu_filter_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pdu_filter_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig4.pdu_filter_sptr_message_subscribers(self, *args, **kwargs)

pdu_filter_sptr_swigregister = _blocks_swig4.pdu_filter_sptr_swigregister
pdu_filter_sptr_swigregister(pdu_filter_sptr)

pdu_filter_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pdu_filter = pdu_filter.make;

class pdu_set_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::pdu_set)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::pdu_set)> self) -> pdu_set_sptr
        __init__(boost::shared_ptr<(gr::blocks::pdu_set)> self, pdu_set p) -> pdu_set_sptr
        """
        this = _blocks_swig4.new_pdu_set_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pdu_set_sptr self) -> pdu_set"""
        return _blocks_swig4.pdu_set_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig4.delete_pdu_set_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(pdu_set_sptr self, swig_int_ptr k, swig_int_ptr v) -> pdu_set_sptr

        Set k=>v in pdu's meta field and pass on.

        Constructor Specific Documentation:

        Construct a PDU meta set block.

        Args:
            k : 
            v : 
        """
        return _blocks_swig4.pdu_set_sptr_make(self, *args, **kwargs)

    def set_key(self, *args, **kwargs):
        """set_key(pdu_set_sptr self, swig_int_ptr key)"""
        return _blocks_swig4.pdu_set_sptr_set_key(self, *args, **kwargs)

    def set_val(self, *args, **kwargs):
        """set_val(pdu_set_sptr self, swig_int_ptr val)"""
        return _blocks_swig4.pdu_set_sptr_set_val(self, *args, **kwargs)

    def history(self):
        """history(pdu_set_sptr self) -> unsigned int"""
        return _blocks_swig4.pdu_set_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pdu_set_sptr self, int which, int delay)
        declare_sample_delay(pdu_set_sptr self, unsigned int delay)
        """
        return _blocks_swig4.pdu_set_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pdu_set_sptr self, int which) -> unsigned int"""
        return _blocks_swig4.pdu_set_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pdu_set_sptr self) -> int"""
        return _blocks_swig4.pdu_set_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pdu_set_sptr self) -> double"""
        return _blocks_swig4.pdu_set_sptr_relative_rate(self)

    def start(self):
        """start(pdu_set_sptr self) -> bool"""
        return _blocks_swig4.pdu_set_sptr_start(self)

    def stop(self):
        """stop(pdu_set_sptr self) -> bool"""
        return _blocks_swig4.pdu_set_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pdu_set_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig4.pdu_set_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pdu_set_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig4.pdu_set_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pdu_set_sptr self) -> int"""
        return _blocks_swig4.pdu_set_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pdu_set_sptr self, int m)"""
        return _blocks_swig4.pdu_set_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pdu_set_sptr self)"""
        return _blocks_swig4.pdu_set_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pdu_set_sptr self) -> bool"""
        return _blocks_swig4.pdu_set_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pdu_set_sptr self, int m)"""
        return _blocks_swig4.pdu_set_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pdu_set_sptr self) -> int"""
        return _blocks_swig4.pdu_set_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pdu_set_sptr self, int i) -> long"""
        return _blocks_swig4.pdu_set_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pdu_set_sptr self, long max_output_buffer)
        set_max_output_buffer(pdu_set_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig4.pdu_set_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pdu_set_sptr self, int i) -> long"""
        return _blocks_swig4.pdu_set_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pdu_set_sptr self, long min_output_buffer)
        set_min_output_buffer(pdu_set_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig4.pdu_set_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pdu_set_sptr self) -> float"""
        return _blocks_swig4.pdu_set_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pdu_set_sptr self) -> float"""
        return _blocks_swig4.pdu_set_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pdu_set_sptr self) -> float"""
        return _blocks_swig4.pdu_set_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pdu_set_sptr self) -> float"""
        return _blocks_swig4.pdu_set_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pdu_set_sptr self) -> float"""
        return _blocks_swig4.pdu_set_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pdu_set_sptr self) -> float"""
        return _blocks_swig4.pdu_set_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pdu_set_sptr self, int which) -> float
        pc_input_buffers_full(pdu_set_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.pdu_set_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pdu_set_sptr self, int which) -> float
        pc_input_buffers_full_avg(pdu_set_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.pdu_set_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pdu_set_sptr self, int which) -> float
        pc_input_buffers_full_var(pdu_set_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.pdu_set_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pdu_set_sptr self, int which) -> float
        pc_output_buffers_full(pdu_set_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.pdu_set_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pdu_set_sptr self, int which) -> float
        pc_output_buffers_full_avg(pdu_set_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.pdu_set_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pdu_set_sptr self, int which) -> float
        pc_output_buffers_full_var(pdu_set_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.pdu_set_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pdu_set_sptr self) -> float"""
        return _blocks_swig4.pdu_set_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pdu_set_sptr self) -> float"""
        return _blocks_swig4.pdu_set_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pdu_set_sptr self) -> float"""
        return _blocks_swig4.pdu_set_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pdu_set_sptr self) -> float"""
        return _blocks_swig4.pdu_set_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(pdu_set_sptr self) -> float"""
        return _blocks_swig4.pdu_set_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pdu_set_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig4.pdu_set_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pdu_set_sptr self)"""
        return _blocks_swig4.pdu_set_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pdu_set_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig4.pdu_set_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pdu_set_sptr self) -> int"""
        return _blocks_swig4.pdu_set_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pdu_set_sptr self) -> int"""
        return _blocks_swig4.pdu_set_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pdu_set_sptr self, int priority) -> int"""
        return _blocks_swig4.pdu_set_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pdu_set_sptr self) -> std::string"""
        return _blocks_swig4.pdu_set_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pdu_set_sptr self) -> std::string"""
        return _blocks_swig4.pdu_set_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pdu_set_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.pdu_set_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pdu_set_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.pdu_set_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pdu_set_sptr self) -> long"""
        return _blocks_swig4.pdu_set_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pdu_set_sptr self) -> basic_block_sptr"""
        return _blocks_swig4.pdu_set_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pdu_set_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig4.pdu_set_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pdu_set_sptr self) -> std::string"""
        return _blocks_swig4.pdu_set_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pdu_set_sptr self, std::string name)"""
        return _blocks_swig4.pdu_set_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pdu_set_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig4.pdu_set_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pdu_set_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.pdu_set_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pdu_set_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.pdu_set_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pdu_set_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig4.pdu_set_sptr_message_subscribers(self, *args, **kwargs)

pdu_set_sptr_swigregister = _blocks_swig4.pdu_set_sptr_swigregister
pdu_set_sptr_swigregister(pdu_set_sptr)

pdu_set_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pdu_set = pdu_set.make;

class pdu_remove_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::pdu_remove)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::pdu_remove)> self) -> pdu_remove_sptr
        __init__(boost::shared_ptr<(gr::blocks::pdu_remove)> self, pdu_remove p) -> pdu_remove_sptr
        """
        this = _blocks_swig4.new_pdu_remove_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pdu_remove_sptr self) -> pdu_remove"""
        return _blocks_swig4.pdu_remove_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig4.delete_pdu_remove_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(pdu_remove_sptr self, swig_int_ptr k) -> pdu_remove_sptr

        remove key k in pdu's meta field and pass on

        Constructor Specific Documentation:

        Construct a PDU meta remove block.

        Args:
            k : 
        """
        return _blocks_swig4.pdu_remove_sptr_make(self, *args, **kwargs)

    def set_key(self, *args, **kwargs):
        """set_key(pdu_remove_sptr self, swig_int_ptr key)"""
        return _blocks_swig4.pdu_remove_sptr_set_key(self, *args, **kwargs)

    def history(self):
        """history(pdu_remove_sptr self) -> unsigned int"""
        return _blocks_swig4.pdu_remove_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pdu_remove_sptr self, int which, int delay)
        declare_sample_delay(pdu_remove_sptr self, unsigned int delay)
        """
        return _blocks_swig4.pdu_remove_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pdu_remove_sptr self, int which) -> unsigned int"""
        return _blocks_swig4.pdu_remove_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pdu_remove_sptr self) -> int"""
        return _blocks_swig4.pdu_remove_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pdu_remove_sptr self) -> double"""
        return _blocks_swig4.pdu_remove_sptr_relative_rate(self)

    def start(self):
        """start(pdu_remove_sptr self) -> bool"""
        return _blocks_swig4.pdu_remove_sptr_start(self)

    def stop(self):
        """stop(pdu_remove_sptr self) -> bool"""
        return _blocks_swig4.pdu_remove_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pdu_remove_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig4.pdu_remove_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pdu_remove_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig4.pdu_remove_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pdu_remove_sptr self) -> int"""
        return _blocks_swig4.pdu_remove_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pdu_remove_sptr self, int m)"""
        return _blocks_swig4.pdu_remove_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pdu_remove_sptr self)"""
        return _blocks_swig4.pdu_remove_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pdu_remove_sptr self) -> bool"""
        return _blocks_swig4.pdu_remove_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pdu_remove_sptr self, int m)"""
        return _blocks_swig4.pdu_remove_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pdu_remove_sptr self) -> int"""
        return _blocks_swig4.pdu_remove_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pdu_remove_sptr self, int i) -> long"""
        return _blocks_swig4.pdu_remove_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pdu_remove_sptr self, long max_output_buffer)
        set_max_output_buffer(pdu_remove_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig4.pdu_remove_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pdu_remove_sptr self, int i) -> long"""
        return _blocks_swig4.pdu_remove_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pdu_remove_sptr self, long min_output_buffer)
        set_min_output_buffer(pdu_remove_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig4.pdu_remove_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pdu_remove_sptr self) -> float"""
        return _blocks_swig4.pdu_remove_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pdu_remove_sptr self) -> float"""
        return _blocks_swig4.pdu_remove_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pdu_remove_sptr self) -> float"""
        return _blocks_swig4.pdu_remove_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pdu_remove_sptr self) -> float"""
        return _blocks_swig4.pdu_remove_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pdu_remove_sptr self) -> float"""
        return _blocks_swig4.pdu_remove_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pdu_remove_sptr self) -> float"""
        return _blocks_swig4.pdu_remove_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pdu_remove_sptr self, int which) -> float
        pc_input_buffers_full(pdu_remove_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.pdu_remove_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pdu_remove_sptr self, int which) -> float
        pc_input_buffers_full_avg(pdu_remove_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.pdu_remove_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pdu_remove_sptr self, int which) -> float
        pc_input_buffers_full_var(pdu_remove_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.pdu_remove_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pdu_remove_sptr self, int which) -> float
        pc_output_buffers_full(pdu_remove_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.pdu_remove_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pdu_remove_sptr self, int which) -> float
        pc_output_buffers_full_avg(pdu_remove_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.pdu_remove_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pdu_remove_sptr self, int which) -> float
        pc_output_buffers_full_var(pdu_remove_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.pdu_remove_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pdu_remove_sptr self) -> float"""
        return _blocks_swig4.pdu_remove_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pdu_remove_sptr self) -> float"""
        return _blocks_swig4.pdu_remove_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pdu_remove_sptr self) -> float"""
        return _blocks_swig4.pdu_remove_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pdu_remove_sptr self) -> float"""
        return _blocks_swig4.pdu_remove_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(pdu_remove_sptr self) -> float"""
        return _blocks_swig4.pdu_remove_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pdu_remove_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig4.pdu_remove_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pdu_remove_sptr self)"""
        return _blocks_swig4.pdu_remove_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pdu_remove_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig4.pdu_remove_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pdu_remove_sptr self) -> int"""
        return _blocks_swig4.pdu_remove_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pdu_remove_sptr self) -> int"""
        return _blocks_swig4.pdu_remove_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pdu_remove_sptr self, int priority) -> int"""
        return _blocks_swig4.pdu_remove_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pdu_remove_sptr self) -> std::string"""
        return _blocks_swig4.pdu_remove_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pdu_remove_sptr self) -> std::string"""
        return _blocks_swig4.pdu_remove_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pdu_remove_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.pdu_remove_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pdu_remove_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.pdu_remove_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pdu_remove_sptr self) -> long"""
        return _blocks_swig4.pdu_remove_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pdu_remove_sptr self) -> basic_block_sptr"""
        return _blocks_swig4.pdu_remove_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pdu_remove_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig4.pdu_remove_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pdu_remove_sptr self) -> std::string"""
        return _blocks_swig4.pdu_remove_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pdu_remove_sptr self, std::string name)"""
        return _blocks_swig4.pdu_remove_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pdu_remove_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig4.pdu_remove_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pdu_remove_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.pdu_remove_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pdu_remove_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.pdu_remove_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pdu_remove_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig4.pdu_remove_sptr_message_subscribers(self, *args, **kwargs)

pdu_remove_sptr_swigregister = _blocks_swig4.pdu_remove_sptr_swigregister
pdu_remove_sptr_swigregister(pdu_remove_sptr)

pdu_remove_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pdu_remove = pdu_remove.make;

class pdu_to_tagged_stream_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::pdu_to_tagged_stream)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::pdu_to_tagged_stream)> self) -> pdu_to_tagged_stream_sptr
        __init__(boost::shared_ptr<(gr::blocks::pdu_to_tagged_stream)> self, pdu_to_tagged_stream p) -> pdu_to_tagged_stream_sptr
        """
        this = _blocks_swig4.new_pdu_to_tagged_stream_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pdu_to_tagged_stream_sptr self) -> pdu_to_tagged_stream"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig4.delete_pdu_to_tagged_stream_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(pdu_to_tagged_stream_sptr self, gr::blocks::pdu::vector_type type, std::string const & lengthtagname="packet_len") -> pdu_to_tagged_stream_sptr

        Turns received PDUs into a tagged stream of items.

        Constructor Specific Documentation:

        Construct a pdu_to_tagged_stream block.

        Args:
            type : PDU type of pdu::vector_type
            lengthtagname : The name of the tag that specifies how long the packet is. Defaults to 'packet_len'.
        """
        return _blocks_swig4.pdu_to_tagged_stream_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(pdu_to_tagged_stream_sptr self) -> unsigned int"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pdu_to_tagged_stream_sptr self, int which, int delay)
        declare_sample_delay(pdu_to_tagged_stream_sptr self, unsigned int delay)
        """
        return _blocks_swig4.pdu_to_tagged_stream_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pdu_to_tagged_stream_sptr self, int which) -> unsigned int"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pdu_to_tagged_stream_sptr self) -> int"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pdu_to_tagged_stream_sptr self) -> double"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_relative_rate(self)

    def start(self):
        """start(pdu_to_tagged_stream_sptr self) -> bool"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_start(self)

    def stop(self):
        """stop(pdu_to_tagged_stream_sptr self) -> bool"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pdu_to_tagged_stream_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pdu_to_tagged_stream_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pdu_to_tagged_stream_sptr self) -> int"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pdu_to_tagged_stream_sptr self, int m)"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pdu_to_tagged_stream_sptr self)"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pdu_to_tagged_stream_sptr self) -> bool"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pdu_to_tagged_stream_sptr self, int m)"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pdu_to_tagged_stream_sptr self) -> int"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pdu_to_tagged_stream_sptr self, int i) -> long"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pdu_to_tagged_stream_sptr self, long max_output_buffer)
        set_max_output_buffer(pdu_to_tagged_stream_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig4.pdu_to_tagged_stream_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pdu_to_tagged_stream_sptr self, int i) -> long"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pdu_to_tagged_stream_sptr self, long min_output_buffer)
        set_min_output_buffer(pdu_to_tagged_stream_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig4.pdu_to_tagged_stream_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pdu_to_tagged_stream_sptr self) -> float"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pdu_to_tagged_stream_sptr self) -> float"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pdu_to_tagged_stream_sptr self) -> float"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pdu_to_tagged_stream_sptr self) -> float"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pdu_to_tagged_stream_sptr self) -> float"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pdu_to_tagged_stream_sptr self) -> float"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pdu_to_tagged_stream_sptr self, int which) -> float
        pc_input_buffers_full(pdu_to_tagged_stream_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.pdu_to_tagged_stream_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pdu_to_tagged_stream_sptr self, int which) -> float
        pc_input_buffers_full_avg(pdu_to_tagged_stream_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.pdu_to_tagged_stream_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pdu_to_tagged_stream_sptr self, int which) -> float
        pc_input_buffers_full_var(pdu_to_tagged_stream_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.pdu_to_tagged_stream_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pdu_to_tagged_stream_sptr self, int which) -> float
        pc_output_buffers_full(pdu_to_tagged_stream_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.pdu_to_tagged_stream_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pdu_to_tagged_stream_sptr self, int which) -> float
        pc_output_buffers_full_avg(pdu_to_tagged_stream_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.pdu_to_tagged_stream_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pdu_to_tagged_stream_sptr self, int which) -> float
        pc_output_buffers_full_var(pdu_to_tagged_stream_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.pdu_to_tagged_stream_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pdu_to_tagged_stream_sptr self) -> float"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pdu_to_tagged_stream_sptr self) -> float"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pdu_to_tagged_stream_sptr self) -> float"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pdu_to_tagged_stream_sptr self) -> float"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(pdu_to_tagged_stream_sptr self) -> float"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pdu_to_tagged_stream_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pdu_to_tagged_stream_sptr self)"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pdu_to_tagged_stream_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pdu_to_tagged_stream_sptr self) -> int"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pdu_to_tagged_stream_sptr self) -> int"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pdu_to_tagged_stream_sptr self, int priority) -> int"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pdu_to_tagged_stream_sptr self) -> std::string"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pdu_to_tagged_stream_sptr self) -> std::string"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pdu_to_tagged_stream_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pdu_to_tagged_stream_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pdu_to_tagged_stream_sptr self) -> long"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pdu_to_tagged_stream_sptr self) -> basic_block_sptr"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pdu_to_tagged_stream_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pdu_to_tagged_stream_sptr self) -> std::string"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pdu_to_tagged_stream_sptr self, std::string name)"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pdu_to_tagged_stream_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pdu_to_tagged_stream_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pdu_to_tagged_stream_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pdu_to_tagged_stream_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig4.pdu_to_tagged_stream_sptr_message_subscribers(self, *args, **kwargs)

pdu_to_tagged_stream_sptr_swigregister = _blocks_swig4.pdu_to_tagged_stream_sptr_swigregister
pdu_to_tagged_stream_sptr_swigregister(pdu_to_tagged_stream_sptr)

pdu_to_tagged_stream_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pdu_to_tagged_stream = pdu_to_tagged_stream.make;

class probe_rate_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::probe_rate)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::probe_rate)> self) -> probe_rate_sptr
        __init__(boost::shared_ptr<(gr::blocks::probe_rate)> self, probe_rate p) -> probe_rate_sptr
        """
        this = _blocks_swig4.new_probe_rate_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(probe_rate_sptr self) -> probe_rate"""
        return _blocks_swig4.probe_rate_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig4.delete_probe_rate_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(probe_rate_sptr self, size_t itemsize, double update_rate_ms=500.0, double alpha=0.0001) -> probe_rate_sptr

        throughput measurement

        Constructor Specific Documentation:

        Make a throughput measurement block.

        Args:
            itemsize : size of each stream item
            update_rate_ms : minimum update time in milliseconds
            alpha : gain for running average filter
        """
        return _blocks_swig4.probe_rate_sptr_make(self, *args, **kwargs)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(probe_rate_sptr self, double alpha)"""
        return _blocks_swig4.probe_rate_sptr_set_alpha(self, *args, **kwargs)

    def rate(self):
        """rate(probe_rate_sptr self) -> double"""
        return _blocks_swig4.probe_rate_sptr_rate(self)

    def start(self):
        """start(probe_rate_sptr self) -> bool"""
        return _blocks_swig4.probe_rate_sptr_start(self)

    def stop(self):
        """stop(probe_rate_sptr self) -> bool"""
        return _blocks_swig4.probe_rate_sptr_stop(self)

    def history(self):
        """history(probe_rate_sptr self) -> unsigned int"""
        return _blocks_swig4.probe_rate_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(probe_rate_sptr self, int which, int delay)
        declare_sample_delay(probe_rate_sptr self, unsigned int delay)
        """
        return _blocks_swig4.probe_rate_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(probe_rate_sptr self, int which) -> unsigned int"""
        return _blocks_swig4.probe_rate_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(probe_rate_sptr self) -> int"""
        return _blocks_swig4.probe_rate_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(probe_rate_sptr self) -> double"""
        return _blocks_swig4.probe_rate_sptr_relative_rate(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(probe_rate_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig4.probe_rate_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(probe_rate_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig4.probe_rate_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(probe_rate_sptr self) -> int"""
        return _blocks_swig4.probe_rate_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(probe_rate_sptr self, int m)"""
        return _blocks_swig4.probe_rate_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(probe_rate_sptr self)"""
        return _blocks_swig4.probe_rate_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(probe_rate_sptr self) -> bool"""
        return _blocks_swig4.probe_rate_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(probe_rate_sptr self, int m)"""
        return _blocks_swig4.probe_rate_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(probe_rate_sptr self) -> int"""
        return _blocks_swig4.probe_rate_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(probe_rate_sptr self, int i) -> long"""
        return _blocks_swig4.probe_rate_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(probe_rate_sptr self, long max_output_buffer)
        set_max_output_buffer(probe_rate_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig4.probe_rate_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(probe_rate_sptr self, int i) -> long"""
        return _blocks_swig4.probe_rate_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(probe_rate_sptr self, long min_output_buffer)
        set_min_output_buffer(probe_rate_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig4.probe_rate_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(probe_rate_sptr self) -> float"""
        return _blocks_swig4.probe_rate_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(probe_rate_sptr self) -> float"""
        return _blocks_swig4.probe_rate_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(probe_rate_sptr self) -> float"""
        return _blocks_swig4.probe_rate_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(probe_rate_sptr self) -> float"""
        return _blocks_swig4.probe_rate_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(probe_rate_sptr self) -> float"""
        return _blocks_swig4.probe_rate_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(probe_rate_sptr self) -> float"""
        return _blocks_swig4.probe_rate_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(probe_rate_sptr self, int which) -> float
        pc_input_buffers_full(probe_rate_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_rate_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(probe_rate_sptr self, int which) -> float
        pc_input_buffers_full_avg(probe_rate_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_rate_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(probe_rate_sptr self, int which) -> float
        pc_input_buffers_full_var(probe_rate_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_rate_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(probe_rate_sptr self, int which) -> float
        pc_output_buffers_full(probe_rate_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_rate_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(probe_rate_sptr self, int which) -> float
        pc_output_buffers_full_avg(probe_rate_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_rate_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(probe_rate_sptr self, int which) -> float
        pc_output_buffers_full_var(probe_rate_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_rate_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(probe_rate_sptr self) -> float"""
        return _blocks_swig4.probe_rate_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(probe_rate_sptr self) -> float"""
        return _blocks_swig4.probe_rate_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(probe_rate_sptr self) -> float"""
        return _blocks_swig4.probe_rate_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(probe_rate_sptr self) -> float"""
        return _blocks_swig4.probe_rate_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(probe_rate_sptr self) -> float"""
        return _blocks_swig4.probe_rate_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(probe_rate_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig4.probe_rate_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(probe_rate_sptr self)"""
        return _blocks_swig4.probe_rate_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(probe_rate_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig4.probe_rate_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(probe_rate_sptr self) -> int"""
        return _blocks_swig4.probe_rate_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(probe_rate_sptr self) -> int"""
        return _blocks_swig4.probe_rate_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(probe_rate_sptr self, int priority) -> int"""
        return _blocks_swig4.probe_rate_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(probe_rate_sptr self) -> std::string"""
        return _blocks_swig4.probe_rate_sptr_name(self)

    def symbol_name(self):
        """symbol_name(probe_rate_sptr self) -> std::string"""
        return _blocks_swig4.probe_rate_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(probe_rate_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.probe_rate_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(probe_rate_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.probe_rate_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(probe_rate_sptr self) -> long"""
        return _blocks_swig4.probe_rate_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(probe_rate_sptr self) -> basic_block_sptr"""
        return _blocks_swig4.probe_rate_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(probe_rate_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig4.probe_rate_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(probe_rate_sptr self) -> std::string"""
        return _blocks_swig4.probe_rate_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(probe_rate_sptr self, std::string name)"""
        return _blocks_swig4.probe_rate_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(probe_rate_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig4.probe_rate_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(probe_rate_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.probe_rate_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(probe_rate_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.probe_rate_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(probe_rate_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig4.probe_rate_sptr_message_subscribers(self, *args, **kwargs)

probe_rate_sptr_swigregister = _blocks_swig4.probe_rate_sptr_swigregister
probe_rate_sptr_swigregister(probe_rate_sptr)

probe_rate_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
probe_rate = probe_rate.make;

class probe_signal_b_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::probe_signal_b)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::probe_signal_b)> self) -> probe_signal_b_sptr
        __init__(boost::shared_ptr<(gr::blocks::probe_signal_b)> self, probe_signal_b p) -> probe_signal_b_sptr
        """
        this = _blocks_swig4.new_probe_signal_b_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(probe_signal_b_sptr self) -> probe_signal_b"""
        return _blocks_swig4.probe_signal_b_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig4.delete_probe_signal_b_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(probe_signal_b_sptr self) -> probe_signal_b_sptr

        Sink that allows a sample to be grabbed from Python.

        Constructor Specific Documentation:


        """
        return _blocks_swig4.probe_signal_b_sptr_make(self)

    def level(self):
        """level(probe_signal_b_sptr self) -> unsigned char"""
        return _blocks_swig4.probe_signal_b_sptr_level(self)

    def history(self):
        """history(probe_signal_b_sptr self) -> unsigned int"""
        return _blocks_swig4.probe_signal_b_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(probe_signal_b_sptr self, int which, int delay)
        declare_sample_delay(probe_signal_b_sptr self, unsigned int delay)
        """
        return _blocks_swig4.probe_signal_b_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(probe_signal_b_sptr self, int which) -> unsigned int"""
        return _blocks_swig4.probe_signal_b_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(probe_signal_b_sptr self) -> int"""
        return _blocks_swig4.probe_signal_b_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(probe_signal_b_sptr self) -> double"""
        return _blocks_swig4.probe_signal_b_sptr_relative_rate(self)

    def start(self):
        """start(probe_signal_b_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_b_sptr_start(self)

    def stop(self):
        """stop(probe_signal_b_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_b_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(probe_signal_b_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig4.probe_signal_b_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(probe_signal_b_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig4.probe_signal_b_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(probe_signal_b_sptr self) -> int"""
        return _blocks_swig4.probe_signal_b_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(probe_signal_b_sptr self, int m)"""
        return _blocks_swig4.probe_signal_b_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(probe_signal_b_sptr self)"""
        return _blocks_swig4.probe_signal_b_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(probe_signal_b_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_b_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(probe_signal_b_sptr self, int m)"""
        return _blocks_swig4.probe_signal_b_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(probe_signal_b_sptr self) -> int"""
        return _blocks_swig4.probe_signal_b_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(probe_signal_b_sptr self, int i) -> long"""
        return _blocks_swig4.probe_signal_b_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(probe_signal_b_sptr self, long max_output_buffer)
        set_max_output_buffer(probe_signal_b_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig4.probe_signal_b_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(probe_signal_b_sptr self, int i) -> long"""
        return _blocks_swig4.probe_signal_b_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(probe_signal_b_sptr self, long min_output_buffer)
        set_min_output_buffer(probe_signal_b_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig4.probe_signal_b_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(probe_signal_b_sptr self) -> float"""
        return _blocks_swig4.probe_signal_b_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(probe_signal_b_sptr self) -> float"""
        return _blocks_swig4.probe_signal_b_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(probe_signal_b_sptr self) -> float"""
        return _blocks_swig4.probe_signal_b_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(probe_signal_b_sptr self) -> float"""
        return _blocks_swig4.probe_signal_b_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(probe_signal_b_sptr self) -> float"""
        return _blocks_swig4.probe_signal_b_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(probe_signal_b_sptr self) -> float"""
        return _blocks_swig4.probe_signal_b_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(probe_signal_b_sptr self, int which) -> float
        pc_input_buffers_full(probe_signal_b_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_b_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(probe_signal_b_sptr self, int which) -> float
        pc_input_buffers_full_avg(probe_signal_b_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_b_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(probe_signal_b_sptr self, int which) -> float
        pc_input_buffers_full_var(probe_signal_b_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_b_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(probe_signal_b_sptr self, int which) -> float
        pc_output_buffers_full(probe_signal_b_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_b_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(probe_signal_b_sptr self, int which) -> float
        pc_output_buffers_full_avg(probe_signal_b_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_b_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(probe_signal_b_sptr self, int which) -> float
        pc_output_buffers_full_var(probe_signal_b_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_b_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(probe_signal_b_sptr self) -> float"""
        return _blocks_swig4.probe_signal_b_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(probe_signal_b_sptr self) -> float"""
        return _blocks_swig4.probe_signal_b_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(probe_signal_b_sptr self) -> float"""
        return _blocks_swig4.probe_signal_b_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(probe_signal_b_sptr self) -> float"""
        return _blocks_swig4.probe_signal_b_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(probe_signal_b_sptr self) -> float"""
        return _blocks_swig4.probe_signal_b_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(probe_signal_b_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig4.probe_signal_b_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(probe_signal_b_sptr self)"""
        return _blocks_swig4.probe_signal_b_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(probe_signal_b_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig4.probe_signal_b_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(probe_signal_b_sptr self) -> int"""
        return _blocks_swig4.probe_signal_b_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(probe_signal_b_sptr self) -> int"""
        return _blocks_swig4.probe_signal_b_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(probe_signal_b_sptr self, int priority) -> int"""
        return _blocks_swig4.probe_signal_b_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(probe_signal_b_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_b_sptr_name(self)

    def symbol_name(self):
        """symbol_name(probe_signal_b_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_b_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(probe_signal_b_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.probe_signal_b_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(probe_signal_b_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.probe_signal_b_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(probe_signal_b_sptr self) -> long"""
        return _blocks_swig4.probe_signal_b_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(probe_signal_b_sptr self) -> basic_block_sptr"""
        return _blocks_swig4.probe_signal_b_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(probe_signal_b_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig4.probe_signal_b_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(probe_signal_b_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_b_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(probe_signal_b_sptr self, std::string name)"""
        return _blocks_swig4.probe_signal_b_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(probe_signal_b_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig4.probe_signal_b_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(probe_signal_b_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_b_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(probe_signal_b_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_b_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(probe_signal_b_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_b_sptr_message_subscribers(self, *args, **kwargs)

probe_signal_b_sptr_swigregister = _blocks_swig4.probe_signal_b_sptr_swigregister
probe_signal_b_sptr_swigregister(probe_signal_b_sptr)

probe_signal_b_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
probe_signal_b = probe_signal_b.make;

class probe_signal_s_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::probe_signal_s)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::probe_signal_s)> self) -> probe_signal_s_sptr
        __init__(boost::shared_ptr<(gr::blocks::probe_signal_s)> self, probe_signal_s p) -> probe_signal_s_sptr
        """
        this = _blocks_swig4.new_probe_signal_s_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(probe_signal_s_sptr self) -> probe_signal_s"""
        return _blocks_swig4.probe_signal_s_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig4.delete_probe_signal_s_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(probe_signal_s_sptr self) -> probe_signal_s_sptr

        Sink that allows a sample to be grabbed from Python.

        Constructor Specific Documentation:


        """
        return _blocks_swig4.probe_signal_s_sptr_make(self)

    def level(self):
        """level(probe_signal_s_sptr self) -> short"""
        return _blocks_swig4.probe_signal_s_sptr_level(self)

    def history(self):
        """history(probe_signal_s_sptr self) -> unsigned int"""
        return _blocks_swig4.probe_signal_s_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(probe_signal_s_sptr self, int which, int delay)
        declare_sample_delay(probe_signal_s_sptr self, unsigned int delay)
        """
        return _blocks_swig4.probe_signal_s_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(probe_signal_s_sptr self, int which) -> unsigned int"""
        return _blocks_swig4.probe_signal_s_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(probe_signal_s_sptr self) -> int"""
        return _blocks_swig4.probe_signal_s_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(probe_signal_s_sptr self) -> double"""
        return _blocks_swig4.probe_signal_s_sptr_relative_rate(self)

    def start(self):
        """start(probe_signal_s_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_s_sptr_start(self)

    def stop(self):
        """stop(probe_signal_s_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_s_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(probe_signal_s_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig4.probe_signal_s_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(probe_signal_s_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig4.probe_signal_s_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(probe_signal_s_sptr self) -> int"""
        return _blocks_swig4.probe_signal_s_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(probe_signal_s_sptr self, int m)"""
        return _blocks_swig4.probe_signal_s_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(probe_signal_s_sptr self)"""
        return _blocks_swig4.probe_signal_s_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(probe_signal_s_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_s_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(probe_signal_s_sptr self, int m)"""
        return _blocks_swig4.probe_signal_s_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(probe_signal_s_sptr self) -> int"""
        return _blocks_swig4.probe_signal_s_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(probe_signal_s_sptr self, int i) -> long"""
        return _blocks_swig4.probe_signal_s_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(probe_signal_s_sptr self, long max_output_buffer)
        set_max_output_buffer(probe_signal_s_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig4.probe_signal_s_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(probe_signal_s_sptr self, int i) -> long"""
        return _blocks_swig4.probe_signal_s_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(probe_signal_s_sptr self, long min_output_buffer)
        set_min_output_buffer(probe_signal_s_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig4.probe_signal_s_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(probe_signal_s_sptr self) -> float"""
        return _blocks_swig4.probe_signal_s_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(probe_signal_s_sptr self) -> float"""
        return _blocks_swig4.probe_signal_s_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(probe_signal_s_sptr self) -> float"""
        return _blocks_swig4.probe_signal_s_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(probe_signal_s_sptr self) -> float"""
        return _blocks_swig4.probe_signal_s_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(probe_signal_s_sptr self) -> float"""
        return _blocks_swig4.probe_signal_s_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(probe_signal_s_sptr self) -> float"""
        return _blocks_swig4.probe_signal_s_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(probe_signal_s_sptr self, int which) -> float
        pc_input_buffers_full(probe_signal_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_s_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(probe_signal_s_sptr self, int which) -> float
        pc_input_buffers_full_avg(probe_signal_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_s_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(probe_signal_s_sptr self, int which) -> float
        pc_input_buffers_full_var(probe_signal_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_s_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(probe_signal_s_sptr self, int which) -> float
        pc_output_buffers_full(probe_signal_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_s_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(probe_signal_s_sptr self, int which) -> float
        pc_output_buffers_full_avg(probe_signal_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_s_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(probe_signal_s_sptr self, int which) -> float
        pc_output_buffers_full_var(probe_signal_s_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_s_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(probe_signal_s_sptr self) -> float"""
        return _blocks_swig4.probe_signal_s_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(probe_signal_s_sptr self) -> float"""
        return _blocks_swig4.probe_signal_s_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(probe_signal_s_sptr self) -> float"""
        return _blocks_swig4.probe_signal_s_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(probe_signal_s_sptr self) -> float"""
        return _blocks_swig4.probe_signal_s_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(probe_signal_s_sptr self) -> float"""
        return _blocks_swig4.probe_signal_s_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(probe_signal_s_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig4.probe_signal_s_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(probe_signal_s_sptr self)"""
        return _blocks_swig4.probe_signal_s_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(probe_signal_s_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig4.probe_signal_s_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(probe_signal_s_sptr self) -> int"""
        return _blocks_swig4.probe_signal_s_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(probe_signal_s_sptr self) -> int"""
        return _blocks_swig4.probe_signal_s_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(probe_signal_s_sptr self, int priority) -> int"""
        return _blocks_swig4.probe_signal_s_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(probe_signal_s_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_s_sptr_name(self)

    def symbol_name(self):
        """symbol_name(probe_signal_s_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_s_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(probe_signal_s_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.probe_signal_s_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(probe_signal_s_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.probe_signal_s_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(probe_signal_s_sptr self) -> long"""
        return _blocks_swig4.probe_signal_s_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(probe_signal_s_sptr self) -> basic_block_sptr"""
        return _blocks_swig4.probe_signal_s_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(probe_signal_s_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig4.probe_signal_s_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(probe_signal_s_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_s_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(probe_signal_s_sptr self, std::string name)"""
        return _blocks_swig4.probe_signal_s_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(probe_signal_s_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig4.probe_signal_s_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(probe_signal_s_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_s_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(probe_signal_s_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_s_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(probe_signal_s_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_s_sptr_message_subscribers(self, *args, **kwargs)

probe_signal_s_sptr_swigregister = _blocks_swig4.probe_signal_s_sptr_swigregister
probe_signal_s_sptr_swigregister(probe_signal_s_sptr)

probe_signal_s_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
probe_signal_s = probe_signal_s.make;

class probe_signal_i_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::probe_signal_i)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::probe_signal_i)> self) -> probe_signal_i_sptr
        __init__(boost::shared_ptr<(gr::blocks::probe_signal_i)> self, probe_signal_i p) -> probe_signal_i_sptr
        """
        this = _blocks_swig4.new_probe_signal_i_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(probe_signal_i_sptr self) -> probe_signal_i"""
        return _blocks_swig4.probe_signal_i_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig4.delete_probe_signal_i_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(probe_signal_i_sptr self) -> probe_signal_i_sptr

        Sink that allows a sample to be grabbed from Python.

        Constructor Specific Documentation:


        """
        return _blocks_swig4.probe_signal_i_sptr_make(self)

    def level(self):
        """level(probe_signal_i_sptr self) -> int"""
        return _blocks_swig4.probe_signal_i_sptr_level(self)

    def history(self):
        """history(probe_signal_i_sptr self) -> unsigned int"""
        return _blocks_swig4.probe_signal_i_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(probe_signal_i_sptr self, int which, int delay)
        declare_sample_delay(probe_signal_i_sptr self, unsigned int delay)
        """
        return _blocks_swig4.probe_signal_i_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(probe_signal_i_sptr self, int which) -> unsigned int"""
        return _blocks_swig4.probe_signal_i_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(probe_signal_i_sptr self) -> int"""
        return _blocks_swig4.probe_signal_i_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(probe_signal_i_sptr self) -> double"""
        return _blocks_swig4.probe_signal_i_sptr_relative_rate(self)

    def start(self):
        """start(probe_signal_i_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_i_sptr_start(self)

    def stop(self):
        """stop(probe_signal_i_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_i_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(probe_signal_i_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig4.probe_signal_i_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(probe_signal_i_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig4.probe_signal_i_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(probe_signal_i_sptr self) -> int"""
        return _blocks_swig4.probe_signal_i_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(probe_signal_i_sptr self, int m)"""
        return _blocks_swig4.probe_signal_i_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(probe_signal_i_sptr self)"""
        return _blocks_swig4.probe_signal_i_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(probe_signal_i_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_i_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(probe_signal_i_sptr self, int m)"""
        return _blocks_swig4.probe_signal_i_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(probe_signal_i_sptr self) -> int"""
        return _blocks_swig4.probe_signal_i_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(probe_signal_i_sptr self, int i) -> long"""
        return _blocks_swig4.probe_signal_i_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(probe_signal_i_sptr self, long max_output_buffer)
        set_max_output_buffer(probe_signal_i_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig4.probe_signal_i_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(probe_signal_i_sptr self, int i) -> long"""
        return _blocks_swig4.probe_signal_i_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(probe_signal_i_sptr self, long min_output_buffer)
        set_min_output_buffer(probe_signal_i_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig4.probe_signal_i_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(probe_signal_i_sptr self) -> float"""
        return _blocks_swig4.probe_signal_i_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(probe_signal_i_sptr self) -> float"""
        return _blocks_swig4.probe_signal_i_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(probe_signal_i_sptr self) -> float"""
        return _blocks_swig4.probe_signal_i_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(probe_signal_i_sptr self) -> float"""
        return _blocks_swig4.probe_signal_i_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(probe_signal_i_sptr self) -> float"""
        return _blocks_swig4.probe_signal_i_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(probe_signal_i_sptr self) -> float"""
        return _blocks_swig4.probe_signal_i_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(probe_signal_i_sptr self, int which) -> float
        pc_input_buffers_full(probe_signal_i_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_i_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(probe_signal_i_sptr self, int which) -> float
        pc_input_buffers_full_avg(probe_signal_i_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_i_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(probe_signal_i_sptr self, int which) -> float
        pc_input_buffers_full_var(probe_signal_i_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_i_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(probe_signal_i_sptr self, int which) -> float
        pc_output_buffers_full(probe_signal_i_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_i_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(probe_signal_i_sptr self, int which) -> float
        pc_output_buffers_full_avg(probe_signal_i_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_i_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(probe_signal_i_sptr self, int which) -> float
        pc_output_buffers_full_var(probe_signal_i_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_i_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(probe_signal_i_sptr self) -> float"""
        return _blocks_swig4.probe_signal_i_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(probe_signal_i_sptr self) -> float"""
        return _blocks_swig4.probe_signal_i_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(probe_signal_i_sptr self) -> float"""
        return _blocks_swig4.probe_signal_i_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(probe_signal_i_sptr self) -> float"""
        return _blocks_swig4.probe_signal_i_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(probe_signal_i_sptr self) -> float"""
        return _blocks_swig4.probe_signal_i_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(probe_signal_i_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig4.probe_signal_i_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(probe_signal_i_sptr self)"""
        return _blocks_swig4.probe_signal_i_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(probe_signal_i_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig4.probe_signal_i_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(probe_signal_i_sptr self) -> int"""
        return _blocks_swig4.probe_signal_i_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(probe_signal_i_sptr self) -> int"""
        return _blocks_swig4.probe_signal_i_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(probe_signal_i_sptr self, int priority) -> int"""
        return _blocks_swig4.probe_signal_i_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(probe_signal_i_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_i_sptr_name(self)

    def symbol_name(self):
        """symbol_name(probe_signal_i_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_i_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(probe_signal_i_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.probe_signal_i_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(probe_signal_i_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.probe_signal_i_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(probe_signal_i_sptr self) -> long"""
        return _blocks_swig4.probe_signal_i_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(probe_signal_i_sptr self) -> basic_block_sptr"""
        return _blocks_swig4.probe_signal_i_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(probe_signal_i_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig4.probe_signal_i_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(probe_signal_i_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_i_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(probe_signal_i_sptr self, std::string name)"""
        return _blocks_swig4.probe_signal_i_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(probe_signal_i_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig4.probe_signal_i_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(probe_signal_i_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_i_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(probe_signal_i_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_i_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(probe_signal_i_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_i_sptr_message_subscribers(self, *args, **kwargs)

probe_signal_i_sptr_swigregister = _blocks_swig4.probe_signal_i_sptr_swigregister
probe_signal_i_sptr_swigregister(probe_signal_i_sptr)

probe_signal_i_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
probe_signal_i = probe_signal_i.make;

class probe_signal_f_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::probe_signal_f)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::probe_signal_f)> self) -> probe_signal_f_sptr
        __init__(boost::shared_ptr<(gr::blocks::probe_signal_f)> self, probe_signal_f p) -> probe_signal_f_sptr
        """
        this = _blocks_swig4.new_probe_signal_f_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(probe_signal_f_sptr self) -> probe_signal_f"""
        return _blocks_swig4.probe_signal_f_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig4.delete_probe_signal_f_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(probe_signal_f_sptr self) -> probe_signal_f_sptr

        Sink that allows a sample to be grabbed from Python.

        Constructor Specific Documentation:


        """
        return _blocks_swig4.probe_signal_f_sptr_make(self)

    def level(self):
        """level(probe_signal_f_sptr self) -> float"""
        return _blocks_swig4.probe_signal_f_sptr_level(self)

    def history(self):
        """history(probe_signal_f_sptr self) -> unsigned int"""
        return _blocks_swig4.probe_signal_f_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(probe_signal_f_sptr self, int which, int delay)
        declare_sample_delay(probe_signal_f_sptr self, unsigned int delay)
        """
        return _blocks_swig4.probe_signal_f_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(probe_signal_f_sptr self, int which) -> unsigned int"""
        return _blocks_swig4.probe_signal_f_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(probe_signal_f_sptr self) -> int"""
        return _blocks_swig4.probe_signal_f_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(probe_signal_f_sptr self) -> double"""
        return _blocks_swig4.probe_signal_f_sptr_relative_rate(self)

    def start(self):
        """start(probe_signal_f_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_f_sptr_start(self)

    def stop(self):
        """stop(probe_signal_f_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_f_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(probe_signal_f_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig4.probe_signal_f_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(probe_signal_f_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig4.probe_signal_f_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(probe_signal_f_sptr self) -> int"""
        return _blocks_swig4.probe_signal_f_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(probe_signal_f_sptr self, int m)"""
        return _blocks_swig4.probe_signal_f_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(probe_signal_f_sptr self)"""
        return _blocks_swig4.probe_signal_f_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(probe_signal_f_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_f_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(probe_signal_f_sptr self, int m)"""
        return _blocks_swig4.probe_signal_f_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(probe_signal_f_sptr self) -> int"""
        return _blocks_swig4.probe_signal_f_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(probe_signal_f_sptr self, int i) -> long"""
        return _blocks_swig4.probe_signal_f_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(probe_signal_f_sptr self, long max_output_buffer)
        set_max_output_buffer(probe_signal_f_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig4.probe_signal_f_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(probe_signal_f_sptr self, int i) -> long"""
        return _blocks_swig4.probe_signal_f_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(probe_signal_f_sptr self, long min_output_buffer)
        set_min_output_buffer(probe_signal_f_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig4.probe_signal_f_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(probe_signal_f_sptr self) -> float"""
        return _blocks_swig4.probe_signal_f_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(probe_signal_f_sptr self) -> float"""
        return _blocks_swig4.probe_signal_f_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(probe_signal_f_sptr self) -> float"""
        return _blocks_swig4.probe_signal_f_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(probe_signal_f_sptr self) -> float"""
        return _blocks_swig4.probe_signal_f_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(probe_signal_f_sptr self) -> float"""
        return _blocks_swig4.probe_signal_f_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(probe_signal_f_sptr self) -> float"""
        return _blocks_swig4.probe_signal_f_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(probe_signal_f_sptr self, int which) -> float
        pc_input_buffers_full(probe_signal_f_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_f_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(probe_signal_f_sptr self, int which) -> float
        pc_input_buffers_full_avg(probe_signal_f_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_f_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(probe_signal_f_sptr self, int which) -> float
        pc_input_buffers_full_var(probe_signal_f_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_f_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(probe_signal_f_sptr self, int which) -> float
        pc_output_buffers_full(probe_signal_f_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_f_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(probe_signal_f_sptr self, int which) -> float
        pc_output_buffers_full_avg(probe_signal_f_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_f_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(probe_signal_f_sptr self, int which) -> float
        pc_output_buffers_full_var(probe_signal_f_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_f_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(probe_signal_f_sptr self) -> float"""
        return _blocks_swig4.probe_signal_f_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(probe_signal_f_sptr self) -> float"""
        return _blocks_swig4.probe_signal_f_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(probe_signal_f_sptr self) -> float"""
        return _blocks_swig4.probe_signal_f_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(probe_signal_f_sptr self) -> float"""
        return _blocks_swig4.probe_signal_f_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(probe_signal_f_sptr self) -> float"""
        return _blocks_swig4.probe_signal_f_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(probe_signal_f_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig4.probe_signal_f_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(probe_signal_f_sptr self)"""
        return _blocks_swig4.probe_signal_f_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(probe_signal_f_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig4.probe_signal_f_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(probe_signal_f_sptr self) -> int"""
        return _blocks_swig4.probe_signal_f_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(probe_signal_f_sptr self) -> int"""
        return _blocks_swig4.probe_signal_f_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(probe_signal_f_sptr self, int priority) -> int"""
        return _blocks_swig4.probe_signal_f_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(probe_signal_f_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_f_sptr_name(self)

    def symbol_name(self):
        """symbol_name(probe_signal_f_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_f_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(probe_signal_f_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.probe_signal_f_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(probe_signal_f_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.probe_signal_f_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(probe_signal_f_sptr self) -> long"""
        return _blocks_swig4.probe_signal_f_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(probe_signal_f_sptr self) -> basic_block_sptr"""
        return _blocks_swig4.probe_signal_f_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(probe_signal_f_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig4.probe_signal_f_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(probe_signal_f_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_f_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(probe_signal_f_sptr self, std::string name)"""
        return _blocks_swig4.probe_signal_f_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(probe_signal_f_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig4.probe_signal_f_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(probe_signal_f_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_f_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(probe_signal_f_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_f_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(probe_signal_f_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_f_sptr_message_subscribers(self, *args, **kwargs)

probe_signal_f_sptr_swigregister = _blocks_swig4.probe_signal_f_sptr_swigregister
probe_signal_f_sptr_swigregister(probe_signal_f_sptr)

probe_signal_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
probe_signal_f = probe_signal_f.make;

class probe_signal_c_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::probe_signal_c)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::probe_signal_c)> self) -> probe_signal_c_sptr
        __init__(boost::shared_ptr<(gr::blocks::probe_signal_c)> self, probe_signal_c p) -> probe_signal_c_sptr
        """
        this = _blocks_swig4.new_probe_signal_c_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(probe_signal_c_sptr self) -> probe_signal_c"""
        return _blocks_swig4.probe_signal_c_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig4.delete_probe_signal_c_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(probe_signal_c_sptr self) -> probe_signal_c_sptr

        Sink that allows a sample to be grabbed from Python.

        Constructor Specific Documentation:


        """
        return _blocks_swig4.probe_signal_c_sptr_make(self)

    def level(self):
        """level(probe_signal_c_sptr self) -> gr_complex"""
        return _blocks_swig4.probe_signal_c_sptr_level(self)

    def history(self):
        """history(probe_signal_c_sptr self) -> unsigned int"""
        return _blocks_swig4.probe_signal_c_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(probe_signal_c_sptr self, int which, int delay)
        declare_sample_delay(probe_signal_c_sptr self, unsigned int delay)
        """
        return _blocks_swig4.probe_signal_c_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(probe_signal_c_sptr self, int which) -> unsigned int"""
        return _blocks_swig4.probe_signal_c_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(probe_signal_c_sptr self) -> int"""
        return _blocks_swig4.probe_signal_c_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(probe_signal_c_sptr self) -> double"""
        return _blocks_swig4.probe_signal_c_sptr_relative_rate(self)

    def start(self):
        """start(probe_signal_c_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_c_sptr_start(self)

    def stop(self):
        """stop(probe_signal_c_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_c_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(probe_signal_c_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig4.probe_signal_c_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(probe_signal_c_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig4.probe_signal_c_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(probe_signal_c_sptr self) -> int"""
        return _blocks_swig4.probe_signal_c_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(probe_signal_c_sptr self, int m)"""
        return _blocks_swig4.probe_signal_c_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(probe_signal_c_sptr self)"""
        return _blocks_swig4.probe_signal_c_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(probe_signal_c_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_c_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(probe_signal_c_sptr self, int m)"""
        return _blocks_swig4.probe_signal_c_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(probe_signal_c_sptr self) -> int"""
        return _blocks_swig4.probe_signal_c_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(probe_signal_c_sptr self, int i) -> long"""
        return _blocks_swig4.probe_signal_c_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(probe_signal_c_sptr self, long max_output_buffer)
        set_max_output_buffer(probe_signal_c_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig4.probe_signal_c_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(probe_signal_c_sptr self, int i) -> long"""
        return _blocks_swig4.probe_signal_c_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(probe_signal_c_sptr self, long min_output_buffer)
        set_min_output_buffer(probe_signal_c_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig4.probe_signal_c_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(probe_signal_c_sptr self) -> float"""
        return _blocks_swig4.probe_signal_c_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(probe_signal_c_sptr self) -> float"""
        return _blocks_swig4.probe_signal_c_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(probe_signal_c_sptr self) -> float"""
        return _blocks_swig4.probe_signal_c_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(probe_signal_c_sptr self) -> float"""
        return _blocks_swig4.probe_signal_c_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(probe_signal_c_sptr self) -> float"""
        return _blocks_swig4.probe_signal_c_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(probe_signal_c_sptr self) -> float"""
        return _blocks_swig4.probe_signal_c_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(probe_signal_c_sptr self, int which) -> float
        pc_input_buffers_full(probe_signal_c_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_c_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(probe_signal_c_sptr self, int which) -> float
        pc_input_buffers_full_avg(probe_signal_c_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_c_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(probe_signal_c_sptr self, int which) -> float
        pc_input_buffers_full_var(probe_signal_c_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_c_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(probe_signal_c_sptr self, int which) -> float
        pc_output_buffers_full(probe_signal_c_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_c_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(probe_signal_c_sptr self, int which) -> float
        pc_output_buffers_full_avg(probe_signal_c_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_c_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(probe_signal_c_sptr self, int which) -> float
        pc_output_buffers_full_var(probe_signal_c_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_c_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(probe_signal_c_sptr self) -> float"""
        return _blocks_swig4.probe_signal_c_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(probe_signal_c_sptr self) -> float"""
        return _blocks_swig4.probe_signal_c_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(probe_signal_c_sptr self) -> float"""
        return _blocks_swig4.probe_signal_c_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(probe_signal_c_sptr self) -> float"""
        return _blocks_swig4.probe_signal_c_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(probe_signal_c_sptr self) -> float"""
        return _blocks_swig4.probe_signal_c_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(probe_signal_c_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig4.probe_signal_c_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(probe_signal_c_sptr self)"""
        return _blocks_swig4.probe_signal_c_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(probe_signal_c_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig4.probe_signal_c_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(probe_signal_c_sptr self) -> int"""
        return _blocks_swig4.probe_signal_c_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(probe_signal_c_sptr self) -> int"""
        return _blocks_swig4.probe_signal_c_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(probe_signal_c_sptr self, int priority) -> int"""
        return _blocks_swig4.probe_signal_c_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(probe_signal_c_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_c_sptr_name(self)

    def symbol_name(self):
        """symbol_name(probe_signal_c_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_c_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(probe_signal_c_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.probe_signal_c_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(probe_signal_c_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.probe_signal_c_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(probe_signal_c_sptr self) -> long"""
        return _blocks_swig4.probe_signal_c_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(probe_signal_c_sptr self) -> basic_block_sptr"""
        return _blocks_swig4.probe_signal_c_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(probe_signal_c_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig4.probe_signal_c_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(probe_signal_c_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_c_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(probe_signal_c_sptr self, std::string name)"""
        return _blocks_swig4.probe_signal_c_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(probe_signal_c_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig4.probe_signal_c_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(probe_signal_c_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_c_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(probe_signal_c_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_c_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(probe_signal_c_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_c_sptr_message_subscribers(self, *args, **kwargs)

probe_signal_c_sptr_swigregister = _blocks_swig4.probe_signal_c_sptr_swigregister
probe_signal_c_sptr_swigregister(probe_signal_c_sptr)

probe_signal_c_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
probe_signal_c = probe_signal_c.make;

class probe_signal_vb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::probe_signal_vb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::probe_signal_vb)> self) -> probe_signal_vb_sptr
        __init__(boost::shared_ptr<(gr::blocks::probe_signal_vb)> self, probe_signal_vb p) -> probe_signal_vb_sptr
        """
        this = _blocks_swig4.new_probe_signal_vb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(probe_signal_vb_sptr self) -> probe_signal_vb"""
        return _blocks_swig4.probe_signal_vb_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig4.delete_probe_signal_vb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(probe_signal_vb_sptr self, size_t size) -> probe_signal_vb_sptr

        Sink that allows a vector of samples to be grabbed from Python.

        Constructor Specific Documentation:



        Args:
            size : 
        """
        return _blocks_swig4.probe_signal_vb_sptr_make(self, *args, **kwargs)

    def level(self):
        """level(probe_signal_vb_sptr self) -> std::vector< unsigned char,std::allocator< unsigned char > >"""
        return _blocks_swig4.probe_signal_vb_sptr_level(self)

    def history(self):
        """history(probe_signal_vb_sptr self) -> unsigned int"""
        return _blocks_swig4.probe_signal_vb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(probe_signal_vb_sptr self, int which, int delay)
        declare_sample_delay(probe_signal_vb_sptr self, unsigned int delay)
        """
        return _blocks_swig4.probe_signal_vb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(probe_signal_vb_sptr self, int which) -> unsigned int"""
        return _blocks_swig4.probe_signal_vb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(probe_signal_vb_sptr self) -> int"""
        return _blocks_swig4.probe_signal_vb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(probe_signal_vb_sptr self) -> double"""
        return _blocks_swig4.probe_signal_vb_sptr_relative_rate(self)

    def start(self):
        """start(probe_signal_vb_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_vb_sptr_start(self)

    def stop(self):
        """stop(probe_signal_vb_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_vb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(probe_signal_vb_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig4.probe_signal_vb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(probe_signal_vb_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig4.probe_signal_vb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(probe_signal_vb_sptr self) -> int"""
        return _blocks_swig4.probe_signal_vb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(probe_signal_vb_sptr self, int m)"""
        return _blocks_swig4.probe_signal_vb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(probe_signal_vb_sptr self)"""
        return _blocks_swig4.probe_signal_vb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(probe_signal_vb_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_vb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(probe_signal_vb_sptr self, int m)"""
        return _blocks_swig4.probe_signal_vb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(probe_signal_vb_sptr self) -> int"""
        return _blocks_swig4.probe_signal_vb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(probe_signal_vb_sptr self, int i) -> long"""
        return _blocks_swig4.probe_signal_vb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(probe_signal_vb_sptr self, long max_output_buffer)
        set_max_output_buffer(probe_signal_vb_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig4.probe_signal_vb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(probe_signal_vb_sptr self, int i) -> long"""
        return _blocks_swig4.probe_signal_vb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(probe_signal_vb_sptr self, long min_output_buffer)
        set_min_output_buffer(probe_signal_vb_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig4.probe_signal_vb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(probe_signal_vb_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(probe_signal_vb_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(probe_signal_vb_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(probe_signal_vb_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(probe_signal_vb_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(probe_signal_vb_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(probe_signal_vb_sptr self, int which) -> float
        pc_input_buffers_full(probe_signal_vb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(probe_signal_vb_sptr self, int which) -> float
        pc_input_buffers_full_avg(probe_signal_vb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(probe_signal_vb_sptr self, int which) -> float
        pc_input_buffers_full_var(probe_signal_vb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(probe_signal_vb_sptr self, int which) -> float
        pc_output_buffers_full(probe_signal_vb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(probe_signal_vb_sptr self, int which) -> float
        pc_output_buffers_full_avg(probe_signal_vb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(probe_signal_vb_sptr self, int which) -> float
        pc_output_buffers_full_var(probe_signal_vb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(probe_signal_vb_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(probe_signal_vb_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(probe_signal_vb_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(probe_signal_vb_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vb_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(probe_signal_vb_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vb_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(probe_signal_vb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig4.probe_signal_vb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(probe_signal_vb_sptr self)"""
        return _blocks_swig4.probe_signal_vb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(probe_signal_vb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig4.probe_signal_vb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(probe_signal_vb_sptr self) -> int"""
        return _blocks_swig4.probe_signal_vb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(probe_signal_vb_sptr self) -> int"""
        return _blocks_swig4.probe_signal_vb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(probe_signal_vb_sptr self, int priority) -> int"""
        return _blocks_swig4.probe_signal_vb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(probe_signal_vb_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_vb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(probe_signal_vb_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_vb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(probe_signal_vb_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.probe_signal_vb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(probe_signal_vb_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.probe_signal_vb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(probe_signal_vb_sptr self) -> long"""
        return _blocks_swig4.probe_signal_vb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(probe_signal_vb_sptr self) -> basic_block_sptr"""
        return _blocks_swig4.probe_signal_vb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(probe_signal_vb_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig4.probe_signal_vb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(probe_signal_vb_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_vb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(probe_signal_vb_sptr self, std::string name)"""
        return _blocks_swig4.probe_signal_vb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(probe_signal_vb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig4.probe_signal_vb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(probe_signal_vb_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_vb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(probe_signal_vb_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_vb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(probe_signal_vb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_vb_sptr_message_subscribers(self, *args, **kwargs)

probe_signal_vb_sptr_swigregister = _blocks_swig4.probe_signal_vb_sptr_swigregister
probe_signal_vb_sptr_swigregister(probe_signal_vb_sptr)

probe_signal_vb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
probe_signal_vb = probe_signal_vb.make;

class probe_signal_vs_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::probe_signal_vs)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::probe_signal_vs)> self) -> probe_signal_vs_sptr
        __init__(boost::shared_ptr<(gr::blocks::probe_signal_vs)> self, probe_signal_vs p) -> probe_signal_vs_sptr
        """
        this = _blocks_swig4.new_probe_signal_vs_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(probe_signal_vs_sptr self) -> probe_signal_vs"""
        return _blocks_swig4.probe_signal_vs_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig4.delete_probe_signal_vs_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(probe_signal_vs_sptr self, size_t size) -> probe_signal_vs_sptr

        Sink that allows a vector of samples to be grabbed from Python.

        Constructor Specific Documentation:



        Args:
            size : 
        """
        return _blocks_swig4.probe_signal_vs_sptr_make(self, *args, **kwargs)

    def level(self):
        """level(probe_signal_vs_sptr self) -> std::vector< short,std::allocator< short > >"""
        return _blocks_swig4.probe_signal_vs_sptr_level(self)

    def history(self):
        """history(probe_signal_vs_sptr self) -> unsigned int"""
        return _blocks_swig4.probe_signal_vs_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(probe_signal_vs_sptr self, int which, int delay)
        declare_sample_delay(probe_signal_vs_sptr self, unsigned int delay)
        """
        return _blocks_swig4.probe_signal_vs_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(probe_signal_vs_sptr self, int which) -> unsigned int"""
        return _blocks_swig4.probe_signal_vs_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(probe_signal_vs_sptr self) -> int"""
        return _blocks_swig4.probe_signal_vs_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(probe_signal_vs_sptr self) -> double"""
        return _blocks_swig4.probe_signal_vs_sptr_relative_rate(self)

    def start(self):
        """start(probe_signal_vs_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_vs_sptr_start(self)

    def stop(self):
        """stop(probe_signal_vs_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_vs_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(probe_signal_vs_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig4.probe_signal_vs_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(probe_signal_vs_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig4.probe_signal_vs_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(probe_signal_vs_sptr self) -> int"""
        return _blocks_swig4.probe_signal_vs_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(probe_signal_vs_sptr self, int m)"""
        return _blocks_swig4.probe_signal_vs_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(probe_signal_vs_sptr self)"""
        return _blocks_swig4.probe_signal_vs_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(probe_signal_vs_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_vs_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(probe_signal_vs_sptr self, int m)"""
        return _blocks_swig4.probe_signal_vs_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(probe_signal_vs_sptr self) -> int"""
        return _blocks_swig4.probe_signal_vs_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(probe_signal_vs_sptr self, int i) -> long"""
        return _blocks_swig4.probe_signal_vs_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(probe_signal_vs_sptr self, long max_output_buffer)
        set_max_output_buffer(probe_signal_vs_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig4.probe_signal_vs_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(probe_signal_vs_sptr self, int i) -> long"""
        return _blocks_swig4.probe_signal_vs_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(probe_signal_vs_sptr self, long min_output_buffer)
        set_min_output_buffer(probe_signal_vs_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig4.probe_signal_vs_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(probe_signal_vs_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vs_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(probe_signal_vs_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vs_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(probe_signal_vs_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vs_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(probe_signal_vs_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vs_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(probe_signal_vs_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vs_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(probe_signal_vs_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vs_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(probe_signal_vs_sptr self, int which) -> float
        pc_input_buffers_full(probe_signal_vs_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vs_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(probe_signal_vs_sptr self, int which) -> float
        pc_input_buffers_full_avg(probe_signal_vs_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vs_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(probe_signal_vs_sptr self, int which) -> float
        pc_input_buffers_full_var(probe_signal_vs_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vs_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(probe_signal_vs_sptr self, int which) -> float
        pc_output_buffers_full(probe_signal_vs_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vs_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(probe_signal_vs_sptr self, int which) -> float
        pc_output_buffers_full_avg(probe_signal_vs_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vs_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(probe_signal_vs_sptr self, int which) -> float
        pc_output_buffers_full_var(probe_signal_vs_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vs_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(probe_signal_vs_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vs_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(probe_signal_vs_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vs_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(probe_signal_vs_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vs_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(probe_signal_vs_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vs_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(probe_signal_vs_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vs_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(probe_signal_vs_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig4.probe_signal_vs_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(probe_signal_vs_sptr self)"""
        return _blocks_swig4.probe_signal_vs_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(probe_signal_vs_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig4.probe_signal_vs_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(probe_signal_vs_sptr self) -> int"""
        return _blocks_swig4.probe_signal_vs_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(probe_signal_vs_sptr self) -> int"""
        return _blocks_swig4.probe_signal_vs_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(probe_signal_vs_sptr self, int priority) -> int"""
        return _blocks_swig4.probe_signal_vs_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(probe_signal_vs_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_vs_sptr_name(self)

    def symbol_name(self):
        """symbol_name(probe_signal_vs_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_vs_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(probe_signal_vs_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.probe_signal_vs_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(probe_signal_vs_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.probe_signal_vs_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(probe_signal_vs_sptr self) -> long"""
        return _blocks_swig4.probe_signal_vs_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(probe_signal_vs_sptr self) -> basic_block_sptr"""
        return _blocks_swig4.probe_signal_vs_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(probe_signal_vs_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig4.probe_signal_vs_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(probe_signal_vs_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_vs_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(probe_signal_vs_sptr self, std::string name)"""
        return _blocks_swig4.probe_signal_vs_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(probe_signal_vs_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig4.probe_signal_vs_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(probe_signal_vs_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_vs_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(probe_signal_vs_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_vs_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(probe_signal_vs_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_vs_sptr_message_subscribers(self, *args, **kwargs)

probe_signal_vs_sptr_swigregister = _blocks_swig4.probe_signal_vs_sptr_swigregister
probe_signal_vs_sptr_swigregister(probe_signal_vs_sptr)

probe_signal_vs_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
probe_signal_vs = probe_signal_vs.make;

class probe_signal_vi_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::probe_signal_vi)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::probe_signal_vi)> self) -> probe_signal_vi_sptr
        __init__(boost::shared_ptr<(gr::blocks::probe_signal_vi)> self, probe_signal_vi p) -> probe_signal_vi_sptr
        """
        this = _blocks_swig4.new_probe_signal_vi_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(probe_signal_vi_sptr self) -> probe_signal_vi"""
        return _blocks_swig4.probe_signal_vi_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig4.delete_probe_signal_vi_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(probe_signal_vi_sptr self, size_t size) -> probe_signal_vi_sptr

        Sink that allows a vector of samples to be grabbed from Python.

        Constructor Specific Documentation:



        Args:
            size : 
        """
        return _blocks_swig4.probe_signal_vi_sptr_make(self, *args, **kwargs)

    def level(self):
        """level(probe_signal_vi_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig4.probe_signal_vi_sptr_level(self)

    def history(self):
        """history(probe_signal_vi_sptr self) -> unsigned int"""
        return _blocks_swig4.probe_signal_vi_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(probe_signal_vi_sptr self, int which, int delay)
        declare_sample_delay(probe_signal_vi_sptr self, unsigned int delay)
        """
        return _blocks_swig4.probe_signal_vi_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(probe_signal_vi_sptr self, int which) -> unsigned int"""
        return _blocks_swig4.probe_signal_vi_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(probe_signal_vi_sptr self) -> int"""
        return _blocks_swig4.probe_signal_vi_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(probe_signal_vi_sptr self) -> double"""
        return _blocks_swig4.probe_signal_vi_sptr_relative_rate(self)

    def start(self):
        """start(probe_signal_vi_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_vi_sptr_start(self)

    def stop(self):
        """stop(probe_signal_vi_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_vi_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(probe_signal_vi_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig4.probe_signal_vi_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(probe_signal_vi_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig4.probe_signal_vi_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(probe_signal_vi_sptr self) -> int"""
        return _blocks_swig4.probe_signal_vi_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(probe_signal_vi_sptr self, int m)"""
        return _blocks_swig4.probe_signal_vi_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(probe_signal_vi_sptr self)"""
        return _blocks_swig4.probe_signal_vi_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(probe_signal_vi_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_vi_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(probe_signal_vi_sptr self, int m)"""
        return _blocks_swig4.probe_signal_vi_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(probe_signal_vi_sptr self) -> int"""
        return _blocks_swig4.probe_signal_vi_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(probe_signal_vi_sptr self, int i) -> long"""
        return _blocks_swig4.probe_signal_vi_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(probe_signal_vi_sptr self, long max_output_buffer)
        set_max_output_buffer(probe_signal_vi_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig4.probe_signal_vi_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(probe_signal_vi_sptr self, int i) -> long"""
        return _blocks_swig4.probe_signal_vi_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(probe_signal_vi_sptr self, long min_output_buffer)
        set_min_output_buffer(probe_signal_vi_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig4.probe_signal_vi_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(probe_signal_vi_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vi_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(probe_signal_vi_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vi_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(probe_signal_vi_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vi_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(probe_signal_vi_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vi_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(probe_signal_vi_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vi_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(probe_signal_vi_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vi_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(probe_signal_vi_sptr self, int which) -> float
        pc_input_buffers_full(probe_signal_vi_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vi_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(probe_signal_vi_sptr self, int which) -> float
        pc_input_buffers_full_avg(probe_signal_vi_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vi_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(probe_signal_vi_sptr self, int which) -> float
        pc_input_buffers_full_var(probe_signal_vi_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vi_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(probe_signal_vi_sptr self, int which) -> float
        pc_output_buffers_full(probe_signal_vi_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vi_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(probe_signal_vi_sptr self, int which) -> float
        pc_output_buffers_full_avg(probe_signal_vi_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vi_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(probe_signal_vi_sptr self, int which) -> float
        pc_output_buffers_full_var(probe_signal_vi_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vi_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(probe_signal_vi_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vi_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(probe_signal_vi_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vi_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(probe_signal_vi_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vi_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(probe_signal_vi_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vi_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(probe_signal_vi_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vi_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(probe_signal_vi_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig4.probe_signal_vi_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(probe_signal_vi_sptr self)"""
        return _blocks_swig4.probe_signal_vi_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(probe_signal_vi_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig4.probe_signal_vi_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(probe_signal_vi_sptr self) -> int"""
        return _blocks_swig4.probe_signal_vi_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(probe_signal_vi_sptr self) -> int"""
        return _blocks_swig4.probe_signal_vi_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(probe_signal_vi_sptr self, int priority) -> int"""
        return _blocks_swig4.probe_signal_vi_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(probe_signal_vi_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_vi_sptr_name(self)

    def symbol_name(self):
        """symbol_name(probe_signal_vi_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_vi_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(probe_signal_vi_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.probe_signal_vi_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(probe_signal_vi_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.probe_signal_vi_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(probe_signal_vi_sptr self) -> long"""
        return _blocks_swig4.probe_signal_vi_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(probe_signal_vi_sptr self) -> basic_block_sptr"""
        return _blocks_swig4.probe_signal_vi_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(probe_signal_vi_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig4.probe_signal_vi_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(probe_signal_vi_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_vi_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(probe_signal_vi_sptr self, std::string name)"""
        return _blocks_swig4.probe_signal_vi_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(probe_signal_vi_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig4.probe_signal_vi_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(probe_signal_vi_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_vi_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(probe_signal_vi_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_vi_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(probe_signal_vi_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_vi_sptr_message_subscribers(self, *args, **kwargs)

probe_signal_vi_sptr_swigregister = _blocks_swig4.probe_signal_vi_sptr_swigregister
probe_signal_vi_sptr_swigregister(probe_signal_vi_sptr)

probe_signal_vi_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
probe_signal_vi = probe_signal_vi.make;

class probe_signal_vf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::probe_signal_vf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::probe_signal_vf)> self) -> probe_signal_vf_sptr
        __init__(boost::shared_ptr<(gr::blocks::probe_signal_vf)> self, probe_signal_vf p) -> probe_signal_vf_sptr
        """
        this = _blocks_swig4.new_probe_signal_vf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(probe_signal_vf_sptr self) -> probe_signal_vf"""
        return _blocks_swig4.probe_signal_vf_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig4.delete_probe_signal_vf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(probe_signal_vf_sptr self, size_t size) -> probe_signal_vf_sptr

        Sink that allows a vector of samples to be grabbed from Python.

        Constructor Specific Documentation:



        Args:
            size : 
        """
        return _blocks_swig4.probe_signal_vf_sptr_make(self, *args, **kwargs)

    def level(self):
        """level(probe_signal_vf_sptr self) -> pmt_vector_float"""
        return _blocks_swig4.probe_signal_vf_sptr_level(self)

    def history(self):
        """history(probe_signal_vf_sptr self) -> unsigned int"""
        return _blocks_swig4.probe_signal_vf_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(probe_signal_vf_sptr self, int which, int delay)
        declare_sample_delay(probe_signal_vf_sptr self, unsigned int delay)
        """
        return _blocks_swig4.probe_signal_vf_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(probe_signal_vf_sptr self, int which) -> unsigned int"""
        return _blocks_swig4.probe_signal_vf_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(probe_signal_vf_sptr self) -> int"""
        return _blocks_swig4.probe_signal_vf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(probe_signal_vf_sptr self) -> double"""
        return _blocks_swig4.probe_signal_vf_sptr_relative_rate(self)

    def start(self):
        """start(probe_signal_vf_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_vf_sptr_start(self)

    def stop(self):
        """stop(probe_signal_vf_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_vf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(probe_signal_vf_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig4.probe_signal_vf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(probe_signal_vf_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig4.probe_signal_vf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(probe_signal_vf_sptr self) -> int"""
        return _blocks_swig4.probe_signal_vf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(probe_signal_vf_sptr self, int m)"""
        return _blocks_swig4.probe_signal_vf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(probe_signal_vf_sptr self)"""
        return _blocks_swig4.probe_signal_vf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(probe_signal_vf_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_vf_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(probe_signal_vf_sptr self, int m)"""
        return _blocks_swig4.probe_signal_vf_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(probe_signal_vf_sptr self) -> int"""
        return _blocks_swig4.probe_signal_vf_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(probe_signal_vf_sptr self, int i) -> long"""
        return _blocks_swig4.probe_signal_vf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(probe_signal_vf_sptr self, long max_output_buffer)
        set_max_output_buffer(probe_signal_vf_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig4.probe_signal_vf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(probe_signal_vf_sptr self, int i) -> long"""
        return _blocks_swig4.probe_signal_vf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(probe_signal_vf_sptr self, long min_output_buffer)
        set_min_output_buffer(probe_signal_vf_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig4.probe_signal_vf_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(probe_signal_vf_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vf_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(probe_signal_vf_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vf_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(probe_signal_vf_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vf_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(probe_signal_vf_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vf_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(probe_signal_vf_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vf_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(probe_signal_vf_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vf_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(probe_signal_vf_sptr self, int which) -> float
        pc_input_buffers_full(probe_signal_vf_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vf_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(probe_signal_vf_sptr self, int which) -> float
        pc_input_buffers_full_avg(probe_signal_vf_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vf_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(probe_signal_vf_sptr self, int which) -> float
        pc_input_buffers_full_var(probe_signal_vf_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vf_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(probe_signal_vf_sptr self, int which) -> float
        pc_output_buffers_full(probe_signal_vf_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vf_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(probe_signal_vf_sptr self, int which) -> float
        pc_output_buffers_full_avg(probe_signal_vf_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vf_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(probe_signal_vf_sptr self, int which) -> float
        pc_output_buffers_full_var(probe_signal_vf_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vf_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(probe_signal_vf_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vf_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(probe_signal_vf_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vf_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(probe_signal_vf_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vf_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(probe_signal_vf_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vf_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(probe_signal_vf_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vf_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(probe_signal_vf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig4.probe_signal_vf_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(probe_signal_vf_sptr self)"""
        return _blocks_swig4.probe_signal_vf_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(probe_signal_vf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig4.probe_signal_vf_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(probe_signal_vf_sptr self) -> int"""
        return _blocks_swig4.probe_signal_vf_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(probe_signal_vf_sptr self) -> int"""
        return _blocks_swig4.probe_signal_vf_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(probe_signal_vf_sptr self, int priority) -> int"""
        return _blocks_swig4.probe_signal_vf_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(probe_signal_vf_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_vf_sptr_name(self)

    def symbol_name(self):
        """symbol_name(probe_signal_vf_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_vf_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(probe_signal_vf_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.probe_signal_vf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(probe_signal_vf_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.probe_signal_vf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(probe_signal_vf_sptr self) -> long"""
        return _blocks_swig4.probe_signal_vf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(probe_signal_vf_sptr self) -> basic_block_sptr"""
        return _blocks_swig4.probe_signal_vf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(probe_signal_vf_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig4.probe_signal_vf_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(probe_signal_vf_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_vf_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(probe_signal_vf_sptr self, std::string name)"""
        return _blocks_swig4.probe_signal_vf_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(probe_signal_vf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig4.probe_signal_vf_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(probe_signal_vf_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_vf_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(probe_signal_vf_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_vf_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(probe_signal_vf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_vf_sptr_message_subscribers(self, *args, **kwargs)

probe_signal_vf_sptr_swigregister = _blocks_swig4.probe_signal_vf_sptr_swigregister
probe_signal_vf_sptr_swigregister(probe_signal_vf_sptr)

probe_signal_vf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
probe_signal_vf = probe_signal_vf.make;

class probe_signal_vc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::probe_signal_vc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::probe_signal_vc)> self) -> probe_signal_vc_sptr
        __init__(boost::shared_ptr<(gr::blocks::probe_signal_vc)> self, probe_signal_vc p) -> probe_signal_vc_sptr
        """
        this = _blocks_swig4.new_probe_signal_vc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(probe_signal_vc_sptr self) -> probe_signal_vc"""
        return _blocks_swig4.probe_signal_vc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig4.delete_probe_signal_vc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(probe_signal_vc_sptr self, size_t size) -> probe_signal_vc_sptr

        Sink that allows a vector of samples to be grabbed from Python.

        Constructor Specific Documentation:



        Args:
            size : 
        """
        return _blocks_swig4.probe_signal_vc_sptr_make(self, *args, **kwargs)

    def level(self):
        """level(probe_signal_vc_sptr self) -> pmt_vector_cfloat"""
        return _blocks_swig4.probe_signal_vc_sptr_level(self)

    def history(self):
        """history(probe_signal_vc_sptr self) -> unsigned int"""
        return _blocks_swig4.probe_signal_vc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(probe_signal_vc_sptr self, int which, int delay)
        declare_sample_delay(probe_signal_vc_sptr self, unsigned int delay)
        """
        return _blocks_swig4.probe_signal_vc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(probe_signal_vc_sptr self, int which) -> unsigned int"""
        return _blocks_swig4.probe_signal_vc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(probe_signal_vc_sptr self) -> int"""
        return _blocks_swig4.probe_signal_vc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(probe_signal_vc_sptr self) -> double"""
        return _blocks_swig4.probe_signal_vc_sptr_relative_rate(self)

    def start(self):
        """start(probe_signal_vc_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_vc_sptr_start(self)

    def stop(self):
        """stop(probe_signal_vc_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_vc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(probe_signal_vc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig4.probe_signal_vc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(probe_signal_vc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig4.probe_signal_vc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(probe_signal_vc_sptr self) -> int"""
        return _blocks_swig4.probe_signal_vc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(probe_signal_vc_sptr self, int m)"""
        return _blocks_swig4.probe_signal_vc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(probe_signal_vc_sptr self)"""
        return _blocks_swig4.probe_signal_vc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(probe_signal_vc_sptr self) -> bool"""
        return _blocks_swig4.probe_signal_vc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(probe_signal_vc_sptr self, int m)"""
        return _blocks_swig4.probe_signal_vc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(probe_signal_vc_sptr self) -> int"""
        return _blocks_swig4.probe_signal_vc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(probe_signal_vc_sptr self, int i) -> long"""
        return _blocks_swig4.probe_signal_vc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(probe_signal_vc_sptr self, long max_output_buffer)
        set_max_output_buffer(probe_signal_vc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig4.probe_signal_vc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(probe_signal_vc_sptr self, int i) -> long"""
        return _blocks_swig4.probe_signal_vc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(probe_signal_vc_sptr self, long min_output_buffer)
        set_min_output_buffer(probe_signal_vc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig4.probe_signal_vc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(probe_signal_vc_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(probe_signal_vc_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(probe_signal_vc_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(probe_signal_vc_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(probe_signal_vc_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(probe_signal_vc_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(probe_signal_vc_sptr self, int which) -> float
        pc_input_buffers_full(probe_signal_vc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(probe_signal_vc_sptr self, int which) -> float
        pc_input_buffers_full_avg(probe_signal_vc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(probe_signal_vc_sptr self, int which) -> float
        pc_input_buffers_full_var(probe_signal_vc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(probe_signal_vc_sptr self, int which) -> float
        pc_output_buffers_full(probe_signal_vc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(probe_signal_vc_sptr self, int which) -> float
        pc_output_buffers_full_avg(probe_signal_vc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(probe_signal_vc_sptr self, int which) -> float
        pc_output_buffers_full_var(probe_signal_vc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig4.probe_signal_vc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(probe_signal_vc_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(probe_signal_vc_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(probe_signal_vc_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(probe_signal_vc_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(probe_signal_vc_sptr self) -> float"""
        return _blocks_swig4.probe_signal_vc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(probe_signal_vc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig4.probe_signal_vc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(probe_signal_vc_sptr self)"""
        return _blocks_swig4.probe_signal_vc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(probe_signal_vc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig4.probe_signal_vc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(probe_signal_vc_sptr self) -> int"""
        return _blocks_swig4.probe_signal_vc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(probe_signal_vc_sptr self) -> int"""
        return _blocks_swig4.probe_signal_vc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(probe_signal_vc_sptr self, int priority) -> int"""
        return _blocks_swig4.probe_signal_vc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(probe_signal_vc_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_vc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(probe_signal_vc_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_vc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(probe_signal_vc_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.probe_signal_vc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(probe_signal_vc_sptr self) -> io_signature_sptr"""
        return _blocks_swig4.probe_signal_vc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(probe_signal_vc_sptr self) -> long"""
        return _blocks_swig4.probe_signal_vc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(probe_signal_vc_sptr self) -> basic_block_sptr"""
        return _blocks_swig4.probe_signal_vc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(probe_signal_vc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig4.probe_signal_vc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(probe_signal_vc_sptr self) -> std::string"""
        return _blocks_swig4.probe_signal_vc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(probe_signal_vc_sptr self, std::string name)"""
        return _blocks_swig4.probe_signal_vc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(probe_signal_vc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig4.probe_signal_vc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(probe_signal_vc_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_vc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(probe_signal_vc_sptr self) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_vc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(probe_signal_vc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig4.probe_signal_vc_sptr_message_subscribers(self, *args, **kwargs)

probe_signal_vc_sptr_swigregister = _blocks_swig4.probe_signal_vc_sptr_swigregister
probe_signal_vc_sptr_swigregister(probe_signal_vc_sptr)

probe_signal_vc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
probe_signal_vc = probe_signal_vc.make;




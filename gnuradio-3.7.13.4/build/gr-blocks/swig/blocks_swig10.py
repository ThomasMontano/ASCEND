# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_blocks_swig10', [dirname(__file__)])
        except ImportError:
            import _blocks_swig10
            return _blocks_swig10
        if fp is not None:
            try:
                _mod = imp.load_module('_blocks_swig10', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _blocks_swig10 = swig_import_helper()
    del swig_import_helper
else:
    import _blocks_swig10
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _blocks_swig10.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _blocks_swig10.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _blocks_swig10.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _blocks_swig10.high_res_timer_epoch()
class min_ff(object):
    """
    Compares vectors from multiple streams and determines the minimum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the minimum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the minimum corresponding input vector items.

    Constructor Specific Documentation:



    Args:
        vlen : 
        vlen_out : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t vlen, size_t vlen_out=1) -> min_ff_sptr

        Compares vectors from multiple streams and determines the minimum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the minimum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the minimum corresponding input vector items.

        Constructor Specific Documentation:



        Args:
            vlen : 
            vlen_out : 
        """
        return _blocks_swig10.min_ff_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig10.delete_min_ff
    __del__ = lambda self : None;
min_ff_swigregister = _blocks_swig10.min_ff_swigregister
min_ff_swigregister(min_ff)

def min_ff_make(*args, **kwargs):
  """
    min_ff_make(size_t vlen, size_t vlen_out=1) -> min_ff_sptr

    Compares vectors from multiple streams and determines the minimum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the minimum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the minimum corresponding input vector items.

    Constructor Specific Documentation:



    Args:
        vlen : 
        vlen_out : 
    """
  return _blocks_swig10.min_ff_make(*args, **kwargs)

class min_ii(object):
    """
    Compares vectors from multiple streams and determines the minimum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the minimum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the minimum corresponding input vector items.

    Constructor Specific Documentation:



    Args:
        vlen : 
        vlen_out : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t vlen, size_t vlen_out=1) -> min_ii_sptr

        Compares vectors from multiple streams and determines the minimum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the minimum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the minimum corresponding input vector items.

        Constructor Specific Documentation:



        Args:
            vlen : 
            vlen_out : 
        """
        return _blocks_swig10.min_ii_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig10.delete_min_ii
    __del__ = lambda self : None;
min_ii_swigregister = _blocks_swig10.min_ii_swigregister
min_ii_swigregister(min_ii)

def min_ii_make(*args, **kwargs):
  """
    min_ii_make(size_t vlen, size_t vlen_out=1) -> min_ii_sptr

    Compares vectors from multiple streams and determines the minimum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the minimum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the minimum corresponding input vector items.

    Constructor Specific Documentation:



    Args:
        vlen : 
        vlen_out : 
    """
  return _blocks_swig10.min_ii_make(*args, **kwargs)

class min_ss(object):
    """
    Compares vectors from multiple streams and determines the minimum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the minimum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the minimum corresponding input vector items.

    Constructor Specific Documentation:



    Args:
        vlen : 
        vlen_out : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t vlen, size_t vlen_out=1) -> min_ss_sptr

        Compares vectors from multiple streams and determines the minimum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the minimum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the minimum corresponding input vector items.

        Constructor Specific Documentation:



        Args:
            vlen : 
            vlen_out : 
        """
        return _blocks_swig10.min_ss_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig10.delete_min_ss
    __del__ = lambda self : None;
min_ss_swigregister = _blocks_swig10.min_ss_swigregister
min_ss_swigregister(min_ss)

def min_ss_make(*args, **kwargs):
  """
    min_ss_make(size_t vlen, size_t vlen_out=1) -> min_ss_sptr

    Compares vectors from multiple streams and determines the minimum value from each vector over all streams.

    Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the minimum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the minimum corresponding input vector items.

    Constructor Specific Documentation:



    Args:
        vlen : 
        vlen_out : 
    """
  return _blocks_swig10.min_ss_make(*args, **kwargs)

class moving_average_cc(object):
    """
    output is the moving sum of the last N samples, scaled by the scale factor

    Constructor Specific Documentation:

    Create a moving average block.

    Args:
        length : Number of samples to use in the average.
        scale : scale factor for the result.
        max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
        vlen : When > 1, do a per-vector-element moving average
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int length, gr_complex scale, int max_iter=4096, unsigned int vlen=1) -> moving_average_cc_sptr

        output is the moving sum of the last N samples, scaled by the scale factor

        Constructor Specific Documentation:

        Create a moving average block.

        Args:
            length : Number of samples to use in the average.
            scale : scale factor for the result.
            max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
            vlen : When > 1, do a per-vector-element moving average
        """
        return _blocks_swig10.moving_average_cc_make(*args, **kwargs)

    make = staticmethod(make)
    def length(self):
        """
        length(moving_average_cc self) -> int

        Get the length used in the avaraging calculation.
        """
        return _blocks_swig10.moving_average_cc_length(self)

    def scale(self):
        """
        scale(moving_average_cc self) -> gr_complex

        Get the scale factor being used.
        """
        return _blocks_swig10.moving_average_cc_scale(self)

    def set_length_and_scale(self, *args, **kwargs):
        """
        set_length_and_scale(moving_average_cc self, int length, gr_complex scale)

        Set both the length and the scale factor together.
        """
        return _blocks_swig10.moving_average_cc_set_length_and_scale(self, *args, **kwargs)

    def set_length(self, *args, **kwargs):
        """
        set_length(moving_average_cc self, int length)

        Set the length.
        """
        return _blocks_swig10.moving_average_cc_set_length(self, *args, **kwargs)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(moving_average_cc self, gr_complex scale)

        Set the scale factor.
        """
        return _blocks_swig10.moving_average_cc_set_scale(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig10.delete_moving_average_cc
    __del__ = lambda self : None;
moving_average_cc_swigregister = _blocks_swig10.moving_average_cc_swigregister
moving_average_cc_swigregister(moving_average_cc)

def moving_average_cc_make(*args, **kwargs):
  """
    moving_average_cc_make(int length, gr_complex scale, int max_iter=4096, unsigned int vlen=1) -> moving_average_cc_sptr

    output is the moving sum of the last N samples, scaled by the scale factor

    Constructor Specific Documentation:

    Create a moving average block.

    Args:
        length : Number of samples to use in the average.
        scale : scale factor for the result.
        max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
        vlen : When > 1, do a per-vector-element moving average
    """
  return _blocks_swig10.moving_average_cc_make(*args, **kwargs)

class moving_average_ff(object):
    """
    output is the moving sum of the last N samples, scaled by the scale factor

    Constructor Specific Documentation:

    Create a moving average block.

    Args:
        length : Number of samples to use in the average.
        scale : scale factor for the result.
        max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
        vlen : When > 1, do a per-vector-element moving average
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int length, float scale, int max_iter=4096, unsigned int vlen=1) -> moving_average_ff_sptr

        output is the moving sum of the last N samples, scaled by the scale factor

        Constructor Specific Documentation:

        Create a moving average block.

        Args:
            length : Number of samples to use in the average.
            scale : scale factor for the result.
            max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
            vlen : When > 1, do a per-vector-element moving average
        """
        return _blocks_swig10.moving_average_ff_make(*args, **kwargs)

    make = staticmethod(make)
    def length(self):
        """
        length(moving_average_ff self) -> int

        Get the length used in the avaraging calculation.
        """
        return _blocks_swig10.moving_average_ff_length(self)

    def scale(self):
        """
        scale(moving_average_ff self) -> float

        Get the scale factor being used.
        """
        return _blocks_swig10.moving_average_ff_scale(self)

    def set_length_and_scale(self, *args, **kwargs):
        """
        set_length_and_scale(moving_average_ff self, int length, float scale)

        Set both the length and the scale factor together.
        """
        return _blocks_swig10.moving_average_ff_set_length_and_scale(self, *args, **kwargs)

    def set_length(self, *args, **kwargs):
        """
        set_length(moving_average_ff self, int length)

        Set the length.
        """
        return _blocks_swig10.moving_average_ff_set_length(self, *args, **kwargs)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(moving_average_ff self, float scale)

        Set the scale factor.
        """
        return _blocks_swig10.moving_average_ff_set_scale(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig10.delete_moving_average_ff
    __del__ = lambda self : None;
moving_average_ff_swigregister = _blocks_swig10.moving_average_ff_swigregister
moving_average_ff_swigregister(moving_average_ff)

def moving_average_ff_make(*args, **kwargs):
  """
    moving_average_ff_make(int length, float scale, int max_iter=4096, unsigned int vlen=1) -> moving_average_ff_sptr

    output is the moving sum of the last N samples, scaled by the scale factor

    Constructor Specific Documentation:

    Create a moving average block.

    Args:
        length : Number of samples to use in the average.
        scale : scale factor for the result.
        max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
        vlen : When > 1, do a per-vector-element moving average
    """
  return _blocks_swig10.moving_average_ff_make(*args, **kwargs)

class moving_average_ii(object):
    """
    output is the moving sum of the last N samples, scaled by the scale factor

    Constructor Specific Documentation:

    Create a moving average block.

    Args:
        length : Number of samples to use in the average.
        scale : scale factor for the result.
        max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
        vlen : When > 1, do a per-vector-element moving average
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int length, int scale, int max_iter=4096, unsigned int vlen=1) -> moving_average_ii_sptr

        output is the moving sum of the last N samples, scaled by the scale factor

        Constructor Specific Documentation:

        Create a moving average block.

        Args:
            length : Number of samples to use in the average.
            scale : scale factor for the result.
            max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
            vlen : When > 1, do a per-vector-element moving average
        """
        return _blocks_swig10.moving_average_ii_make(*args, **kwargs)

    make = staticmethod(make)
    def length(self):
        """
        length(moving_average_ii self) -> int

        Get the length used in the avaraging calculation.
        """
        return _blocks_swig10.moving_average_ii_length(self)

    def scale(self):
        """
        scale(moving_average_ii self) -> int

        Get the scale factor being used.
        """
        return _blocks_swig10.moving_average_ii_scale(self)

    def set_length_and_scale(self, *args, **kwargs):
        """
        set_length_and_scale(moving_average_ii self, int length, int scale)

        Set both the length and the scale factor together.
        """
        return _blocks_swig10.moving_average_ii_set_length_and_scale(self, *args, **kwargs)

    def set_length(self, *args, **kwargs):
        """
        set_length(moving_average_ii self, int length)

        Set the length.
        """
        return _blocks_swig10.moving_average_ii_set_length(self, *args, **kwargs)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(moving_average_ii self, int scale)

        Set the scale factor.
        """
        return _blocks_swig10.moving_average_ii_set_scale(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig10.delete_moving_average_ii
    __del__ = lambda self : None;
moving_average_ii_swigregister = _blocks_swig10.moving_average_ii_swigregister
moving_average_ii_swigregister(moving_average_ii)

def moving_average_ii_make(*args, **kwargs):
  """
    moving_average_ii_make(int length, int scale, int max_iter=4096, unsigned int vlen=1) -> moving_average_ii_sptr

    output is the moving sum of the last N samples, scaled by the scale factor

    Constructor Specific Documentation:

    Create a moving average block.

    Args:
        length : Number of samples to use in the average.
        scale : scale factor for the result.
        max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
        vlen : When > 1, do a per-vector-element moving average
    """
  return _blocks_swig10.moving_average_ii_make(*args, **kwargs)

class moving_average_ss(object):
    """
    output is the moving sum of the last N samples, scaled by the scale factor

    Constructor Specific Documentation:

    Create a moving average block.

    Args:
        length : Number of samples to use in the average.
        scale : scale factor for the result.
        max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
        vlen : When > 1, do a per-vector-element moving average
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int length, short scale, int max_iter=4096, unsigned int vlen=1) -> moving_average_ss_sptr

        output is the moving sum of the last N samples, scaled by the scale factor

        Constructor Specific Documentation:

        Create a moving average block.

        Args:
            length : Number of samples to use in the average.
            scale : scale factor for the result.
            max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
            vlen : When > 1, do a per-vector-element moving average
        """
        return _blocks_swig10.moving_average_ss_make(*args, **kwargs)

    make = staticmethod(make)
    def length(self):
        """
        length(moving_average_ss self) -> int

        Get the length used in the avaraging calculation.
        """
        return _blocks_swig10.moving_average_ss_length(self)

    def scale(self):
        """
        scale(moving_average_ss self) -> short

        Get the scale factor being used.
        """
        return _blocks_swig10.moving_average_ss_scale(self)

    def set_length_and_scale(self, *args, **kwargs):
        """
        set_length_and_scale(moving_average_ss self, int length, short scale)

        Set both the length and the scale factor together.
        """
        return _blocks_swig10.moving_average_ss_set_length_and_scale(self, *args, **kwargs)

    def set_length(self, *args, **kwargs):
        """
        set_length(moving_average_ss self, int length)

        Set the length.
        """
        return _blocks_swig10.moving_average_ss_set_length(self, *args, **kwargs)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(moving_average_ss self, short scale)

        Set the scale factor.
        """
        return _blocks_swig10.moving_average_ss_set_scale(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig10.delete_moving_average_ss
    __del__ = lambda self : None;
moving_average_ss_swigregister = _blocks_swig10.moving_average_ss_swigregister
moving_average_ss_swigregister(moving_average_ss)

def moving_average_ss_make(*args, **kwargs):
  """
    moving_average_ss_make(int length, short scale, int max_iter=4096, unsigned int vlen=1) -> moving_average_ss_sptr

    output is the moving sum of the last N samples, scaled by the scale factor

    Constructor Specific Documentation:

    Create a moving average block.

    Args:
        length : Number of samples to use in the average.
        scale : scale factor for the result.
        max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
        vlen : When > 1, do a per-vector-element moving average
    """
  return _blocks_swig10.moving_average_ss_make(*args, **kwargs)

class nlog10_ff(object):
    """
    output = n*log10(input) + k

    Constructor Specific Documentation:

    Make an instance of an nlog10_ff block.

    Args:
        n : Scalar multiplicative constant
        vlen : Input vector length
        k : Scalar additive constant
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(n=1.0, vlen=1, k=0.0):
        """
        make(float n=1.0, size_t vlen=1, float k=0.0) -> nlog10_ff_sptr

        output = n*log10(input) + k

        Constructor Specific Documentation:

        Make an instance of an nlog10_ff block.

        Args:
            n : Scalar multiplicative constant
            vlen : Input vector length
            k : Scalar additive constant
        """
        return _blocks_swig10.nlog10_ff_make(n, vlen, k)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig10.delete_nlog10_ff
    __del__ = lambda self : None;
nlog10_ff_swigregister = _blocks_swig10.nlog10_ff_swigregister
nlog10_ff_swigregister(nlog10_ff)

def nlog10_ff_make(n=1.0, vlen=1, k=0.0):
  """
    nlog10_ff_make(float n=1.0, size_t vlen=1, float k=0.0) -> nlog10_ff_sptr

    output = n*log10(input) + k

    Constructor Specific Documentation:

    Make an instance of an nlog10_ff block.

    Args:
        n : Scalar multiplicative constant
        vlen : Input vector length
        k : Scalar additive constant
    """
  return _blocks_swig10.nlog10_ff_make(n, vlen, k)

class not_bb(object):
    """
    output = ~input

    bitwise boolean not of input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> not_bb_sptr

        output = ~input

        bitwise boolean not of input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig10.not_bb_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig10.delete_not_bb
    __del__ = lambda self : None;
not_bb_swigregister = _blocks_swig10.not_bb_swigregister
not_bb_swigregister(not_bb)

def not_bb_make(vlen=1):
  """
    not_bb_make(size_t vlen=1) -> not_bb_sptr

    output = ~input

    bitwise boolean not of input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig10.not_bb_make(vlen)

class not_ss(object):
    """
    output = ~input

    bitwise boolean not of input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> not_ss_sptr

        output = ~input

        bitwise boolean not of input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig10.not_ss_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig10.delete_not_ss
    __del__ = lambda self : None;
not_ss_swigregister = _blocks_swig10.not_ss_swigregister
not_ss_swigregister(not_ss)

def not_ss_make(vlen=1):
  """
    not_ss_make(size_t vlen=1) -> not_ss_sptr

    output = ~input

    bitwise boolean not of input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig10.not_ss_make(vlen)

class not_ii(object):
    """
    output = ~input

    bitwise boolean not of input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> not_ii_sptr

        output = ~input

        bitwise boolean not of input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig10.not_ii_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig10.delete_not_ii
    __del__ = lambda self : None;
not_ii_swigregister = _blocks_swig10.not_ii_swigregister
not_ii_swigregister(not_ii)

def not_ii_make(vlen=1):
  """
    not_ii_make(size_t vlen=1) -> not_ii_sptr

    output = ~input

    bitwise boolean not of input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig10.not_ii_make(vlen)

class or_bb(object):
    """
    output = input_0 | input_1 | , ... | input_N)

    Bitwise boolean or across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> or_bb_sptr

        output = input_0 | input_1 | , ... | input_N)

        Bitwise boolean or across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig10.or_bb_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig10.delete_or_bb
    __del__ = lambda self : None;
or_bb_swigregister = _blocks_swig10.or_bb_swigregister
or_bb_swigregister(or_bb)

def or_bb_make(vlen=1):
  """
    or_bb_make(size_t vlen=1) -> or_bb_sptr

    output = input_0 | input_1 | , ... | input_N)

    Bitwise boolean or across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig10.or_bb_make(vlen)

class or_ss(object):
    """
    output = input_0 | input_1 | , ... | input_N)

    Bitwise boolean or across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> or_ss_sptr

        output = input_0 | input_1 | , ... | input_N)

        Bitwise boolean or across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig10.or_ss_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig10.delete_or_ss
    __del__ = lambda self : None;
or_ss_swigregister = _blocks_swig10.or_ss_swigregister
or_ss_swigregister(or_ss)

def or_ss_make(vlen=1):
  """
    or_ss_make(size_t vlen=1) -> or_ss_sptr

    output = input_0 | input_1 | , ... | input_N)

    Bitwise boolean or across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig10.or_ss_make(vlen)

class or_ii(object):
    """
    output = input_0 | input_1 | , ... | input_N)

    Bitwise boolean or across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> or_ii_sptr

        output = input_0 | input_1 | , ... | input_N)

        Bitwise boolean or across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig10.or_ii_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig10.delete_or_ii
    __del__ = lambda self : None;
or_ii_swigregister = _blocks_swig10.or_ii_swigregister
or_ii_swigregister(or_ii)

def or_ii_make(vlen=1):
  """
    or_ii_make(size_t vlen=1) -> or_ii_sptr

    output = input_0 | input_1 | , ... | input_N)

    Bitwise boolean or across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig10.or_ii_make(vlen)

class patterned_interleaver(object):
    """
    Interleave items based on the provided vector .

    Constructor Specific Documentation:

    Make a patterned interleaver block.

    Args:
        itemsize : stream itemsize
        pattern : vector that represents the interleaving pattern
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t itemsize, std::vector< int,std::allocator< int > > pattern) -> patterned_interleaver_sptr

        Interleave items based on the provided vector .

        Constructor Specific Documentation:

        Make a patterned interleaver block.

        Args:
            itemsize : stream itemsize
            pattern : vector that represents the interleaving pattern
        """
        return _blocks_swig10.patterned_interleaver_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig10.delete_patterned_interleaver
    __del__ = lambda self : None;
patterned_interleaver_swigregister = _blocks_swig10.patterned_interleaver_swigregister
patterned_interleaver_swigregister(patterned_interleaver)

def patterned_interleaver_make(*args, **kwargs):
  """
    patterned_interleaver_make(size_t itemsize, std::vector< int,std::allocator< int > > pattern) -> patterned_interleaver_sptr

    Interleave items based on the provided vector .

    Constructor Specific Documentation:

    Make a patterned interleaver block.

    Args:
        itemsize : stream itemsize
        pattern : vector that represents the interleaving pattern
    """
  return _blocks_swig10.patterned_interleaver_make(*args, **kwargs)

class pack_k_bits_bb(object):
    """
    Converts a stream of bytes with 1 bit in the LSB to a byte with k relevant bits.

    This block takes in K bytes at a time, and uses the least significant bit to form a new byte.

    Example: k = 4 in = [0,1,0,1, 0x81,0x00,0x00,0x00] out = [0x05, 0x08]

    Constructor Specific Documentation:

    Make a pack_k_bits block.

    Args:
        k : number of bits to be packed.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned int k) -> pack_k_bits_bb_sptr

        Converts a stream of bytes with 1 bit in the LSB to a byte with k relevant bits.

        This block takes in K bytes at a time, and uses the least significant bit to form a new byte.

        Example: k = 4 in = [0,1,0,1, 0x81,0x00,0x00,0x00] out = [0x05, 0x08]

        Constructor Specific Documentation:

        Make a pack_k_bits block.

        Args:
            k : number of bits to be packed.
        """
        return _blocks_swig10.pack_k_bits_bb_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig10.delete_pack_k_bits_bb
    __del__ = lambda self : None;
pack_k_bits_bb_swigregister = _blocks_swig10.pack_k_bits_bb_swigregister
pack_k_bits_bb_swigregister(pack_k_bits_bb)

def pack_k_bits_bb_make(*args, **kwargs):
  """
    pack_k_bits_bb_make(unsigned int k) -> pack_k_bits_bb_sptr

    Converts a stream of bytes with 1 bit in the LSB to a byte with k relevant bits.

    This block takes in K bytes at a time, and uses the least significant bit to form a new byte.

    Example: k = 4 in = [0,1,0,1, 0x81,0x00,0x00,0x00] out = [0x05, 0x08]

    Constructor Specific Documentation:

    Make a pack_k_bits block.

    Args:
        k : number of bits to be packed.
    """
  return _blocks_swig10.pack_k_bits_bb_make(*args, **kwargs)

class packed_to_unpacked_bb(object):
    """
    Convert a stream of packed bytes or shorts to stream of unpacked bytes or shorts.

    input: stream of unsigned char; output: stream of unsigned char

    This is the inverse of gr::blocks::unpacked_to_packed_XX.

    The bits in the bytes or shorts input stream are grouped into chunks of  bits and each resulting chunk is written right- justified to the output stream of bytes or shorts. All b or 16 bits of the each input bytes or short are processed. The right thing is done if bits_per_chunk is not a power of two.

    The combination of gr::blocks::packed_to_unpacked_XX_ followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.

    Constructor Specific Documentation:



    Args:
        bits_per_chunk : 
        endianness : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned int bits_per_chunk, gr::endianness_t endianness) -> packed_to_unpacked_bb_sptr

        Convert a stream of packed bytes or shorts to stream of unpacked bytes or shorts.

        input: stream of unsigned char; output: stream of unsigned char

        This is the inverse of gr::blocks::unpacked_to_packed_XX.

        The bits in the bytes or shorts input stream are grouped into chunks of  bits and each resulting chunk is written right- justified to the output stream of bytes or shorts. All b or 16 bits of the each input bytes or short are processed. The right thing is done if bits_per_chunk is not a power of two.

        The combination of gr::blocks::packed_to_unpacked_XX_ followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.

        Constructor Specific Documentation:



        Args:
            bits_per_chunk : 
            endianness : 
        """
        return _blocks_swig10.packed_to_unpacked_bb_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig10.delete_packed_to_unpacked_bb
    __del__ = lambda self : None;
packed_to_unpacked_bb_swigregister = _blocks_swig10.packed_to_unpacked_bb_swigregister
packed_to_unpacked_bb_swigregister(packed_to_unpacked_bb)

def packed_to_unpacked_bb_make(*args, **kwargs):
  """
    packed_to_unpacked_bb_make(unsigned int bits_per_chunk, gr::endianness_t endianness) -> packed_to_unpacked_bb_sptr

    Convert a stream of packed bytes or shorts to stream of unpacked bytes or shorts.

    input: stream of unsigned char; output: stream of unsigned char

    This is the inverse of gr::blocks::unpacked_to_packed_XX.

    The bits in the bytes or shorts input stream are grouped into chunks of  bits and each resulting chunk is written right- justified to the output stream of bytes or shorts. All b or 16 bits of the each input bytes or short are processed. The right thing is done if bits_per_chunk is not a power of two.

    The combination of gr::blocks::packed_to_unpacked_XX_ followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.

    Constructor Specific Documentation:



    Args:
        bits_per_chunk : 
        endianness : 
    """
  return _blocks_swig10.packed_to_unpacked_bb_make(*args, **kwargs)

class packed_to_unpacked_ss(object):
    """
    Convert a stream of packed bytes or shorts to stream of unpacked bytes or shorts.

    input: stream of short; output: stream of short

    This is the inverse of gr::blocks::unpacked_to_packed_XX.

    The bits in the bytes or shorts input stream are grouped into chunks of  bits and each resulting chunk is written right- justified to the output stream of bytes or shorts. All b or 16 bits of the each input bytes or short are processed. The right thing is done if bits_per_chunk is not a power of two.

    The combination of gr::blocks::packed_to_unpacked_XX_ followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.

    Constructor Specific Documentation:



    Args:
        bits_per_chunk : 
        endianness : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned int bits_per_chunk, gr::endianness_t endianness) -> packed_to_unpacked_ss_sptr

        Convert a stream of packed bytes or shorts to stream of unpacked bytes or shorts.

        input: stream of short; output: stream of short

        This is the inverse of gr::blocks::unpacked_to_packed_XX.

        The bits in the bytes or shorts input stream are grouped into chunks of  bits and each resulting chunk is written right- justified to the output stream of bytes or shorts. All b or 16 bits of the each input bytes or short are processed. The right thing is done if bits_per_chunk is not a power of two.

        The combination of gr::blocks::packed_to_unpacked_XX_ followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.

        Constructor Specific Documentation:



        Args:
            bits_per_chunk : 
            endianness : 
        """
        return _blocks_swig10.packed_to_unpacked_ss_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig10.delete_packed_to_unpacked_ss
    __del__ = lambda self : None;
packed_to_unpacked_ss_swigregister = _blocks_swig10.packed_to_unpacked_ss_swigregister
packed_to_unpacked_ss_swigregister(packed_to_unpacked_ss)

def packed_to_unpacked_ss_make(*args, **kwargs):
  """
    packed_to_unpacked_ss_make(unsigned int bits_per_chunk, gr::endianness_t endianness) -> packed_to_unpacked_ss_sptr

    Convert a stream of packed bytes or shorts to stream of unpacked bytes or shorts.

    input: stream of short; output: stream of short

    This is the inverse of gr::blocks::unpacked_to_packed_XX.

    The bits in the bytes or shorts input stream are grouped into chunks of  bits and each resulting chunk is written right- justified to the output stream of bytes or shorts. All b or 16 bits of the each input bytes or short are processed. The right thing is done if bits_per_chunk is not a power of two.

    The combination of gr::blocks::packed_to_unpacked_XX_ followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.

    Constructor Specific Documentation:



    Args:
        bits_per_chunk : 
        endianness : 
    """
  return _blocks_swig10.packed_to_unpacked_ss_make(*args, **kwargs)

class packed_to_unpacked_ii(object):
    """
    Convert a stream of packed bytes or shorts to stream of unpacked bytes or shorts.

    input: stream of int; output: stream of int

    This is the inverse of gr::blocks::unpacked_to_packed_XX.

    The bits in the bytes or shorts input stream are grouped into chunks of  bits and each resulting chunk is written right- justified to the output stream of bytes or shorts. All b or 16 bits of the each input bytes or short are processed. The right thing is done if bits_per_chunk is not a power of two.

    The combination of gr::blocks::packed_to_unpacked_XX_ followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.

    Constructor Specific Documentation:



    Args:
        bits_per_chunk : 
        endianness : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned int bits_per_chunk, gr::endianness_t endianness) -> packed_to_unpacked_ii_sptr

        Convert a stream of packed bytes or shorts to stream of unpacked bytes or shorts.

        input: stream of int; output: stream of int

        This is the inverse of gr::blocks::unpacked_to_packed_XX.

        The bits in the bytes or shorts input stream are grouped into chunks of  bits and each resulting chunk is written right- justified to the output stream of bytes or shorts. All b or 16 bits of the each input bytes or short are processed. The right thing is done if bits_per_chunk is not a power of two.

        The combination of gr::blocks::packed_to_unpacked_XX_ followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.

        Constructor Specific Documentation:



        Args:
            bits_per_chunk : 
            endianness : 
        """
        return _blocks_swig10.packed_to_unpacked_ii_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig10.delete_packed_to_unpacked_ii
    __del__ = lambda self : None;
packed_to_unpacked_ii_swigregister = _blocks_swig10.packed_to_unpacked_ii_swigregister
packed_to_unpacked_ii_swigregister(packed_to_unpacked_ii)

def packed_to_unpacked_ii_make(*args, **kwargs):
  """
    packed_to_unpacked_ii_make(unsigned int bits_per_chunk, gr::endianness_t endianness) -> packed_to_unpacked_ii_sptr

    Convert a stream of packed bytes or shorts to stream of unpacked bytes or shorts.

    input: stream of int; output: stream of int

    This is the inverse of gr::blocks::unpacked_to_packed_XX.

    The bits in the bytes or shorts input stream are grouped into chunks of  bits and each resulting chunk is written right- justified to the output stream of bytes or shorts. All b or 16 bits of the each input bytes or short are processed. The right thing is done if bits_per_chunk is not a power of two.

    The combination of gr::blocks::packed_to_unpacked_XX_ followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.

    Constructor Specific Documentation:



    Args:
        bits_per_chunk : 
        endianness : 
    """
  return _blocks_swig10.packed_to_unpacked_ii_make(*args, **kwargs)

class min_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::min_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::min_ff)> self) -> min_ff_sptr
        __init__(boost::shared_ptr<(gr::blocks::min_ff)> self, min_ff p) -> min_ff_sptr
        """
        this = _blocks_swig10.new_min_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(min_ff_sptr self) -> min_ff"""
        return _blocks_swig10.min_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig10.delete_min_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(min_ff_sptr self, size_t vlen, size_t vlen_out=1) -> min_ff_sptr

        Compares vectors from multiple streams and determines the minimum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the minimum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the minimum corresponding input vector items.

        Constructor Specific Documentation:



        Args:
            vlen : 
            vlen_out : 
        """
        return _blocks_swig10.min_ff_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(min_ff_sptr self) -> unsigned int"""
        return _blocks_swig10.min_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(min_ff_sptr self, int which, int delay)
        declare_sample_delay(min_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig10.min_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(min_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.min_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(min_ff_sptr self) -> int"""
        return _blocks_swig10.min_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(min_ff_sptr self) -> double"""
        return _blocks_swig10.min_ff_sptr_relative_rate(self)

    def start(self):
        """start(min_ff_sptr self) -> bool"""
        return _blocks_swig10.min_ff_sptr_start(self)

    def stop(self):
        """stop(min_ff_sptr self) -> bool"""
        return _blocks_swig10.min_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(min_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.min_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(min_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.min_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(min_ff_sptr self) -> int"""
        return _blocks_swig10.min_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(min_ff_sptr self, int m)"""
        return _blocks_swig10.min_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(min_ff_sptr self)"""
        return _blocks_swig10.min_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(min_ff_sptr self) -> bool"""
        return _blocks_swig10.min_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(min_ff_sptr self, int m)"""
        return _blocks_swig10.min_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(min_ff_sptr self) -> int"""
        return _blocks_swig10.min_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(min_ff_sptr self, int i) -> long"""
        return _blocks_swig10.min_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(min_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(min_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.min_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(min_ff_sptr self, int i) -> long"""
        return _blocks_swig10.min_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(min_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(min_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.min_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(min_ff_sptr self) -> float"""
        return _blocks_swig10.min_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(min_ff_sptr self) -> float"""
        return _blocks_swig10.min_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(min_ff_sptr self) -> float"""
        return _blocks_swig10.min_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(min_ff_sptr self) -> float"""
        return _blocks_swig10.min_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(min_ff_sptr self) -> float"""
        return _blocks_swig10.min_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(min_ff_sptr self) -> float"""
        return _blocks_swig10.min_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(min_ff_sptr self, int which) -> float
        pc_input_buffers_full(min_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(min_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(min_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(min_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(min_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(min_ff_sptr self, int which) -> float
        pc_output_buffers_full(min_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(min_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(min_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(min_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(min_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(min_ff_sptr self) -> float"""
        return _blocks_swig10.min_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(min_ff_sptr self) -> float"""
        return _blocks_swig10.min_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(min_ff_sptr self) -> float"""
        return _blocks_swig10.min_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(min_ff_sptr self) -> float"""
        return _blocks_swig10.min_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(min_ff_sptr self) -> float"""
        return _blocks_swig10.min_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(min_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.min_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(min_ff_sptr self)"""
        return _blocks_swig10.min_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(min_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.min_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(min_ff_sptr self) -> int"""
        return _blocks_swig10.min_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(min_ff_sptr self) -> int"""
        return _blocks_swig10.min_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(min_ff_sptr self, int priority) -> int"""
        return _blocks_swig10.min_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(min_ff_sptr self) -> std::string"""
        return _blocks_swig10.min_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(min_ff_sptr self) -> std::string"""
        return _blocks_swig10.min_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(min_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.min_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(min_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.min_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(min_ff_sptr self) -> long"""
        return _blocks_swig10.min_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(min_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.min_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(min_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.min_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(min_ff_sptr self) -> std::string"""
        return _blocks_swig10.min_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(min_ff_sptr self, std::string name)"""
        return _blocks_swig10.min_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(min_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig10.min_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(min_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.min_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(min_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.min_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(min_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig10.min_ff_sptr_message_subscribers(self, *args, **kwargs)

min_ff_sptr_swigregister = _blocks_swig10.min_ff_sptr_swigregister
min_ff_sptr_swigregister(min_ff_sptr)

min_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
min_ff = min_ff.make;

class min_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::min_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::min_ii)> self) -> min_ii_sptr
        __init__(boost::shared_ptr<(gr::blocks::min_ii)> self, min_ii p) -> min_ii_sptr
        """
        this = _blocks_swig10.new_min_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(min_ii_sptr self) -> min_ii"""
        return _blocks_swig10.min_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig10.delete_min_ii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(min_ii_sptr self, size_t vlen, size_t vlen_out=1) -> min_ii_sptr

        Compares vectors from multiple streams and determines the minimum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the minimum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the minimum corresponding input vector items.

        Constructor Specific Documentation:



        Args:
            vlen : 
            vlen_out : 
        """
        return _blocks_swig10.min_ii_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(min_ii_sptr self) -> unsigned int"""
        return _blocks_swig10.min_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(min_ii_sptr self, int which, int delay)
        declare_sample_delay(min_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig10.min_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(min_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.min_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(min_ii_sptr self) -> int"""
        return _blocks_swig10.min_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(min_ii_sptr self) -> double"""
        return _blocks_swig10.min_ii_sptr_relative_rate(self)

    def start(self):
        """start(min_ii_sptr self) -> bool"""
        return _blocks_swig10.min_ii_sptr_start(self)

    def stop(self):
        """stop(min_ii_sptr self) -> bool"""
        return _blocks_swig10.min_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(min_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.min_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(min_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.min_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(min_ii_sptr self) -> int"""
        return _blocks_swig10.min_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(min_ii_sptr self, int m)"""
        return _blocks_swig10.min_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(min_ii_sptr self)"""
        return _blocks_swig10.min_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(min_ii_sptr self) -> bool"""
        return _blocks_swig10.min_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(min_ii_sptr self, int m)"""
        return _blocks_swig10.min_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(min_ii_sptr self) -> int"""
        return _blocks_swig10.min_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(min_ii_sptr self, int i) -> long"""
        return _blocks_swig10.min_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(min_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(min_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.min_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(min_ii_sptr self, int i) -> long"""
        return _blocks_swig10.min_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(min_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(min_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.min_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(min_ii_sptr self) -> float"""
        return _blocks_swig10.min_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(min_ii_sptr self) -> float"""
        return _blocks_swig10.min_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(min_ii_sptr self) -> float"""
        return _blocks_swig10.min_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(min_ii_sptr self) -> float"""
        return _blocks_swig10.min_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(min_ii_sptr self) -> float"""
        return _blocks_swig10.min_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(min_ii_sptr self) -> float"""
        return _blocks_swig10.min_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(min_ii_sptr self, int which) -> float
        pc_input_buffers_full(min_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(min_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(min_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(min_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(min_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(min_ii_sptr self, int which) -> float
        pc_output_buffers_full(min_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(min_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(min_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(min_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(min_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(min_ii_sptr self) -> float"""
        return _blocks_swig10.min_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(min_ii_sptr self) -> float"""
        return _blocks_swig10.min_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(min_ii_sptr self) -> float"""
        return _blocks_swig10.min_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(min_ii_sptr self) -> float"""
        return _blocks_swig10.min_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(min_ii_sptr self) -> float"""
        return _blocks_swig10.min_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(min_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.min_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(min_ii_sptr self)"""
        return _blocks_swig10.min_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(min_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.min_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(min_ii_sptr self) -> int"""
        return _blocks_swig10.min_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(min_ii_sptr self) -> int"""
        return _blocks_swig10.min_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(min_ii_sptr self, int priority) -> int"""
        return _blocks_swig10.min_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(min_ii_sptr self) -> std::string"""
        return _blocks_swig10.min_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(min_ii_sptr self) -> std::string"""
        return _blocks_swig10.min_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(min_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.min_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(min_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.min_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(min_ii_sptr self) -> long"""
        return _blocks_swig10.min_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(min_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.min_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(min_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.min_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(min_ii_sptr self) -> std::string"""
        return _blocks_swig10.min_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(min_ii_sptr self, std::string name)"""
        return _blocks_swig10.min_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(min_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig10.min_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(min_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.min_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(min_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.min_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(min_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig10.min_ii_sptr_message_subscribers(self, *args, **kwargs)

min_ii_sptr_swigregister = _blocks_swig10.min_ii_sptr_swigregister
min_ii_sptr_swigregister(min_ii_sptr)

min_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
min_ii = min_ii.make;

class min_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::min_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::min_ss)> self) -> min_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::min_ss)> self, min_ss p) -> min_ss_sptr
        """
        this = _blocks_swig10.new_min_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(min_ss_sptr self) -> min_ss"""
        return _blocks_swig10.min_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig10.delete_min_ss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(min_ss_sptr self, size_t vlen, size_t vlen_out=1) -> min_ss_sptr

        Compares vectors from multiple streams and determines the minimum value from each vector over all streams.

        Data is passed in as a vector of length  from multiple input sources. If vlen_out == 1 then It will look through these streams of  data items and the output stream will contain the minimum value in the vector. If vlen_out == vlen and not equal to 1 then output will be a vector with individual items selected from the minimum corresponding input vector items.

        Constructor Specific Documentation:



        Args:
            vlen : 
            vlen_out : 
        """
        return _blocks_swig10.min_ss_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(min_ss_sptr self) -> unsigned int"""
        return _blocks_swig10.min_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(min_ss_sptr self, int which, int delay)
        declare_sample_delay(min_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig10.min_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(min_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.min_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(min_ss_sptr self) -> int"""
        return _blocks_swig10.min_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(min_ss_sptr self) -> double"""
        return _blocks_swig10.min_ss_sptr_relative_rate(self)

    def start(self):
        """start(min_ss_sptr self) -> bool"""
        return _blocks_swig10.min_ss_sptr_start(self)

    def stop(self):
        """stop(min_ss_sptr self) -> bool"""
        return _blocks_swig10.min_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(min_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.min_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(min_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.min_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(min_ss_sptr self) -> int"""
        return _blocks_swig10.min_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(min_ss_sptr self, int m)"""
        return _blocks_swig10.min_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(min_ss_sptr self)"""
        return _blocks_swig10.min_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(min_ss_sptr self) -> bool"""
        return _blocks_swig10.min_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(min_ss_sptr self, int m)"""
        return _blocks_swig10.min_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(min_ss_sptr self) -> int"""
        return _blocks_swig10.min_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(min_ss_sptr self, int i) -> long"""
        return _blocks_swig10.min_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(min_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(min_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.min_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(min_ss_sptr self, int i) -> long"""
        return _blocks_swig10.min_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(min_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(min_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.min_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(min_ss_sptr self) -> float"""
        return _blocks_swig10.min_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(min_ss_sptr self) -> float"""
        return _blocks_swig10.min_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(min_ss_sptr self) -> float"""
        return _blocks_swig10.min_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(min_ss_sptr self) -> float"""
        return _blocks_swig10.min_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(min_ss_sptr self) -> float"""
        return _blocks_swig10.min_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(min_ss_sptr self) -> float"""
        return _blocks_swig10.min_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(min_ss_sptr self, int which) -> float
        pc_input_buffers_full(min_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(min_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(min_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(min_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(min_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(min_ss_sptr self, int which) -> float
        pc_output_buffers_full(min_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(min_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(min_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(min_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(min_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.min_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(min_ss_sptr self) -> float"""
        return _blocks_swig10.min_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(min_ss_sptr self) -> float"""
        return _blocks_swig10.min_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(min_ss_sptr self) -> float"""
        return _blocks_swig10.min_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(min_ss_sptr self) -> float"""
        return _blocks_swig10.min_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(min_ss_sptr self) -> float"""
        return _blocks_swig10.min_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(min_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.min_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(min_ss_sptr self)"""
        return _blocks_swig10.min_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(min_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.min_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(min_ss_sptr self) -> int"""
        return _blocks_swig10.min_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(min_ss_sptr self) -> int"""
        return _blocks_swig10.min_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(min_ss_sptr self, int priority) -> int"""
        return _blocks_swig10.min_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(min_ss_sptr self) -> std::string"""
        return _blocks_swig10.min_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(min_ss_sptr self) -> std::string"""
        return _blocks_swig10.min_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(min_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.min_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(min_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.min_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(min_ss_sptr self) -> long"""
        return _blocks_swig10.min_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(min_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.min_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(min_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.min_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(min_ss_sptr self) -> std::string"""
        return _blocks_swig10.min_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(min_ss_sptr self, std::string name)"""
        return _blocks_swig10.min_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(min_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig10.min_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(min_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.min_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(min_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.min_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(min_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig10.min_ss_sptr_message_subscribers(self, *args, **kwargs)

min_ss_sptr_swigregister = _blocks_swig10.min_ss_sptr_swigregister
min_ss_sptr_swigregister(min_ss_sptr)

min_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
min_ss = min_ss.make;

class moving_average_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::moving_average_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::moving_average_cc)> self) -> moving_average_cc_sptr
        __init__(boost::shared_ptr<(gr::blocks::moving_average_cc)> self, moving_average_cc p) -> moving_average_cc_sptr
        """
        this = _blocks_swig10.new_moving_average_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(moving_average_cc_sptr self) -> moving_average_cc"""
        return _blocks_swig10.moving_average_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig10.delete_moving_average_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(moving_average_cc_sptr self, int length, gr_complex scale, int max_iter=4096, unsigned int vlen=1) -> moving_average_cc_sptr

        output is the moving sum of the last N samples, scaled by the scale factor

        Constructor Specific Documentation:

        Create a moving average block.

        Args:
            length : Number of samples to use in the average.
            scale : scale factor for the result.
            max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
            vlen : When > 1, do a per-vector-element moving average
        """
        return _blocks_swig10.moving_average_cc_sptr_make(self, *args, **kwargs)

    def length(self):
        """
        length(moving_average_cc_sptr self) -> int

        Get the length used in the avaraging calculation.
        """
        return _blocks_swig10.moving_average_cc_sptr_length(self)

    def scale(self):
        """
        scale(moving_average_cc_sptr self) -> gr_complex

        Get the scale factor being used.
        """
        return _blocks_swig10.moving_average_cc_sptr_scale(self)

    def set_length_and_scale(self, *args, **kwargs):
        """
        set_length_and_scale(moving_average_cc_sptr self, int length, gr_complex scale)

        Set both the length and the scale factor together.
        """
        return _blocks_swig10.moving_average_cc_sptr_set_length_and_scale(self, *args, **kwargs)

    def set_length(self, *args, **kwargs):
        """
        set_length(moving_average_cc_sptr self, int length)

        Set the length.
        """
        return _blocks_swig10.moving_average_cc_sptr_set_length(self, *args, **kwargs)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(moving_average_cc_sptr self, gr_complex scale)

        Set the scale factor.
        """
        return _blocks_swig10.moving_average_cc_sptr_set_scale(self, *args, **kwargs)

    def history(self):
        """history(moving_average_cc_sptr self) -> unsigned int"""
        return _blocks_swig10.moving_average_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(moving_average_cc_sptr self, int which, int delay)
        declare_sample_delay(moving_average_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig10.moving_average_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(moving_average_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.moving_average_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(moving_average_cc_sptr self) -> int"""
        return _blocks_swig10.moving_average_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(moving_average_cc_sptr self) -> double"""
        return _blocks_swig10.moving_average_cc_sptr_relative_rate(self)

    def start(self):
        """start(moving_average_cc_sptr self) -> bool"""
        return _blocks_swig10.moving_average_cc_sptr_start(self)

    def stop(self):
        """stop(moving_average_cc_sptr self) -> bool"""
        return _blocks_swig10.moving_average_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(moving_average_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.moving_average_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(moving_average_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.moving_average_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(moving_average_cc_sptr self) -> int"""
        return _blocks_swig10.moving_average_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(moving_average_cc_sptr self, int m)"""
        return _blocks_swig10.moving_average_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(moving_average_cc_sptr self)"""
        return _blocks_swig10.moving_average_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(moving_average_cc_sptr self) -> bool"""
        return _blocks_swig10.moving_average_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(moving_average_cc_sptr self, int m)"""
        return _blocks_swig10.moving_average_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(moving_average_cc_sptr self) -> int"""
        return _blocks_swig10.moving_average_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(moving_average_cc_sptr self, int i) -> long"""
        return _blocks_swig10.moving_average_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(moving_average_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(moving_average_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.moving_average_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(moving_average_cc_sptr self, int i) -> long"""
        return _blocks_swig10.moving_average_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(moving_average_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(moving_average_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.moving_average_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(moving_average_cc_sptr self) -> float"""
        return _blocks_swig10.moving_average_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(moving_average_cc_sptr self) -> float"""
        return _blocks_swig10.moving_average_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(moving_average_cc_sptr self) -> float"""
        return _blocks_swig10.moving_average_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(moving_average_cc_sptr self) -> float"""
        return _blocks_swig10.moving_average_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(moving_average_cc_sptr self) -> float"""
        return _blocks_swig10.moving_average_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(moving_average_cc_sptr self) -> float"""
        return _blocks_swig10.moving_average_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(moving_average_cc_sptr self, int which) -> float
        pc_input_buffers_full(moving_average_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(moving_average_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(moving_average_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(moving_average_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(moving_average_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(moving_average_cc_sptr self, int which) -> float
        pc_output_buffers_full(moving_average_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(moving_average_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(moving_average_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(moving_average_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(moving_average_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(moving_average_cc_sptr self) -> float"""
        return _blocks_swig10.moving_average_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(moving_average_cc_sptr self) -> float"""
        return _blocks_swig10.moving_average_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(moving_average_cc_sptr self) -> float"""
        return _blocks_swig10.moving_average_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(moving_average_cc_sptr self) -> float"""
        return _blocks_swig10.moving_average_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(moving_average_cc_sptr self) -> float"""
        return _blocks_swig10.moving_average_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(moving_average_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.moving_average_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(moving_average_cc_sptr self)"""
        return _blocks_swig10.moving_average_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(moving_average_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.moving_average_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(moving_average_cc_sptr self) -> int"""
        return _blocks_swig10.moving_average_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(moving_average_cc_sptr self) -> int"""
        return _blocks_swig10.moving_average_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(moving_average_cc_sptr self, int priority) -> int"""
        return _blocks_swig10.moving_average_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(moving_average_cc_sptr self) -> std::string"""
        return _blocks_swig10.moving_average_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(moving_average_cc_sptr self) -> std::string"""
        return _blocks_swig10.moving_average_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(moving_average_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.moving_average_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(moving_average_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.moving_average_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(moving_average_cc_sptr self) -> long"""
        return _blocks_swig10.moving_average_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(moving_average_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.moving_average_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(moving_average_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.moving_average_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(moving_average_cc_sptr self) -> std::string"""
        return _blocks_swig10.moving_average_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(moving_average_cc_sptr self, std::string name)"""
        return _blocks_swig10.moving_average_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(moving_average_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig10.moving_average_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(moving_average_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.moving_average_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(moving_average_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.moving_average_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(moving_average_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig10.moving_average_cc_sptr_message_subscribers(self, *args, **kwargs)

moving_average_cc_sptr_swigregister = _blocks_swig10.moving_average_cc_sptr_swigregister
moving_average_cc_sptr_swigregister(moving_average_cc_sptr)

moving_average_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
moving_average_cc = moving_average_cc.make;

class moving_average_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::moving_average_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::moving_average_ff)> self) -> moving_average_ff_sptr
        __init__(boost::shared_ptr<(gr::blocks::moving_average_ff)> self, moving_average_ff p) -> moving_average_ff_sptr
        """
        this = _blocks_swig10.new_moving_average_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(moving_average_ff_sptr self) -> moving_average_ff"""
        return _blocks_swig10.moving_average_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig10.delete_moving_average_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(moving_average_ff_sptr self, int length, float scale, int max_iter=4096, unsigned int vlen=1) -> moving_average_ff_sptr

        output is the moving sum of the last N samples, scaled by the scale factor

        Constructor Specific Documentation:

        Create a moving average block.

        Args:
            length : Number of samples to use in the average.
            scale : scale factor for the result.
            max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
            vlen : When > 1, do a per-vector-element moving average
        """
        return _blocks_swig10.moving_average_ff_sptr_make(self, *args, **kwargs)

    def length(self):
        """
        length(moving_average_ff_sptr self) -> int

        Get the length used in the avaraging calculation.
        """
        return _blocks_swig10.moving_average_ff_sptr_length(self)

    def scale(self):
        """
        scale(moving_average_ff_sptr self) -> float

        Get the scale factor being used.
        """
        return _blocks_swig10.moving_average_ff_sptr_scale(self)

    def set_length_and_scale(self, *args, **kwargs):
        """
        set_length_and_scale(moving_average_ff_sptr self, int length, float scale)

        Set both the length and the scale factor together.
        """
        return _blocks_swig10.moving_average_ff_sptr_set_length_and_scale(self, *args, **kwargs)

    def set_length(self, *args, **kwargs):
        """
        set_length(moving_average_ff_sptr self, int length)

        Set the length.
        """
        return _blocks_swig10.moving_average_ff_sptr_set_length(self, *args, **kwargs)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(moving_average_ff_sptr self, float scale)

        Set the scale factor.
        """
        return _blocks_swig10.moving_average_ff_sptr_set_scale(self, *args, **kwargs)

    def history(self):
        """history(moving_average_ff_sptr self) -> unsigned int"""
        return _blocks_swig10.moving_average_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(moving_average_ff_sptr self, int which, int delay)
        declare_sample_delay(moving_average_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig10.moving_average_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(moving_average_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.moving_average_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(moving_average_ff_sptr self) -> int"""
        return _blocks_swig10.moving_average_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(moving_average_ff_sptr self) -> double"""
        return _blocks_swig10.moving_average_ff_sptr_relative_rate(self)

    def start(self):
        """start(moving_average_ff_sptr self) -> bool"""
        return _blocks_swig10.moving_average_ff_sptr_start(self)

    def stop(self):
        """stop(moving_average_ff_sptr self) -> bool"""
        return _blocks_swig10.moving_average_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(moving_average_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.moving_average_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(moving_average_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.moving_average_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(moving_average_ff_sptr self) -> int"""
        return _blocks_swig10.moving_average_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(moving_average_ff_sptr self, int m)"""
        return _blocks_swig10.moving_average_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(moving_average_ff_sptr self)"""
        return _blocks_swig10.moving_average_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(moving_average_ff_sptr self) -> bool"""
        return _blocks_swig10.moving_average_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(moving_average_ff_sptr self, int m)"""
        return _blocks_swig10.moving_average_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(moving_average_ff_sptr self) -> int"""
        return _blocks_swig10.moving_average_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(moving_average_ff_sptr self, int i) -> long"""
        return _blocks_swig10.moving_average_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(moving_average_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(moving_average_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.moving_average_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(moving_average_ff_sptr self, int i) -> long"""
        return _blocks_swig10.moving_average_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(moving_average_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(moving_average_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.moving_average_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(moving_average_ff_sptr self) -> float"""
        return _blocks_swig10.moving_average_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(moving_average_ff_sptr self) -> float"""
        return _blocks_swig10.moving_average_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(moving_average_ff_sptr self) -> float"""
        return _blocks_swig10.moving_average_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(moving_average_ff_sptr self) -> float"""
        return _blocks_swig10.moving_average_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(moving_average_ff_sptr self) -> float"""
        return _blocks_swig10.moving_average_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(moving_average_ff_sptr self) -> float"""
        return _blocks_swig10.moving_average_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(moving_average_ff_sptr self, int which) -> float
        pc_input_buffers_full(moving_average_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(moving_average_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(moving_average_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(moving_average_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(moving_average_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(moving_average_ff_sptr self, int which) -> float
        pc_output_buffers_full(moving_average_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(moving_average_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(moving_average_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(moving_average_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(moving_average_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(moving_average_ff_sptr self) -> float"""
        return _blocks_swig10.moving_average_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(moving_average_ff_sptr self) -> float"""
        return _blocks_swig10.moving_average_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(moving_average_ff_sptr self) -> float"""
        return _blocks_swig10.moving_average_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(moving_average_ff_sptr self) -> float"""
        return _blocks_swig10.moving_average_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(moving_average_ff_sptr self) -> float"""
        return _blocks_swig10.moving_average_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(moving_average_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.moving_average_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(moving_average_ff_sptr self)"""
        return _blocks_swig10.moving_average_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(moving_average_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.moving_average_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(moving_average_ff_sptr self) -> int"""
        return _blocks_swig10.moving_average_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(moving_average_ff_sptr self) -> int"""
        return _blocks_swig10.moving_average_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(moving_average_ff_sptr self, int priority) -> int"""
        return _blocks_swig10.moving_average_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(moving_average_ff_sptr self) -> std::string"""
        return _blocks_swig10.moving_average_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(moving_average_ff_sptr self) -> std::string"""
        return _blocks_swig10.moving_average_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(moving_average_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.moving_average_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(moving_average_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.moving_average_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(moving_average_ff_sptr self) -> long"""
        return _blocks_swig10.moving_average_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(moving_average_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.moving_average_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(moving_average_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.moving_average_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(moving_average_ff_sptr self) -> std::string"""
        return _blocks_swig10.moving_average_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(moving_average_ff_sptr self, std::string name)"""
        return _blocks_swig10.moving_average_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(moving_average_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig10.moving_average_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(moving_average_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.moving_average_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(moving_average_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.moving_average_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(moving_average_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig10.moving_average_ff_sptr_message_subscribers(self, *args, **kwargs)

moving_average_ff_sptr_swigregister = _blocks_swig10.moving_average_ff_sptr_swigregister
moving_average_ff_sptr_swigregister(moving_average_ff_sptr)

moving_average_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
moving_average_ff = moving_average_ff.make;

class moving_average_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::moving_average_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::moving_average_ii)> self) -> moving_average_ii_sptr
        __init__(boost::shared_ptr<(gr::blocks::moving_average_ii)> self, moving_average_ii p) -> moving_average_ii_sptr
        """
        this = _blocks_swig10.new_moving_average_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(moving_average_ii_sptr self) -> moving_average_ii"""
        return _blocks_swig10.moving_average_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig10.delete_moving_average_ii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(moving_average_ii_sptr self, int length, int scale, int max_iter=4096, unsigned int vlen=1) -> moving_average_ii_sptr

        output is the moving sum of the last N samples, scaled by the scale factor

        Constructor Specific Documentation:

        Create a moving average block.

        Args:
            length : Number of samples to use in the average.
            scale : scale factor for the result.
            max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
            vlen : When > 1, do a per-vector-element moving average
        """
        return _blocks_swig10.moving_average_ii_sptr_make(self, *args, **kwargs)

    def length(self):
        """
        length(moving_average_ii_sptr self) -> int

        Get the length used in the avaraging calculation.
        """
        return _blocks_swig10.moving_average_ii_sptr_length(self)

    def scale(self):
        """
        scale(moving_average_ii_sptr self) -> int

        Get the scale factor being used.
        """
        return _blocks_swig10.moving_average_ii_sptr_scale(self)

    def set_length_and_scale(self, *args, **kwargs):
        """
        set_length_and_scale(moving_average_ii_sptr self, int length, int scale)

        Set both the length and the scale factor together.
        """
        return _blocks_swig10.moving_average_ii_sptr_set_length_and_scale(self, *args, **kwargs)

    def set_length(self, *args, **kwargs):
        """
        set_length(moving_average_ii_sptr self, int length)

        Set the length.
        """
        return _blocks_swig10.moving_average_ii_sptr_set_length(self, *args, **kwargs)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(moving_average_ii_sptr self, int scale)

        Set the scale factor.
        """
        return _blocks_swig10.moving_average_ii_sptr_set_scale(self, *args, **kwargs)

    def history(self):
        """history(moving_average_ii_sptr self) -> unsigned int"""
        return _blocks_swig10.moving_average_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(moving_average_ii_sptr self, int which, int delay)
        declare_sample_delay(moving_average_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig10.moving_average_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(moving_average_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.moving_average_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(moving_average_ii_sptr self) -> int"""
        return _blocks_swig10.moving_average_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(moving_average_ii_sptr self) -> double"""
        return _blocks_swig10.moving_average_ii_sptr_relative_rate(self)

    def start(self):
        """start(moving_average_ii_sptr self) -> bool"""
        return _blocks_swig10.moving_average_ii_sptr_start(self)

    def stop(self):
        """stop(moving_average_ii_sptr self) -> bool"""
        return _blocks_swig10.moving_average_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(moving_average_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.moving_average_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(moving_average_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.moving_average_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(moving_average_ii_sptr self) -> int"""
        return _blocks_swig10.moving_average_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(moving_average_ii_sptr self, int m)"""
        return _blocks_swig10.moving_average_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(moving_average_ii_sptr self)"""
        return _blocks_swig10.moving_average_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(moving_average_ii_sptr self) -> bool"""
        return _blocks_swig10.moving_average_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(moving_average_ii_sptr self, int m)"""
        return _blocks_swig10.moving_average_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(moving_average_ii_sptr self) -> int"""
        return _blocks_swig10.moving_average_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(moving_average_ii_sptr self, int i) -> long"""
        return _blocks_swig10.moving_average_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(moving_average_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(moving_average_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.moving_average_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(moving_average_ii_sptr self, int i) -> long"""
        return _blocks_swig10.moving_average_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(moving_average_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(moving_average_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.moving_average_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(moving_average_ii_sptr self) -> float"""
        return _blocks_swig10.moving_average_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(moving_average_ii_sptr self) -> float"""
        return _blocks_swig10.moving_average_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(moving_average_ii_sptr self) -> float"""
        return _blocks_swig10.moving_average_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(moving_average_ii_sptr self) -> float"""
        return _blocks_swig10.moving_average_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(moving_average_ii_sptr self) -> float"""
        return _blocks_swig10.moving_average_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(moving_average_ii_sptr self) -> float"""
        return _blocks_swig10.moving_average_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(moving_average_ii_sptr self, int which) -> float
        pc_input_buffers_full(moving_average_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(moving_average_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(moving_average_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(moving_average_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(moving_average_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(moving_average_ii_sptr self, int which) -> float
        pc_output_buffers_full(moving_average_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(moving_average_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(moving_average_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(moving_average_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(moving_average_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(moving_average_ii_sptr self) -> float"""
        return _blocks_swig10.moving_average_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(moving_average_ii_sptr self) -> float"""
        return _blocks_swig10.moving_average_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(moving_average_ii_sptr self) -> float"""
        return _blocks_swig10.moving_average_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(moving_average_ii_sptr self) -> float"""
        return _blocks_swig10.moving_average_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(moving_average_ii_sptr self) -> float"""
        return _blocks_swig10.moving_average_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(moving_average_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.moving_average_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(moving_average_ii_sptr self)"""
        return _blocks_swig10.moving_average_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(moving_average_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.moving_average_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(moving_average_ii_sptr self) -> int"""
        return _blocks_swig10.moving_average_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(moving_average_ii_sptr self) -> int"""
        return _blocks_swig10.moving_average_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(moving_average_ii_sptr self, int priority) -> int"""
        return _blocks_swig10.moving_average_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(moving_average_ii_sptr self) -> std::string"""
        return _blocks_swig10.moving_average_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(moving_average_ii_sptr self) -> std::string"""
        return _blocks_swig10.moving_average_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(moving_average_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.moving_average_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(moving_average_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.moving_average_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(moving_average_ii_sptr self) -> long"""
        return _blocks_swig10.moving_average_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(moving_average_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.moving_average_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(moving_average_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.moving_average_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(moving_average_ii_sptr self) -> std::string"""
        return _blocks_swig10.moving_average_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(moving_average_ii_sptr self, std::string name)"""
        return _blocks_swig10.moving_average_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(moving_average_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig10.moving_average_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(moving_average_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.moving_average_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(moving_average_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.moving_average_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(moving_average_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig10.moving_average_ii_sptr_message_subscribers(self, *args, **kwargs)

moving_average_ii_sptr_swigregister = _blocks_swig10.moving_average_ii_sptr_swigregister
moving_average_ii_sptr_swigregister(moving_average_ii_sptr)

moving_average_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
moving_average_ii = moving_average_ii.make;

class moving_average_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::moving_average_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::moving_average_ss)> self) -> moving_average_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::moving_average_ss)> self, moving_average_ss p) -> moving_average_ss_sptr
        """
        this = _blocks_swig10.new_moving_average_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(moving_average_ss_sptr self) -> moving_average_ss"""
        return _blocks_swig10.moving_average_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig10.delete_moving_average_ss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(moving_average_ss_sptr self, int length, short scale, int max_iter=4096, unsigned int vlen=1) -> moving_average_ss_sptr

        output is the moving sum of the last N samples, scaled by the scale factor

        Constructor Specific Documentation:

        Create a moving average block.

        Args:
            length : Number of samples to use in the average.
            scale : scale factor for the result.
            max_iter : limits how long we go without flushing the accumulator This is necessary to avoid numerical instability for float and complex.
            vlen : When > 1, do a per-vector-element moving average
        """
        return _blocks_swig10.moving_average_ss_sptr_make(self, *args, **kwargs)

    def length(self):
        """
        length(moving_average_ss_sptr self) -> int

        Get the length used in the avaraging calculation.
        """
        return _blocks_swig10.moving_average_ss_sptr_length(self)

    def scale(self):
        """
        scale(moving_average_ss_sptr self) -> short

        Get the scale factor being used.
        """
        return _blocks_swig10.moving_average_ss_sptr_scale(self)

    def set_length_and_scale(self, *args, **kwargs):
        """
        set_length_and_scale(moving_average_ss_sptr self, int length, short scale)

        Set both the length and the scale factor together.
        """
        return _blocks_swig10.moving_average_ss_sptr_set_length_and_scale(self, *args, **kwargs)

    def set_length(self, *args, **kwargs):
        """
        set_length(moving_average_ss_sptr self, int length)

        Set the length.
        """
        return _blocks_swig10.moving_average_ss_sptr_set_length(self, *args, **kwargs)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(moving_average_ss_sptr self, short scale)

        Set the scale factor.
        """
        return _blocks_swig10.moving_average_ss_sptr_set_scale(self, *args, **kwargs)

    def history(self):
        """history(moving_average_ss_sptr self) -> unsigned int"""
        return _blocks_swig10.moving_average_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(moving_average_ss_sptr self, int which, int delay)
        declare_sample_delay(moving_average_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig10.moving_average_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(moving_average_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.moving_average_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(moving_average_ss_sptr self) -> int"""
        return _blocks_swig10.moving_average_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(moving_average_ss_sptr self) -> double"""
        return _blocks_swig10.moving_average_ss_sptr_relative_rate(self)

    def start(self):
        """start(moving_average_ss_sptr self) -> bool"""
        return _blocks_swig10.moving_average_ss_sptr_start(self)

    def stop(self):
        """stop(moving_average_ss_sptr self) -> bool"""
        return _blocks_swig10.moving_average_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(moving_average_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.moving_average_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(moving_average_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.moving_average_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(moving_average_ss_sptr self) -> int"""
        return _blocks_swig10.moving_average_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(moving_average_ss_sptr self, int m)"""
        return _blocks_swig10.moving_average_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(moving_average_ss_sptr self)"""
        return _blocks_swig10.moving_average_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(moving_average_ss_sptr self) -> bool"""
        return _blocks_swig10.moving_average_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(moving_average_ss_sptr self, int m)"""
        return _blocks_swig10.moving_average_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(moving_average_ss_sptr self) -> int"""
        return _blocks_swig10.moving_average_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(moving_average_ss_sptr self, int i) -> long"""
        return _blocks_swig10.moving_average_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(moving_average_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(moving_average_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.moving_average_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(moving_average_ss_sptr self, int i) -> long"""
        return _blocks_swig10.moving_average_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(moving_average_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(moving_average_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.moving_average_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(moving_average_ss_sptr self) -> float"""
        return _blocks_swig10.moving_average_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(moving_average_ss_sptr self) -> float"""
        return _blocks_swig10.moving_average_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(moving_average_ss_sptr self) -> float"""
        return _blocks_swig10.moving_average_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(moving_average_ss_sptr self) -> float"""
        return _blocks_swig10.moving_average_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(moving_average_ss_sptr self) -> float"""
        return _blocks_swig10.moving_average_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(moving_average_ss_sptr self) -> float"""
        return _blocks_swig10.moving_average_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(moving_average_ss_sptr self, int which) -> float
        pc_input_buffers_full(moving_average_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(moving_average_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(moving_average_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(moving_average_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(moving_average_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(moving_average_ss_sptr self, int which) -> float
        pc_output_buffers_full(moving_average_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(moving_average_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(moving_average_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(moving_average_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(moving_average_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.moving_average_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(moving_average_ss_sptr self) -> float"""
        return _blocks_swig10.moving_average_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(moving_average_ss_sptr self) -> float"""
        return _blocks_swig10.moving_average_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(moving_average_ss_sptr self) -> float"""
        return _blocks_swig10.moving_average_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(moving_average_ss_sptr self) -> float"""
        return _blocks_swig10.moving_average_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(moving_average_ss_sptr self) -> float"""
        return _blocks_swig10.moving_average_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(moving_average_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.moving_average_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(moving_average_ss_sptr self)"""
        return _blocks_swig10.moving_average_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(moving_average_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.moving_average_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(moving_average_ss_sptr self) -> int"""
        return _blocks_swig10.moving_average_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(moving_average_ss_sptr self) -> int"""
        return _blocks_swig10.moving_average_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(moving_average_ss_sptr self, int priority) -> int"""
        return _blocks_swig10.moving_average_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(moving_average_ss_sptr self) -> std::string"""
        return _blocks_swig10.moving_average_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(moving_average_ss_sptr self) -> std::string"""
        return _blocks_swig10.moving_average_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(moving_average_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.moving_average_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(moving_average_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.moving_average_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(moving_average_ss_sptr self) -> long"""
        return _blocks_swig10.moving_average_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(moving_average_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.moving_average_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(moving_average_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.moving_average_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(moving_average_ss_sptr self) -> std::string"""
        return _blocks_swig10.moving_average_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(moving_average_ss_sptr self, std::string name)"""
        return _blocks_swig10.moving_average_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(moving_average_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig10.moving_average_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(moving_average_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.moving_average_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(moving_average_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.moving_average_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(moving_average_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig10.moving_average_ss_sptr_message_subscribers(self, *args, **kwargs)

moving_average_ss_sptr_swigregister = _blocks_swig10.moving_average_ss_sptr_swigregister
moving_average_ss_sptr_swigregister(moving_average_ss_sptr)

moving_average_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
moving_average_ss = moving_average_ss.make;

class nlog10_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::nlog10_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::nlog10_ff)> self) -> nlog10_ff_sptr
        __init__(boost::shared_ptr<(gr::blocks::nlog10_ff)> self, nlog10_ff p) -> nlog10_ff_sptr
        """
        this = _blocks_swig10.new_nlog10_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(nlog10_ff_sptr self) -> nlog10_ff"""
        return _blocks_swig10.nlog10_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig10.delete_nlog10_ff_sptr
    __del__ = lambda self : None;
    def make(self, n=1.0, vlen=1, k=0.0):
        """
        make(nlog10_ff_sptr self, float n=1.0, size_t vlen=1, float k=0.0) -> nlog10_ff_sptr

        output = n*log10(input) + k

        Constructor Specific Documentation:

        Make an instance of an nlog10_ff block.

        Args:
            n : Scalar multiplicative constant
            vlen : Input vector length
            k : Scalar additive constant
        """
        return _blocks_swig10.nlog10_ff_sptr_make(self, n, vlen, k)

    def history(self):
        """history(nlog10_ff_sptr self) -> unsigned int"""
        return _blocks_swig10.nlog10_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(nlog10_ff_sptr self, int which, int delay)
        declare_sample_delay(nlog10_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig10.nlog10_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(nlog10_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.nlog10_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(nlog10_ff_sptr self) -> int"""
        return _blocks_swig10.nlog10_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(nlog10_ff_sptr self) -> double"""
        return _blocks_swig10.nlog10_ff_sptr_relative_rate(self)

    def start(self):
        """start(nlog10_ff_sptr self) -> bool"""
        return _blocks_swig10.nlog10_ff_sptr_start(self)

    def stop(self):
        """stop(nlog10_ff_sptr self) -> bool"""
        return _blocks_swig10.nlog10_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(nlog10_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.nlog10_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(nlog10_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.nlog10_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(nlog10_ff_sptr self) -> int"""
        return _blocks_swig10.nlog10_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(nlog10_ff_sptr self, int m)"""
        return _blocks_swig10.nlog10_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(nlog10_ff_sptr self)"""
        return _blocks_swig10.nlog10_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(nlog10_ff_sptr self) -> bool"""
        return _blocks_swig10.nlog10_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(nlog10_ff_sptr self, int m)"""
        return _blocks_swig10.nlog10_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(nlog10_ff_sptr self) -> int"""
        return _blocks_swig10.nlog10_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(nlog10_ff_sptr self, int i) -> long"""
        return _blocks_swig10.nlog10_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(nlog10_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(nlog10_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.nlog10_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(nlog10_ff_sptr self, int i) -> long"""
        return _blocks_swig10.nlog10_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(nlog10_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(nlog10_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.nlog10_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(nlog10_ff_sptr self) -> float"""
        return _blocks_swig10.nlog10_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(nlog10_ff_sptr self) -> float"""
        return _blocks_swig10.nlog10_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(nlog10_ff_sptr self) -> float"""
        return _blocks_swig10.nlog10_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(nlog10_ff_sptr self) -> float"""
        return _blocks_swig10.nlog10_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(nlog10_ff_sptr self) -> float"""
        return _blocks_swig10.nlog10_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(nlog10_ff_sptr self) -> float"""
        return _blocks_swig10.nlog10_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(nlog10_ff_sptr self, int which) -> float
        pc_input_buffers_full(nlog10_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.nlog10_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(nlog10_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(nlog10_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.nlog10_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(nlog10_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(nlog10_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.nlog10_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(nlog10_ff_sptr self, int which) -> float
        pc_output_buffers_full(nlog10_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.nlog10_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(nlog10_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(nlog10_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.nlog10_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(nlog10_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(nlog10_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.nlog10_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(nlog10_ff_sptr self) -> float"""
        return _blocks_swig10.nlog10_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(nlog10_ff_sptr self) -> float"""
        return _blocks_swig10.nlog10_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(nlog10_ff_sptr self) -> float"""
        return _blocks_swig10.nlog10_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(nlog10_ff_sptr self) -> float"""
        return _blocks_swig10.nlog10_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(nlog10_ff_sptr self) -> float"""
        return _blocks_swig10.nlog10_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(nlog10_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.nlog10_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(nlog10_ff_sptr self)"""
        return _blocks_swig10.nlog10_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(nlog10_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.nlog10_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(nlog10_ff_sptr self) -> int"""
        return _blocks_swig10.nlog10_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(nlog10_ff_sptr self) -> int"""
        return _blocks_swig10.nlog10_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(nlog10_ff_sptr self, int priority) -> int"""
        return _blocks_swig10.nlog10_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(nlog10_ff_sptr self) -> std::string"""
        return _blocks_swig10.nlog10_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(nlog10_ff_sptr self) -> std::string"""
        return _blocks_swig10.nlog10_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(nlog10_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.nlog10_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(nlog10_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.nlog10_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(nlog10_ff_sptr self) -> long"""
        return _blocks_swig10.nlog10_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(nlog10_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.nlog10_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(nlog10_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.nlog10_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(nlog10_ff_sptr self) -> std::string"""
        return _blocks_swig10.nlog10_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(nlog10_ff_sptr self, std::string name)"""
        return _blocks_swig10.nlog10_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(nlog10_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig10.nlog10_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(nlog10_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.nlog10_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(nlog10_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.nlog10_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(nlog10_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig10.nlog10_ff_sptr_message_subscribers(self, *args, **kwargs)

nlog10_ff_sptr_swigregister = _blocks_swig10.nlog10_ff_sptr_swigregister
nlog10_ff_sptr_swigregister(nlog10_ff_sptr)

nlog10_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
nlog10_ff = nlog10_ff.make;

class not_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::not_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::not_bb)> self) -> not_bb_sptr
        __init__(boost::shared_ptr<(gr::blocks::not_bb)> self, not_bb p) -> not_bb_sptr
        """
        this = _blocks_swig10.new_not_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(not_bb_sptr self) -> not_bb"""
        return _blocks_swig10.not_bb_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig10.delete_not_bb_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(not_bb_sptr self, size_t vlen=1) -> not_bb_sptr

        output = ~input

        bitwise boolean not of input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig10.not_bb_sptr_make(self, vlen)

    def history(self):
        """history(not_bb_sptr self) -> unsigned int"""
        return _blocks_swig10.not_bb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(not_bb_sptr self, int which, int delay)
        declare_sample_delay(not_bb_sptr self, unsigned int delay)
        """
        return _blocks_swig10.not_bb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(not_bb_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.not_bb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(not_bb_sptr self) -> int"""
        return _blocks_swig10.not_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(not_bb_sptr self) -> double"""
        return _blocks_swig10.not_bb_sptr_relative_rate(self)

    def start(self):
        """start(not_bb_sptr self) -> bool"""
        return _blocks_swig10.not_bb_sptr_start(self)

    def stop(self):
        """stop(not_bb_sptr self) -> bool"""
        return _blocks_swig10.not_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(not_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.not_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(not_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.not_bb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(not_bb_sptr self) -> int"""
        return _blocks_swig10.not_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(not_bb_sptr self, int m)"""
        return _blocks_swig10.not_bb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(not_bb_sptr self)"""
        return _blocks_swig10.not_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(not_bb_sptr self) -> bool"""
        return _blocks_swig10.not_bb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(not_bb_sptr self, int m)"""
        return _blocks_swig10.not_bb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(not_bb_sptr self) -> int"""
        return _blocks_swig10.not_bb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(not_bb_sptr self, int i) -> long"""
        return _blocks_swig10.not_bb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(not_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(not_bb_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.not_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(not_bb_sptr self, int i) -> long"""
        return _blocks_swig10.not_bb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(not_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(not_bb_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.not_bb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(not_bb_sptr self) -> float"""
        return _blocks_swig10.not_bb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(not_bb_sptr self) -> float"""
        return _blocks_swig10.not_bb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(not_bb_sptr self) -> float"""
        return _blocks_swig10.not_bb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(not_bb_sptr self) -> float"""
        return _blocks_swig10.not_bb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(not_bb_sptr self) -> float"""
        return _blocks_swig10.not_bb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(not_bb_sptr self) -> float"""
        return _blocks_swig10.not_bb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(not_bb_sptr self, int which) -> float
        pc_input_buffers_full(not_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_bb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(not_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(not_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_bb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(not_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(not_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_bb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(not_bb_sptr self, int which) -> float
        pc_output_buffers_full(not_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_bb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(not_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(not_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_bb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(not_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(not_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_bb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(not_bb_sptr self) -> float"""
        return _blocks_swig10.not_bb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(not_bb_sptr self) -> float"""
        return _blocks_swig10.not_bb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(not_bb_sptr self) -> float"""
        return _blocks_swig10.not_bb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(not_bb_sptr self) -> float"""
        return _blocks_swig10.not_bb_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(not_bb_sptr self) -> float"""
        return _blocks_swig10.not_bb_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(not_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.not_bb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(not_bb_sptr self)"""
        return _blocks_swig10.not_bb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(not_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.not_bb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(not_bb_sptr self) -> int"""
        return _blocks_swig10.not_bb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(not_bb_sptr self) -> int"""
        return _blocks_swig10.not_bb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(not_bb_sptr self, int priority) -> int"""
        return _blocks_swig10.not_bb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(not_bb_sptr self) -> std::string"""
        return _blocks_swig10.not_bb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(not_bb_sptr self) -> std::string"""
        return _blocks_swig10.not_bb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(not_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.not_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(not_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.not_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(not_bb_sptr self) -> long"""
        return _blocks_swig10.not_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(not_bb_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.not_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(not_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.not_bb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(not_bb_sptr self) -> std::string"""
        return _blocks_swig10.not_bb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(not_bb_sptr self, std::string name)"""
        return _blocks_swig10.not_bb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(not_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig10.not_bb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(not_bb_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.not_bb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(not_bb_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.not_bb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(not_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig10.not_bb_sptr_message_subscribers(self, *args, **kwargs)

not_bb_sptr_swigregister = _blocks_swig10.not_bb_sptr_swigregister
not_bb_sptr_swigregister(not_bb_sptr)

not_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
not_bb = not_bb.make;

class not_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::not_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::not_ss)> self) -> not_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::not_ss)> self, not_ss p) -> not_ss_sptr
        """
        this = _blocks_swig10.new_not_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(not_ss_sptr self) -> not_ss"""
        return _blocks_swig10.not_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig10.delete_not_ss_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(not_ss_sptr self, size_t vlen=1) -> not_ss_sptr

        output = ~input

        bitwise boolean not of input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig10.not_ss_sptr_make(self, vlen)

    def history(self):
        """history(not_ss_sptr self) -> unsigned int"""
        return _blocks_swig10.not_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(not_ss_sptr self, int which, int delay)
        declare_sample_delay(not_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig10.not_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(not_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.not_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(not_ss_sptr self) -> int"""
        return _blocks_swig10.not_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(not_ss_sptr self) -> double"""
        return _blocks_swig10.not_ss_sptr_relative_rate(self)

    def start(self):
        """start(not_ss_sptr self) -> bool"""
        return _blocks_swig10.not_ss_sptr_start(self)

    def stop(self):
        """stop(not_ss_sptr self) -> bool"""
        return _blocks_swig10.not_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(not_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.not_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(not_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.not_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(not_ss_sptr self) -> int"""
        return _blocks_swig10.not_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(not_ss_sptr self, int m)"""
        return _blocks_swig10.not_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(not_ss_sptr self)"""
        return _blocks_swig10.not_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(not_ss_sptr self) -> bool"""
        return _blocks_swig10.not_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(not_ss_sptr self, int m)"""
        return _blocks_swig10.not_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(not_ss_sptr self) -> int"""
        return _blocks_swig10.not_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(not_ss_sptr self, int i) -> long"""
        return _blocks_swig10.not_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(not_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(not_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.not_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(not_ss_sptr self, int i) -> long"""
        return _blocks_swig10.not_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(not_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(not_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.not_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(not_ss_sptr self) -> float"""
        return _blocks_swig10.not_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(not_ss_sptr self) -> float"""
        return _blocks_swig10.not_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(not_ss_sptr self) -> float"""
        return _blocks_swig10.not_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(not_ss_sptr self) -> float"""
        return _blocks_swig10.not_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(not_ss_sptr self) -> float"""
        return _blocks_swig10.not_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(not_ss_sptr self) -> float"""
        return _blocks_swig10.not_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(not_ss_sptr self, int which) -> float
        pc_input_buffers_full(not_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(not_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(not_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(not_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(not_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(not_ss_sptr self, int which) -> float
        pc_output_buffers_full(not_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(not_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(not_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(not_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(not_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(not_ss_sptr self) -> float"""
        return _blocks_swig10.not_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(not_ss_sptr self) -> float"""
        return _blocks_swig10.not_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(not_ss_sptr self) -> float"""
        return _blocks_swig10.not_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(not_ss_sptr self) -> float"""
        return _blocks_swig10.not_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(not_ss_sptr self) -> float"""
        return _blocks_swig10.not_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(not_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.not_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(not_ss_sptr self)"""
        return _blocks_swig10.not_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(not_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.not_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(not_ss_sptr self) -> int"""
        return _blocks_swig10.not_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(not_ss_sptr self) -> int"""
        return _blocks_swig10.not_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(not_ss_sptr self, int priority) -> int"""
        return _blocks_swig10.not_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(not_ss_sptr self) -> std::string"""
        return _blocks_swig10.not_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(not_ss_sptr self) -> std::string"""
        return _blocks_swig10.not_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(not_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.not_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(not_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.not_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(not_ss_sptr self) -> long"""
        return _blocks_swig10.not_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(not_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.not_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(not_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.not_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(not_ss_sptr self) -> std::string"""
        return _blocks_swig10.not_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(not_ss_sptr self, std::string name)"""
        return _blocks_swig10.not_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(not_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig10.not_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(not_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.not_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(not_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.not_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(not_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig10.not_ss_sptr_message_subscribers(self, *args, **kwargs)

not_ss_sptr_swigregister = _blocks_swig10.not_ss_sptr_swigregister
not_ss_sptr_swigregister(not_ss_sptr)

not_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
not_ss = not_ss.make;

class not_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::not_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::not_ii)> self) -> not_ii_sptr
        __init__(boost::shared_ptr<(gr::blocks::not_ii)> self, not_ii p) -> not_ii_sptr
        """
        this = _blocks_swig10.new_not_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(not_ii_sptr self) -> not_ii"""
        return _blocks_swig10.not_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig10.delete_not_ii_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(not_ii_sptr self, size_t vlen=1) -> not_ii_sptr

        output = ~input

        bitwise boolean not of input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig10.not_ii_sptr_make(self, vlen)

    def history(self):
        """history(not_ii_sptr self) -> unsigned int"""
        return _blocks_swig10.not_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(not_ii_sptr self, int which, int delay)
        declare_sample_delay(not_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig10.not_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(not_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.not_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(not_ii_sptr self) -> int"""
        return _blocks_swig10.not_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(not_ii_sptr self) -> double"""
        return _blocks_swig10.not_ii_sptr_relative_rate(self)

    def start(self):
        """start(not_ii_sptr self) -> bool"""
        return _blocks_swig10.not_ii_sptr_start(self)

    def stop(self):
        """stop(not_ii_sptr self) -> bool"""
        return _blocks_swig10.not_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(not_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.not_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(not_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.not_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(not_ii_sptr self) -> int"""
        return _blocks_swig10.not_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(not_ii_sptr self, int m)"""
        return _blocks_swig10.not_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(not_ii_sptr self)"""
        return _blocks_swig10.not_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(not_ii_sptr self) -> bool"""
        return _blocks_swig10.not_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(not_ii_sptr self, int m)"""
        return _blocks_swig10.not_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(not_ii_sptr self) -> int"""
        return _blocks_swig10.not_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(not_ii_sptr self, int i) -> long"""
        return _blocks_swig10.not_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(not_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(not_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.not_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(not_ii_sptr self, int i) -> long"""
        return _blocks_swig10.not_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(not_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(not_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.not_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(not_ii_sptr self) -> float"""
        return _blocks_swig10.not_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(not_ii_sptr self) -> float"""
        return _blocks_swig10.not_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(not_ii_sptr self) -> float"""
        return _blocks_swig10.not_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(not_ii_sptr self) -> float"""
        return _blocks_swig10.not_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(not_ii_sptr self) -> float"""
        return _blocks_swig10.not_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(not_ii_sptr self) -> float"""
        return _blocks_swig10.not_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(not_ii_sptr self, int which) -> float
        pc_input_buffers_full(not_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(not_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(not_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(not_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(not_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(not_ii_sptr self, int which) -> float
        pc_output_buffers_full(not_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(not_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(not_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(not_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(not_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.not_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(not_ii_sptr self) -> float"""
        return _blocks_swig10.not_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(not_ii_sptr self) -> float"""
        return _blocks_swig10.not_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(not_ii_sptr self) -> float"""
        return _blocks_swig10.not_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(not_ii_sptr self) -> float"""
        return _blocks_swig10.not_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(not_ii_sptr self) -> float"""
        return _blocks_swig10.not_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(not_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.not_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(not_ii_sptr self)"""
        return _blocks_swig10.not_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(not_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.not_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(not_ii_sptr self) -> int"""
        return _blocks_swig10.not_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(not_ii_sptr self) -> int"""
        return _blocks_swig10.not_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(not_ii_sptr self, int priority) -> int"""
        return _blocks_swig10.not_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(not_ii_sptr self) -> std::string"""
        return _blocks_swig10.not_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(not_ii_sptr self) -> std::string"""
        return _blocks_swig10.not_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(not_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.not_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(not_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.not_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(not_ii_sptr self) -> long"""
        return _blocks_swig10.not_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(not_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.not_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(not_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.not_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(not_ii_sptr self) -> std::string"""
        return _blocks_swig10.not_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(not_ii_sptr self, std::string name)"""
        return _blocks_swig10.not_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(not_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig10.not_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(not_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.not_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(not_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.not_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(not_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig10.not_ii_sptr_message_subscribers(self, *args, **kwargs)

not_ii_sptr_swigregister = _blocks_swig10.not_ii_sptr_swigregister
not_ii_sptr_swigregister(not_ii_sptr)

not_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
not_ii = not_ii.make;

class or_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::or_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::or_bb)> self) -> or_bb_sptr
        __init__(boost::shared_ptr<(gr::blocks::or_bb)> self, or_bb p) -> or_bb_sptr
        """
        this = _blocks_swig10.new_or_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(or_bb_sptr self) -> or_bb"""
        return _blocks_swig10.or_bb_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig10.delete_or_bb_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(or_bb_sptr self, size_t vlen=1) -> or_bb_sptr

        output = input_0 | input_1 | , ... | input_N)

        Bitwise boolean or across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig10.or_bb_sptr_make(self, vlen)

    def history(self):
        """history(or_bb_sptr self) -> unsigned int"""
        return _blocks_swig10.or_bb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(or_bb_sptr self, int which, int delay)
        declare_sample_delay(or_bb_sptr self, unsigned int delay)
        """
        return _blocks_swig10.or_bb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(or_bb_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.or_bb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(or_bb_sptr self) -> int"""
        return _blocks_swig10.or_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(or_bb_sptr self) -> double"""
        return _blocks_swig10.or_bb_sptr_relative_rate(self)

    def start(self):
        """start(or_bb_sptr self) -> bool"""
        return _blocks_swig10.or_bb_sptr_start(self)

    def stop(self):
        """stop(or_bb_sptr self) -> bool"""
        return _blocks_swig10.or_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(or_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.or_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(or_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.or_bb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(or_bb_sptr self) -> int"""
        return _blocks_swig10.or_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(or_bb_sptr self, int m)"""
        return _blocks_swig10.or_bb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(or_bb_sptr self)"""
        return _blocks_swig10.or_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(or_bb_sptr self) -> bool"""
        return _blocks_swig10.or_bb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(or_bb_sptr self, int m)"""
        return _blocks_swig10.or_bb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(or_bb_sptr self) -> int"""
        return _blocks_swig10.or_bb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(or_bb_sptr self, int i) -> long"""
        return _blocks_swig10.or_bb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(or_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(or_bb_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.or_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(or_bb_sptr self, int i) -> long"""
        return _blocks_swig10.or_bb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(or_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(or_bb_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.or_bb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(or_bb_sptr self) -> float"""
        return _blocks_swig10.or_bb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(or_bb_sptr self) -> float"""
        return _blocks_swig10.or_bb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(or_bb_sptr self) -> float"""
        return _blocks_swig10.or_bb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(or_bb_sptr self) -> float"""
        return _blocks_swig10.or_bb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(or_bb_sptr self) -> float"""
        return _blocks_swig10.or_bb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(or_bb_sptr self) -> float"""
        return _blocks_swig10.or_bb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(or_bb_sptr self, int which) -> float
        pc_input_buffers_full(or_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_bb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(or_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(or_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_bb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(or_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(or_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_bb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(or_bb_sptr self, int which) -> float
        pc_output_buffers_full(or_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_bb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(or_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(or_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_bb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(or_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(or_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_bb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(or_bb_sptr self) -> float"""
        return _blocks_swig10.or_bb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(or_bb_sptr self) -> float"""
        return _blocks_swig10.or_bb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(or_bb_sptr self) -> float"""
        return _blocks_swig10.or_bb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(or_bb_sptr self) -> float"""
        return _blocks_swig10.or_bb_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(or_bb_sptr self) -> float"""
        return _blocks_swig10.or_bb_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(or_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.or_bb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(or_bb_sptr self)"""
        return _blocks_swig10.or_bb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(or_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.or_bb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(or_bb_sptr self) -> int"""
        return _blocks_swig10.or_bb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(or_bb_sptr self) -> int"""
        return _blocks_swig10.or_bb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(or_bb_sptr self, int priority) -> int"""
        return _blocks_swig10.or_bb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(or_bb_sptr self) -> std::string"""
        return _blocks_swig10.or_bb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(or_bb_sptr self) -> std::string"""
        return _blocks_swig10.or_bb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(or_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.or_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(or_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.or_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(or_bb_sptr self) -> long"""
        return _blocks_swig10.or_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(or_bb_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.or_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(or_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.or_bb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(or_bb_sptr self) -> std::string"""
        return _blocks_swig10.or_bb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(or_bb_sptr self, std::string name)"""
        return _blocks_swig10.or_bb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(or_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig10.or_bb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(or_bb_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.or_bb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(or_bb_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.or_bb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(or_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig10.or_bb_sptr_message_subscribers(self, *args, **kwargs)

or_bb_sptr_swigregister = _blocks_swig10.or_bb_sptr_swigregister
or_bb_sptr_swigregister(or_bb_sptr)

or_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
or_bb = or_bb.make;

class or_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::or_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::or_ss)> self) -> or_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::or_ss)> self, or_ss p) -> or_ss_sptr
        """
        this = _blocks_swig10.new_or_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(or_ss_sptr self) -> or_ss"""
        return _blocks_swig10.or_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig10.delete_or_ss_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(or_ss_sptr self, size_t vlen=1) -> or_ss_sptr

        output = input_0 | input_1 | , ... | input_N)

        Bitwise boolean or across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig10.or_ss_sptr_make(self, vlen)

    def history(self):
        """history(or_ss_sptr self) -> unsigned int"""
        return _blocks_swig10.or_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(or_ss_sptr self, int which, int delay)
        declare_sample_delay(or_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig10.or_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(or_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.or_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(or_ss_sptr self) -> int"""
        return _blocks_swig10.or_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(or_ss_sptr self) -> double"""
        return _blocks_swig10.or_ss_sptr_relative_rate(self)

    def start(self):
        """start(or_ss_sptr self) -> bool"""
        return _blocks_swig10.or_ss_sptr_start(self)

    def stop(self):
        """stop(or_ss_sptr self) -> bool"""
        return _blocks_swig10.or_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(or_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.or_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(or_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.or_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(or_ss_sptr self) -> int"""
        return _blocks_swig10.or_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(or_ss_sptr self, int m)"""
        return _blocks_swig10.or_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(or_ss_sptr self)"""
        return _blocks_swig10.or_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(or_ss_sptr self) -> bool"""
        return _blocks_swig10.or_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(or_ss_sptr self, int m)"""
        return _blocks_swig10.or_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(or_ss_sptr self) -> int"""
        return _blocks_swig10.or_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(or_ss_sptr self, int i) -> long"""
        return _blocks_swig10.or_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(or_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(or_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.or_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(or_ss_sptr self, int i) -> long"""
        return _blocks_swig10.or_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(or_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(or_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.or_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(or_ss_sptr self) -> float"""
        return _blocks_swig10.or_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(or_ss_sptr self) -> float"""
        return _blocks_swig10.or_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(or_ss_sptr self) -> float"""
        return _blocks_swig10.or_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(or_ss_sptr self) -> float"""
        return _blocks_swig10.or_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(or_ss_sptr self) -> float"""
        return _blocks_swig10.or_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(or_ss_sptr self) -> float"""
        return _blocks_swig10.or_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(or_ss_sptr self, int which) -> float
        pc_input_buffers_full(or_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(or_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(or_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(or_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(or_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(or_ss_sptr self, int which) -> float
        pc_output_buffers_full(or_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(or_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(or_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(or_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(or_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(or_ss_sptr self) -> float"""
        return _blocks_swig10.or_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(or_ss_sptr self) -> float"""
        return _blocks_swig10.or_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(or_ss_sptr self) -> float"""
        return _blocks_swig10.or_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(or_ss_sptr self) -> float"""
        return _blocks_swig10.or_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(or_ss_sptr self) -> float"""
        return _blocks_swig10.or_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(or_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.or_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(or_ss_sptr self)"""
        return _blocks_swig10.or_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(or_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.or_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(or_ss_sptr self) -> int"""
        return _blocks_swig10.or_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(or_ss_sptr self) -> int"""
        return _blocks_swig10.or_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(or_ss_sptr self, int priority) -> int"""
        return _blocks_swig10.or_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(or_ss_sptr self) -> std::string"""
        return _blocks_swig10.or_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(or_ss_sptr self) -> std::string"""
        return _blocks_swig10.or_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(or_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.or_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(or_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.or_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(or_ss_sptr self) -> long"""
        return _blocks_swig10.or_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(or_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.or_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(or_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.or_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(or_ss_sptr self) -> std::string"""
        return _blocks_swig10.or_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(or_ss_sptr self, std::string name)"""
        return _blocks_swig10.or_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(or_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig10.or_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(or_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.or_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(or_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.or_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(or_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig10.or_ss_sptr_message_subscribers(self, *args, **kwargs)

or_ss_sptr_swigregister = _blocks_swig10.or_ss_sptr_swigregister
or_ss_sptr_swigregister(or_ss_sptr)

or_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
or_ss = or_ss.make;

class or_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::or_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::or_ii)> self) -> or_ii_sptr
        __init__(boost::shared_ptr<(gr::blocks::or_ii)> self, or_ii p) -> or_ii_sptr
        """
        this = _blocks_swig10.new_or_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(or_ii_sptr self) -> or_ii"""
        return _blocks_swig10.or_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig10.delete_or_ii_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(or_ii_sptr self, size_t vlen=1) -> or_ii_sptr

        output = input_0 | input_1 | , ... | input_N)

        Bitwise boolean or across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig10.or_ii_sptr_make(self, vlen)

    def history(self):
        """history(or_ii_sptr self) -> unsigned int"""
        return _blocks_swig10.or_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(or_ii_sptr self, int which, int delay)
        declare_sample_delay(or_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig10.or_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(or_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.or_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(or_ii_sptr self) -> int"""
        return _blocks_swig10.or_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(or_ii_sptr self) -> double"""
        return _blocks_swig10.or_ii_sptr_relative_rate(self)

    def start(self):
        """start(or_ii_sptr self) -> bool"""
        return _blocks_swig10.or_ii_sptr_start(self)

    def stop(self):
        """stop(or_ii_sptr self) -> bool"""
        return _blocks_swig10.or_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(or_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.or_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(or_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.or_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(or_ii_sptr self) -> int"""
        return _blocks_swig10.or_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(or_ii_sptr self, int m)"""
        return _blocks_swig10.or_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(or_ii_sptr self)"""
        return _blocks_swig10.or_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(or_ii_sptr self) -> bool"""
        return _blocks_swig10.or_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(or_ii_sptr self, int m)"""
        return _blocks_swig10.or_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(or_ii_sptr self) -> int"""
        return _blocks_swig10.or_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(or_ii_sptr self, int i) -> long"""
        return _blocks_swig10.or_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(or_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(or_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.or_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(or_ii_sptr self, int i) -> long"""
        return _blocks_swig10.or_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(or_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(or_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.or_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(or_ii_sptr self) -> float"""
        return _blocks_swig10.or_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(or_ii_sptr self) -> float"""
        return _blocks_swig10.or_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(or_ii_sptr self) -> float"""
        return _blocks_swig10.or_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(or_ii_sptr self) -> float"""
        return _blocks_swig10.or_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(or_ii_sptr self) -> float"""
        return _blocks_swig10.or_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(or_ii_sptr self) -> float"""
        return _blocks_swig10.or_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(or_ii_sptr self, int which) -> float
        pc_input_buffers_full(or_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(or_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(or_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(or_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(or_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(or_ii_sptr self, int which) -> float
        pc_output_buffers_full(or_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(or_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(or_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(or_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(or_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.or_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(or_ii_sptr self) -> float"""
        return _blocks_swig10.or_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(or_ii_sptr self) -> float"""
        return _blocks_swig10.or_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(or_ii_sptr self) -> float"""
        return _blocks_swig10.or_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(or_ii_sptr self) -> float"""
        return _blocks_swig10.or_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(or_ii_sptr self) -> float"""
        return _blocks_swig10.or_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(or_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.or_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(or_ii_sptr self)"""
        return _blocks_swig10.or_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(or_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.or_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(or_ii_sptr self) -> int"""
        return _blocks_swig10.or_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(or_ii_sptr self) -> int"""
        return _blocks_swig10.or_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(or_ii_sptr self, int priority) -> int"""
        return _blocks_swig10.or_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(or_ii_sptr self) -> std::string"""
        return _blocks_swig10.or_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(or_ii_sptr self) -> std::string"""
        return _blocks_swig10.or_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(or_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.or_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(or_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.or_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(or_ii_sptr self) -> long"""
        return _blocks_swig10.or_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(or_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.or_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(or_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.or_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(or_ii_sptr self) -> std::string"""
        return _blocks_swig10.or_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(or_ii_sptr self, std::string name)"""
        return _blocks_swig10.or_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(or_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig10.or_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(or_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.or_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(or_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.or_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(or_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig10.or_ii_sptr_message_subscribers(self, *args, **kwargs)

or_ii_sptr_swigregister = _blocks_swig10.or_ii_sptr_swigregister
or_ii_sptr_swigregister(or_ii_sptr)

or_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
or_ii = or_ii.make;

class patterned_interleaver_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::patterned_interleaver)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::patterned_interleaver)> self) -> patterned_interleaver_sptr
        __init__(boost::shared_ptr<(gr::blocks::patterned_interleaver)> self, patterned_interleaver p) -> patterned_interleaver_sptr
        """
        this = _blocks_swig10.new_patterned_interleaver_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(patterned_interleaver_sptr self) -> patterned_interleaver"""
        return _blocks_swig10.patterned_interleaver_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig10.delete_patterned_interleaver_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(patterned_interleaver_sptr self, size_t itemsize, std::vector< int,std::allocator< int > > pattern) -> patterned_interleaver_sptr

        Interleave items based on the provided vector .

        Constructor Specific Documentation:

        Make a patterned interleaver block.

        Args:
            itemsize : stream itemsize
            pattern : vector that represents the interleaving pattern
        """
        return _blocks_swig10.patterned_interleaver_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(patterned_interleaver_sptr self) -> unsigned int"""
        return _blocks_swig10.patterned_interleaver_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(patterned_interleaver_sptr self, int which, int delay)
        declare_sample_delay(patterned_interleaver_sptr self, unsigned int delay)
        """
        return _blocks_swig10.patterned_interleaver_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(patterned_interleaver_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.patterned_interleaver_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(patterned_interleaver_sptr self) -> int"""
        return _blocks_swig10.patterned_interleaver_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(patterned_interleaver_sptr self) -> double"""
        return _blocks_swig10.patterned_interleaver_sptr_relative_rate(self)

    def start(self):
        """start(patterned_interleaver_sptr self) -> bool"""
        return _blocks_swig10.patterned_interleaver_sptr_start(self)

    def stop(self):
        """stop(patterned_interleaver_sptr self) -> bool"""
        return _blocks_swig10.patterned_interleaver_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(patterned_interleaver_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.patterned_interleaver_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(patterned_interleaver_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.patterned_interleaver_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(patterned_interleaver_sptr self) -> int"""
        return _blocks_swig10.patterned_interleaver_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(patterned_interleaver_sptr self, int m)"""
        return _blocks_swig10.patterned_interleaver_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(patterned_interleaver_sptr self)"""
        return _blocks_swig10.patterned_interleaver_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(patterned_interleaver_sptr self) -> bool"""
        return _blocks_swig10.patterned_interleaver_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(patterned_interleaver_sptr self, int m)"""
        return _blocks_swig10.patterned_interleaver_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(patterned_interleaver_sptr self) -> int"""
        return _blocks_swig10.patterned_interleaver_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(patterned_interleaver_sptr self, int i) -> long"""
        return _blocks_swig10.patterned_interleaver_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(patterned_interleaver_sptr self, long max_output_buffer)
        set_max_output_buffer(patterned_interleaver_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.patterned_interleaver_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(patterned_interleaver_sptr self, int i) -> long"""
        return _blocks_swig10.patterned_interleaver_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(patterned_interleaver_sptr self, long min_output_buffer)
        set_min_output_buffer(patterned_interleaver_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.patterned_interleaver_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(patterned_interleaver_sptr self) -> float"""
        return _blocks_swig10.patterned_interleaver_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(patterned_interleaver_sptr self) -> float"""
        return _blocks_swig10.patterned_interleaver_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(patterned_interleaver_sptr self) -> float"""
        return _blocks_swig10.patterned_interleaver_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(patterned_interleaver_sptr self) -> float"""
        return _blocks_swig10.patterned_interleaver_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(patterned_interleaver_sptr self) -> float"""
        return _blocks_swig10.patterned_interleaver_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(patterned_interleaver_sptr self) -> float"""
        return _blocks_swig10.patterned_interleaver_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(patterned_interleaver_sptr self, int which) -> float
        pc_input_buffers_full(patterned_interleaver_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.patterned_interleaver_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(patterned_interleaver_sptr self, int which) -> float
        pc_input_buffers_full_avg(patterned_interleaver_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.patterned_interleaver_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(patterned_interleaver_sptr self, int which) -> float
        pc_input_buffers_full_var(patterned_interleaver_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.patterned_interleaver_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(patterned_interleaver_sptr self, int which) -> float
        pc_output_buffers_full(patterned_interleaver_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.patterned_interleaver_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(patterned_interleaver_sptr self, int which) -> float
        pc_output_buffers_full_avg(patterned_interleaver_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.patterned_interleaver_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(patterned_interleaver_sptr self, int which) -> float
        pc_output_buffers_full_var(patterned_interleaver_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.patterned_interleaver_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(patterned_interleaver_sptr self) -> float"""
        return _blocks_swig10.patterned_interleaver_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(patterned_interleaver_sptr self) -> float"""
        return _blocks_swig10.patterned_interleaver_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(patterned_interleaver_sptr self) -> float"""
        return _blocks_swig10.patterned_interleaver_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(patterned_interleaver_sptr self) -> float"""
        return _blocks_swig10.patterned_interleaver_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(patterned_interleaver_sptr self) -> float"""
        return _blocks_swig10.patterned_interleaver_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(patterned_interleaver_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.patterned_interleaver_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(patterned_interleaver_sptr self)"""
        return _blocks_swig10.patterned_interleaver_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(patterned_interleaver_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.patterned_interleaver_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(patterned_interleaver_sptr self) -> int"""
        return _blocks_swig10.patterned_interleaver_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(patterned_interleaver_sptr self) -> int"""
        return _blocks_swig10.patterned_interleaver_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(patterned_interleaver_sptr self, int priority) -> int"""
        return _blocks_swig10.patterned_interleaver_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(patterned_interleaver_sptr self) -> std::string"""
        return _blocks_swig10.patterned_interleaver_sptr_name(self)

    def symbol_name(self):
        """symbol_name(patterned_interleaver_sptr self) -> std::string"""
        return _blocks_swig10.patterned_interleaver_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(patterned_interleaver_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.patterned_interleaver_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(patterned_interleaver_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.patterned_interleaver_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(patterned_interleaver_sptr self) -> long"""
        return _blocks_swig10.patterned_interleaver_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(patterned_interleaver_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.patterned_interleaver_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(patterned_interleaver_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.patterned_interleaver_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(patterned_interleaver_sptr self) -> std::string"""
        return _blocks_swig10.patterned_interleaver_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(patterned_interleaver_sptr self, std::string name)"""
        return _blocks_swig10.patterned_interleaver_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(patterned_interleaver_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig10.patterned_interleaver_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(patterned_interleaver_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.patterned_interleaver_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(patterned_interleaver_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.patterned_interleaver_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(patterned_interleaver_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig10.patterned_interleaver_sptr_message_subscribers(self, *args, **kwargs)

patterned_interleaver_sptr_swigregister = _blocks_swig10.patterned_interleaver_sptr_swigregister
patterned_interleaver_sptr_swigregister(patterned_interleaver_sptr)

patterned_interleaver_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
patterned_interleaver = patterned_interleaver.make;

class pack_k_bits_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::pack_k_bits_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::pack_k_bits_bb)> self) -> pack_k_bits_bb_sptr
        __init__(boost::shared_ptr<(gr::blocks::pack_k_bits_bb)> self, pack_k_bits_bb p) -> pack_k_bits_bb_sptr
        """
        this = _blocks_swig10.new_pack_k_bits_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pack_k_bits_bb_sptr self) -> pack_k_bits_bb"""
        return _blocks_swig10.pack_k_bits_bb_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig10.delete_pack_k_bits_bb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(pack_k_bits_bb_sptr self, unsigned int k) -> pack_k_bits_bb_sptr

        Converts a stream of bytes with 1 bit in the LSB to a byte with k relevant bits.

        This block takes in K bytes at a time, and uses the least significant bit to form a new byte.

        Example: k = 4 in = [0,1,0,1, 0x81,0x00,0x00,0x00] out = [0x05, 0x08]

        Constructor Specific Documentation:

        Make a pack_k_bits block.

        Args:
            k : number of bits to be packed.
        """
        return _blocks_swig10.pack_k_bits_bb_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(pack_k_bits_bb_sptr self) -> unsigned int"""
        return _blocks_swig10.pack_k_bits_bb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pack_k_bits_bb_sptr self, int which, int delay)
        declare_sample_delay(pack_k_bits_bb_sptr self, unsigned int delay)
        """
        return _blocks_swig10.pack_k_bits_bb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pack_k_bits_bb_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.pack_k_bits_bb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pack_k_bits_bb_sptr self) -> int"""
        return _blocks_swig10.pack_k_bits_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pack_k_bits_bb_sptr self) -> double"""
        return _blocks_swig10.pack_k_bits_bb_sptr_relative_rate(self)

    def start(self):
        """start(pack_k_bits_bb_sptr self) -> bool"""
        return _blocks_swig10.pack_k_bits_bb_sptr_start(self)

    def stop(self):
        """stop(pack_k_bits_bb_sptr self) -> bool"""
        return _blocks_swig10.pack_k_bits_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pack_k_bits_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.pack_k_bits_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pack_k_bits_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.pack_k_bits_bb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pack_k_bits_bb_sptr self) -> int"""
        return _blocks_swig10.pack_k_bits_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pack_k_bits_bb_sptr self, int m)"""
        return _blocks_swig10.pack_k_bits_bb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pack_k_bits_bb_sptr self)"""
        return _blocks_swig10.pack_k_bits_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pack_k_bits_bb_sptr self) -> bool"""
        return _blocks_swig10.pack_k_bits_bb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pack_k_bits_bb_sptr self, int m)"""
        return _blocks_swig10.pack_k_bits_bb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pack_k_bits_bb_sptr self) -> int"""
        return _blocks_swig10.pack_k_bits_bb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pack_k_bits_bb_sptr self, int i) -> long"""
        return _blocks_swig10.pack_k_bits_bb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pack_k_bits_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(pack_k_bits_bb_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.pack_k_bits_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pack_k_bits_bb_sptr self, int i) -> long"""
        return _blocks_swig10.pack_k_bits_bb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pack_k_bits_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(pack_k_bits_bb_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.pack_k_bits_bb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pack_k_bits_bb_sptr self) -> float"""
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pack_k_bits_bb_sptr self) -> float"""
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pack_k_bits_bb_sptr self) -> float"""
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pack_k_bits_bb_sptr self) -> float"""
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pack_k_bits_bb_sptr self) -> float"""
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pack_k_bits_bb_sptr self) -> float"""
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pack_k_bits_bb_sptr self, int which) -> float
        pc_input_buffers_full(pack_k_bits_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pack_k_bits_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(pack_k_bits_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pack_k_bits_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(pack_k_bits_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pack_k_bits_bb_sptr self, int which) -> float
        pc_output_buffers_full(pack_k_bits_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pack_k_bits_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(pack_k_bits_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pack_k_bits_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(pack_k_bits_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pack_k_bits_bb_sptr self) -> float"""
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pack_k_bits_bb_sptr self) -> float"""
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pack_k_bits_bb_sptr self) -> float"""
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pack_k_bits_bb_sptr self) -> float"""
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(pack_k_bits_bb_sptr self) -> float"""
        return _blocks_swig10.pack_k_bits_bb_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pack_k_bits_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.pack_k_bits_bb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pack_k_bits_bb_sptr self)"""
        return _blocks_swig10.pack_k_bits_bb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pack_k_bits_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.pack_k_bits_bb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pack_k_bits_bb_sptr self) -> int"""
        return _blocks_swig10.pack_k_bits_bb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pack_k_bits_bb_sptr self) -> int"""
        return _blocks_swig10.pack_k_bits_bb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pack_k_bits_bb_sptr self, int priority) -> int"""
        return _blocks_swig10.pack_k_bits_bb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pack_k_bits_bb_sptr self) -> std::string"""
        return _blocks_swig10.pack_k_bits_bb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pack_k_bits_bb_sptr self) -> std::string"""
        return _blocks_swig10.pack_k_bits_bb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pack_k_bits_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.pack_k_bits_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pack_k_bits_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.pack_k_bits_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pack_k_bits_bb_sptr self) -> long"""
        return _blocks_swig10.pack_k_bits_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pack_k_bits_bb_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.pack_k_bits_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pack_k_bits_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.pack_k_bits_bb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pack_k_bits_bb_sptr self) -> std::string"""
        return _blocks_swig10.pack_k_bits_bb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pack_k_bits_bb_sptr self, std::string name)"""
        return _blocks_swig10.pack_k_bits_bb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pack_k_bits_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig10.pack_k_bits_bb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pack_k_bits_bb_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.pack_k_bits_bb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pack_k_bits_bb_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.pack_k_bits_bb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pack_k_bits_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig10.pack_k_bits_bb_sptr_message_subscribers(self, *args, **kwargs)

pack_k_bits_bb_sptr_swigregister = _blocks_swig10.pack_k_bits_bb_sptr_swigregister
pack_k_bits_bb_sptr_swigregister(pack_k_bits_bb_sptr)

pack_k_bits_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pack_k_bits_bb = pack_k_bits_bb.make;

class packed_to_unpacked_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::packed_to_unpacked_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::packed_to_unpacked_bb)> self) -> packed_to_unpacked_bb_sptr
        __init__(boost::shared_ptr<(gr::blocks::packed_to_unpacked_bb)> self, packed_to_unpacked_bb p) -> packed_to_unpacked_bb_sptr
        """
        this = _blocks_swig10.new_packed_to_unpacked_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(packed_to_unpacked_bb_sptr self) -> packed_to_unpacked_bb"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig10.delete_packed_to_unpacked_bb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(packed_to_unpacked_bb_sptr self, unsigned int bits_per_chunk, gr::endianness_t endianness) -> packed_to_unpacked_bb_sptr

        Convert a stream of packed bytes or shorts to stream of unpacked bytes or shorts.

        input: stream of unsigned char; output: stream of unsigned char

        This is the inverse of gr::blocks::unpacked_to_packed_XX.

        The bits in the bytes or shorts input stream are grouped into chunks of  bits and each resulting chunk is written right- justified to the output stream of bytes or shorts. All b or 16 bits of the each input bytes or short are processed. The right thing is done if bits_per_chunk is not a power of two.

        The combination of gr::blocks::packed_to_unpacked_XX_ followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.

        Constructor Specific Documentation:



        Args:
            bits_per_chunk : 
            endianness : 
        """
        return _blocks_swig10.packed_to_unpacked_bb_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(packed_to_unpacked_bb_sptr self) -> unsigned int"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(packed_to_unpacked_bb_sptr self, int which, int delay)
        declare_sample_delay(packed_to_unpacked_bb_sptr self, unsigned int delay)
        """
        return _blocks_swig10.packed_to_unpacked_bb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(packed_to_unpacked_bb_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(packed_to_unpacked_bb_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(packed_to_unpacked_bb_sptr self) -> double"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_relative_rate(self)

    def start(self):
        """start(packed_to_unpacked_bb_sptr self) -> bool"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_start(self)

    def stop(self):
        """stop(packed_to_unpacked_bb_sptr self) -> bool"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(packed_to_unpacked_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(packed_to_unpacked_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(packed_to_unpacked_bb_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(packed_to_unpacked_bb_sptr self, int m)"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(packed_to_unpacked_bb_sptr self)"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(packed_to_unpacked_bb_sptr self) -> bool"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(packed_to_unpacked_bb_sptr self, int m)"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(packed_to_unpacked_bb_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(packed_to_unpacked_bb_sptr self, int i) -> long"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(packed_to_unpacked_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(packed_to_unpacked_bb_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.packed_to_unpacked_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(packed_to_unpacked_bb_sptr self, int i) -> long"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(packed_to_unpacked_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(packed_to_unpacked_bb_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.packed_to_unpacked_bb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(packed_to_unpacked_bb_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(packed_to_unpacked_bb_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(packed_to_unpacked_bb_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(packed_to_unpacked_bb_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(packed_to_unpacked_bb_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(packed_to_unpacked_bb_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(packed_to_unpacked_bb_sptr self, int which) -> float
        pc_input_buffers_full(packed_to_unpacked_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(packed_to_unpacked_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(packed_to_unpacked_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(packed_to_unpacked_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(packed_to_unpacked_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(packed_to_unpacked_bb_sptr self, int which) -> float
        pc_output_buffers_full(packed_to_unpacked_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(packed_to_unpacked_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(packed_to_unpacked_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(packed_to_unpacked_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(packed_to_unpacked_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(packed_to_unpacked_bb_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(packed_to_unpacked_bb_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(packed_to_unpacked_bb_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(packed_to_unpacked_bb_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(packed_to_unpacked_bb_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(packed_to_unpacked_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(packed_to_unpacked_bb_sptr self)"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(packed_to_unpacked_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(packed_to_unpacked_bb_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(packed_to_unpacked_bb_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(packed_to_unpacked_bb_sptr self, int priority) -> int"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(packed_to_unpacked_bb_sptr self) -> std::string"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(packed_to_unpacked_bb_sptr self) -> std::string"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(packed_to_unpacked_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(packed_to_unpacked_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(packed_to_unpacked_bb_sptr self) -> long"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(packed_to_unpacked_bb_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(packed_to_unpacked_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(packed_to_unpacked_bb_sptr self) -> std::string"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(packed_to_unpacked_bb_sptr self, std::string name)"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(packed_to_unpacked_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(packed_to_unpacked_bb_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(packed_to_unpacked_bb_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(packed_to_unpacked_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig10.packed_to_unpacked_bb_sptr_message_subscribers(self, *args, **kwargs)

packed_to_unpacked_bb_sptr_swigregister = _blocks_swig10.packed_to_unpacked_bb_sptr_swigregister
packed_to_unpacked_bb_sptr_swigregister(packed_to_unpacked_bb_sptr)

packed_to_unpacked_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
packed_to_unpacked_bb = packed_to_unpacked_bb.make;

class packed_to_unpacked_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::packed_to_unpacked_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::packed_to_unpacked_ss)> self) -> packed_to_unpacked_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::packed_to_unpacked_ss)> self, packed_to_unpacked_ss p) -> packed_to_unpacked_ss_sptr
        """
        this = _blocks_swig10.new_packed_to_unpacked_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(packed_to_unpacked_ss_sptr self) -> packed_to_unpacked_ss"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig10.delete_packed_to_unpacked_ss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(packed_to_unpacked_ss_sptr self, unsigned int bits_per_chunk, gr::endianness_t endianness) -> packed_to_unpacked_ss_sptr

        Convert a stream of packed bytes or shorts to stream of unpacked bytes or shorts.

        input: stream of short; output: stream of short

        This is the inverse of gr::blocks::unpacked_to_packed_XX.

        The bits in the bytes or shorts input stream are grouped into chunks of  bits and each resulting chunk is written right- justified to the output stream of bytes or shorts. All b or 16 bits of the each input bytes or short are processed. The right thing is done if bits_per_chunk is not a power of two.

        The combination of gr::blocks::packed_to_unpacked_XX_ followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.

        Constructor Specific Documentation:



        Args:
            bits_per_chunk : 
            endianness : 
        """
        return _blocks_swig10.packed_to_unpacked_ss_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(packed_to_unpacked_ss_sptr self) -> unsigned int"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(packed_to_unpacked_ss_sptr self, int which, int delay)
        declare_sample_delay(packed_to_unpacked_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig10.packed_to_unpacked_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(packed_to_unpacked_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(packed_to_unpacked_ss_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(packed_to_unpacked_ss_sptr self) -> double"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_relative_rate(self)

    def start(self):
        """start(packed_to_unpacked_ss_sptr self) -> bool"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_start(self)

    def stop(self):
        """stop(packed_to_unpacked_ss_sptr self) -> bool"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(packed_to_unpacked_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(packed_to_unpacked_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(packed_to_unpacked_ss_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(packed_to_unpacked_ss_sptr self, int m)"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(packed_to_unpacked_ss_sptr self)"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(packed_to_unpacked_ss_sptr self) -> bool"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(packed_to_unpacked_ss_sptr self, int m)"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(packed_to_unpacked_ss_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(packed_to_unpacked_ss_sptr self, int i) -> long"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(packed_to_unpacked_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(packed_to_unpacked_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.packed_to_unpacked_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(packed_to_unpacked_ss_sptr self, int i) -> long"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(packed_to_unpacked_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(packed_to_unpacked_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.packed_to_unpacked_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(packed_to_unpacked_ss_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(packed_to_unpacked_ss_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(packed_to_unpacked_ss_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(packed_to_unpacked_ss_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(packed_to_unpacked_ss_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(packed_to_unpacked_ss_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(packed_to_unpacked_ss_sptr self, int which) -> float
        pc_input_buffers_full(packed_to_unpacked_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(packed_to_unpacked_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(packed_to_unpacked_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(packed_to_unpacked_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(packed_to_unpacked_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(packed_to_unpacked_ss_sptr self, int which) -> float
        pc_output_buffers_full(packed_to_unpacked_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(packed_to_unpacked_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(packed_to_unpacked_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(packed_to_unpacked_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(packed_to_unpacked_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(packed_to_unpacked_ss_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(packed_to_unpacked_ss_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(packed_to_unpacked_ss_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(packed_to_unpacked_ss_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(packed_to_unpacked_ss_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(packed_to_unpacked_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(packed_to_unpacked_ss_sptr self)"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(packed_to_unpacked_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(packed_to_unpacked_ss_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(packed_to_unpacked_ss_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(packed_to_unpacked_ss_sptr self, int priority) -> int"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(packed_to_unpacked_ss_sptr self) -> std::string"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(packed_to_unpacked_ss_sptr self) -> std::string"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(packed_to_unpacked_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(packed_to_unpacked_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(packed_to_unpacked_ss_sptr self) -> long"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(packed_to_unpacked_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(packed_to_unpacked_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(packed_to_unpacked_ss_sptr self) -> std::string"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(packed_to_unpacked_ss_sptr self, std::string name)"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(packed_to_unpacked_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(packed_to_unpacked_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(packed_to_unpacked_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(packed_to_unpacked_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig10.packed_to_unpacked_ss_sptr_message_subscribers(self, *args, **kwargs)

packed_to_unpacked_ss_sptr_swigregister = _blocks_swig10.packed_to_unpacked_ss_sptr_swigregister
packed_to_unpacked_ss_sptr_swigregister(packed_to_unpacked_ss_sptr)

packed_to_unpacked_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
packed_to_unpacked_ss = packed_to_unpacked_ss.make;

class packed_to_unpacked_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::packed_to_unpacked_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::packed_to_unpacked_ii)> self) -> packed_to_unpacked_ii_sptr
        __init__(boost::shared_ptr<(gr::blocks::packed_to_unpacked_ii)> self, packed_to_unpacked_ii p) -> packed_to_unpacked_ii_sptr
        """
        this = _blocks_swig10.new_packed_to_unpacked_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(packed_to_unpacked_ii_sptr self) -> packed_to_unpacked_ii"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig10.delete_packed_to_unpacked_ii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(packed_to_unpacked_ii_sptr self, unsigned int bits_per_chunk, gr::endianness_t endianness) -> packed_to_unpacked_ii_sptr

        Convert a stream of packed bytes or shorts to stream of unpacked bytes or shorts.

        input: stream of int; output: stream of int

        This is the inverse of gr::blocks::unpacked_to_packed_XX.

        The bits in the bytes or shorts input stream are grouped into chunks of  bits and each resulting chunk is written right- justified to the output stream of bytes or shorts. All b or 16 bits of the each input bytes or short are processed. The right thing is done if bits_per_chunk is not a power of two.

        The combination of gr::blocks::packed_to_unpacked_XX_ followed by gr_chunks_to_symbols_Xf or gr_chunks_to_symbols_Xc handles the general case of mapping from a stream of bytes or shorts into arbitrary float or complex symbols.

        Constructor Specific Documentation:



        Args:
            bits_per_chunk : 
            endianness : 
        """
        return _blocks_swig10.packed_to_unpacked_ii_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(packed_to_unpacked_ii_sptr self) -> unsigned int"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(packed_to_unpacked_ii_sptr self, int which, int delay)
        declare_sample_delay(packed_to_unpacked_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig10.packed_to_unpacked_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(packed_to_unpacked_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(packed_to_unpacked_ii_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(packed_to_unpacked_ii_sptr self) -> double"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_relative_rate(self)

    def start(self):
        """start(packed_to_unpacked_ii_sptr self) -> bool"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_start(self)

    def stop(self):
        """stop(packed_to_unpacked_ii_sptr self) -> bool"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(packed_to_unpacked_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(packed_to_unpacked_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(packed_to_unpacked_ii_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(packed_to_unpacked_ii_sptr self, int m)"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(packed_to_unpacked_ii_sptr self)"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(packed_to_unpacked_ii_sptr self) -> bool"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(packed_to_unpacked_ii_sptr self, int m)"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(packed_to_unpacked_ii_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(packed_to_unpacked_ii_sptr self, int i) -> long"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(packed_to_unpacked_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(packed_to_unpacked_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig10.packed_to_unpacked_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(packed_to_unpacked_ii_sptr self, int i) -> long"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(packed_to_unpacked_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(packed_to_unpacked_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig10.packed_to_unpacked_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(packed_to_unpacked_ii_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(packed_to_unpacked_ii_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(packed_to_unpacked_ii_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(packed_to_unpacked_ii_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(packed_to_unpacked_ii_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(packed_to_unpacked_ii_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(packed_to_unpacked_ii_sptr self, int which) -> float
        pc_input_buffers_full(packed_to_unpacked_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(packed_to_unpacked_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(packed_to_unpacked_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(packed_to_unpacked_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(packed_to_unpacked_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(packed_to_unpacked_ii_sptr self, int which) -> float
        pc_output_buffers_full(packed_to_unpacked_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(packed_to_unpacked_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(packed_to_unpacked_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(packed_to_unpacked_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(packed_to_unpacked_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(packed_to_unpacked_ii_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(packed_to_unpacked_ii_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(packed_to_unpacked_ii_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(packed_to_unpacked_ii_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(packed_to_unpacked_ii_sptr self) -> float"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(packed_to_unpacked_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(packed_to_unpacked_ii_sptr self)"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(packed_to_unpacked_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(packed_to_unpacked_ii_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(packed_to_unpacked_ii_sptr self) -> int"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(packed_to_unpacked_ii_sptr self, int priority) -> int"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(packed_to_unpacked_ii_sptr self) -> std::string"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(packed_to_unpacked_ii_sptr self) -> std::string"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(packed_to_unpacked_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(packed_to_unpacked_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(packed_to_unpacked_ii_sptr self) -> long"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(packed_to_unpacked_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(packed_to_unpacked_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(packed_to_unpacked_ii_sptr self) -> std::string"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(packed_to_unpacked_ii_sptr self, std::string name)"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(packed_to_unpacked_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(packed_to_unpacked_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(packed_to_unpacked_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(packed_to_unpacked_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig10.packed_to_unpacked_ii_sptr_message_subscribers(self, *args, **kwargs)

packed_to_unpacked_ii_sptr_swigregister = _blocks_swig10.packed_to_unpacked_ii_sptr_swigregister
packed_to_unpacked_ii_sptr_swigregister(packed_to_unpacked_ii_sptr)

packed_to_unpacked_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
packed_to_unpacked_ii = packed_to_unpacked_ii.make;




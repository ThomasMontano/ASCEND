# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_blocks_swig8', [dirname(__file__)])
        except ImportError:
            import _blocks_swig8
            return _blocks_swig8
        if fp is not None:
            try:
                _mod = imp.load_module('_blocks_swig8', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _blocks_swig8 = swig_import_helper()
    del swig_import_helper
else:
    import _blocks_swig8
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _blocks_swig8.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _blocks_swig8.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _blocks_swig8.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _blocks_swig8.high_res_timer_epoch()
class abs_ff(object):
    """
    output[m] = abs(input[m]) for all M streams.

    absolute value of data stream (Strip sign)

    Constructor Specific Documentation:

    Create an instance of abs_ff.

    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> abs_ff_sptr

        output[m] = abs(input[m]) for all M streams.

        absolute value of data stream (Strip sign)

        Constructor Specific Documentation:

        Create an instance of abs_ff.

        Args:
            vlen : 
        """
        return _blocks_swig8.abs_ff_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig8.delete_abs_ff
    __del__ = lambda self : None;
abs_ff_swigregister = _blocks_swig8.abs_ff_swigregister
abs_ff_swigregister(abs_ff)

def abs_ff_make(vlen=1):
  """
    abs_ff_make(size_t vlen=1) -> abs_ff_sptr

    output[m] = abs(input[m]) for all M streams.

    absolute value of data stream (Strip sign)

    Constructor Specific Documentation:

    Create an instance of abs_ff.

    Args:
        vlen : 
    """
  return _blocks_swig8.abs_ff_make(vlen)

class abs_ss(object):
    """
    output[m] = abs(input[m]) for all M streams.

    absolute value of data stream (Strip sign)

    Constructor Specific Documentation:

    Create an instance of abs_ss.

    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> abs_ss_sptr

        output[m] = abs(input[m]) for all M streams.

        absolute value of data stream (Strip sign)

        Constructor Specific Documentation:

        Create an instance of abs_ss.

        Args:
            vlen : 
        """
        return _blocks_swig8.abs_ss_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig8.delete_abs_ss
    __del__ = lambda self : None;
abs_ss_swigregister = _blocks_swig8.abs_ss_swigregister
abs_ss_swigregister(abs_ss)

def abs_ss_make(vlen=1):
  """
    abs_ss_make(size_t vlen=1) -> abs_ss_sptr

    output[m] = abs(input[m]) for all M streams.

    absolute value of data stream (Strip sign)

    Constructor Specific Documentation:

    Create an instance of abs_ss.

    Args:
        vlen : 
    """
  return _blocks_swig8.abs_ss_make(vlen)

class abs_ii(object):
    """
    output[m] = abs(input[m]) for all M streams.

    absolute value of data stream (Strip sign)

    Constructor Specific Documentation:

    Create an instance of abs_ii.

    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> abs_ii_sptr

        output[m] = abs(input[m]) for all M streams.

        absolute value of data stream (Strip sign)

        Constructor Specific Documentation:

        Create an instance of abs_ii.

        Args:
            vlen : 
        """
        return _blocks_swig8.abs_ii_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig8.delete_abs_ii
    __del__ = lambda self : None;
abs_ii_swigregister = _blocks_swig8.abs_ii_swigregister
abs_ii_swigregister(abs_ii)

def abs_ii_make(vlen=1):
  """
    abs_ii_make(size_t vlen=1) -> abs_ii_sptr

    output[m] = abs(input[m]) for all M streams.

    absolute value of data stream (Strip sign)

    Constructor Specific Documentation:

    Create an instance of abs_ii.

    Args:
        vlen : 
    """
  return _blocks_swig8.abs_ii_make(vlen)

class add_ff(object):
    """
    output = sum (input_0, input_1, ...)

    Add across all input streams.

    Constructor Specific Documentation:

    Add streams of float values.

    Args:
        vlen : Vector length
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> add_ff_sptr

        output = sum (input_0, input_1, ...)

        Add across all input streams.

        Constructor Specific Documentation:

        Add streams of float values.

        Args:
            vlen : Vector length
        """
        return _blocks_swig8.add_ff_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig8.delete_add_ff
    __del__ = lambda self : None;
add_ff_swigregister = _blocks_swig8.add_ff_swigregister
add_ff_swigregister(add_ff)

def add_ff_make(vlen=1):
  """
    add_ff_make(size_t vlen=1) -> add_ff_sptr

    output = sum (input_0, input_1, ...)

    Add across all input streams.

    Constructor Specific Documentation:

    Add streams of float values.

    Args:
        vlen : Vector length
    """
  return _blocks_swig8.add_ff_make(vlen)

class add_ss(object):
    """
    output = sum(input[0], input[1], ..., input[M-1])

    Add samples across all input streams. For all  samples on all  input streams :

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> add_ss_sptr

        output = sum(input[0], input[1], ..., input[M-1])

        Add samples across all input streams. For all  samples on all  input streams :

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig8.add_ss_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig8.delete_add_ss
    __del__ = lambda self : None;
add_ss_swigregister = _blocks_swig8.add_ss_swigregister
add_ss_swigregister(add_ss)

def add_ss_make(vlen=1):
  """
    add_ss_make(size_t vlen=1) -> add_ss_sptr

    output = sum(input[0], input[1], ..., input[M-1])

    Add samples across all input streams. For all  samples on all  input streams :

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig8.add_ss_make(vlen)

class add_ii(object):
    """
    output = sum(input[0], input[1], ..., input[M-1])

    Add samples across all input streams. For all  samples on all  input streams :

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> add_ii_sptr

        output = sum(input[0], input[1], ..., input[M-1])

        Add samples across all input streams. For all  samples on all  input streams :

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig8.add_ii_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig8.delete_add_ii
    __del__ = lambda self : None;
add_ii_swigregister = _blocks_swig8.add_ii_swigregister
add_ii_swigregister(add_ii)

def add_ii_make(vlen=1):
  """
    add_ii_make(size_t vlen=1) -> add_ii_sptr

    output = sum(input[0], input[1], ..., input[M-1])

    Add samples across all input streams. For all  samples on all  input streams :

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig8.add_ii_make(vlen)

class add_cc(object):
    """
    output = sum(input[0], input[1], ..., input[M-1])

    Add samples across all input streams. For all  samples on all  input streams :

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> add_cc_sptr

        output = sum(input[0], input[1], ..., input[M-1])

        Add samples across all input streams. For all  samples on all  input streams :

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig8.add_cc_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig8.delete_add_cc
    __del__ = lambda self : None;
add_cc_swigregister = _blocks_swig8.add_cc_swigregister
add_cc_swigregister(add_cc)

def add_cc_make(vlen=1):
  """
    add_cc_make(size_t vlen=1) -> add_cc_sptr

    output = sum(input[0], input[1], ..., input[M-1])

    Add samples across all input streams. For all  samples on all  input streams :

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig8.add_cc_make(vlen)

class add_const_bb(object):
    """
    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_bb.

    Args:
        k : additive constant
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(unsigned char k) -> add_const_bb_sptr

        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_bb.

        Args:
            k : additive constant
        """
        return _blocks_swig8.add_const_bb_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(add_const_bb self) -> unsigned char

        Return additive constant.
        """
        return _blocks_swig8.add_const_bb_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_bb self, unsigned char k)

        Set additive constant.
        """
        return _blocks_swig8.add_const_bb_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig8.delete_add_const_bb
    __del__ = lambda self : None;
add_const_bb_swigregister = _blocks_swig8.add_const_bb_swigregister
add_const_bb_swigregister(add_const_bb)

def add_const_bb_make(*args, **kwargs):
  """
    add_const_bb_make(unsigned char k) -> add_const_bb_sptr

    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_bb.

    Args:
        k : additive constant
    """
  return _blocks_swig8.add_const_bb_make(*args, **kwargs)

class add_const_ff(object):
    """
    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_ff.

    Args:
        k : additive constant
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(float k) -> add_const_ff_sptr

        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_ff.

        Args:
            k : additive constant
        """
        return _blocks_swig8.add_const_ff_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(add_const_ff self) -> float

        Return additive constant.
        """
        return _blocks_swig8.add_const_ff_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_ff self, float k)

        Set additive constant.
        """
        return _blocks_swig8.add_const_ff_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig8.delete_add_const_ff
    __del__ = lambda self : None;
add_const_ff_swigregister = _blocks_swig8.add_const_ff_swigregister
add_const_ff_swigregister(add_const_ff)

def add_const_ff_make(*args, **kwargs):
  """
    add_const_ff_make(float k) -> add_const_ff_sptr

    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_ff.

    Args:
        k : additive constant
    """
  return _blocks_swig8.add_const_ff_make(*args, **kwargs)

class add_const_ss(object):
    """
    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_ss.

    Args:
        k : additive constant
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(short k) -> add_const_ss_sptr

        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_ss.

        Args:
            k : additive constant
        """
        return _blocks_swig8.add_const_ss_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(add_const_ss self) -> short

        Return additive constant.
        """
        return _blocks_swig8.add_const_ss_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_ss self, short k)

        Set additive constant.
        """
        return _blocks_swig8.add_const_ss_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig8.delete_add_const_ss
    __del__ = lambda self : None;
add_const_ss_swigregister = _blocks_swig8.add_const_ss_swigregister
add_const_ss_swigregister(add_const_ss)

def add_const_ss_make(*args, **kwargs):
  """
    add_const_ss_make(short k) -> add_const_ss_sptr

    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_ss.

    Args:
        k : additive constant
    """
  return _blocks_swig8.add_const_ss_make(*args, **kwargs)

class add_const_ii(object):
    """
    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_ii.

    Args:
        k : additive constant
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int k) -> add_const_ii_sptr

        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_ii.

        Args:
            k : additive constant
        """
        return _blocks_swig8.add_const_ii_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(add_const_ii self) -> int

        Return additive constant.
        """
        return _blocks_swig8.add_const_ii_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_ii self, int k)

        Set additive constant.
        """
        return _blocks_swig8.add_const_ii_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig8.delete_add_const_ii
    __del__ = lambda self : None;
add_const_ii_swigregister = _blocks_swig8.add_const_ii_swigregister
add_const_ii_swigregister(add_const_ii)

def add_const_ii_make(*args, **kwargs):
  """
    add_const_ii_make(int k) -> add_const_ii_sptr

    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_ii.

    Args:
        k : additive constant
    """
  return _blocks_swig8.add_const_ii_make(*args, **kwargs)

class add_const_cc(object):
    """
    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_cc.

    Args:
        k : additive constant
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(gr_complex k) -> add_const_cc_sptr

        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_cc.

        Args:
            k : additive constant
        """
        return _blocks_swig8.add_const_cc_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(add_const_cc self) -> gr_complex

        Return additive constant.
        """
        return _blocks_swig8.add_const_cc_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_cc self, gr_complex k)

        Set additive constant.
        """
        return _blocks_swig8.add_const_cc_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig8.delete_add_const_cc
    __del__ = lambda self : None;
add_const_cc_swigregister = _blocks_swig8.add_const_cc_swigregister
add_const_cc_swigregister(add_const_cc)

def add_const_cc_make(*args, **kwargs):
  """
    add_const_cc_make(gr_complex k) -> add_const_cc_sptr

    output = input + constant

    Constructor Specific Documentation:

    Create an instance of add_const_cc.

    Args:
        k : additive constant
    """
  return _blocks_swig8.add_const_cc_make(*args, **kwargs)

class add_const_vbb(object):
    """
    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_vbb.

    Args:
        k : additive constant vector
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(std::vector< unsigned char,std::allocator< unsigned char > > k) -> add_const_vbb_sptr

        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_vbb.

        Args:
            k : additive constant vector
        """
        return _blocks_swig8.add_const_vbb_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(add_const_vbb self) -> std::vector< unsigned char,std::allocator< unsigned char > >

        Return additive constant vector.
        """
        return _blocks_swig8.add_const_vbb_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_vbb self, std::vector< unsigned char,std::allocator< unsigned char > > k)

        Set additive constant vector.
        """
        return _blocks_swig8.add_const_vbb_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig8.delete_add_const_vbb
    __del__ = lambda self : None;
add_const_vbb_swigregister = _blocks_swig8.add_const_vbb_swigregister
add_const_vbb_swigregister(add_const_vbb)

def add_const_vbb_make(*args, **kwargs):
  """
    add_const_vbb_make(std::vector< unsigned char,std::allocator< unsigned char > > k) -> add_const_vbb_sptr

    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_vbb.

    Args:
        k : additive constant vector
    """
  return _blocks_swig8.add_const_vbb_make(*args, **kwargs)

class add_const_vff(object):
    """
    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_vff.

    Args:
        k : additive constant vector
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(pmt_vector_float k) -> add_const_vff_sptr

        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_vff.

        Args:
            k : additive constant vector
        """
        return _blocks_swig8.add_const_vff_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(add_const_vff self) -> pmt_vector_float

        Return additive constant vector.
        """
        return _blocks_swig8.add_const_vff_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_vff self, pmt_vector_float k)

        Set additive constant vector.
        """
        return _blocks_swig8.add_const_vff_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig8.delete_add_const_vff
    __del__ = lambda self : None;
add_const_vff_swigregister = _blocks_swig8.add_const_vff_swigregister
add_const_vff_swigregister(add_const_vff)

def add_const_vff_make(*args, **kwargs):
  """
    add_const_vff_make(pmt_vector_float k) -> add_const_vff_sptr

    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_vff.

    Args:
        k : additive constant vector
    """
  return _blocks_swig8.add_const_vff_make(*args, **kwargs)

class add_const_vss(object):
    """
    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_vss.

    Args:
        k : additive constant vector
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(std::vector< short,std::allocator< short > > k) -> add_const_vss_sptr

        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_vss.

        Args:
            k : additive constant vector
        """
        return _blocks_swig8.add_const_vss_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(add_const_vss self) -> std::vector< short,std::allocator< short > >

        Return additive constant vector.
        """
        return _blocks_swig8.add_const_vss_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_vss self, std::vector< short,std::allocator< short > > k)

        Set additive constant vector.
        """
        return _blocks_swig8.add_const_vss_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig8.delete_add_const_vss
    __del__ = lambda self : None;
add_const_vss_swigregister = _blocks_swig8.add_const_vss_swigregister
add_const_vss_swigregister(add_const_vss)

def add_const_vss_make(*args, **kwargs):
  """
    add_const_vss_make(std::vector< short,std::allocator< short > > k) -> add_const_vss_sptr

    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_vss.

    Args:
        k : additive constant vector
    """
  return _blocks_swig8.add_const_vss_make(*args, **kwargs)

class add_const_vii(object):
    """
    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_vii.

    Args:
        k : additive constant vector
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(std::vector< int,std::allocator< int > > k) -> add_const_vii_sptr

        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_vii.

        Args:
            k : additive constant vector
        """
        return _blocks_swig8.add_const_vii_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(add_const_vii self) -> std::vector< int,std::allocator< int > >

        Return additive constant vector.
        """
        return _blocks_swig8.add_const_vii_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_vii self, std::vector< int,std::allocator< int > > k)

        Set additive constant vector.
        """
        return _blocks_swig8.add_const_vii_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig8.delete_add_const_vii
    __del__ = lambda self : None;
add_const_vii_swigregister = _blocks_swig8.add_const_vii_swigregister
add_const_vii_swigregister(add_const_vii)

def add_const_vii_make(*args, **kwargs):
  """
    add_const_vii_make(std::vector< int,std::allocator< int > > k) -> add_const_vii_sptr

    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_vii.

    Args:
        k : additive constant vector
    """
  return _blocks_swig8.add_const_vii_make(*args, **kwargs)

class add_const_vcc(object):
    """
    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_vcc.

    Args:
        k : additive constant vector
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(pmt_vector_cfloat k) -> add_const_vcc_sptr

        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_vcc.

        Args:
            k : additive constant vector
        """
        return _blocks_swig8.add_const_vcc_make(*args, **kwargs)

    make = staticmethod(make)
    def k(self):
        """
        k(add_const_vcc self) -> pmt_vector_cfloat

        Return additive constant vector.
        """
        return _blocks_swig8.add_const_vcc_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_vcc self, pmt_vector_cfloat k)

        Set additive constant vector.
        """
        return _blocks_swig8.add_const_vcc_set_k(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig8.delete_add_const_vcc
    __del__ = lambda self : None;
add_const_vcc_swigregister = _blocks_swig8.add_const_vcc_swigregister
add_const_vcc_swigregister(add_const_vcc)

def add_const_vcc_make(*args, **kwargs):
  """
    add_const_vcc_make(pmt_vector_cfloat k) -> add_const_vcc_sptr

    output[m] = input[m] + constant vector for all M streams.

    Constructor Specific Documentation:

    Create an instance of add_const_vcc.

    Args:
        k : additive constant vector
    """
  return _blocks_swig8.add_const_vcc_make(*args, **kwargs)

class and_bb(object):
    """
    output = input[0] & input[1] & ... & input[M-1]

    bitwise boolean AND across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> and_bb_sptr

        output = input[0] & input[1] & ... & input[M-1]

        bitwise boolean AND across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig8.and_bb_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig8.delete_and_bb
    __del__ = lambda self : None;
and_bb_swigregister = _blocks_swig8.and_bb_swigregister
and_bb_swigregister(and_bb)

def and_bb_make(vlen=1):
  """
    and_bb_make(size_t vlen=1) -> and_bb_sptr

    output = input[0] & input[1] & ... & input[M-1]

    bitwise boolean AND across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig8.and_bb_make(vlen)

class and_ss(object):
    """
    output = input[0] & input[1] & ... & input[M-1]

    bitwise boolean AND across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> and_ss_sptr

        output = input[0] & input[1] & ... & input[M-1]

        bitwise boolean AND across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig8.and_ss_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig8.delete_and_ss
    __del__ = lambda self : None;
and_ss_swigregister = _blocks_swig8.and_ss_swigregister
and_ss_swigregister(and_ss)

def and_ss_make(vlen=1):
  """
    and_ss_make(size_t vlen=1) -> and_ss_sptr

    output = input[0] & input[1] & ... & input[M-1]

    bitwise boolean AND across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig8.and_ss_make(vlen)

class and_ii(object):
    """
    output = input[0] & input[1] & ... & input[M-1]

    bitwise boolean AND across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> and_ii_sptr

        output = input[0] & input[1] & ... & input[M-1]

        bitwise boolean AND across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig8.and_ii_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig8.delete_and_ii
    __del__ = lambda self : None;
and_ii_swigregister = _blocks_swig8.and_ii_swigregister
and_ii_swigregister(and_ii)

def and_ii_make(vlen=1):
  """
    and_ii_make(size_t vlen=1) -> and_ii_sptr

    output = input[0] & input[1] & ... & input[M-1]

    bitwise boolean AND across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig8.and_ii_make(vlen)

class abs_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::abs_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::abs_ff)> self) -> abs_ff_sptr
        __init__(boost::shared_ptr<(gr::blocks::abs_ff)> self, abs_ff p) -> abs_ff_sptr
        """
        this = _blocks_swig8.new_abs_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(abs_ff_sptr self) -> abs_ff"""
        return _blocks_swig8.abs_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig8.delete_abs_ff_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(abs_ff_sptr self, size_t vlen=1) -> abs_ff_sptr

        output[m] = abs(input[m]) for all M streams.

        absolute value of data stream (Strip sign)

        Constructor Specific Documentation:

        Create an instance of abs_ff.

        Args:
            vlen : 
        """
        return _blocks_swig8.abs_ff_sptr_make(self, vlen)

    def history(self):
        """history(abs_ff_sptr self) -> unsigned int"""
        return _blocks_swig8.abs_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(abs_ff_sptr self, int which, int delay)
        declare_sample_delay(abs_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig8.abs_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(abs_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.abs_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(abs_ff_sptr self) -> int"""
        return _blocks_swig8.abs_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(abs_ff_sptr self) -> double"""
        return _blocks_swig8.abs_ff_sptr_relative_rate(self)

    def start(self):
        """start(abs_ff_sptr self) -> bool"""
        return _blocks_swig8.abs_ff_sptr_start(self)

    def stop(self):
        """stop(abs_ff_sptr self) -> bool"""
        return _blocks_swig8.abs_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(abs_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.abs_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(abs_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.abs_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(abs_ff_sptr self) -> int"""
        return _blocks_swig8.abs_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(abs_ff_sptr self, int m)"""
        return _blocks_swig8.abs_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(abs_ff_sptr self)"""
        return _blocks_swig8.abs_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(abs_ff_sptr self) -> bool"""
        return _blocks_swig8.abs_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(abs_ff_sptr self, int m)"""
        return _blocks_swig8.abs_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(abs_ff_sptr self) -> int"""
        return _blocks_swig8.abs_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(abs_ff_sptr self, int i) -> long"""
        return _blocks_swig8.abs_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(abs_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(abs_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.abs_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(abs_ff_sptr self, int i) -> long"""
        return _blocks_swig8.abs_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(abs_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(abs_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.abs_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(abs_ff_sptr self) -> float"""
        return _blocks_swig8.abs_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(abs_ff_sptr self) -> float"""
        return _blocks_swig8.abs_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(abs_ff_sptr self) -> float"""
        return _blocks_swig8.abs_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(abs_ff_sptr self) -> float"""
        return _blocks_swig8.abs_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(abs_ff_sptr self) -> float"""
        return _blocks_swig8.abs_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(abs_ff_sptr self) -> float"""
        return _blocks_swig8.abs_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(abs_ff_sptr self, int which) -> float
        pc_input_buffers_full(abs_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(abs_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(abs_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(abs_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(abs_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(abs_ff_sptr self, int which) -> float
        pc_output_buffers_full(abs_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(abs_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(abs_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(abs_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(abs_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(abs_ff_sptr self) -> float"""
        return _blocks_swig8.abs_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(abs_ff_sptr self) -> float"""
        return _blocks_swig8.abs_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(abs_ff_sptr self) -> float"""
        return _blocks_swig8.abs_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(abs_ff_sptr self) -> float"""
        return _blocks_swig8.abs_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(abs_ff_sptr self) -> float"""
        return _blocks_swig8.abs_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(abs_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.abs_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(abs_ff_sptr self)"""
        return _blocks_swig8.abs_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(abs_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.abs_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(abs_ff_sptr self) -> int"""
        return _blocks_swig8.abs_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(abs_ff_sptr self) -> int"""
        return _blocks_swig8.abs_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(abs_ff_sptr self, int priority) -> int"""
        return _blocks_swig8.abs_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(abs_ff_sptr self) -> std::string"""
        return _blocks_swig8.abs_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(abs_ff_sptr self) -> std::string"""
        return _blocks_swig8.abs_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(abs_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.abs_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(abs_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.abs_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(abs_ff_sptr self) -> long"""
        return _blocks_swig8.abs_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(abs_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.abs_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(abs_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.abs_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(abs_ff_sptr self) -> std::string"""
        return _blocks_swig8.abs_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(abs_ff_sptr self, std::string name)"""
        return _blocks_swig8.abs_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(abs_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig8.abs_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(abs_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.abs_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(abs_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.abs_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(abs_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig8.abs_ff_sptr_message_subscribers(self, *args, **kwargs)

abs_ff_sptr_swigregister = _blocks_swig8.abs_ff_sptr_swigregister
abs_ff_sptr_swigregister(abs_ff_sptr)

abs_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
abs_ff = abs_ff.make;

class abs_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::abs_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::abs_ss)> self) -> abs_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::abs_ss)> self, abs_ss p) -> abs_ss_sptr
        """
        this = _blocks_swig8.new_abs_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(abs_ss_sptr self) -> abs_ss"""
        return _blocks_swig8.abs_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig8.delete_abs_ss_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(abs_ss_sptr self, size_t vlen=1) -> abs_ss_sptr

        output[m] = abs(input[m]) for all M streams.

        absolute value of data stream (Strip sign)

        Constructor Specific Documentation:

        Create an instance of abs_ss.

        Args:
            vlen : 
        """
        return _blocks_swig8.abs_ss_sptr_make(self, vlen)

    def history(self):
        """history(abs_ss_sptr self) -> unsigned int"""
        return _blocks_swig8.abs_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(abs_ss_sptr self, int which, int delay)
        declare_sample_delay(abs_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig8.abs_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(abs_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.abs_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(abs_ss_sptr self) -> int"""
        return _blocks_swig8.abs_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(abs_ss_sptr self) -> double"""
        return _blocks_swig8.abs_ss_sptr_relative_rate(self)

    def start(self):
        """start(abs_ss_sptr self) -> bool"""
        return _blocks_swig8.abs_ss_sptr_start(self)

    def stop(self):
        """stop(abs_ss_sptr self) -> bool"""
        return _blocks_swig8.abs_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(abs_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.abs_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(abs_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.abs_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(abs_ss_sptr self) -> int"""
        return _blocks_swig8.abs_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(abs_ss_sptr self, int m)"""
        return _blocks_swig8.abs_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(abs_ss_sptr self)"""
        return _blocks_swig8.abs_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(abs_ss_sptr self) -> bool"""
        return _blocks_swig8.abs_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(abs_ss_sptr self, int m)"""
        return _blocks_swig8.abs_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(abs_ss_sptr self) -> int"""
        return _blocks_swig8.abs_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(abs_ss_sptr self, int i) -> long"""
        return _blocks_swig8.abs_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(abs_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(abs_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.abs_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(abs_ss_sptr self, int i) -> long"""
        return _blocks_swig8.abs_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(abs_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(abs_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.abs_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(abs_ss_sptr self) -> float"""
        return _blocks_swig8.abs_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(abs_ss_sptr self) -> float"""
        return _blocks_swig8.abs_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(abs_ss_sptr self) -> float"""
        return _blocks_swig8.abs_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(abs_ss_sptr self) -> float"""
        return _blocks_swig8.abs_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(abs_ss_sptr self) -> float"""
        return _blocks_swig8.abs_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(abs_ss_sptr self) -> float"""
        return _blocks_swig8.abs_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(abs_ss_sptr self, int which) -> float
        pc_input_buffers_full(abs_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(abs_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(abs_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(abs_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(abs_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(abs_ss_sptr self, int which) -> float
        pc_output_buffers_full(abs_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(abs_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(abs_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(abs_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(abs_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(abs_ss_sptr self) -> float"""
        return _blocks_swig8.abs_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(abs_ss_sptr self) -> float"""
        return _blocks_swig8.abs_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(abs_ss_sptr self) -> float"""
        return _blocks_swig8.abs_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(abs_ss_sptr self) -> float"""
        return _blocks_swig8.abs_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(abs_ss_sptr self) -> float"""
        return _blocks_swig8.abs_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(abs_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.abs_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(abs_ss_sptr self)"""
        return _blocks_swig8.abs_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(abs_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.abs_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(abs_ss_sptr self) -> int"""
        return _blocks_swig8.abs_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(abs_ss_sptr self) -> int"""
        return _blocks_swig8.abs_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(abs_ss_sptr self, int priority) -> int"""
        return _blocks_swig8.abs_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(abs_ss_sptr self) -> std::string"""
        return _blocks_swig8.abs_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(abs_ss_sptr self) -> std::string"""
        return _blocks_swig8.abs_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(abs_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.abs_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(abs_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.abs_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(abs_ss_sptr self) -> long"""
        return _blocks_swig8.abs_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(abs_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.abs_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(abs_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.abs_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(abs_ss_sptr self) -> std::string"""
        return _blocks_swig8.abs_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(abs_ss_sptr self, std::string name)"""
        return _blocks_swig8.abs_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(abs_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig8.abs_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(abs_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.abs_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(abs_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.abs_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(abs_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig8.abs_ss_sptr_message_subscribers(self, *args, **kwargs)

abs_ss_sptr_swigregister = _blocks_swig8.abs_ss_sptr_swigregister
abs_ss_sptr_swigregister(abs_ss_sptr)

abs_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
abs_ss = abs_ss.make;

class abs_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::abs_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::abs_ii)> self) -> abs_ii_sptr
        __init__(boost::shared_ptr<(gr::blocks::abs_ii)> self, abs_ii p) -> abs_ii_sptr
        """
        this = _blocks_swig8.new_abs_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(abs_ii_sptr self) -> abs_ii"""
        return _blocks_swig8.abs_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig8.delete_abs_ii_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(abs_ii_sptr self, size_t vlen=1) -> abs_ii_sptr

        output[m] = abs(input[m]) for all M streams.

        absolute value of data stream (Strip sign)

        Constructor Specific Documentation:

        Create an instance of abs_ii.

        Args:
            vlen : 
        """
        return _blocks_swig8.abs_ii_sptr_make(self, vlen)

    def history(self):
        """history(abs_ii_sptr self) -> unsigned int"""
        return _blocks_swig8.abs_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(abs_ii_sptr self, int which, int delay)
        declare_sample_delay(abs_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig8.abs_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(abs_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.abs_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(abs_ii_sptr self) -> int"""
        return _blocks_swig8.abs_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(abs_ii_sptr self) -> double"""
        return _blocks_swig8.abs_ii_sptr_relative_rate(self)

    def start(self):
        """start(abs_ii_sptr self) -> bool"""
        return _blocks_swig8.abs_ii_sptr_start(self)

    def stop(self):
        """stop(abs_ii_sptr self) -> bool"""
        return _blocks_swig8.abs_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(abs_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.abs_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(abs_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.abs_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(abs_ii_sptr self) -> int"""
        return _blocks_swig8.abs_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(abs_ii_sptr self, int m)"""
        return _blocks_swig8.abs_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(abs_ii_sptr self)"""
        return _blocks_swig8.abs_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(abs_ii_sptr self) -> bool"""
        return _blocks_swig8.abs_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(abs_ii_sptr self, int m)"""
        return _blocks_swig8.abs_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(abs_ii_sptr self) -> int"""
        return _blocks_swig8.abs_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(abs_ii_sptr self, int i) -> long"""
        return _blocks_swig8.abs_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(abs_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(abs_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.abs_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(abs_ii_sptr self, int i) -> long"""
        return _blocks_swig8.abs_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(abs_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(abs_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.abs_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(abs_ii_sptr self) -> float"""
        return _blocks_swig8.abs_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(abs_ii_sptr self) -> float"""
        return _blocks_swig8.abs_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(abs_ii_sptr self) -> float"""
        return _blocks_swig8.abs_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(abs_ii_sptr self) -> float"""
        return _blocks_swig8.abs_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(abs_ii_sptr self) -> float"""
        return _blocks_swig8.abs_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(abs_ii_sptr self) -> float"""
        return _blocks_swig8.abs_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(abs_ii_sptr self, int which) -> float
        pc_input_buffers_full(abs_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(abs_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(abs_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(abs_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(abs_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(abs_ii_sptr self, int which) -> float
        pc_output_buffers_full(abs_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(abs_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(abs_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(abs_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(abs_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.abs_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(abs_ii_sptr self) -> float"""
        return _blocks_swig8.abs_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(abs_ii_sptr self) -> float"""
        return _blocks_swig8.abs_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(abs_ii_sptr self) -> float"""
        return _blocks_swig8.abs_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(abs_ii_sptr self) -> float"""
        return _blocks_swig8.abs_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(abs_ii_sptr self) -> float"""
        return _blocks_swig8.abs_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(abs_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.abs_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(abs_ii_sptr self)"""
        return _blocks_swig8.abs_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(abs_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.abs_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(abs_ii_sptr self) -> int"""
        return _blocks_swig8.abs_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(abs_ii_sptr self) -> int"""
        return _blocks_swig8.abs_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(abs_ii_sptr self, int priority) -> int"""
        return _blocks_swig8.abs_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(abs_ii_sptr self) -> std::string"""
        return _blocks_swig8.abs_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(abs_ii_sptr self) -> std::string"""
        return _blocks_swig8.abs_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(abs_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.abs_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(abs_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.abs_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(abs_ii_sptr self) -> long"""
        return _blocks_swig8.abs_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(abs_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.abs_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(abs_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.abs_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(abs_ii_sptr self) -> std::string"""
        return _blocks_swig8.abs_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(abs_ii_sptr self, std::string name)"""
        return _blocks_swig8.abs_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(abs_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig8.abs_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(abs_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.abs_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(abs_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.abs_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(abs_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig8.abs_ii_sptr_message_subscribers(self, *args, **kwargs)

abs_ii_sptr_swigregister = _blocks_swig8.abs_ii_sptr_swigregister
abs_ii_sptr_swigregister(abs_ii_sptr)

abs_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
abs_ii = abs_ii.make;

class add_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::add_ff)> self) -> add_ff_sptr
        __init__(boost::shared_ptr<(gr::blocks::add_ff)> self, add_ff p) -> add_ff_sptr
        """
        this = _blocks_swig8.new_add_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(add_ff_sptr self) -> add_ff"""
        return _blocks_swig8.add_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig8.delete_add_ff_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(add_ff_sptr self, size_t vlen=1) -> add_ff_sptr

        output = sum (input_0, input_1, ...)

        Add across all input streams.

        Constructor Specific Documentation:

        Add streams of float values.

        Args:
            vlen : Vector length
        """
        return _blocks_swig8.add_ff_sptr_make(self, vlen)

    def history(self):
        """history(add_ff_sptr self) -> unsigned int"""
        return _blocks_swig8.add_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_ff_sptr self, int which, int delay)
        declare_sample_delay(add_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig8.add_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(add_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.add_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(add_ff_sptr self) -> int"""
        return _blocks_swig8.add_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(add_ff_sptr self) -> double"""
        return _blocks_swig8.add_ff_sptr_relative_rate(self)

    def start(self):
        """start(add_ff_sptr self) -> bool"""
        return _blocks_swig8.add_ff_sptr_start(self)

    def stop(self):
        """stop(add_ff_sptr self) -> bool"""
        return _blocks_swig8.add_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(add_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.add_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(add_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.add_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(add_ff_sptr self) -> int"""
        return _blocks_swig8.add_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(add_ff_sptr self, int m)"""
        return _blocks_swig8.add_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_ff_sptr self)"""
        return _blocks_swig8.add_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_ff_sptr self) -> bool"""
        return _blocks_swig8.add_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(add_ff_sptr self, int m)"""
        return _blocks_swig8.add_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(add_ff_sptr self) -> int"""
        return _blocks_swig8.add_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(add_ff_sptr self, int i) -> long"""
        return _blocks_swig8.add_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(add_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.add_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(add_ff_sptr self, int i) -> long"""
        return _blocks_swig8.add_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(add_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.add_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(add_ff_sptr self) -> float"""
        return _blocks_swig8.add_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_ff_sptr self) -> float"""
        return _blocks_swig8.add_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_ff_sptr self) -> float"""
        return _blocks_swig8.add_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(add_ff_sptr self) -> float"""
        return _blocks_swig8.add_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_ff_sptr self) -> float"""
        return _blocks_swig8.add_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(add_ff_sptr self) -> float"""
        return _blocks_swig8.add_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_ff_sptr self, int which) -> float
        pc_input_buffers_full(add_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(add_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_ff_sptr self, int which) -> float
        pc_output_buffers_full(add_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(add_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(add_ff_sptr self) -> float"""
        return _blocks_swig8.add_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(add_ff_sptr self) -> float"""
        return _blocks_swig8.add_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(add_ff_sptr self) -> float"""
        return _blocks_swig8.add_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(add_ff_sptr self) -> float"""
        return _blocks_swig8.add_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(add_ff_sptr self) -> float"""
        return _blocks_swig8.add_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(add_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.add_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(add_ff_sptr self)"""
        return _blocks_swig8.add_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(add_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.add_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(add_ff_sptr self) -> int"""
        return _blocks_swig8.add_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(add_ff_sptr self) -> int"""
        return _blocks_swig8.add_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(add_ff_sptr self, int priority) -> int"""
        return _blocks_swig8.add_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(add_ff_sptr self) -> std::string"""
        return _blocks_swig8.add_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(add_ff_sptr self) -> std::string"""
        return _blocks_swig8.add_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(add_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(add_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(add_ff_sptr self) -> long"""
        return _blocks_swig8.add_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(add_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.add_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(add_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.add_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(add_ff_sptr self) -> std::string"""
        return _blocks_swig8.add_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(add_ff_sptr self, std::string name)"""
        return _blocks_swig8.add_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(add_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig8.add_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(add_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.add_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(add_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.add_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(add_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig8.add_ff_sptr_message_subscribers(self, *args, **kwargs)

add_ff_sptr_swigregister = _blocks_swig8.add_ff_sptr_swigregister
add_ff_sptr_swigregister(add_ff_sptr)

add_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_ff = add_ff.make;

class add_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::add_ss)> self) -> add_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::add_ss)> self, add_ss p) -> add_ss_sptr
        """
        this = _blocks_swig8.new_add_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(add_ss_sptr self) -> add_ss"""
        return _blocks_swig8.add_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig8.delete_add_ss_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(add_ss_sptr self, size_t vlen=1) -> add_ss_sptr

        output = sum(input[0], input[1], ..., input[M-1])

        Add samples across all input streams. For all  samples on all  input streams :

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig8.add_ss_sptr_make(self, vlen)

    def history(self):
        """history(add_ss_sptr self) -> unsigned int"""
        return _blocks_swig8.add_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_ss_sptr self, int which, int delay)
        declare_sample_delay(add_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig8.add_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(add_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.add_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(add_ss_sptr self) -> int"""
        return _blocks_swig8.add_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(add_ss_sptr self) -> double"""
        return _blocks_swig8.add_ss_sptr_relative_rate(self)

    def start(self):
        """start(add_ss_sptr self) -> bool"""
        return _blocks_swig8.add_ss_sptr_start(self)

    def stop(self):
        """stop(add_ss_sptr self) -> bool"""
        return _blocks_swig8.add_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(add_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.add_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(add_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.add_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(add_ss_sptr self) -> int"""
        return _blocks_swig8.add_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(add_ss_sptr self, int m)"""
        return _blocks_swig8.add_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_ss_sptr self)"""
        return _blocks_swig8.add_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_ss_sptr self) -> bool"""
        return _blocks_swig8.add_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(add_ss_sptr self, int m)"""
        return _blocks_swig8.add_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(add_ss_sptr self) -> int"""
        return _blocks_swig8.add_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(add_ss_sptr self, int i) -> long"""
        return _blocks_swig8.add_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(add_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.add_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(add_ss_sptr self, int i) -> long"""
        return _blocks_swig8.add_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(add_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.add_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(add_ss_sptr self) -> float"""
        return _blocks_swig8.add_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_ss_sptr self) -> float"""
        return _blocks_swig8.add_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_ss_sptr self) -> float"""
        return _blocks_swig8.add_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(add_ss_sptr self) -> float"""
        return _blocks_swig8.add_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_ss_sptr self) -> float"""
        return _blocks_swig8.add_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(add_ss_sptr self) -> float"""
        return _blocks_swig8.add_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_ss_sptr self, int which) -> float
        pc_input_buffers_full(add_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(add_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_ss_sptr self, int which) -> float
        pc_output_buffers_full(add_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(add_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(add_ss_sptr self) -> float"""
        return _blocks_swig8.add_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(add_ss_sptr self) -> float"""
        return _blocks_swig8.add_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(add_ss_sptr self) -> float"""
        return _blocks_swig8.add_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(add_ss_sptr self) -> float"""
        return _blocks_swig8.add_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(add_ss_sptr self) -> float"""
        return _blocks_swig8.add_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(add_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.add_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(add_ss_sptr self)"""
        return _blocks_swig8.add_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(add_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.add_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(add_ss_sptr self) -> int"""
        return _blocks_swig8.add_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(add_ss_sptr self) -> int"""
        return _blocks_swig8.add_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(add_ss_sptr self, int priority) -> int"""
        return _blocks_swig8.add_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(add_ss_sptr self) -> std::string"""
        return _blocks_swig8.add_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(add_ss_sptr self) -> std::string"""
        return _blocks_swig8.add_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(add_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(add_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(add_ss_sptr self) -> long"""
        return _blocks_swig8.add_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(add_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.add_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(add_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.add_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(add_ss_sptr self) -> std::string"""
        return _blocks_swig8.add_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(add_ss_sptr self, std::string name)"""
        return _blocks_swig8.add_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(add_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig8.add_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(add_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.add_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(add_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.add_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(add_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig8.add_ss_sptr_message_subscribers(self, *args, **kwargs)

add_ss_sptr_swigregister = _blocks_swig8.add_ss_sptr_swigregister
add_ss_sptr_swigregister(add_ss_sptr)

add_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_ss = add_ss.make;

class add_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::add_ii)> self) -> add_ii_sptr
        __init__(boost::shared_ptr<(gr::blocks::add_ii)> self, add_ii p) -> add_ii_sptr
        """
        this = _blocks_swig8.new_add_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(add_ii_sptr self) -> add_ii"""
        return _blocks_swig8.add_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig8.delete_add_ii_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(add_ii_sptr self, size_t vlen=1) -> add_ii_sptr

        output = sum(input[0], input[1], ..., input[M-1])

        Add samples across all input streams. For all  samples on all  input streams :

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig8.add_ii_sptr_make(self, vlen)

    def history(self):
        """history(add_ii_sptr self) -> unsigned int"""
        return _blocks_swig8.add_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_ii_sptr self, int which, int delay)
        declare_sample_delay(add_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig8.add_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(add_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.add_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(add_ii_sptr self) -> int"""
        return _blocks_swig8.add_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(add_ii_sptr self) -> double"""
        return _blocks_swig8.add_ii_sptr_relative_rate(self)

    def start(self):
        """start(add_ii_sptr self) -> bool"""
        return _blocks_swig8.add_ii_sptr_start(self)

    def stop(self):
        """stop(add_ii_sptr self) -> bool"""
        return _blocks_swig8.add_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(add_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.add_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(add_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.add_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(add_ii_sptr self) -> int"""
        return _blocks_swig8.add_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(add_ii_sptr self, int m)"""
        return _blocks_swig8.add_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_ii_sptr self)"""
        return _blocks_swig8.add_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_ii_sptr self) -> bool"""
        return _blocks_swig8.add_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(add_ii_sptr self, int m)"""
        return _blocks_swig8.add_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(add_ii_sptr self) -> int"""
        return _blocks_swig8.add_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(add_ii_sptr self, int i) -> long"""
        return _blocks_swig8.add_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(add_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.add_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(add_ii_sptr self, int i) -> long"""
        return _blocks_swig8.add_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(add_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.add_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(add_ii_sptr self) -> float"""
        return _blocks_swig8.add_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_ii_sptr self) -> float"""
        return _blocks_swig8.add_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_ii_sptr self) -> float"""
        return _blocks_swig8.add_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(add_ii_sptr self) -> float"""
        return _blocks_swig8.add_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_ii_sptr self) -> float"""
        return _blocks_swig8.add_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(add_ii_sptr self) -> float"""
        return _blocks_swig8.add_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_ii_sptr self, int which) -> float
        pc_input_buffers_full(add_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(add_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_ii_sptr self, int which) -> float
        pc_output_buffers_full(add_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(add_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(add_ii_sptr self) -> float"""
        return _blocks_swig8.add_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(add_ii_sptr self) -> float"""
        return _blocks_swig8.add_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(add_ii_sptr self) -> float"""
        return _blocks_swig8.add_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(add_ii_sptr self) -> float"""
        return _blocks_swig8.add_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(add_ii_sptr self) -> float"""
        return _blocks_swig8.add_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(add_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.add_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(add_ii_sptr self)"""
        return _blocks_swig8.add_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(add_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.add_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(add_ii_sptr self) -> int"""
        return _blocks_swig8.add_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(add_ii_sptr self) -> int"""
        return _blocks_swig8.add_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(add_ii_sptr self, int priority) -> int"""
        return _blocks_swig8.add_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(add_ii_sptr self) -> std::string"""
        return _blocks_swig8.add_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(add_ii_sptr self) -> std::string"""
        return _blocks_swig8.add_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(add_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(add_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(add_ii_sptr self) -> long"""
        return _blocks_swig8.add_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(add_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.add_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(add_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.add_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(add_ii_sptr self) -> std::string"""
        return _blocks_swig8.add_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(add_ii_sptr self, std::string name)"""
        return _blocks_swig8.add_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(add_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig8.add_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(add_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.add_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(add_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.add_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(add_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig8.add_ii_sptr_message_subscribers(self, *args, **kwargs)

add_ii_sptr_swigregister = _blocks_swig8.add_ii_sptr_swigregister
add_ii_sptr_swigregister(add_ii_sptr)

add_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_ii = add_ii.make;

class add_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::add_cc)> self) -> add_cc_sptr
        __init__(boost::shared_ptr<(gr::blocks::add_cc)> self, add_cc p) -> add_cc_sptr
        """
        this = _blocks_swig8.new_add_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(add_cc_sptr self) -> add_cc"""
        return _blocks_swig8.add_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig8.delete_add_cc_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(add_cc_sptr self, size_t vlen=1) -> add_cc_sptr

        output = sum(input[0], input[1], ..., input[M-1])

        Add samples across all input streams. For all  samples on all  input streams :

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig8.add_cc_sptr_make(self, vlen)

    def history(self):
        """history(add_cc_sptr self) -> unsigned int"""
        return _blocks_swig8.add_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_cc_sptr self, int which, int delay)
        declare_sample_delay(add_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig8.add_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(add_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.add_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(add_cc_sptr self) -> int"""
        return _blocks_swig8.add_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(add_cc_sptr self) -> double"""
        return _blocks_swig8.add_cc_sptr_relative_rate(self)

    def start(self):
        """start(add_cc_sptr self) -> bool"""
        return _blocks_swig8.add_cc_sptr_start(self)

    def stop(self):
        """stop(add_cc_sptr self) -> bool"""
        return _blocks_swig8.add_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(add_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.add_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(add_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.add_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(add_cc_sptr self) -> int"""
        return _blocks_swig8.add_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(add_cc_sptr self, int m)"""
        return _blocks_swig8.add_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_cc_sptr self)"""
        return _blocks_swig8.add_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_cc_sptr self) -> bool"""
        return _blocks_swig8.add_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(add_cc_sptr self, int m)"""
        return _blocks_swig8.add_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(add_cc_sptr self) -> int"""
        return _blocks_swig8.add_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(add_cc_sptr self, int i) -> long"""
        return _blocks_swig8.add_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(add_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.add_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(add_cc_sptr self, int i) -> long"""
        return _blocks_swig8.add_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(add_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.add_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(add_cc_sptr self) -> float"""
        return _blocks_swig8.add_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_cc_sptr self) -> float"""
        return _blocks_swig8.add_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_cc_sptr self) -> float"""
        return _blocks_swig8.add_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(add_cc_sptr self) -> float"""
        return _blocks_swig8.add_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_cc_sptr self) -> float"""
        return _blocks_swig8.add_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(add_cc_sptr self) -> float"""
        return _blocks_swig8.add_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_cc_sptr self, int which) -> float
        pc_input_buffers_full(add_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(add_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_cc_sptr self, int which) -> float
        pc_output_buffers_full(add_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(add_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(add_cc_sptr self) -> float"""
        return _blocks_swig8.add_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(add_cc_sptr self) -> float"""
        return _blocks_swig8.add_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(add_cc_sptr self) -> float"""
        return _blocks_swig8.add_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(add_cc_sptr self) -> float"""
        return _blocks_swig8.add_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(add_cc_sptr self) -> float"""
        return _blocks_swig8.add_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(add_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.add_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(add_cc_sptr self)"""
        return _blocks_swig8.add_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(add_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.add_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(add_cc_sptr self) -> int"""
        return _blocks_swig8.add_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(add_cc_sptr self) -> int"""
        return _blocks_swig8.add_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(add_cc_sptr self, int priority) -> int"""
        return _blocks_swig8.add_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(add_cc_sptr self) -> std::string"""
        return _blocks_swig8.add_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(add_cc_sptr self) -> std::string"""
        return _blocks_swig8.add_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(add_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(add_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(add_cc_sptr self) -> long"""
        return _blocks_swig8.add_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(add_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.add_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(add_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.add_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(add_cc_sptr self) -> std::string"""
        return _blocks_swig8.add_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(add_cc_sptr self, std::string name)"""
        return _blocks_swig8.add_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(add_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig8.add_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(add_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.add_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(add_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.add_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(add_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig8.add_cc_sptr_message_subscribers(self, *args, **kwargs)

add_cc_sptr_swigregister = _blocks_swig8.add_cc_sptr_swigregister
add_cc_sptr_swigregister(add_cc_sptr)

add_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_cc = add_cc.make;

class add_const_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_const_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::add_const_bb)> self) -> add_const_bb_sptr
        __init__(boost::shared_ptr<(gr::blocks::add_const_bb)> self, add_const_bb p) -> add_const_bb_sptr
        """
        this = _blocks_swig8.new_add_const_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(add_const_bb_sptr self) -> add_const_bb"""
        return _blocks_swig8.add_const_bb_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig8.delete_add_const_bb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(add_const_bb_sptr self, unsigned char k) -> add_const_bb_sptr

        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_bb.

        Args:
            k : additive constant
        """
        return _blocks_swig8.add_const_bb_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(add_const_bb_sptr self) -> unsigned char

        Return additive constant.
        """
        return _blocks_swig8.add_const_bb_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_bb_sptr self, unsigned char k)

        Set additive constant.
        """
        return _blocks_swig8.add_const_bb_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(add_const_bb_sptr self) -> unsigned int"""
        return _blocks_swig8.add_const_bb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_const_bb_sptr self, int which, int delay)
        declare_sample_delay(add_const_bb_sptr self, unsigned int delay)
        """
        return _blocks_swig8.add_const_bb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(add_const_bb_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.add_const_bb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(add_const_bb_sptr self) -> int"""
        return _blocks_swig8.add_const_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(add_const_bb_sptr self) -> double"""
        return _blocks_swig8.add_const_bb_sptr_relative_rate(self)

    def start(self):
        """start(add_const_bb_sptr self) -> bool"""
        return _blocks_swig8.add_const_bb_sptr_start(self)

    def stop(self):
        """stop(add_const_bb_sptr self) -> bool"""
        return _blocks_swig8.add_const_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(add_const_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.add_const_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(add_const_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.add_const_bb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(add_const_bb_sptr self) -> int"""
        return _blocks_swig8.add_const_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(add_const_bb_sptr self, int m)"""
        return _blocks_swig8.add_const_bb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_const_bb_sptr self)"""
        return _blocks_swig8.add_const_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_const_bb_sptr self) -> bool"""
        return _blocks_swig8.add_const_bb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(add_const_bb_sptr self, int m)"""
        return _blocks_swig8.add_const_bb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(add_const_bb_sptr self) -> int"""
        return _blocks_swig8.add_const_bb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(add_const_bb_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_bb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_const_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_bb_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.add_const_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(add_const_bb_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_bb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_const_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_bb_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.add_const_bb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(add_const_bb_sptr self) -> float"""
        return _blocks_swig8.add_const_bb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_const_bb_sptr self) -> float"""
        return _blocks_swig8.add_const_bb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_const_bb_sptr self) -> float"""
        return _blocks_swig8.add_const_bb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(add_const_bb_sptr self) -> float"""
        return _blocks_swig8.add_const_bb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_const_bb_sptr self) -> float"""
        return _blocks_swig8.add_const_bb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(add_const_bb_sptr self) -> float"""
        return _blocks_swig8.add_const_bb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_const_bb_sptr self, int which) -> float
        pc_input_buffers_full(add_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_bb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_const_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_bb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_const_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_bb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_const_bb_sptr self, int which) -> float
        pc_output_buffers_full(add_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_bb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_const_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_bb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_const_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_bb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(add_const_bb_sptr self) -> float"""
        return _blocks_swig8.add_const_bb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(add_const_bb_sptr self) -> float"""
        return _blocks_swig8.add_const_bb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(add_const_bb_sptr self) -> float"""
        return _blocks_swig8.add_const_bb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(add_const_bb_sptr self) -> float"""
        return _blocks_swig8.add_const_bb_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(add_const_bb_sptr self) -> float"""
        return _blocks_swig8.add_const_bb_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(add_const_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.add_const_bb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(add_const_bb_sptr self)"""
        return _blocks_swig8.add_const_bb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(add_const_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.add_const_bb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(add_const_bb_sptr self) -> int"""
        return _blocks_swig8.add_const_bb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(add_const_bb_sptr self) -> int"""
        return _blocks_swig8.add_const_bb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(add_const_bb_sptr self, int priority) -> int"""
        return _blocks_swig8.add_const_bb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(add_const_bb_sptr self) -> std::string"""
        return _blocks_swig8.add_const_bb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(add_const_bb_sptr self) -> std::string"""
        return _blocks_swig8.add_const_bb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(add_const_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(add_const_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(add_const_bb_sptr self) -> long"""
        return _blocks_swig8.add_const_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(add_const_bb_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.add_const_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(add_const_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.add_const_bb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(add_const_bb_sptr self) -> std::string"""
        return _blocks_swig8.add_const_bb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(add_const_bb_sptr self, std::string name)"""
        return _blocks_swig8.add_const_bb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(add_const_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig8.add_const_bb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(add_const_bb_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.add_const_bb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(add_const_bb_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.add_const_bb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(add_const_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig8.add_const_bb_sptr_message_subscribers(self, *args, **kwargs)

add_const_bb_sptr_swigregister = _blocks_swig8.add_const_bb_sptr_swigregister
add_const_bb_sptr_swigregister(add_const_bb_sptr)

add_const_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_bb = add_const_bb.make;

class add_const_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_const_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::add_const_ff)> self) -> add_const_ff_sptr
        __init__(boost::shared_ptr<(gr::blocks::add_const_ff)> self, add_const_ff p) -> add_const_ff_sptr
        """
        this = _blocks_swig8.new_add_const_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(add_const_ff_sptr self) -> add_const_ff"""
        return _blocks_swig8.add_const_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig8.delete_add_const_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(add_const_ff_sptr self, float k) -> add_const_ff_sptr

        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_ff.

        Args:
            k : additive constant
        """
        return _blocks_swig8.add_const_ff_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(add_const_ff_sptr self) -> float

        Return additive constant.
        """
        return _blocks_swig8.add_const_ff_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_ff_sptr self, float k)

        Set additive constant.
        """
        return _blocks_swig8.add_const_ff_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(add_const_ff_sptr self) -> unsigned int"""
        return _blocks_swig8.add_const_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_const_ff_sptr self, int which, int delay)
        declare_sample_delay(add_const_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig8.add_const_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(add_const_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.add_const_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(add_const_ff_sptr self) -> int"""
        return _blocks_swig8.add_const_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(add_const_ff_sptr self) -> double"""
        return _blocks_swig8.add_const_ff_sptr_relative_rate(self)

    def start(self):
        """start(add_const_ff_sptr self) -> bool"""
        return _blocks_swig8.add_const_ff_sptr_start(self)

    def stop(self):
        """stop(add_const_ff_sptr self) -> bool"""
        return _blocks_swig8.add_const_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(add_const_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.add_const_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(add_const_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.add_const_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(add_const_ff_sptr self) -> int"""
        return _blocks_swig8.add_const_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(add_const_ff_sptr self, int m)"""
        return _blocks_swig8.add_const_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_const_ff_sptr self)"""
        return _blocks_swig8.add_const_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_const_ff_sptr self) -> bool"""
        return _blocks_swig8.add_const_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(add_const_ff_sptr self, int m)"""
        return _blocks_swig8.add_const_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(add_const_ff_sptr self) -> int"""
        return _blocks_swig8.add_const_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(add_const_ff_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_const_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.add_const_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(add_const_ff_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_const_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.add_const_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(add_const_ff_sptr self) -> float"""
        return _blocks_swig8.add_const_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_const_ff_sptr self) -> float"""
        return _blocks_swig8.add_const_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_const_ff_sptr self) -> float"""
        return _blocks_swig8.add_const_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(add_const_ff_sptr self) -> float"""
        return _blocks_swig8.add_const_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_const_ff_sptr self) -> float"""
        return _blocks_swig8.add_const_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(add_const_ff_sptr self) -> float"""
        return _blocks_swig8.add_const_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_const_ff_sptr self, int which) -> float
        pc_input_buffers_full(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_const_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_const_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_const_ff_sptr self, int which) -> float
        pc_output_buffers_full(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_const_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_const_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(add_const_ff_sptr self) -> float"""
        return _blocks_swig8.add_const_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(add_const_ff_sptr self) -> float"""
        return _blocks_swig8.add_const_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(add_const_ff_sptr self) -> float"""
        return _blocks_swig8.add_const_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(add_const_ff_sptr self) -> float"""
        return _blocks_swig8.add_const_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(add_const_ff_sptr self) -> float"""
        return _blocks_swig8.add_const_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(add_const_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.add_const_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(add_const_ff_sptr self)"""
        return _blocks_swig8.add_const_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(add_const_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.add_const_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(add_const_ff_sptr self) -> int"""
        return _blocks_swig8.add_const_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(add_const_ff_sptr self) -> int"""
        return _blocks_swig8.add_const_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(add_const_ff_sptr self, int priority) -> int"""
        return _blocks_swig8.add_const_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(add_const_ff_sptr self) -> std::string"""
        return _blocks_swig8.add_const_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(add_const_ff_sptr self) -> std::string"""
        return _blocks_swig8.add_const_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(add_const_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(add_const_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(add_const_ff_sptr self) -> long"""
        return _blocks_swig8.add_const_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(add_const_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.add_const_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(add_const_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.add_const_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(add_const_ff_sptr self) -> std::string"""
        return _blocks_swig8.add_const_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(add_const_ff_sptr self, std::string name)"""
        return _blocks_swig8.add_const_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(add_const_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig8.add_const_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(add_const_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.add_const_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(add_const_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.add_const_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(add_const_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig8.add_const_ff_sptr_message_subscribers(self, *args, **kwargs)

add_const_ff_sptr_swigregister = _blocks_swig8.add_const_ff_sptr_swigregister
add_const_ff_sptr_swigregister(add_const_ff_sptr)

add_const_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_ff = add_const_ff.make;

class add_const_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_const_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::add_const_ss)> self) -> add_const_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::add_const_ss)> self, add_const_ss p) -> add_const_ss_sptr
        """
        this = _blocks_swig8.new_add_const_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(add_const_ss_sptr self) -> add_const_ss"""
        return _blocks_swig8.add_const_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig8.delete_add_const_ss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(add_const_ss_sptr self, short k) -> add_const_ss_sptr

        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_ss.

        Args:
            k : additive constant
        """
        return _blocks_swig8.add_const_ss_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(add_const_ss_sptr self) -> short

        Return additive constant.
        """
        return _blocks_swig8.add_const_ss_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_ss_sptr self, short k)

        Set additive constant.
        """
        return _blocks_swig8.add_const_ss_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(add_const_ss_sptr self) -> unsigned int"""
        return _blocks_swig8.add_const_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_const_ss_sptr self, int which, int delay)
        declare_sample_delay(add_const_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig8.add_const_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(add_const_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.add_const_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(add_const_ss_sptr self) -> int"""
        return _blocks_swig8.add_const_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(add_const_ss_sptr self) -> double"""
        return _blocks_swig8.add_const_ss_sptr_relative_rate(self)

    def start(self):
        """start(add_const_ss_sptr self) -> bool"""
        return _blocks_swig8.add_const_ss_sptr_start(self)

    def stop(self):
        """stop(add_const_ss_sptr self) -> bool"""
        return _blocks_swig8.add_const_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(add_const_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.add_const_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(add_const_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.add_const_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(add_const_ss_sptr self) -> int"""
        return _blocks_swig8.add_const_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(add_const_ss_sptr self, int m)"""
        return _blocks_swig8.add_const_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_const_ss_sptr self)"""
        return _blocks_swig8.add_const_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_const_ss_sptr self) -> bool"""
        return _blocks_swig8.add_const_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(add_const_ss_sptr self, int m)"""
        return _blocks_swig8.add_const_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(add_const_ss_sptr self) -> int"""
        return _blocks_swig8.add_const_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(add_const_ss_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_const_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.add_const_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(add_const_ss_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_const_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.add_const_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(add_const_ss_sptr self) -> float"""
        return _blocks_swig8.add_const_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_const_ss_sptr self) -> float"""
        return _blocks_swig8.add_const_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_const_ss_sptr self) -> float"""
        return _blocks_swig8.add_const_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(add_const_ss_sptr self) -> float"""
        return _blocks_swig8.add_const_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_const_ss_sptr self) -> float"""
        return _blocks_swig8.add_const_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(add_const_ss_sptr self) -> float"""
        return _blocks_swig8.add_const_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_const_ss_sptr self, int which) -> float
        pc_input_buffers_full(add_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_const_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_const_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_const_ss_sptr self, int which) -> float
        pc_output_buffers_full(add_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_const_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_const_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(add_const_ss_sptr self) -> float"""
        return _blocks_swig8.add_const_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(add_const_ss_sptr self) -> float"""
        return _blocks_swig8.add_const_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(add_const_ss_sptr self) -> float"""
        return _blocks_swig8.add_const_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(add_const_ss_sptr self) -> float"""
        return _blocks_swig8.add_const_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(add_const_ss_sptr self) -> float"""
        return _blocks_swig8.add_const_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(add_const_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.add_const_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(add_const_ss_sptr self)"""
        return _blocks_swig8.add_const_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(add_const_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.add_const_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(add_const_ss_sptr self) -> int"""
        return _blocks_swig8.add_const_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(add_const_ss_sptr self) -> int"""
        return _blocks_swig8.add_const_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(add_const_ss_sptr self, int priority) -> int"""
        return _blocks_swig8.add_const_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(add_const_ss_sptr self) -> std::string"""
        return _blocks_swig8.add_const_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(add_const_ss_sptr self) -> std::string"""
        return _blocks_swig8.add_const_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(add_const_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(add_const_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(add_const_ss_sptr self) -> long"""
        return _blocks_swig8.add_const_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(add_const_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.add_const_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(add_const_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.add_const_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(add_const_ss_sptr self) -> std::string"""
        return _blocks_swig8.add_const_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(add_const_ss_sptr self, std::string name)"""
        return _blocks_swig8.add_const_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(add_const_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig8.add_const_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(add_const_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.add_const_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(add_const_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.add_const_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(add_const_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig8.add_const_ss_sptr_message_subscribers(self, *args, **kwargs)

add_const_ss_sptr_swigregister = _blocks_swig8.add_const_ss_sptr_swigregister
add_const_ss_sptr_swigregister(add_const_ss_sptr)

add_const_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_ss = add_const_ss.make;

class add_const_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_const_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::add_const_ii)> self) -> add_const_ii_sptr
        __init__(boost::shared_ptr<(gr::blocks::add_const_ii)> self, add_const_ii p) -> add_const_ii_sptr
        """
        this = _blocks_swig8.new_add_const_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(add_const_ii_sptr self) -> add_const_ii"""
        return _blocks_swig8.add_const_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig8.delete_add_const_ii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(add_const_ii_sptr self, int k) -> add_const_ii_sptr

        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_ii.

        Args:
            k : additive constant
        """
        return _blocks_swig8.add_const_ii_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(add_const_ii_sptr self) -> int

        Return additive constant.
        """
        return _blocks_swig8.add_const_ii_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_ii_sptr self, int k)

        Set additive constant.
        """
        return _blocks_swig8.add_const_ii_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(add_const_ii_sptr self) -> unsigned int"""
        return _blocks_swig8.add_const_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_const_ii_sptr self, int which, int delay)
        declare_sample_delay(add_const_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig8.add_const_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(add_const_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.add_const_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(add_const_ii_sptr self) -> int"""
        return _blocks_swig8.add_const_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(add_const_ii_sptr self) -> double"""
        return _blocks_swig8.add_const_ii_sptr_relative_rate(self)

    def start(self):
        """start(add_const_ii_sptr self) -> bool"""
        return _blocks_swig8.add_const_ii_sptr_start(self)

    def stop(self):
        """stop(add_const_ii_sptr self) -> bool"""
        return _blocks_swig8.add_const_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(add_const_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.add_const_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(add_const_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.add_const_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(add_const_ii_sptr self) -> int"""
        return _blocks_swig8.add_const_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(add_const_ii_sptr self, int m)"""
        return _blocks_swig8.add_const_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_const_ii_sptr self)"""
        return _blocks_swig8.add_const_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_const_ii_sptr self) -> bool"""
        return _blocks_swig8.add_const_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(add_const_ii_sptr self, int m)"""
        return _blocks_swig8.add_const_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(add_const_ii_sptr self) -> int"""
        return _blocks_swig8.add_const_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(add_const_ii_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_const_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.add_const_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(add_const_ii_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_const_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.add_const_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(add_const_ii_sptr self) -> float"""
        return _blocks_swig8.add_const_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_const_ii_sptr self) -> float"""
        return _blocks_swig8.add_const_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_const_ii_sptr self) -> float"""
        return _blocks_swig8.add_const_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(add_const_ii_sptr self) -> float"""
        return _blocks_swig8.add_const_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_const_ii_sptr self) -> float"""
        return _blocks_swig8.add_const_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(add_const_ii_sptr self) -> float"""
        return _blocks_swig8.add_const_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_const_ii_sptr self, int which) -> float
        pc_input_buffers_full(add_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_const_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_const_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_const_ii_sptr self, int which) -> float
        pc_output_buffers_full(add_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_const_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_const_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(add_const_ii_sptr self) -> float"""
        return _blocks_swig8.add_const_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(add_const_ii_sptr self) -> float"""
        return _blocks_swig8.add_const_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(add_const_ii_sptr self) -> float"""
        return _blocks_swig8.add_const_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(add_const_ii_sptr self) -> float"""
        return _blocks_swig8.add_const_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(add_const_ii_sptr self) -> float"""
        return _blocks_swig8.add_const_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(add_const_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.add_const_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(add_const_ii_sptr self)"""
        return _blocks_swig8.add_const_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(add_const_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.add_const_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(add_const_ii_sptr self) -> int"""
        return _blocks_swig8.add_const_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(add_const_ii_sptr self) -> int"""
        return _blocks_swig8.add_const_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(add_const_ii_sptr self, int priority) -> int"""
        return _blocks_swig8.add_const_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(add_const_ii_sptr self) -> std::string"""
        return _blocks_swig8.add_const_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(add_const_ii_sptr self) -> std::string"""
        return _blocks_swig8.add_const_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(add_const_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(add_const_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(add_const_ii_sptr self) -> long"""
        return _blocks_swig8.add_const_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(add_const_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.add_const_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(add_const_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.add_const_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(add_const_ii_sptr self) -> std::string"""
        return _blocks_swig8.add_const_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(add_const_ii_sptr self, std::string name)"""
        return _blocks_swig8.add_const_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(add_const_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig8.add_const_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(add_const_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.add_const_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(add_const_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.add_const_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(add_const_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig8.add_const_ii_sptr_message_subscribers(self, *args, **kwargs)

add_const_ii_sptr_swigregister = _blocks_swig8.add_const_ii_sptr_swigregister
add_const_ii_sptr_swigregister(add_const_ii_sptr)

add_const_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_ii = add_const_ii.make;

class add_const_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_const_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::add_const_cc)> self) -> add_const_cc_sptr
        __init__(boost::shared_ptr<(gr::blocks::add_const_cc)> self, add_const_cc p) -> add_const_cc_sptr
        """
        this = _blocks_swig8.new_add_const_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(add_const_cc_sptr self) -> add_const_cc"""
        return _blocks_swig8.add_const_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig8.delete_add_const_cc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(add_const_cc_sptr self, gr_complex k) -> add_const_cc_sptr

        output = input + constant

        Constructor Specific Documentation:

        Create an instance of add_const_cc.

        Args:
            k : additive constant
        """
        return _blocks_swig8.add_const_cc_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(add_const_cc_sptr self) -> gr_complex

        Return additive constant.
        """
        return _blocks_swig8.add_const_cc_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_cc_sptr self, gr_complex k)

        Set additive constant.
        """
        return _blocks_swig8.add_const_cc_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(add_const_cc_sptr self) -> unsigned int"""
        return _blocks_swig8.add_const_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_const_cc_sptr self, int which, int delay)
        declare_sample_delay(add_const_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig8.add_const_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(add_const_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.add_const_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(add_const_cc_sptr self) -> int"""
        return _blocks_swig8.add_const_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(add_const_cc_sptr self) -> double"""
        return _blocks_swig8.add_const_cc_sptr_relative_rate(self)

    def start(self):
        """start(add_const_cc_sptr self) -> bool"""
        return _blocks_swig8.add_const_cc_sptr_start(self)

    def stop(self):
        """stop(add_const_cc_sptr self) -> bool"""
        return _blocks_swig8.add_const_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(add_const_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.add_const_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(add_const_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.add_const_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(add_const_cc_sptr self) -> int"""
        return _blocks_swig8.add_const_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(add_const_cc_sptr self, int m)"""
        return _blocks_swig8.add_const_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_const_cc_sptr self)"""
        return _blocks_swig8.add_const_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_const_cc_sptr self) -> bool"""
        return _blocks_swig8.add_const_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(add_const_cc_sptr self, int m)"""
        return _blocks_swig8.add_const_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(add_const_cc_sptr self) -> int"""
        return _blocks_swig8.add_const_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(add_const_cc_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_const_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.add_const_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(add_const_cc_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_const_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.add_const_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(add_const_cc_sptr self) -> float"""
        return _blocks_swig8.add_const_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_const_cc_sptr self) -> float"""
        return _blocks_swig8.add_const_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_const_cc_sptr self) -> float"""
        return _blocks_swig8.add_const_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(add_const_cc_sptr self) -> float"""
        return _blocks_swig8.add_const_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_const_cc_sptr self) -> float"""
        return _blocks_swig8.add_const_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(add_const_cc_sptr self) -> float"""
        return _blocks_swig8.add_const_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_const_cc_sptr self, int which) -> float
        pc_input_buffers_full(add_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_const_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_const_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_const_cc_sptr self, int which) -> float
        pc_output_buffers_full(add_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_const_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_const_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(add_const_cc_sptr self) -> float"""
        return _blocks_swig8.add_const_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(add_const_cc_sptr self) -> float"""
        return _blocks_swig8.add_const_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(add_const_cc_sptr self) -> float"""
        return _blocks_swig8.add_const_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(add_const_cc_sptr self) -> float"""
        return _blocks_swig8.add_const_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(add_const_cc_sptr self) -> float"""
        return _blocks_swig8.add_const_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(add_const_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.add_const_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(add_const_cc_sptr self)"""
        return _blocks_swig8.add_const_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(add_const_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.add_const_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(add_const_cc_sptr self) -> int"""
        return _blocks_swig8.add_const_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(add_const_cc_sptr self) -> int"""
        return _blocks_swig8.add_const_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(add_const_cc_sptr self, int priority) -> int"""
        return _blocks_swig8.add_const_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(add_const_cc_sptr self) -> std::string"""
        return _blocks_swig8.add_const_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(add_const_cc_sptr self) -> std::string"""
        return _blocks_swig8.add_const_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(add_const_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(add_const_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(add_const_cc_sptr self) -> long"""
        return _blocks_swig8.add_const_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(add_const_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.add_const_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(add_const_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.add_const_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(add_const_cc_sptr self) -> std::string"""
        return _blocks_swig8.add_const_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(add_const_cc_sptr self, std::string name)"""
        return _blocks_swig8.add_const_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(add_const_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig8.add_const_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(add_const_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.add_const_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(add_const_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.add_const_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(add_const_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig8.add_const_cc_sptr_message_subscribers(self, *args, **kwargs)

add_const_cc_sptr_swigregister = _blocks_swig8.add_const_cc_sptr_swigregister
add_const_cc_sptr_swigregister(add_const_cc_sptr)

add_const_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_cc = add_const_cc.make;

class add_const_vbb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_const_vbb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::add_const_vbb)> self) -> add_const_vbb_sptr
        __init__(boost::shared_ptr<(gr::blocks::add_const_vbb)> self, add_const_vbb p) -> add_const_vbb_sptr
        """
        this = _blocks_swig8.new_add_const_vbb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(add_const_vbb_sptr self) -> add_const_vbb"""
        return _blocks_swig8.add_const_vbb_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig8.delete_add_const_vbb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(add_const_vbb_sptr self, std::vector< unsigned char,std::allocator< unsigned char > > k) -> add_const_vbb_sptr

        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_vbb.

        Args:
            k : additive constant vector
        """
        return _blocks_swig8.add_const_vbb_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(add_const_vbb_sptr self) -> std::vector< unsigned char,std::allocator< unsigned char > >

        Return additive constant vector.
        """
        return _blocks_swig8.add_const_vbb_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_vbb_sptr self, std::vector< unsigned char,std::allocator< unsigned char > > k)

        Set additive constant vector.
        """
        return _blocks_swig8.add_const_vbb_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(add_const_vbb_sptr self) -> unsigned int"""
        return _blocks_swig8.add_const_vbb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_const_vbb_sptr self, int which, int delay)
        declare_sample_delay(add_const_vbb_sptr self, unsigned int delay)
        """
        return _blocks_swig8.add_const_vbb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(add_const_vbb_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.add_const_vbb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(add_const_vbb_sptr self) -> int"""
        return _blocks_swig8.add_const_vbb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(add_const_vbb_sptr self) -> double"""
        return _blocks_swig8.add_const_vbb_sptr_relative_rate(self)

    def start(self):
        """start(add_const_vbb_sptr self) -> bool"""
        return _blocks_swig8.add_const_vbb_sptr_start(self)

    def stop(self):
        """stop(add_const_vbb_sptr self) -> bool"""
        return _blocks_swig8.add_const_vbb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(add_const_vbb_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.add_const_vbb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(add_const_vbb_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.add_const_vbb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(add_const_vbb_sptr self) -> int"""
        return _blocks_swig8.add_const_vbb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(add_const_vbb_sptr self, int m)"""
        return _blocks_swig8.add_const_vbb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_const_vbb_sptr self)"""
        return _blocks_swig8.add_const_vbb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_const_vbb_sptr self) -> bool"""
        return _blocks_swig8.add_const_vbb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(add_const_vbb_sptr self, int m)"""
        return _blocks_swig8.add_const_vbb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(add_const_vbb_sptr self) -> int"""
        return _blocks_swig8.add_const_vbb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(add_const_vbb_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_vbb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_const_vbb_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_vbb_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.add_const_vbb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(add_const_vbb_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_vbb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_const_vbb_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_vbb_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.add_const_vbb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(add_const_vbb_sptr self) -> float"""
        return _blocks_swig8.add_const_vbb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_const_vbb_sptr self) -> float"""
        return _blocks_swig8.add_const_vbb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_const_vbb_sptr self) -> float"""
        return _blocks_swig8.add_const_vbb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(add_const_vbb_sptr self) -> float"""
        return _blocks_swig8.add_const_vbb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_const_vbb_sptr self) -> float"""
        return _blocks_swig8.add_const_vbb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(add_const_vbb_sptr self) -> float"""
        return _blocks_swig8.add_const_vbb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_const_vbb_sptr self, int which) -> float
        pc_input_buffers_full(add_const_vbb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vbb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_const_vbb_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_vbb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vbb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_const_vbb_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_vbb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vbb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_const_vbb_sptr self, int which) -> float
        pc_output_buffers_full(add_const_vbb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vbb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_const_vbb_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_vbb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vbb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_const_vbb_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_vbb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vbb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(add_const_vbb_sptr self) -> float"""
        return _blocks_swig8.add_const_vbb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(add_const_vbb_sptr self) -> float"""
        return _blocks_swig8.add_const_vbb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(add_const_vbb_sptr self) -> float"""
        return _blocks_swig8.add_const_vbb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(add_const_vbb_sptr self) -> float"""
        return _blocks_swig8.add_const_vbb_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(add_const_vbb_sptr self) -> float"""
        return _blocks_swig8.add_const_vbb_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(add_const_vbb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.add_const_vbb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(add_const_vbb_sptr self)"""
        return _blocks_swig8.add_const_vbb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(add_const_vbb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.add_const_vbb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(add_const_vbb_sptr self) -> int"""
        return _blocks_swig8.add_const_vbb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(add_const_vbb_sptr self) -> int"""
        return _blocks_swig8.add_const_vbb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(add_const_vbb_sptr self, int priority) -> int"""
        return _blocks_swig8.add_const_vbb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(add_const_vbb_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vbb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(add_const_vbb_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vbb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(add_const_vbb_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_vbb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(add_const_vbb_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_vbb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(add_const_vbb_sptr self) -> long"""
        return _blocks_swig8.add_const_vbb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(add_const_vbb_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.add_const_vbb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(add_const_vbb_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.add_const_vbb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(add_const_vbb_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vbb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(add_const_vbb_sptr self, std::string name)"""
        return _blocks_swig8.add_const_vbb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(add_const_vbb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig8.add_const_vbb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(add_const_vbb_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.add_const_vbb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(add_const_vbb_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.add_const_vbb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(add_const_vbb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig8.add_const_vbb_sptr_message_subscribers(self, *args, **kwargs)

add_const_vbb_sptr_swigregister = _blocks_swig8.add_const_vbb_sptr_swigregister
add_const_vbb_sptr_swigregister(add_const_vbb_sptr)

add_const_vbb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_vbb = add_const_vbb.make;

class add_const_vff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_const_vff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::add_const_vff)> self) -> add_const_vff_sptr
        __init__(boost::shared_ptr<(gr::blocks::add_const_vff)> self, add_const_vff p) -> add_const_vff_sptr
        """
        this = _blocks_swig8.new_add_const_vff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(add_const_vff_sptr self) -> add_const_vff"""
        return _blocks_swig8.add_const_vff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig8.delete_add_const_vff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(add_const_vff_sptr self, pmt_vector_float k) -> add_const_vff_sptr

        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_vff.

        Args:
            k : additive constant vector
        """
        return _blocks_swig8.add_const_vff_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(add_const_vff_sptr self) -> pmt_vector_float

        Return additive constant vector.
        """
        return _blocks_swig8.add_const_vff_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_vff_sptr self, pmt_vector_float k)

        Set additive constant vector.
        """
        return _blocks_swig8.add_const_vff_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(add_const_vff_sptr self) -> unsigned int"""
        return _blocks_swig8.add_const_vff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_const_vff_sptr self, int which, int delay)
        declare_sample_delay(add_const_vff_sptr self, unsigned int delay)
        """
        return _blocks_swig8.add_const_vff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(add_const_vff_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.add_const_vff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(add_const_vff_sptr self) -> int"""
        return _blocks_swig8.add_const_vff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(add_const_vff_sptr self) -> double"""
        return _blocks_swig8.add_const_vff_sptr_relative_rate(self)

    def start(self):
        """start(add_const_vff_sptr self) -> bool"""
        return _blocks_swig8.add_const_vff_sptr_start(self)

    def stop(self):
        """stop(add_const_vff_sptr self) -> bool"""
        return _blocks_swig8.add_const_vff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(add_const_vff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.add_const_vff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(add_const_vff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.add_const_vff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(add_const_vff_sptr self) -> int"""
        return _blocks_swig8.add_const_vff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(add_const_vff_sptr self, int m)"""
        return _blocks_swig8.add_const_vff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_const_vff_sptr self)"""
        return _blocks_swig8.add_const_vff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_const_vff_sptr self) -> bool"""
        return _blocks_swig8.add_const_vff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(add_const_vff_sptr self, int m)"""
        return _blocks_swig8.add_const_vff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(add_const_vff_sptr self) -> int"""
        return _blocks_swig8.add_const_vff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(add_const_vff_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_vff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_const_vff_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_vff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.add_const_vff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(add_const_vff_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_vff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_const_vff_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_vff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.add_const_vff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(add_const_vff_sptr self) -> float"""
        return _blocks_swig8.add_const_vff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_const_vff_sptr self) -> float"""
        return _blocks_swig8.add_const_vff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_const_vff_sptr self) -> float"""
        return _blocks_swig8.add_const_vff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(add_const_vff_sptr self) -> float"""
        return _blocks_swig8.add_const_vff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_const_vff_sptr self) -> float"""
        return _blocks_swig8.add_const_vff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(add_const_vff_sptr self) -> float"""
        return _blocks_swig8.add_const_vff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_const_vff_sptr self, int which) -> float
        pc_input_buffers_full(add_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_const_vff_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_const_vff_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_const_vff_sptr self, int which) -> float
        pc_output_buffers_full(add_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_const_vff_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_const_vff_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_vff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(add_const_vff_sptr self) -> float"""
        return _blocks_swig8.add_const_vff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(add_const_vff_sptr self) -> float"""
        return _blocks_swig8.add_const_vff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(add_const_vff_sptr self) -> float"""
        return _blocks_swig8.add_const_vff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(add_const_vff_sptr self) -> float"""
        return _blocks_swig8.add_const_vff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(add_const_vff_sptr self) -> float"""
        return _blocks_swig8.add_const_vff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(add_const_vff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.add_const_vff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(add_const_vff_sptr self)"""
        return _blocks_swig8.add_const_vff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(add_const_vff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.add_const_vff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(add_const_vff_sptr self) -> int"""
        return _blocks_swig8.add_const_vff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(add_const_vff_sptr self) -> int"""
        return _blocks_swig8.add_const_vff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(add_const_vff_sptr self, int priority) -> int"""
        return _blocks_swig8.add_const_vff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(add_const_vff_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(add_const_vff_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(add_const_vff_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_vff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(add_const_vff_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_vff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(add_const_vff_sptr self) -> long"""
        return _blocks_swig8.add_const_vff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(add_const_vff_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.add_const_vff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(add_const_vff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.add_const_vff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(add_const_vff_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(add_const_vff_sptr self, std::string name)"""
        return _blocks_swig8.add_const_vff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(add_const_vff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig8.add_const_vff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(add_const_vff_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.add_const_vff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(add_const_vff_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.add_const_vff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(add_const_vff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig8.add_const_vff_sptr_message_subscribers(self, *args, **kwargs)

add_const_vff_sptr_swigregister = _blocks_swig8.add_const_vff_sptr_swigregister
add_const_vff_sptr_swigregister(add_const_vff_sptr)

add_const_vff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_vff = add_const_vff.make;

class add_const_vss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_const_vss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::add_const_vss)> self) -> add_const_vss_sptr
        __init__(boost::shared_ptr<(gr::blocks::add_const_vss)> self, add_const_vss p) -> add_const_vss_sptr
        """
        this = _blocks_swig8.new_add_const_vss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(add_const_vss_sptr self) -> add_const_vss"""
        return _blocks_swig8.add_const_vss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig8.delete_add_const_vss_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(add_const_vss_sptr self, std::vector< short,std::allocator< short > > k) -> add_const_vss_sptr

        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_vss.

        Args:
            k : additive constant vector
        """
        return _blocks_swig8.add_const_vss_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(add_const_vss_sptr self) -> std::vector< short,std::allocator< short > >

        Return additive constant vector.
        """
        return _blocks_swig8.add_const_vss_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_vss_sptr self, std::vector< short,std::allocator< short > > k)

        Set additive constant vector.
        """
        return _blocks_swig8.add_const_vss_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(add_const_vss_sptr self) -> unsigned int"""
        return _blocks_swig8.add_const_vss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_const_vss_sptr self, int which, int delay)
        declare_sample_delay(add_const_vss_sptr self, unsigned int delay)
        """
        return _blocks_swig8.add_const_vss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(add_const_vss_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.add_const_vss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(add_const_vss_sptr self) -> int"""
        return _blocks_swig8.add_const_vss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(add_const_vss_sptr self) -> double"""
        return _blocks_swig8.add_const_vss_sptr_relative_rate(self)

    def start(self):
        """start(add_const_vss_sptr self) -> bool"""
        return _blocks_swig8.add_const_vss_sptr_start(self)

    def stop(self):
        """stop(add_const_vss_sptr self) -> bool"""
        return _blocks_swig8.add_const_vss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(add_const_vss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.add_const_vss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(add_const_vss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.add_const_vss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(add_const_vss_sptr self) -> int"""
        return _blocks_swig8.add_const_vss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(add_const_vss_sptr self, int m)"""
        return _blocks_swig8.add_const_vss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_const_vss_sptr self)"""
        return _blocks_swig8.add_const_vss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_const_vss_sptr self) -> bool"""
        return _blocks_swig8.add_const_vss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(add_const_vss_sptr self, int m)"""
        return _blocks_swig8.add_const_vss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(add_const_vss_sptr self) -> int"""
        return _blocks_swig8.add_const_vss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(add_const_vss_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_vss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_const_vss_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_vss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.add_const_vss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(add_const_vss_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_vss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_const_vss_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_vss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.add_const_vss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(add_const_vss_sptr self) -> float"""
        return _blocks_swig8.add_const_vss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_const_vss_sptr self) -> float"""
        return _blocks_swig8.add_const_vss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_const_vss_sptr self) -> float"""
        return _blocks_swig8.add_const_vss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(add_const_vss_sptr self) -> float"""
        return _blocks_swig8.add_const_vss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_const_vss_sptr self) -> float"""
        return _blocks_swig8.add_const_vss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(add_const_vss_sptr self) -> float"""
        return _blocks_swig8.add_const_vss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_const_vss_sptr self, int which) -> float
        pc_input_buffers_full(add_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_const_vss_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_const_vss_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_const_vss_sptr self, int which) -> float
        pc_output_buffers_full(add_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_const_vss_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_const_vss_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_vss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(add_const_vss_sptr self) -> float"""
        return _blocks_swig8.add_const_vss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(add_const_vss_sptr self) -> float"""
        return _blocks_swig8.add_const_vss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(add_const_vss_sptr self) -> float"""
        return _blocks_swig8.add_const_vss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(add_const_vss_sptr self) -> float"""
        return _blocks_swig8.add_const_vss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(add_const_vss_sptr self) -> float"""
        return _blocks_swig8.add_const_vss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(add_const_vss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.add_const_vss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(add_const_vss_sptr self)"""
        return _blocks_swig8.add_const_vss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(add_const_vss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.add_const_vss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(add_const_vss_sptr self) -> int"""
        return _blocks_swig8.add_const_vss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(add_const_vss_sptr self) -> int"""
        return _blocks_swig8.add_const_vss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(add_const_vss_sptr self, int priority) -> int"""
        return _blocks_swig8.add_const_vss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(add_const_vss_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(add_const_vss_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(add_const_vss_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_vss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(add_const_vss_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_vss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(add_const_vss_sptr self) -> long"""
        return _blocks_swig8.add_const_vss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(add_const_vss_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.add_const_vss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(add_const_vss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.add_const_vss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(add_const_vss_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(add_const_vss_sptr self, std::string name)"""
        return _blocks_swig8.add_const_vss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(add_const_vss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig8.add_const_vss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(add_const_vss_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.add_const_vss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(add_const_vss_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.add_const_vss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(add_const_vss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig8.add_const_vss_sptr_message_subscribers(self, *args, **kwargs)

add_const_vss_sptr_swigregister = _blocks_swig8.add_const_vss_sptr_swigregister
add_const_vss_sptr_swigregister(add_const_vss_sptr)

add_const_vss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_vss = add_const_vss.make;

class add_const_vii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_const_vii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::add_const_vii)> self) -> add_const_vii_sptr
        __init__(boost::shared_ptr<(gr::blocks::add_const_vii)> self, add_const_vii p) -> add_const_vii_sptr
        """
        this = _blocks_swig8.new_add_const_vii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(add_const_vii_sptr self) -> add_const_vii"""
        return _blocks_swig8.add_const_vii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig8.delete_add_const_vii_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(add_const_vii_sptr self, std::vector< int,std::allocator< int > > k) -> add_const_vii_sptr

        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_vii.

        Args:
            k : additive constant vector
        """
        return _blocks_swig8.add_const_vii_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(add_const_vii_sptr self) -> std::vector< int,std::allocator< int > >

        Return additive constant vector.
        """
        return _blocks_swig8.add_const_vii_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_vii_sptr self, std::vector< int,std::allocator< int > > k)

        Set additive constant vector.
        """
        return _blocks_swig8.add_const_vii_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(add_const_vii_sptr self) -> unsigned int"""
        return _blocks_swig8.add_const_vii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_const_vii_sptr self, int which, int delay)
        declare_sample_delay(add_const_vii_sptr self, unsigned int delay)
        """
        return _blocks_swig8.add_const_vii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(add_const_vii_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.add_const_vii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(add_const_vii_sptr self) -> int"""
        return _blocks_swig8.add_const_vii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(add_const_vii_sptr self) -> double"""
        return _blocks_swig8.add_const_vii_sptr_relative_rate(self)

    def start(self):
        """start(add_const_vii_sptr self) -> bool"""
        return _blocks_swig8.add_const_vii_sptr_start(self)

    def stop(self):
        """stop(add_const_vii_sptr self) -> bool"""
        return _blocks_swig8.add_const_vii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(add_const_vii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.add_const_vii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(add_const_vii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.add_const_vii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(add_const_vii_sptr self) -> int"""
        return _blocks_swig8.add_const_vii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(add_const_vii_sptr self, int m)"""
        return _blocks_swig8.add_const_vii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_const_vii_sptr self)"""
        return _blocks_swig8.add_const_vii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_const_vii_sptr self) -> bool"""
        return _blocks_swig8.add_const_vii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(add_const_vii_sptr self, int m)"""
        return _blocks_swig8.add_const_vii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(add_const_vii_sptr self) -> int"""
        return _blocks_swig8.add_const_vii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(add_const_vii_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_vii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_const_vii_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_vii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.add_const_vii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(add_const_vii_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_vii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_const_vii_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_vii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.add_const_vii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(add_const_vii_sptr self) -> float"""
        return _blocks_swig8.add_const_vii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_const_vii_sptr self) -> float"""
        return _blocks_swig8.add_const_vii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_const_vii_sptr self) -> float"""
        return _blocks_swig8.add_const_vii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(add_const_vii_sptr self) -> float"""
        return _blocks_swig8.add_const_vii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_const_vii_sptr self) -> float"""
        return _blocks_swig8.add_const_vii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(add_const_vii_sptr self) -> float"""
        return _blocks_swig8.add_const_vii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_const_vii_sptr self, int which) -> float
        pc_input_buffers_full(add_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_const_vii_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_const_vii_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_const_vii_sptr self, int which) -> float
        pc_output_buffers_full(add_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_const_vii_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_const_vii_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_vii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(add_const_vii_sptr self) -> float"""
        return _blocks_swig8.add_const_vii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(add_const_vii_sptr self) -> float"""
        return _blocks_swig8.add_const_vii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(add_const_vii_sptr self) -> float"""
        return _blocks_swig8.add_const_vii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(add_const_vii_sptr self) -> float"""
        return _blocks_swig8.add_const_vii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(add_const_vii_sptr self) -> float"""
        return _blocks_swig8.add_const_vii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(add_const_vii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.add_const_vii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(add_const_vii_sptr self)"""
        return _blocks_swig8.add_const_vii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(add_const_vii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.add_const_vii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(add_const_vii_sptr self) -> int"""
        return _blocks_swig8.add_const_vii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(add_const_vii_sptr self) -> int"""
        return _blocks_swig8.add_const_vii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(add_const_vii_sptr self, int priority) -> int"""
        return _blocks_swig8.add_const_vii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(add_const_vii_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(add_const_vii_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(add_const_vii_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_vii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(add_const_vii_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_vii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(add_const_vii_sptr self) -> long"""
        return _blocks_swig8.add_const_vii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(add_const_vii_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.add_const_vii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(add_const_vii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.add_const_vii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(add_const_vii_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(add_const_vii_sptr self, std::string name)"""
        return _blocks_swig8.add_const_vii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(add_const_vii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig8.add_const_vii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(add_const_vii_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.add_const_vii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(add_const_vii_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.add_const_vii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(add_const_vii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig8.add_const_vii_sptr_message_subscribers(self, *args, **kwargs)

add_const_vii_sptr_swigregister = _blocks_swig8.add_const_vii_sptr_swigregister
add_const_vii_sptr_swigregister(add_const_vii_sptr)

add_const_vii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_vii = add_const_vii.make;

class add_const_vcc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::add_const_vcc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::add_const_vcc)> self) -> add_const_vcc_sptr
        __init__(boost::shared_ptr<(gr::blocks::add_const_vcc)> self, add_const_vcc p) -> add_const_vcc_sptr
        """
        this = _blocks_swig8.new_add_const_vcc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(add_const_vcc_sptr self) -> add_const_vcc"""
        return _blocks_swig8.add_const_vcc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig8.delete_add_const_vcc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(add_const_vcc_sptr self, pmt_vector_cfloat k) -> add_const_vcc_sptr

        output[m] = input[m] + constant vector for all M streams.

        Constructor Specific Documentation:

        Create an instance of add_const_vcc.

        Args:
            k : additive constant vector
        """
        return _blocks_swig8.add_const_vcc_sptr_make(self, *args, **kwargs)

    def k(self):
        """
        k(add_const_vcc_sptr self) -> pmt_vector_cfloat

        Return additive constant vector.
        """
        return _blocks_swig8.add_const_vcc_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """
        set_k(add_const_vcc_sptr self, pmt_vector_cfloat k)

        Set additive constant vector.
        """
        return _blocks_swig8.add_const_vcc_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(add_const_vcc_sptr self) -> unsigned int"""
        return _blocks_swig8.add_const_vcc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(add_const_vcc_sptr self, int which, int delay)
        declare_sample_delay(add_const_vcc_sptr self, unsigned int delay)
        """
        return _blocks_swig8.add_const_vcc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(add_const_vcc_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.add_const_vcc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(add_const_vcc_sptr self) -> int"""
        return _blocks_swig8.add_const_vcc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(add_const_vcc_sptr self) -> double"""
        return _blocks_swig8.add_const_vcc_sptr_relative_rate(self)

    def start(self):
        """start(add_const_vcc_sptr self) -> bool"""
        return _blocks_swig8.add_const_vcc_sptr_start(self)

    def stop(self):
        """stop(add_const_vcc_sptr self) -> bool"""
        return _blocks_swig8.add_const_vcc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(add_const_vcc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.add_const_vcc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(add_const_vcc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.add_const_vcc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(add_const_vcc_sptr self) -> int"""
        return _blocks_swig8.add_const_vcc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(add_const_vcc_sptr self, int m)"""
        return _blocks_swig8.add_const_vcc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(add_const_vcc_sptr self)"""
        return _blocks_swig8.add_const_vcc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(add_const_vcc_sptr self) -> bool"""
        return _blocks_swig8.add_const_vcc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(add_const_vcc_sptr self, int m)"""
        return _blocks_swig8.add_const_vcc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(add_const_vcc_sptr self) -> int"""
        return _blocks_swig8.add_const_vcc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(add_const_vcc_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_vcc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(add_const_vcc_sptr self, long max_output_buffer)
        set_max_output_buffer(add_const_vcc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.add_const_vcc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(add_const_vcc_sptr self, int i) -> long"""
        return _blocks_swig8.add_const_vcc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(add_const_vcc_sptr self, long min_output_buffer)
        set_min_output_buffer(add_const_vcc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.add_const_vcc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(add_const_vcc_sptr self) -> float"""
        return _blocks_swig8.add_const_vcc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(add_const_vcc_sptr self) -> float"""
        return _blocks_swig8.add_const_vcc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(add_const_vcc_sptr self) -> float"""
        return _blocks_swig8.add_const_vcc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(add_const_vcc_sptr self) -> float"""
        return _blocks_swig8.add_const_vcc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(add_const_vcc_sptr self) -> float"""
        return _blocks_swig8.add_const_vcc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(add_const_vcc_sptr self) -> float"""
        return _blocks_swig8.add_const_vcc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(add_const_vcc_sptr self, int which) -> float
        pc_input_buffers_full(add_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vcc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(add_const_vcc_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vcc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(add_const_vcc_sptr self, int which) -> float
        pc_input_buffers_full_var(add_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vcc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(add_const_vcc_sptr self, int which) -> float
        pc_output_buffers_full(add_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vcc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(add_const_vcc_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vcc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(add_const_vcc_sptr self, int which) -> float
        pc_output_buffers_full_var(add_const_vcc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.add_const_vcc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(add_const_vcc_sptr self) -> float"""
        return _blocks_swig8.add_const_vcc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(add_const_vcc_sptr self) -> float"""
        return _blocks_swig8.add_const_vcc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(add_const_vcc_sptr self) -> float"""
        return _blocks_swig8.add_const_vcc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(add_const_vcc_sptr self) -> float"""
        return _blocks_swig8.add_const_vcc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(add_const_vcc_sptr self) -> float"""
        return _blocks_swig8.add_const_vcc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(add_const_vcc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.add_const_vcc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(add_const_vcc_sptr self)"""
        return _blocks_swig8.add_const_vcc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(add_const_vcc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.add_const_vcc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(add_const_vcc_sptr self) -> int"""
        return _blocks_swig8.add_const_vcc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(add_const_vcc_sptr self) -> int"""
        return _blocks_swig8.add_const_vcc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(add_const_vcc_sptr self, int priority) -> int"""
        return _blocks_swig8.add_const_vcc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(add_const_vcc_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vcc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(add_const_vcc_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vcc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(add_const_vcc_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_vcc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(add_const_vcc_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.add_const_vcc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(add_const_vcc_sptr self) -> long"""
        return _blocks_swig8.add_const_vcc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(add_const_vcc_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.add_const_vcc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(add_const_vcc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.add_const_vcc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(add_const_vcc_sptr self) -> std::string"""
        return _blocks_swig8.add_const_vcc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(add_const_vcc_sptr self, std::string name)"""
        return _blocks_swig8.add_const_vcc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(add_const_vcc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig8.add_const_vcc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(add_const_vcc_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.add_const_vcc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(add_const_vcc_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.add_const_vcc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(add_const_vcc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig8.add_const_vcc_sptr_message_subscribers(self, *args, **kwargs)

add_const_vcc_sptr_swigregister = _blocks_swig8.add_const_vcc_sptr_swigregister
add_const_vcc_sptr_swigregister(add_const_vcc_sptr)

add_const_vcc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_const_vcc = add_const_vcc.make;

class and_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::and_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::and_bb)> self) -> and_bb_sptr
        __init__(boost::shared_ptr<(gr::blocks::and_bb)> self, and_bb p) -> and_bb_sptr
        """
        this = _blocks_swig8.new_and_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(and_bb_sptr self) -> and_bb"""
        return _blocks_swig8.and_bb_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig8.delete_and_bb_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(and_bb_sptr self, size_t vlen=1) -> and_bb_sptr

        output = input[0] & input[1] & ... & input[M-1]

        bitwise boolean AND across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig8.and_bb_sptr_make(self, vlen)

    def history(self):
        """history(and_bb_sptr self) -> unsigned int"""
        return _blocks_swig8.and_bb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(and_bb_sptr self, int which, int delay)
        declare_sample_delay(and_bb_sptr self, unsigned int delay)
        """
        return _blocks_swig8.and_bb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(and_bb_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.and_bb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(and_bb_sptr self) -> int"""
        return _blocks_swig8.and_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(and_bb_sptr self) -> double"""
        return _blocks_swig8.and_bb_sptr_relative_rate(self)

    def start(self):
        """start(and_bb_sptr self) -> bool"""
        return _blocks_swig8.and_bb_sptr_start(self)

    def stop(self):
        """stop(and_bb_sptr self) -> bool"""
        return _blocks_swig8.and_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(and_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.and_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(and_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.and_bb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(and_bb_sptr self) -> int"""
        return _blocks_swig8.and_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(and_bb_sptr self, int m)"""
        return _blocks_swig8.and_bb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(and_bb_sptr self)"""
        return _blocks_swig8.and_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(and_bb_sptr self) -> bool"""
        return _blocks_swig8.and_bb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(and_bb_sptr self, int m)"""
        return _blocks_swig8.and_bb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(and_bb_sptr self) -> int"""
        return _blocks_swig8.and_bb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(and_bb_sptr self, int i) -> long"""
        return _blocks_swig8.and_bb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(and_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(and_bb_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.and_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(and_bb_sptr self, int i) -> long"""
        return _blocks_swig8.and_bb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(and_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(and_bb_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.and_bb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(and_bb_sptr self) -> float"""
        return _blocks_swig8.and_bb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(and_bb_sptr self) -> float"""
        return _blocks_swig8.and_bb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(and_bb_sptr self) -> float"""
        return _blocks_swig8.and_bb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(and_bb_sptr self) -> float"""
        return _blocks_swig8.and_bb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(and_bb_sptr self) -> float"""
        return _blocks_swig8.and_bb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(and_bb_sptr self) -> float"""
        return _blocks_swig8.and_bb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(and_bb_sptr self, int which) -> float
        pc_input_buffers_full(and_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_bb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(and_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(and_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_bb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(and_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(and_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_bb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(and_bb_sptr self, int which) -> float
        pc_output_buffers_full(and_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_bb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(and_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(and_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_bb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(and_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(and_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_bb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(and_bb_sptr self) -> float"""
        return _blocks_swig8.and_bb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(and_bb_sptr self) -> float"""
        return _blocks_swig8.and_bb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(and_bb_sptr self) -> float"""
        return _blocks_swig8.and_bb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(and_bb_sptr self) -> float"""
        return _blocks_swig8.and_bb_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(and_bb_sptr self) -> float"""
        return _blocks_swig8.and_bb_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(and_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.and_bb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(and_bb_sptr self)"""
        return _blocks_swig8.and_bb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(and_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.and_bb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(and_bb_sptr self) -> int"""
        return _blocks_swig8.and_bb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(and_bb_sptr self) -> int"""
        return _blocks_swig8.and_bb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(and_bb_sptr self, int priority) -> int"""
        return _blocks_swig8.and_bb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(and_bb_sptr self) -> std::string"""
        return _blocks_swig8.and_bb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(and_bb_sptr self) -> std::string"""
        return _blocks_swig8.and_bb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(and_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.and_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(and_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.and_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(and_bb_sptr self) -> long"""
        return _blocks_swig8.and_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(and_bb_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.and_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(and_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.and_bb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(and_bb_sptr self) -> std::string"""
        return _blocks_swig8.and_bb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(and_bb_sptr self, std::string name)"""
        return _blocks_swig8.and_bb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(and_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig8.and_bb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(and_bb_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.and_bb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(and_bb_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.and_bb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(and_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig8.and_bb_sptr_message_subscribers(self, *args, **kwargs)

and_bb_sptr_swigregister = _blocks_swig8.and_bb_sptr_swigregister
and_bb_sptr_swigregister(and_bb_sptr)

and_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
and_bb = and_bb.make;

class and_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::and_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::and_ss)> self) -> and_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::and_ss)> self, and_ss p) -> and_ss_sptr
        """
        this = _blocks_swig8.new_and_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(and_ss_sptr self) -> and_ss"""
        return _blocks_swig8.and_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig8.delete_and_ss_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(and_ss_sptr self, size_t vlen=1) -> and_ss_sptr

        output = input[0] & input[1] & ... & input[M-1]

        bitwise boolean AND across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig8.and_ss_sptr_make(self, vlen)

    def history(self):
        """history(and_ss_sptr self) -> unsigned int"""
        return _blocks_swig8.and_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(and_ss_sptr self, int which, int delay)
        declare_sample_delay(and_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig8.and_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(and_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.and_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(and_ss_sptr self) -> int"""
        return _blocks_swig8.and_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(and_ss_sptr self) -> double"""
        return _blocks_swig8.and_ss_sptr_relative_rate(self)

    def start(self):
        """start(and_ss_sptr self) -> bool"""
        return _blocks_swig8.and_ss_sptr_start(self)

    def stop(self):
        """stop(and_ss_sptr self) -> bool"""
        return _blocks_swig8.and_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(and_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.and_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(and_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.and_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(and_ss_sptr self) -> int"""
        return _blocks_swig8.and_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(and_ss_sptr self, int m)"""
        return _blocks_swig8.and_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(and_ss_sptr self)"""
        return _blocks_swig8.and_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(and_ss_sptr self) -> bool"""
        return _blocks_swig8.and_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(and_ss_sptr self, int m)"""
        return _blocks_swig8.and_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(and_ss_sptr self) -> int"""
        return _blocks_swig8.and_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(and_ss_sptr self, int i) -> long"""
        return _blocks_swig8.and_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(and_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(and_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.and_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(and_ss_sptr self, int i) -> long"""
        return _blocks_swig8.and_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(and_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(and_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.and_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(and_ss_sptr self) -> float"""
        return _blocks_swig8.and_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(and_ss_sptr self) -> float"""
        return _blocks_swig8.and_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(and_ss_sptr self) -> float"""
        return _blocks_swig8.and_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(and_ss_sptr self) -> float"""
        return _blocks_swig8.and_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(and_ss_sptr self) -> float"""
        return _blocks_swig8.and_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(and_ss_sptr self) -> float"""
        return _blocks_swig8.and_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(and_ss_sptr self, int which) -> float
        pc_input_buffers_full(and_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(and_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(and_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(and_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(and_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(and_ss_sptr self, int which) -> float
        pc_output_buffers_full(and_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(and_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(and_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(and_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(and_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(and_ss_sptr self) -> float"""
        return _blocks_swig8.and_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(and_ss_sptr self) -> float"""
        return _blocks_swig8.and_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(and_ss_sptr self) -> float"""
        return _blocks_swig8.and_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(and_ss_sptr self) -> float"""
        return _blocks_swig8.and_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(and_ss_sptr self) -> float"""
        return _blocks_swig8.and_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(and_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.and_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(and_ss_sptr self)"""
        return _blocks_swig8.and_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(and_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.and_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(and_ss_sptr self) -> int"""
        return _blocks_swig8.and_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(and_ss_sptr self) -> int"""
        return _blocks_swig8.and_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(and_ss_sptr self, int priority) -> int"""
        return _blocks_swig8.and_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(and_ss_sptr self) -> std::string"""
        return _blocks_swig8.and_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(and_ss_sptr self) -> std::string"""
        return _blocks_swig8.and_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(and_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.and_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(and_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.and_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(and_ss_sptr self) -> long"""
        return _blocks_swig8.and_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(and_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.and_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(and_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.and_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(and_ss_sptr self) -> std::string"""
        return _blocks_swig8.and_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(and_ss_sptr self, std::string name)"""
        return _blocks_swig8.and_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(and_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig8.and_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(and_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.and_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(and_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.and_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(and_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig8.and_ss_sptr_message_subscribers(self, *args, **kwargs)

and_ss_sptr_swigregister = _blocks_swig8.and_ss_sptr_swigregister
and_ss_sptr_swigregister(and_ss_sptr)

and_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
and_ss = and_ss.make;

class and_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::and_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::and_ii)> self) -> and_ii_sptr
        __init__(boost::shared_ptr<(gr::blocks::and_ii)> self, and_ii p) -> and_ii_sptr
        """
        this = _blocks_swig8.new_and_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(and_ii_sptr self) -> and_ii"""
        return _blocks_swig8.and_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig8.delete_and_ii_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(and_ii_sptr self, size_t vlen=1) -> and_ii_sptr

        output = input[0] & input[1] & ... & input[M-1]

        bitwise boolean AND across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig8.and_ii_sptr_make(self, vlen)

    def history(self):
        """history(and_ii_sptr self) -> unsigned int"""
        return _blocks_swig8.and_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(and_ii_sptr self, int which, int delay)
        declare_sample_delay(and_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig8.and_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(and_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig8.and_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(and_ii_sptr self) -> int"""
        return _blocks_swig8.and_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(and_ii_sptr self) -> double"""
        return _blocks_swig8.and_ii_sptr_relative_rate(self)

    def start(self):
        """start(and_ii_sptr self) -> bool"""
        return _blocks_swig8.and_ii_sptr_start(self)

    def stop(self):
        """stop(and_ii_sptr self) -> bool"""
        return _blocks_swig8.and_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(and_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig8.and_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(and_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig8.and_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(and_ii_sptr self) -> int"""
        return _blocks_swig8.and_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(and_ii_sptr self, int m)"""
        return _blocks_swig8.and_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(and_ii_sptr self)"""
        return _blocks_swig8.and_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(and_ii_sptr self) -> bool"""
        return _blocks_swig8.and_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(and_ii_sptr self, int m)"""
        return _blocks_swig8.and_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(and_ii_sptr self) -> int"""
        return _blocks_swig8.and_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(and_ii_sptr self, int i) -> long"""
        return _blocks_swig8.and_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(and_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(and_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig8.and_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(and_ii_sptr self, int i) -> long"""
        return _blocks_swig8.and_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(and_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(and_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig8.and_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(and_ii_sptr self) -> float"""
        return _blocks_swig8.and_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(and_ii_sptr self) -> float"""
        return _blocks_swig8.and_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(and_ii_sptr self) -> float"""
        return _blocks_swig8.and_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(and_ii_sptr self) -> float"""
        return _blocks_swig8.and_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(and_ii_sptr self) -> float"""
        return _blocks_swig8.and_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(and_ii_sptr self) -> float"""
        return _blocks_swig8.and_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(and_ii_sptr self, int which) -> float
        pc_input_buffers_full(and_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(and_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(and_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(and_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(and_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(and_ii_sptr self, int which) -> float
        pc_output_buffers_full(and_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(and_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(and_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(and_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(and_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig8.and_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(and_ii_sptr self) -> float"""
        return _blocks_swig8.and_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(and_ii_sptr self) -> float"""
        return _blocks_swig8.and_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(and_ii_sptr self) -> float"""
        return _blocks_swig8.and_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(and_ii_sptr self) -> float"""
        return _blocks_swig8.and_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(and_ii_sptr self) -> float"""
        return _blocks_swig8.and_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(and_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig8.and_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(and_ii_sptr self)"""
        return _blocks_swig8.and_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(and_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig8.and_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(and_ii_sptr self) -> int"""
        return _blocks_swig8.and_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(and_ii_sptr self) -> int"""
        return _blocks_swig8.and_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(and_ii_sptr self, int priority) -> int"""
        return _blocks_swig8.and_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(and_ii_sptr self) -> std::string"""
        return _blocks_swig8.and_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(and_ii_sptr self) -> std::string"""
        return _blocks_swig8.and_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(and_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.and_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(and_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig8.and_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(and_ii_sptr self) -> long"""
        return _blocks_swig8.and_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(and_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig8.and_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(and_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig8.and_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(and_ii_sptr self) -> std::string"""
        return _blocks_swig8.and_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(and_ii_sptr self, std::string name)"""
        return _blocks_swig8.and_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(and_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig8.and_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(and_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.and_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(and_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig8.and_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(and_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig8.and_ii_sptr_message_subscribers(self, *args, **kwargs)

and_ii_sptr_swigregister = _blocks_swig8.and_ii_sptr_swigregister
and_ii_sptr_swigregister(and_ii_sptr)

and_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
and_ii = and_ii.make;




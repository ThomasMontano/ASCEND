# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_blocks_swig5', [dirname(__file__)])
        except ImportError:
            import _blocks_swig5
            return _blocks_swig5
        if fp is not None:
            try:
                _mod = imp.load_module('_blocks_swig5', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _blocks_swig5 = swig_import_helper()
    del swig_import_helper
else:
    import _blocks_swig5
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _blocks_swig5.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _blocks_swig5.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _blocks_swig5.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _blocks_swig5.high_res_timer_epoch()
byte_t = _blocks_swig5.byte_t
float_t = _blocks_swig5.float_t
complex_t = _blocks_swig5.complex_t

def pdu_port_id():
  """pdu_port_id() -> swig_int_ptr"""
  return _blocks_swig5.pdu_port_id()

def itemsize(*args, **kwargs):
  """itemsize(gr::blocks::pdu::vector_type type) -> size_t"""
  return _blocks_swig5.itemsize(*args, **kwargs)

def type_matches(*args, **kwargs):
  """type_matches(gr::blocks::pdu::vector_type type, swig_int_ptr v) -> bool"""
  return _blocks_swig5.type_matches(*args, **kwargs)

def make_pdu_vector(*args, **kwargs):
  """make_pdu_vector(gr::blocks::pdu::vector_type type, uint8_t const * buf, size_t items) -> swig_int_ptr"""
  return _blocks_swig5.make_pdu_vector(*args, **kwargs)

def type_from_pmt(*args, **kwargs):
  """type_from_pmt(swig_int_ptr vector) -> gr::blocks::pdu::vector_type"""
  return _blocks_swig5.type_from_pmt(*args, **kwargs)
class random_pdu(object):
    """
    Sends a random PDU at intervals.

    Constructor Specific Documentation:

    Construct a random PDU generator.

    Args:
        mintime : 
        maxtime : 
        byte_mask : 
        length_modulo : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int mintime, int maxtime, char byte_mask=0xFF, int length_modulo=1) -> random_pdu_sptr

        Sends a random PDU at intervals.

        Constructor Specific Documentation:

        Construct a random PDU generator.

        Args:
            mintime : 
            maxtime : 
            byte_mask : 
            length_modulo : 
        """
        return _blocks_swig5.random_pdu_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig5.delete_random_pdu
    __del__ = lambda self : None;
random_pdu_swigregister = _blocks_swig5.random_pdu_swigregister
random_pdu_swigregister(random_pdu)

def random_pdu_make(*args, **kwargs):
  """
    random_pdu_make(int mintime, int maxtime, char byte_mask=0xFF, int length_modulo=1) -> random_pdu_sptr

    Sends a random PDU at intervals.

    Constructor Specific Documentation:

    Construct a random PDU generator.

    Args:
        mintime : 
        maxtime : 
        byte_mask : 
        length_modulo : 
    """
  return _blocks_swig5.random_pdu_make(*args, **kwargs)

class regenerate_bb(object):
    """
    Detect the peak of a signal and repeat every period samples.

    If a peak is detected, this block outputs a 1 repeated every period samples until reset by detection of another 1 on the input or stopped after max_regen regenerations have occurred.

    Note that if max_regen=(-1)/ULONG_MAX then the regeneration will run forever.

    Constructor Specific Documentation:

    Make a regenerate block.

    Args:
        period : The number of samples between regenerations
        max_regen : The maximum number of regenerations to perform; if set to ULONG_MAX, it will regenerate continuously.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int period, unsigned int max_regen=500) -> regenerate_bb_sptr

        Detect the peak of a signal and repeat every period samples.

        If a peak is detected, this block outputs a 1 repeated every period samples until reset by detection of another 1 on the input or stopped after max_regen regenerations have occurred.

        Note that if max_regen=(-1)/ULONG_MAX then the regeneration will run forever.

        Constructor Specific Documentation:

        Make a regenerate block.

        Args:
            period : The number of samples between regenerations
            max_regen : The maximum number of regenerations to perform; if set to ULONG_MAX, it will regenerate continuously.
        """
        return _blocks_swig5.regenerate_bb_make(*args, **kwargs)

    make = staticmethod(make)
    def set_max_regen(self, *args, **kwargs):
        """
        set_max_regen(regenerate_bb self, unsigned int regen)

        Reset the maximum regeneration count; this will reset the current regen.
        """
        return _blocks_swig5.regenerate_bb_set_max_regen(self, *args, **kwargs)

    def set_period(self, *args, **kwargs):
        """
        set_period(regenerate_bb self, int period)

        Reset the period of regenerations; this will reset the current regen.
        """
        return _blocks_swig5.regenerate_bb_set_period(self, *args, **kwargs)

    def max_regen(self):
        """
        max_regen(regenerate_bb self) -> unsigned int

        return the maximum regeneration count.
        """
        return _blocks_swig5.regenerate_bb_max_regen(self)

    def period(self):
        """
        period(regenerate_bb self) -> int

        return the regeneration period.
        """
        return _blocks_swig5.regenerate_bb_period(self)

    __swig_destroy__ = _blocks_swig5.delete_regenerate_bb
    __del__ = lambda self : None;
regenerate_bb_swigregister = _blocks_swig5.regenerate_bb_swigregister
regenerate_bb_swigregister(regenerate_bb)

def regenerate_bb_make(*args, **kwargs):
  """
    regenerate_bb_make(int period, unsigned int max_regen=500) -> regenerate_bb_sptr

    Detect the peak of a signal and repeat every period samples.

    If a peak is detected, this block outputs a 1 repeated every period samples until reset by detection of another 1 on the input or stopped after max_regen regenerations have occurred.

    Note that if max_regen=(-1)/ULONG_MAX then the regeneration will run forever.

    Constructor Specific Documentation:

    Make a regenerate block.

    Args:
        period : The number of samples between regenerations
        max_regen : The maximum number of regenerations to perform; if set to ULONG_MAX, it will regenerate continuously.
    """
  return _blocks_swig5.regenerate_bb_make(*args, **kwargs)

class repack_bits_bb(object):
    """
    Repack  bits from the input stream onto  bits of the output stream.

    No bits are lost here; any value for k and l (within [1, 8]) is allowed. On every fresh input byte, it starts reading on the LSB, and starts copying to the LSB as well.

    When supplying a tag name, this block operates on tagged streams. In this case, it can happen that the input data or the output data becomes unaligned when k * input length is not equal to l * output length. In this case, the  parameter is used to decide which data packet to align.

    Usually,  is false for unpacking (k=8, l < 8) and false for reversing that.


    Example
    Say you're tx'ing 8-PSK and therefore set k=8, l=3 on the transmit side before the modulator. Now assume you're transmitting a single byte of data. Your incoming tagged stream has length 1, the outgoing has length 3. However, the third item is actually only carrying 2 bits of relevant data, the bits do not align with the boundaries. So you set  = false, because the output can be unaligned.

    Now say you're doing the inverse: packing those three items into full bytes. How do you interpret those three bytes? Without this flag, you'd have to assume there's 9 relevant bits in there, so you'd end up with 2 bytes of output data. But in the packing case, you want the  to be aligned; all output bits must be useful. By asserting this flag, the packing algorithm tries to do this and in this case assumes that since we have alignment after 8 bits, the 9th can be discarded.

    Constructor Specific Documentation:



    Args:
        k : Number of relevant bits on the input stream
        l : Number of relevant bits on the output stream
        tsb_tag_key : If not empty, this is the key for the length tag.
        align_output : If tsb_tag_key is given, this controls if the input or the output is aligned.
        endianness : The endianness of the output data stream (LSB or MSB).
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(int k, int l=8, std::string const & tsb_tag_key="", bool align_output=False, gr::endianness_t endianness=GR_LSB_FIRST) -> repack_bits_bb_sptr

        Repack  bits from the input stream onto  bits of the output stream.

        No bits are lost here; any value for k and l (within [1, 8]) is allowed. On every fresh input byte, it starts reading on the LSB, and starts copying to the LSB as well.

        When supplying a tag name, this block operates on tagged streams. In this case, it can happen that the input data or the output data becomes unaligned when k * input length is not equal to l * output length. In this case, the  parameter is used to decide which data packet to align.

        Usually,  is false for unpacking (k=8, l < 8) and false for reversing that.


        Example
        Say you're tx'ing 8-PSK and therefore set k=8, l=3 on the transmit side before the modulator. Now assume you're transmitting a single byte of data. Your incoming tagged stream has length 1, the outgoing has length 3. However, the third item is actually only carrying 2 bits of relevant data, the bits do not align with the boundaries. So you set  = false, because the output can be unaligned.

        Now say you're doing the inverse: packing those three items into full bytes. How do you interpret those three bytes? Without this flag, you'd have to assume there's 9 relevant bits in there, so you'd end up with 2 bytes of output data. But in the packing case, you want the  to be aligned; all output bits must be useful. By asserting this flag, the packing algorithm tries to do this and in this case assumes that since we have alignment after 8 bits, the 9th can be discarded.

        Constructor Specific Documentation:



        Args:
            k : Number of relevant bits on the input stream
            l : Number of relevant bits on the output stream
            tsb_tag_key : If not empty, this is the key for the length tag.
            align_output : If tsb_tag_key is given, this controls if the input or the output is aligned.
            endianness : The endianness of the output data stream (LSB or MSB).
        """
        return _blocks_swig5.repack_bits_bb_make(*args, **kwargs)

    make = staticmethod(make)
    def set_k_and_l(self, *args, **kwargs):
        """set_k_and_l(repack_bits_bb self, int k, int l)"""
        return _blocks_swig5.repack_bits_bb_set_k_and_l(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig5.delete_repack_bits_bb
    __del__ = lambda self : None;
repack_bits_bb_swigregister = _blocks_swig5.repack_bits_bb_swigregister
repack_bits_bb_swigregister(repack_bits_bb)

def repack_bits_bb_make(*args, **kwargs):
  """
    repack_bits_bb_make(int k, int l=8, std::string const & tsb_tag_key="", bool align_output=False, gr::endianness_t endianness=GR_LSB_FIRST) -> repack_bits_bb_sptr

    Repack  bits from the input stream onto  bits of the output stream.

    No bits are lost here; any value for k and l (within [1, 8]) is allowed. On every fresh input byte, it starts reading on the LSB, and starts copying to the LSB as well.

    When supplying a tag name, this block operates on tagged streams. In this case, it can happen that the input data or the output data becomes unaligned when k * input length is not equal to l * output length. In this case, the  parameter is used to decide which data packet to align.

    Usually,  is false for unpacking (k=8, l < 8) and false for reversing that.


    Example
    Say you're tx'ing 8-PSK and therefore set k=8, l=3 on the transmit side before the modulator. Now assume you're transmitting a single byte of data. Your incoming tagged stream has length 1, the outgoing has length 3. However, the third item is actually only carrying 2 bits of relevant data, the bits do not align with the boundaries. So you set  = false, because the output can be unaligned.

    Now say you're doing the inverse: packing those three items into full bytes. How do you interpret those three bytes? Without this flag, you'd have to assume there's 9 relevant bits in there, so you'd end up with 2 bytes of output data. But in the packing case, you want the  to be aligned; all output bits must be useful. By asserting this flag, the packing algorithm tries to do this and in this case assumes that since we have alignment after 8 bits, the 9th can be discarded.

    Constructor Specific Documentation:



    Args:
        k : Number of relevant bits on the input stream
        l : Number of relevant bits on the output stream
        tsb_tag_key : If not empty, this is the key for the length tag.
        align_output : If tsb_tag_key is given, this controls if the input or the output is aligned.
        endianness : The endianness of the output data stream (LSB or MSB).
    """
  return _blocks_swig5.repack_bits_bb_make(*args, **kwargs)

class repeat(object):
    """
    repeat each input  times

    Message Ports:

    Constructor Specific Documentation:

    Make a repeat block.

    Args:
        itemsize : stream itemsize
        repeat : number of times to repeat the input
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(size_t itemsize, int repeat) -> repeat_sptr

        repeat each input  times

        Message Ports:

        Constructor Specific Documentation:

        Make a repeat block.

        Args:
            itemsize : stream itemsize
            repeat : number of times to repeat the input
        """
        return _blocks_swig5.repeat_make(*args, **kwargs)

    make = staticmethod(make)
    def interpolation(self):
        """
        interpolation(repeat self) -> int

        Return current interpolation.
        """
        return _blocks_swig5.repeat_interpolation(self)

    def set_interpolation(self, *args, **kwargs):
        """
        set_interpolation(repeat self, int interp)

        sets the interpolation

        Call this method in a callback to adjust the interpolation at run time.
        """
        return _blocks_swig5.repeat_set_interpolation(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig5.delete_repeat
    __del__ = lambda self : None;
repeat_swigregister = _blocks_swig5.repeat_swigregister
repeat_swigregister(repeat)

def repeat_make(*args, **kwargs):
  """
    repeat_make(size_t itemsize, int repeat) -> repeat_sptr

    repeat each input  times

    Message Ports:

    Constructor Specific Documentation:

    Make a repeat block.

    Args:
        itemsize : stream itemsize
        repeat : number of times to repeat the input
    """
  return _blocks_swig5.repeat_make(*args, **kwargs)

class rms_cf(object):
    """
    RMS average power.

    Constructor Specific Documentation:

    Make an RMS calc. block.

    Args:
        alpha : gain for running average filter.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(alpha=0.0001):
        """
        make(double alpha=0.0001) -> rms_cf_sptr

        RMS average power.

        Constructor Specific Documentation:

        Make an RMS calc. block.

        Args:
            alpha : gain for running average filter.
        """
        return _blocks_swig5.rms_cf_make(alpha)

    make = staticmethod(make)
    def set_alpha(self, *args, **kwargs):
        """set_alpha(rms_cf self, double alpha)"""
        return _blocks_swig5.rms_cf_set_alpha(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig5.delete_rms_cf
    __del__ = lambda self : None;
rms_cf_swigregister = _blocks_swig5.rms_cf_swigregister
rms_cf_swigregister(rms_cf)

def rms_cf_make(alpha=0.0001):
  """
    rms_cf_make(double alpha=0.0001) -> rms_cf_sptr

    RMS average power.

    Constructor Specific Documentation:

    Make an RMS calc. block.

    Args:
        alpha : gain for running average filter.
    """
  return _blocks_swig5.rms_cf_make(alpha)

class rms_ff(object):
    """
    RMS average power.

    Constructor Specific Documentation:

    Make an RMS calc. block.

    Args:
        alpha : gain for running average filter.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(alpha=0.0001):
        """
        make(double alpha=0.0001) -> rms_ff_sptr

        RMS average power.

        Constructor Specific Documentation:

        Make an RMS calc. block.

        Args:
            alpha : gain for running average filter.
        """
        return _blocks_swig5.rms_ff_make(alpha)

    make = staticmethod(make)
    def set_alpha(self, *args, **kwargs):
        """set_alpha(rms_ff self, double alpha)"""
        return _blocks_swig5.rms_ff_set_alpha(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig5.delete_rms_ff
    __del__ = lambda self : None;
rms_ff_swigregister = _blocks_swig5.rms_ff_swigregister
rms_ff_swigregister(rms_ff)

def rms_ff_make(alpha=0.0001):
  """
    rms_ff_make(double alpha=0.0001) -> rms_ff_sptr

    RMS average power.

    Constructor Specific Documentation:

    Make an RMS calc. block.

    Args:
        alpha : gain for running average filter.
    """
  return _blocks_swig5.rms_ff_make(alpha)

class rotator_cc(object):
    """
    Complex rotator.

    Constructor Specific Documentation:

    Make an complex rotator block.

    Args:
        phase_inc : rotational velocity
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(phase_inc=0.0):
        """
        make(double phase_inc=0.0) -> rotator_cc_sptr

        Complex rotator.

        Constructor Specific Documentation:

        Make an complex rotator block.

        Args:
            phase_inc : rotational velocity
        """
        return _blocks_swig5.rotator_cc_make(phase_inc)

    make = staticmethod(make)
    def set_phase_inc(self, *args, **kwargs):
        """set_phase_inc(rotator_cc self, double phase_inc)"""
        return _blocks_swig5.rotator_cc_set_phase_inc(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig5.delete_rotator_cc
    __del__ = lambda self : None;
rotator_cc_swigregister = _blocks_swig5.rotator_cc_swigregister
rotator_cc_swigregister(rotator_cc)

def rotator_cc_make(phase_inc=0.0):
  """
    rotator_cc_make(double phase_inc=0.0) -> rotator_cc_sptr

    Complex rotator.

    Constructor Specific Documentation:

    Make an complex rotator block.

    Args:
        phase_inc : rotational velocity
    """
  return _blocks_swig5.rotator_cc_make(phase_inc)

class sample_and_hold_bb(object):
    """
    sample and hold circuit

    Samples the data stream (input stream 0) and holds the value if the control signal is 1 (intput stream 1).

    Constructor Specific Documentation:


    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> sample_and_hold_bb_sptr

        sample and hold circuit

        Samples the data stream (input stream 0) and holds the value if the control signal is 1 (intput stream 1).

        Constructor Specific Documentation:


        """
        return _blocks_swig5.sample_and_hold_bb_make()

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig5.delete_sample_and_hold_bb
    __del__ = lambda self : None;
sample_and_hold_bb_swigregister = _blocks_swig5.sample_and_hold_bb_swigregister
sample_and_hold_bb_swigregister(sample_and_hold_bb)

def sample_and_hold_bb_make():
  """
    sample_and_hold_bb_make() -> sample_and_hold_bb_sptr

    sample and hold circuit

    Samples the data stream (input stream 0) and holds the value if the control signal is 1 (intput stream 1).

    Constructor Specific Documentation:


    """
  return _blocks_swig5.sample_and_hold_bb_make()

class sample_and_hold_ss(object):
    """
    sample and hold circuit

    Samples the data stream (input stream 0) and holds the value if the control signal is 1 (intput stream 1).

    Constructor Specific Documentation:


    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> sample_and_hold_ss_sptr

        sample and hold circuit

        Samples the data stream (input stream 0) and holds the value if the control signal is 1 (intput stream 1).

        Constructor Specific Documentation:


        """
        return _blocks_swig5.sample_and_hold_ss_make()

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig5.delete_sample_and_hold_ss
    __del__ = lambda self : None;
sample_and_hold_ss_swigregister = _blocks_swig5.sample_and_hold_ss_swigregister
sample_and_hold_ss_swigregister(sample_and_hold_ss)

def sample_and_hold_ss_make():
  """
    sample_and_hold_ss_make() -> sample_and_hold_ss_sptr

    sample and hold circuit

    Samples the data stream (input stream 0) and holds the value if the control signal is 1 (intput stream 1).

    Constructor Specific Documentation:


    """
  return _blocks_swig5.sample_and_hold_ss_make()

class sample_and_hold_ii(object):
    """
    sample and hold circuit

    Samples the data stream (input stream 0) and holds the value if the control signal is 1 (intput stream 1).

    Constructor Specific Documentation:


    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> sample_and_hold_ii_sptr

        sample and hold circuit

        Samples the data stream (input stream 0) and holds the value if the control signal is 1 (intput stream 1).

        Constructor Specific Documentation:


        """
        return _blocks_swig5.sample_and_hold_ii_make()

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig5.delete_sample_and_hold_ii
    __del__ = lambda self : None;
sample_and_hold_ii_swigregister = _blocks_swig5.sample_and_hold_ii_swigregister
sample_and_hold_ii_swigregister(sample_and_hold_ii)

def sample_and_hold_ii_make():
  """
    sample_and_hold_ii_make() -> sample_and_hold_ii_sptr

    sample and hold circuit

    Samples the data stream (input stream 0) and holds the value if the control signal is 1 (intput stream 1).

    Constructor Specific Documentation:


    """
  return _blocks_swig5.sample_and_hold_ii_make()

class sample_and_hold_ff(object):
    """
    sample and hold circuit

    Samples the data stream (input stream 0) and holds the value if the control signal is 1 (intput stream 1).

    Constructor Specific Documentation:


    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> sample_and_hold_ff_sptr

        sample and hold circuit

        Samples the data stream (input stream 0) and holds the value if the control signal is 1 (intput stream 1).

        Constructor Specific Documentation:


        """
        return _blocks_swig5.sample_and_hold_ff_make()

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig5.delete_sample_and_hold_ff
    __del__ = lambda self : None;
sample_and_hold_ff_swigregister = _blocks_swig5.sample_and_hold_ff_swigregister
sample_and_hold_ff_swigregister(sample_and_hold_ff)

def sample_and_hold_ff_make():
  """
    sample_and_hold_ff_make() -> sample_and_hold_ff_sptr

    sample and hold circuit

    Samples the data stream (input stream 0) and holds the value if the control signal is 1 (intput stream 1).

    Constructor Specific Documentation:


    """
  return _blocks_swig5.sample_and_hold_ff_make()

class short_to_char(object):
    """
    Convert stream of shorts to a stream of chars.

    This block strips off the least significant byte from the short value.

    [0x00ff, 0x0ff0, 0xff00] => [0x00, 0x0f, 0xff]

    Converts  length vectors of input short samples to chars, dividing each element by 256.

    Constructor Specific Documentation:

    Build a short to char block.

    Args:
        vlen : vector length of data streams.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> short_to_char_sptr

        Convert stream of shorts to a stream of chars.

        This block strips off the least significant byte from the short value.

        [0x00ff, 0x0ff0, 0xff00] => [0x00, 0x0f, 0xff]

        Converts  length vectors of input short samples to chars, dividing each element by 256.

        Constructor Specific Documentation:

        Build a short to char block.

        Args:
            vlen : vector length of data streams.
        """
        return _blocks_swig5.short_to_char_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig5.delete_short_to_char
    __del__ = lambda self : None;
short_to_char_swigregister = _blocks_swig5.short_to_char_swigregister
short_to_char_swigregister(short_to_char)

def short_to_char_make(vlen=1):
  """
    short_to_char_make(size_t vlen=1) -> short_to_char_sptr

    Convert stream of shorts to a stream of chars.

    This block strips off the least significant byte from the short value.

    [0x00ff, 0x0ff0, 0xff00] => [0x00, 0x0f, 0xff]

    Converts  length vectors of input short samples to chars, dividing each element by 256.

    Constructor Specific Documentation:

    Build a short to char block.

    Args:
        vlen : vector length of data streams.
    """
  return _blocks_swig5.short_to_char_make(vlen)

class short_to_float(object):
    """
    Convert stream of shorts to a stream of floats.

    Constructor Specific Documentation:

    Build a short to float block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar divider to change the output signal scale.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(vlen=1, scale=1.0):
        """
        make(size_t vlen=1, float scale=1.0) -> short_to_float_sptr

        Convert stream of shorts to a stream of floats.

        Constructor Specific Documentation:

        Build a short to float block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar divider to change the output signal scale.
        """
        return _blocks_swig5.short_to_float_make(vlen, scale)

    make = staticmethod(make)
    def scale(self):
        """
        scale(short_to_float self) -> float

        Get the scalar divider value.
        """
        return _blocks_swig5.short_to_float_scale(self)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(short_to_float self, float scale)

        Set the scalar divider value.
        """
        return _blocks_swig5.short_to_float_set_scale(self, *args, **kwargs)

    __swig_destroy__ = _blocks_swig5.delete_short_to_float
    __del__ = lambda self : None;
short_to_float_swigregister = _blocks_swig5.short_to_float_swigregister
short_to_float_swigregister(short_to_float)

def short_to_float_make(vlen=1, scale=1.0):
  """
    short_to_float_make(size_t vlen=1, float scale=1.0) -> short_to_float_sptr

    Convert stream of shorts to a stream of floats.

    Constructor Specific Documentation:

    Build a short to float block.

    Args:
        vlen : vector length of data streams.
        scale : a scalar divider to change the output signal scale.
    """
  return _blocks_swig5.short_to_float_make(vlen, scale)

class socket_pdu(object):
    """
    Creates socket interface and translates traffic to PDUs.

    Constructor Specific Documentation:

    Construct a SOCKET PDU interface.

    Args:
        type : "TCP_SERVER", "TCP_CLIENT", "UDP_SERVER", or "UDP_CLIENT"
        addr : network address to use
        port : network port to use
        MTU : maximum transmission unit
        tcp_no_delay : TCP No Delay option (set to True to disable Nagle algorithm)
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(std::string type, std::string addr, std::string port, int MTU=10000, bool tcp_no_delay=False) -> socket_pdu_sptr

        Creates socket interface and translates traffic to PDUs.

        Constructor Specific Documentation:

        Construct a SOCKET PDU interface.

        Args:
            type : "TCP_SERVER", "TCP_CLIENT", "UDP_SERVER", or "UDP_CLIENT"
            addr : network address to use
            port : network port to use
            MTU : maximum transmission unit
            tcp_no_delay : TCP No Delay option (set to True to disable Nagle algorithm)
        """
        return _blocks_swig5.socket_pdu_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig5.delete_socket_pdu
    __del__ = lambda self : None;
socket_pdu_swigregister = _blocks_swig5.socket_pdu_swigregister
socket_pdu_swigregister(socket_pdu)

def socket_pdu_make(*args, **kwargs):
  """
    socket_pdu_make(std::string type, std::string addr, std::string port, int MTU=10000, bool tcp_no_delay=False) -> socket_pdu_sptr

    Creates socket interface and translates traffic to PDUs.

    Constructor Specific Documentation:

    Construct a SOCKET PDU interface.

    Args:
        type : "TCP_SERVER", "TCP_CLIENT", "UDP_SERVER", or "UDP_CLIENT"
        addr : network address to use
        port : network port to use
        MTU : maximum transmission unit
        tcp_no_delay : TCP No Delay option (set to True to disable Nagle algorithm)
    """
  return _blocks_swig5.socket_pdu_make(*args, **kwargs)

class stretch_ff(object):
    """
    adjust y-range of an input vector by mapping to range (max-of-input, stipulated-min). Primarily for spectral signature matching by normalizing spectrum dynamic ranges.

    Constructor Specific Documentation:

    Make a stretch block.

    Args:
        lo : Set low value for range.
        vlen : vector length of input stream.
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(float lo, size_t vlen=1) -> stretch_ff_sptr

        adjust y-range of an input vector by mapping to range (max-of-input, stipulated-min). Primarily for spectral signature matching by normalizing spectrum dynamic ranges.

        Constructor Specific Documentation:

        Make a stretch block.

        Args:
            lo : Set low value for range.
            vlen : vector length of input stream.
        """
        return _blocks_swig5.stretch_ff_make(*args, **kwargs)

    make = staticmethod(make)
    def lo(self):
        """lo(stretch_ff self) -> float"""
        return _blocks_swig5.stretch_ff_lo(self)

    def set_lo(self, *args, **kwargs):
        """set_lo(stretch_ff self, float lo)"""
        return _blocks_swig5.stretch_ff_set_lo(self, *args, **kwargs)

    def vlen(self):
        """vlen(stretch_ff self) -> size_t"""
        return _blocks_swig5.stretch_ff_vlen(self)

    __swig_destroy__ = _blocks_swig5.delete_stretch_ff
    __del__ = lambda self : None;
stretch_ff_swigregister = _blocks_swig5.stretch_ff_swigregister
stretch_ff_swigregister(stretch_ff)

def stretch_ff_make(*args, **kwargs):
  """
    stretch_ff_make(float lo, size_t vlen=1) -> stretch_ff_sptr

    adjust y-range of an input vector by mapping to range (max-of-input, stipulated-min). Primarily for spectral signature matching by normalizing spectrum dynamic ranges.

    Constructor Specific Documentation:

    Make a stretch block.

    Args:
        lo : Set low value for range.
        vlen : vector length of input stream.
    """
  return _blocks_swig5.stretch_ff_make(*args, **kwargs)

class sub_ff(object):
    """
    output = input_0 - input_1 - ...)

    Subtract across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> sub_ff_sptr

        output = input_0 - input_1 - ...)

        Subtract across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig5.sub_ff_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig5.delete_sub_ff
    __del__ = lambda self : None;
sub_ff_swigregister = _blocks_swig5.sub_ff_swigregister
sub_ff_swigregister(sub_ff)

def sub_ff_make(vlen=1):
  """
    sub_ff_make(size_t vlen=1) -> sub_ff_sptr

    output = input_0 - input_1 - ...)

    Subtract across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig5.sub_ff_make(vlen)

class sub_ss(object):
    """
    output = input_0 - input_1 - ...)

    Subtract across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> sub_ss_sptr

        output = input_0 - input_1 - ...)

        Subtract across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig5.sub_ss_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig5.delete_sub_ss
    __del__ = lambda self : None;
sub_ss_swigregister = _blocks_swig5.sub_ss_swigregister
sub_ss_swigregister(sub_ss)

def sub_ss_make(vlen=1):
  """
    sub_ss_make(size_t vlen=1) -> sub_ss_sptr

    output = input_0 - input_1 - ...)

    Subtract across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig5.sub_ss_make(vlen)

class sub_ii(object):
    """
    output = input_0 - input_1 - ...)

    Subtract across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> sub_ii_sptr

        output = input_0 - input_1 - ...)

        Subtract across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig5.sub_ii_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig5.delete_sub_ii
    __del__ = lambda self : None;
sub_ii_swigregister = _blocks_swig5.sub_ii_swigregister
sub_ii_swigregister(sub_ii)

def sub_ii_make(vlen=1):
  """
    sub_ii_make(size_t vlen=1) -> sub_ii_sptr

    output = input_0 - input_1 - ...)

    Subtract across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig5.sub_ii_make(vlen)

class sub_cc(object):
    """
    output = input_0 - input_1 - ...)

    Subtract across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(vlen=1):
        """
        make(size_t vlen=1) -> sub_cc_sptr

        output = input_0 - input_1 - ...)

        Subtract across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig5.sub_cc_make(vlen)

    make = staticmethod(make)
    __swig_destroy__ = _blocks_swig5.delete_sub_cc
    __del__ = lambda self : None;
sub_cc_swigregister = _blocks_swig5.sub_cc_swigregister
sub_cc_swigregister(sub_cc)

def sub_cc_make(vlen=1):
  """
    sub_cc_make(size_t vlen=1) -> sub_cc_sptr

    output = input_0 - input_1 - ...)

    Subtract across all input streams.

    Constructor Specific Documentation:



    Args:
        vlen : 
    """
  return _blocks_swig5.sub_cc_make(vlen)

class random_pdu_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::random_pdu)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::random_pdu)> self) -> random_pdu_sptr
        __init__(boost::shared_ptr<(gr::blocks::random_pdu)> self, random_pdu p) -> random_pdu_sptr
        """
        this = _blocks_swig5.new_random_pdu_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(random_pdu_sptr self) -> random_pdu"""
        return _blocks_swig5.random_pdu_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig5.delete_random_pdu_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(random_pdu_sptr self, int mintime, int maxtime, char byte_mask=0xFF, int length_modulo=1) -> random_pdu_sptr

        Sends a random PDU at intervals.

        Constructor Specific Documentation:

        Construct a random PDU generator.

        Args:
            mintime : 
            maxtime : 
            byte_mask : 
            length_modulo : 
        """
        return _blocks_swig5.random_pdu_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(random_pdu_sptr self) -> unsigned int"""
        return _blocks_swig5.random_pdu_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(random_pdu_sptr self, int which, int delay)
        declare_sample_delay(random_pdu_sptr self, unsigned int delay)
        """
        return _blocks_swig5.random_pdu_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(random_pdu_sptr self, int which) -> unsigned int"""
        return _blocks_swig5.random_pdu_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(random_pdu_sptr self) -> int"""
        return _blocks_swig5.random_pdu_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(random_pdu_sptr self) -> double"""
        return _blocks_swig5.random_pdu_sptr_relative_rate(self)

    def start(self):
        """start(random_pdu_sptr self) -> bool"""
        return _blocks_swig5.random_pdu_sptr_start(self)

    def stop(self):
        """stop(random_pdu_sptr self) -> bool"""
        return _blocks_swig5.random_pdu_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(random_pdu_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig5.random_pdu_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(random_pdu_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig5.random_pdu_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(random_pdu_sptr self) -> int"""
        return _blocks_swig5.random_pdu_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(random_pdu_sptr self, int m)"""
        return _blocks_swig5.random_pdu_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(random_pdu_sptr self)"""
        return _blocks_swig5.random_pdu_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(random_pdu_sptr self) -> bool"""
        return _blocks_swig5.random_pdu_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(random_pdu_sptr self, int m)"""
        return _blocks_swig5.random_pdu_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(random_pdu_sptr self) -> int"""
        return _blocks_swig5.random_pdu_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(random_pdu_sptr self, int i) -> long"""
        return _blocks_swig5.random_pdu_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(random_pdu_sptr self, long max_output_buffer)
        set_max_output_buffer(random_pdu_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig5.random_pdu_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(random_pdu_sptr self, int i) -> long"""
        return _blocks_swig5.random_pdu_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(random_pdu_sptr self, long min_output_buffer)
        set_min_output_buffer(random_pdu_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig5.random_pdu_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(random_pdu_sptr self) -> float"""
        return _blocks_swig5.random_pdu_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(random_pdu_sptr self) -> float"""
        return _blocks_swig5.random_pdu_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(random_pdu_sptr self) -> float"""
        return _blocks_swig5.random_pdu_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(random_pdu_sptr self) -> float"""
        return _blocks_swig5.random_pdu_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(random_pdu_sptr self) -> float"""
        return _blocks_swig5.random_pdu_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(random_pdu_sptr self) -> float"""
        return _blocks_swig5.random_pdu_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(random_pdu_sptr self, int which) -> float
        pc_input_buffers_full(random_pdu_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.random_pdu_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(random_pdu_sptr self, int which) -> float
        pc_input_buffers_full_avg(random_pdu_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.random_pdu_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(random_pdu_sptr self, int which) -> float
        pc_input_buffers_full_var(random_pdu_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.random_pdu_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(random_pdu_sptr self, int which) -> float
        pc_output_buffers_full(random_pdu_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.random_pdu_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(random_pdu_sptr self, int which) -> float
        pc_output_buffers_full_avg(random_pdu_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.random_pdu_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(random_pdu_sptr self, int which) -> float
        pc_output_buffers_full_var(random_pdu_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.random_pdu_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(random_pdu_sptr self) -> float"""
        return _blocks_swig5.random_pdu_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(random_pdu_sptr self) -> float"""
        return _blocks_swig5.random_pdu_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(random_pdu_sptr self) -> float"""
        return _blocks_swig5.random_pdu_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(random_pdu_sptr self) -> float"""
        return _blocks_swig5.random_pdu_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(random_pdu_sptr self) -> float"""
        return _blocks_swig5.random_pdu_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(random_pdu_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig5.random_pdu_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(random_pdu_sptr self)"""
        return _blocks_swig5.random_pdu_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(random_pdu_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig5.random_pdu_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(random_pdu_sptr self) -> int"""
        return _blocks_swig5.random_pdu_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(random_pdu_sptr self) -> int"""
        return _blocks_swig5.random_pdu_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(random_pdu_sptr self, int priority) -> int"""
        return _blocks_swig5.random_pdu_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(random_pdu_sptr self) -> std::string"""
        return _blocks_swig5.random_pdu_sptr_name(self)

    def symbol_name(self):
        """symbol_name(random_pdu_sptr self) -> std::string"""
        return _blocks_swig5.random_pdu_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(random_pdu_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.random_pdu_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(random_pdu_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.random_pdu_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(random_pdu_sptr self) -> long"""
        return _blocks_swig5.random_pdu_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(random_pdu_sptr self) -> basic_block_sptr"""
        return _blocks_swig5.random_pdu_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(random_pdu_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig5.random_pdu_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(random_pdu_sptr self) -> std::string"""
        return _blocks_swig5.random_pdu_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(random_pdu_sptr self, std::string name)"""
        return _blocks_swig5.random_pdu_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(random_pdu_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig5.random_pdu_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(random_pdu_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.random_pdu_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(random_pdu_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.random_pdu_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(random_pdu_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig5.random_pdu_sptr_message_subscribers(self, *args, **kwargs)

random_pdu_sptr_swigregister = _blocks_swig5.random_pdu_sptr_swigregister
random_pdu_sptr_swigregister(random_pdu_sptr)

random_pdu_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
random_pdu = random_pdu.make;

class regenerate_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::regenerate_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::regenerate_bb)> self) -> regenerate_bb_sptr
        __init__(boost::shared_ptr<(gr::blocks::regenerate_bb)> self, regenerate_bb p) -> regenerate_bb_sptr
        """
        this = _blocks_swig5.new_regenerate_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(regenerate_bb_sptr self) -> regenerate_bb"""
        return _blocks_swig5.regenerate_bb_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig5.delete_regenerate_bb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(regenerate_bb_sptr self, int period, unsigned int max_regen=500) -> regenerate_bb_sptr

        Detect the peak of a signal and repeat every period samples.

        If a peak is detected, this block outputs a 1 repeated every period samples until reset by detection of another 1 on the input or stopped after max_regen regenerations have occurred.

        Note that if max_regen=(-1)/ULONG_MAX then the regeneration will run forever.

        Constructor Specific Documentation:

        Make a regenerate block.

        Args:
            period : The number of samples between regenerations
            max_regen : The maximum number of regenerations to perform; if set to ULONG_MAX, it will regenerate continuously.
        """
        return _blocks_swig5.regenerate_bb_sptr_make(self, *args, **kwargs)

    def set_max_regen(self, *args, **kwargs):
        """
        set_max_regen(regenerate_bb_sptr self, unsigned int regen)

        Reset the maximum regeneration count; this will reset the current regen.
        """
        return _blocks_swig5.regenerate_bb_sptr_set_max_regen(self, *args, **kwargs)

    def set_period(self, *args, **kwargs):
        """
        set_period(regenerate_bb_sptr self, int period)

        Reset the period of regenerations; this will reset the current regen.
        """
        return _blocks_swig5.regenerate_bb_sptr_set_period(self, *args, **kwargs)

    def max_regen(self):
        """
        max_regen(regenerate_bb_sptr self) -> unsigned int

        return the maximum regeneration count.
        """
        return _blocks_swig5.regenerate_bb_sptr_max_regen(self)

    def period(self):
        """
        period(regenerate_bb_sptr self) -> int

        return the regeneration period.
        """
        return _blocks_swig5.regenerate_bb_sptr_period(self)

    def history(self):
        """history(regenerate_bb_sptr self) -> unsigned int"""
        return _blocks_swig5.regenerate_bb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(regenerate_bb_sptr self, int which, int delay)
        declare_sample_delay(regenerate_bb_sptr self, unsigned int delay)
        """
        return _blocks_swig5.regenerate_bb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(regenerate_bb_sptr self, int which) -> unsigned int"""
        return _blocks_swig5.regenerate_bb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(regenerate_bb_sptr self) -> int"""
        return _blocks_swig5.regenerate_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(regenerate_bb_sptr self) -> double"""
        return _blocks_swig5.regenerate_bb_sptr_relative_rate(self)

    def start(self):
        """start(regenerate_bb_sptr self) -> bool"""
        return _blocks_swig5.regenerate_bb_sptr_start(self)

    def stop(self):
        """stop(regenerate_bb_sptr self) -> bool"""
        return _blocks_swig5.regenerate_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(regenerate_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig5.regenerate_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(regenerate_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig5.regenerate_bb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(regenerate_bb_sptr self) -> int"""
        return _blocks_swig5.regenerate_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(regenerate_bb_sptr self, int m)"""
        return _blocks_swig5.regenerate_bb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(regenerate_bb_sptr self)"""
        return _blocks_swig5.regenerate_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(regenerate_bb_sptr self) -> bool"""
        return _blocks_swig5.regenerate_bb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(regenerate_bb_sptr self, int m)"""
        return _blocks_swig5.regenerate_bb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(regenerate_bb_sptr self) -> int"""
        return _blocks_swig5.regenerate_bb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(regenerate_bb_sptr self, int i) -> long"""
        return _blocks_swig5.regenerate_bb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(regenerate_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(regenerate_bb_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig5.regenerate_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(regenerate_bb_sptr self, int i) -> long"""
        return _blocks_swig5.regenerate_bb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(regenerate_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(regenerate_bb_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig5.regenerate_bb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(regenerate_bb_sptr self) -> float"""
        return _blocks_swig5.regenerate_bb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(regenerate_bb_sptr self) -> float"""
        return _blocks_swig5.regenerate_bb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(regenerate_bb_sptr self) -> float"""
        return _blocks_swig5.regenerate_bb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(regenerate_bb_sptr self) -> float"""
        return _blocks_swig5.regenerate_bb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(regenerate_bb_sptr self) -> float"""
        return _blocks_swig5.regenerate_bb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(regenerate_bb_sptr self) -> float"""
        return _blocks_swig5.regenerate_bb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(regenerate_bb_sptr self, int which) -> float
        pc_input_buffers_full(regenerate_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.regenerate_bb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(regenerate_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(regenerate_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.regenerate_bb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(regenerate_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(regenerate_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.regenerate_bb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(regenerate_bb_sptr self, int which) -> float
        pc_output_buffers_full(regenerate_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.regenerate_bb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(regenerate_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(regenerate_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.regenerate_bb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(regenerate_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(regenerate_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.regenerate_bb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(regenerate_bb_sptr self) -> float"""
        return _blocks_swig5.regenerate_bb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(regenerate_bb_sptr self) -> float"""
        return _blocks_swig5.regenerate_bb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(regenerate_bb_sptr self) -> float"""
        return _blocks_swig5.regenerate_bb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(regenerate_bb_sptr self) -> float"""
        return _blocks_swig5.regenerate_bb_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(regenerate_bb_sptr self) -> float"""
        return _blocks_swig5.regenerate_bb_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(regenerate_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig5.regenerate_bb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(regenerate_bb_sptr self)"""
        return _blocks_swig5.regenerate_bb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(regenerate_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig5.regenerate_bb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(regenerate_bb_sptr self) -> int"""
        return _blocks_swig5.regenerate_bb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(regenerate_bb_sptr self) -> int"""
        return _blocks_swig5.regenerate_bb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(regenerate_bb_sptr self, int priority) -> int"""
        return _blocks_swig5.regenerate_bb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(regenerate_bb_sptr self) -> std::string"""
        return _blocks_swig5.regenerate_bb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(regenerate_bb_sptr self) -> std::string"""
        return _blocks_swig5.regenerate_bb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(regenerate_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.regenerate_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(regenerate_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.regenerate_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(regenerate_bb_sptr self) -> long"""
        return _blocks_swig5.regenerate_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(regenerate_bb_sptr self) -> basic_block_sptr"""
        return _blocks_swig5.regenerate_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(regenerate_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig5.regenerate_bb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(regenerate_bb_sptr self) -> std::string"""
        return _blocks_swig5.regenerate_bb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(regenerate_bb_sptr self, std::string name)"""
        return _blocks_swig5.regenerate_bb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(regenerate_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig5.regenerate_bb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(regenerate_bb_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.regenerate_bb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(regenerate_bb_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.regenerate_bb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(regenerate_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig5.regenerate_bb_sptr_message_subscribers(self, *args, **kwargs)

regenerate_bb_sptr_swigregister = _blocks_swig5.regenerate_bb_sptr_swigregister
regenerate_bb_sptr_swigregister(regenerate_bb_sptr)

regenerate_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
regenerate_bb = regenerate_bb.make;

class repack_bits_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::repack_bits_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::repack_bits_bb)> self) -> repack_bits_bb_sptr
        __init__(boost::shared_ptr<(gr::blocks::repack_bits_bb)> self, repack_bits_bb p) -> repack_bits_bb_sptr
        """
        this = _blocks_swig5.new_repack_bits_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(repack_bits_bb_sptr self) -> repack_bits_bb"""
        return _blocks_swig5.repack_bits_bb_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig5.delete_repack_bits_bb_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(repack_bits_bb_sptr self, int k, int l=8, std::string const & tsb_tag_key="", bool align_output=False, gr::endianness_t endianness=GR_LSB_FIRST) -> repack_bits_bb_sptr

        Repack  bits from the input stream onto  bits of the output stream.

        No bits are lost here; any value for k and l (within [1, 8]) is allowed. On every fresh input byte, it starts reading on the LSB, and starts copying to the LSB as well.

        When supplying a tag name, this block operates on tagged streams. In this case, it can happen that the input data or the output data becomes unaligned when k * input length is not equal to l * output length. In this case, the  parameter is used to decide which data packet to align.

        Usually,  is false for unpacking (k=8, l < 8) and false for reversing that.


        Example
        Say you're tx'ing 8-PSK and therefore set k=8, l=3 on the transmit side before the modulator. Now assume you're transmitting a single byte of data. Your incoming tagged stream has length 1, the outgoing has length 3. However, the third item is actually only carrying 2 bits of relevant data, the bits do not align with the boundaries. So you set  = false, because the output can be unaligned.

        Now say you're doing the inverse: packing those three items into full bytes. How do you interpret those three bytes? Without this flag, you'd have to assume there's 9 relevant bits in there, so you'd end up with 2 bytes of output data. But in the packing case, you want the  to be aligned; all output bits must be useful. By asserting this flag, the packing algorithm tries to do this and in this case assumes that since we have alignment after 8 bits, the 9th can be discarded.

        Constructor Specific Documentation:



        Args:
            k : Number of relevant bits on the input stream
            l : Number of relevant bits on the output stream
            tsb_tag_key : If not empty, this is the key for the length tag.
            align_output : If tsb_tag_key is given, this controls if the input or the output is aligned.
            endianness : The endianness of the output data stream (LSB or MSB).
        """
        return _blocks_swig5.repack_bits_bb_sptr_make(self, *args, **kwargs)

    def set_k_and_l(self, *args, **kwargs):
        """set_k_and_l(repack_bits_bb_sptr self, int k, int l)"""
        return _blocks_swig5.repack_bits_bb_sptr_set_k_and_l(self, *args, **kwargs)

    def history(self):
        """history(repack_bits_bb_sptr self) -> unsigned int"""
        return _blocks_swig5.repack_bits_bb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(repack_bits_bb_sptr self, int which, int delay)
        declare_sample_delay(repack_bits_bb_sptr self, unsigned int delay)
        """
        return _blocks_swig5.repack_bits_bb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(repack_bits_bb_sptr self, int which) -> unsigned int"""
        return _blocks_swig5.repack_bits_bb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(repack_bits_bb_sptr self) -> int"""
        return _blocks_swig5.repack_bits_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(repack_bits_bb_sptr self) -> double"""
        return _blocks_swig5.repack_bits_bb_sptr_relative_rate(self)

    def start(self):
        """start(repack_bits_bb_sptr self) -> bool"""
        return _blocks_swig5.repack_bits_bb_sptr_start(self)

    def stop(self):
        """stop(repack_bits_bb_sptr self) -> bool"""
        return _blocks_swig5.repack_bits_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(repack_bits_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig5.repack_bits_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(repack_bits_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig5.repack_bits_bb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(repack_bits_bb_sptr self) -> int"""
        return _blocks_swig5.repack_bits_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(repack_bits_bb_sptr self, int m)"""
        return _blocks_swig5.repack_bits_bb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(repack_bits_bb_sptr self)"""
        return _blocks_swig5.repack_bits_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(repack_bits_bb_sptr self) -> bool"""
        return _blocks_swig5.repack_bits_bb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(repack_bits_bb_sptr self, int m)"""
        return _blocks_swig5.repack_bits_bb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(repack_bits_bb_sptr self) -> int"""
        return _blocks_swig5.repack_bits_bb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(repack_bits_bb_sptr self, int i) -> long"""
        return _blocks_swig5.repack_bits_bb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(repack_bits_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(repack_bits_bb_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig5.repack_bits_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(repack_bits_bb_sptr self, int i) -> long"""
        return _blocks_swig5.repack_bits_bb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(repack_bits_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(repack_bits_bb_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig5.repack_bits_bb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(repack_bits_bb_sptr self) -> float"""
        return _blocks_swig5.repack_bits_bb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(repack_bits_bb_sptr self) -> float"""
        return _blocks_swig5.repack_bits_bb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(repack_bits_bb_sptr self) -> float"""
        return _blocks_swig5.repack_bits_bb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(repack_bits_bb_sptr self) -> float"""
        return _blocks_swig5.repack_bits_bb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(repack_bits_bb_sptr self) -> float"""
        return _blocks_swig5.repack_bits_bb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(repack_bits_bb_sptr self) -> float"""
        return _blocks_swig5.repack_bits_bb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(repack_bits_bb_sptr self, int which) -> float
        pc_input_buffers_full(repack_bits_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.repack_bits_bb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(repack_bits_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(repack_bits_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.repack_bits_bb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(repack_bits_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(repack_bits_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.repack_bits_bb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(repack_bits_bb_sptr self, int which) -> float
        pc_output_buffers_full(repack_bits_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.repack_bits_bb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(repack_bits_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(repack_bits_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.repack_bits_bb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(repack_bits_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(repack_bits_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.repack_bits_bb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(repack_bits_bb_sptr self) -> float"""
        return _blocks_swig5.repack_bits_bb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(repack_bits_bb_sptr self) -> float"""
        return _blocks_swig5.repack_bits_bb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(repack_bits_bb_sptr self) -> float"""
        return _blocks_swig5.repack_bits_bb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(repack_bits_bb_sptr self) -> float"""
        return _blocks_swig5.repack_bits_bb_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(repack_bits_bb_sptr self) -> float"""
        return _blocks_swig5.repack_bits_bb_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(repack_bits_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig5.repack_bits_bb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(repack_bits_bb_sptr self)"""
        return _blocks_swig5.repack_bits_bb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(repack_bits_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig5.repack_bits_bb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(repack_bits_bb_sptr self) -> int"""
        return _blocks_swig5.repack_bits_bb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(repack_bits_bb_sptr self) -> int"""
        return _blocks_swig5.repack_bits_bb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(repack_bits_bb_sptr self, int priority) -> int"""
        return _blocks_swig5.repack_bits_bb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(repack_bits_bb_sptr self) -> std::string"""
        return _blocks_swig5.repack_bits_bb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(repack_bits_bb_sptr self) -> std::string"""
        return _blocks_swig5.repack_bits_bb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(repack_bits_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.repack_bits_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(repack_bits_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.repack_bits_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(repack_bits_bb_sptr self) -> long"""
        return _blocks_swig5.repack_bits_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(repack_bits_bb_sptr self) -> basic_block_sptr"""
        return _blocks_swig5.repack_bits_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(repack_bits_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig5.repack_bits_bb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(repack_bits_bb_sptr self) -> std::string"""
        return _blocks_swig5.repack_bits_bb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(repack_bits_bb_sptr self, std::string name)"""
        return _blocks_swig5.repack_bits_bb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(repack_bits_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig5.repack_bits_bb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(repack_bits_bb_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.repack_bits_bb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(repack_bits_bb_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.repack_bits_bb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(repack_bits_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig5.repack_bits_bb_sptr_message_subscribers(self, *args, **kwargs)

repack_bits_bb_sptr_swigregister = _blocks_swig5.repack_bits_bb_sptr_swigregister
repack_bits_bb_sptr_swigregister(repack_bits_bb_sptr)

repack_bits_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
repack_bits_bb = repack_bits_bb.make;

class repeat_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::repeat)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::repeat)> self) -> repeat_sptr
        __init__(boost::shared_ptr<(gr::blocks::repeat)> self, repeat p) -> repeat_sptr
        """
        this = _blocks_swig5.new_repeat_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(repeat_sptr self) -> repeat"""
        return _blocks_swig5.repeat_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig5.delete_repeat_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(repeat_sptr self, size_t itemsize, int repeat) -> repeat_sptr

        repeat each input  times

        Message Ports:

        Constructor Specific Documentation:

        Make a repeat block.

        Args:
            itemsize : stream itemsize
            repeat : number of times to repeat the input
        """
        return _blocks_swig5.repeat_sptr_make(self, *args, **kwargs)

    def interpolation(self):
        """
        interpolation(repeat_sptr self) -> int

        Return current interpolation.
        """
        return _blocks_swig5.repeat_sptr_interpolation(self)

    def set_interpolation(self, *args, **kwargs):
        """
        set_interpolation(repeat_sptr self, int interp)

        sets the interpolation

        Call this method in a callback to adjust the interpolation at run time.
        """
        return _blocks_swig5.repeat_sptr_set_interpolation(self, *args, **kwargs)

    def history(self):
        """history(repeat_sptr self) -> unsigned int"""
        return _blocks_swig5.repeat_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(repeat_sptr self, int which, int delay)
        declare_sample_delay(repeat_sptr self, unsigned int delay)
        """
        return _blocks_swig5.repeat_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(repeat_sptr self, int which) -> unsigned int"""
        return _blocks_swig5.repeat_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(repeat_sptr self) -> int"""
        return _blocks_swig5.repeat_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(repeat_sptr self) -> double"""
        return _blocks_swig5.repeat_sptr_relative_rate(self)

    def start(self):
        """start(repeat_sptr self) -> bool"""
        return _blocks_swig5.repeat_sptr_start(self)

    def stop(self):
        """stop(repeat_sptr self) -> bool"""
        return _blocks_swig5.repeat_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(repeat_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig5.repeat_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(repeat_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig5.repeat_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(repeat_sptr self) -> int"""
        return _blocks_swig5.repeat_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(repeat_sptr self, int m)"""
        return _blocks_swig5.repeat_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(repeat_sptr self)"""
        return _blocks_swig5.repeat_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(repeat_sptr self) -> bool"""
        return _blocks_swig5.repeat_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(repeat_sptr self, int m)"""
        return _blocks_swig5.repeat_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(repeat_sptr self) -> int"""
        return _blocks_swig5.repeat_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(repeat_sptr self, int i) -> long"""
        return _blocks_swig5.repeat_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(repeat_sptr self, long max_output_buffer)
        set_max_output_buffer(repeat_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig5.repeat_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(repeat_sptr self, int i) -> long"""
        return _blocks_swig5.repeat_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(repeat_sptr self, long min_output_buffer)
        set_min_output_buffer(repeat_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig5.repeat_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(repeat_sptr self) -> float"""
        return _blocks_swig5.repeat_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(repeat_sptr self) -> float"""
        return _blocks_swig5.repeat_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(repeat_sptr self) -> float"""
        return _blocks_swig5.repeat_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(repeat_sptr self) -> float"""
        return _blocks_swig5.repeat_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(repeat_sptr self) -> float"""
        return _blocks_swig5.repeat_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(repeat_sptr self) -> float"""
        return _blocks_swig5.repeat_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(repeat_sptr self, int which) -> float
        pc_input_buffers_full(repeat_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.repeat_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(repeat_sptr self, int which) -> float
        pc_input_buffers_full_avg(repeat_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.repeat_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(repeat_sptr self, int which) -> float
        pc_input_buffers_full_var(repeat_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.repeat_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(repeat_sptr self, int which) -> float
        pc_output_buffers_full(repeat_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.repeat_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(repeat_sptr self, int which) -> float
        pc_output_buffers_full_avg(repeat_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.repeat_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(repeat_sptr self, int which) -> float
        pc_output_buffers_full_var(repeat_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.repeat_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(repeat_sptr self) -> float"""
        return _blocks_swig5.repeat_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(repeat_sptr self) -> float"""
        return _blocks_swig5.repeat_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(repeat_sptr self) -> float"""
        return _blocks_swig5.repeat_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(repeat_sptr self) -> float"""
        return _blocks_swig5.repeat_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(repeat_sptr self) -> float"""
        return _blocks_swig5.repeat_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(repeat_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig5.repeat_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(repeat_sptr self)"""
        return _blocks_swig5.repeat_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(repeat_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig5.repeat_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(repeat_sptr self) -> int"""
        return _blocks_swig5.repeat_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(repeat_sptr self) -> int"""
        return _blocks_swig5.repeat_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(repeat_sptr self, int priority) -> int"""
        return _blocks_swig5.repeat_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(repeat_sptr self) -> std::string"""
        return _blocks_swig5.repeat_sptr_name(self)

    def symbol_name(self):
        """symbol_name(repeat_sptr self) -> std::string"""
        return _blocks_swig5.repeat_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(repeat_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.repeat_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(repeat_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.repeat_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(repeat_sptr self) -> long"""
        return _blocks_swig5.repeat_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(repeat_sptr self) -> basic_block_sptr"""
        return _blocks_swig5.repeat_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(repeat_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig5.repeat_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(repeat_sptr self) -> std::string"""
        return _blocks_swig5.repeat_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(repeat_sptr self, std::string name)"""
        return _blocks_swig5.repeat_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(repeat_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig5.repeat_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(repeat_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.repeat_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(repeat_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.repeat_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(repeat_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig5.repeat_sptr_message_subscribers(self, *args, **kwargs)

repeat_sptr_swigregister = _blocks_swig5.repeat_sptr_swigregister
repeat_sptr_swigregister(repeat_sptr)

repeat_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
repeat = repeat.make;

class rms_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::rms_cf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::rms_cf)> self) -> rms_cf_sptr
        __init__(boost::shared_ptr<(gr::blocks::rms_cf)> self, rms_cf p) -> rms_cf_sptr
        """
        this = _blocks_swig5.new_rms_cf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(rms_cf_sptr self) -> rms_cf"""
        return _blocks_swig5.rms_cf_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig5.delete_rms_cf_sptr
    __del__ = lambda self : None;
    def make(self, alpha=0.0001):
        """
        make(rms_cf_sptr self, double alpha=0.0001) -> rms_cf_sptr

        RMS average power.

        Constructor Specific Documentation:

        Make an RMS calc. block.

        Args:
            alpha : gain for running average filter.
        """
        return _blocks_swig5.rms_cf_sptr_make(self, alpha)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(rms_cf_sptr self, double alpha)"""
        return _blocks_swig5.rms_cf_sptr_set_alpha(self, *args, **kwargs)

    def history(self):
        """history(rms_cf_sptr self) -> unsigned int"""
        return _blocks_swig5.rms_cf_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(rms_cf_sptr self, int which, int delay)
        declare_sample_delay(rms_cf_sptr self, unsigned int delay)
        """
        return _blocks_swig5.rms_cf_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(rms_cf_sptr self, int which) -> unsigned int"""
        return _blocks_swig5.rms_cf_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(rms_cf_sptr self) -> int"""
        return _blocks_swig5.rms_cf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(rms_cf_sptr self) -> double"""
        return _blocks_swig5.rms_cf_sptr_relative_rate(self)

    def start(self):
        """start(rms_cf_sptr self) -> bool"""
        return _blocks_swig5.rms_cf_sptr_start(self)

    def stop(self):
        """stop(rms_cf_sptr self) -> bool"""
        return _blocks_swig5.rms_cf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(rms_cf_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig5.rms_cf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(rms_cf_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig5.rms_cf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(rms_cf_sptr self) -> int"""
        return _blocks_swig5.rms_cf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(rms_cf_sptr self, int m)"""
        return _blocks_swig5.rms_cf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(rms_cf_sptr self)"""
        return _blocks_swig5.rms_cf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(rms_cf_sptr self) -> bool"""
        return _blocks_swig5.rms_cf_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(rms_cf_sptr self, int m)"""
        return _blocks_swig5.rms_cf_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(rms_cf_sptr self) -> int"""
        return _blocks_swig5.rms_cf_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(rms_cf_sptr self, int i) -> long"""
        return _blocks_swig5.rms_cf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(rms_cf_sptr self, long max_output_buffer)
        set_max_output_buffer(rms_cf_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig5.rms_cf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(rms_cf_sptr self, int i) -> long"""
        return _blocks_swig5.rms_cf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(rms_cf_sptr self, long min_output_buffer)
        set_min_output_buffer(rms_cf_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig5.rms_cf_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(rms_cf_sptr self) -> float"""
        return _blocks_swig5.rms_cf_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(rms_cf_sptr self) -> float"""
        return _blocks_swig5.rms_cf_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(rms_cf_sptr self) -> float"""
        return _blocks_swig5.rms_cf_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(rms_cf_sptr self) -> float"""
        return _blocks_swig5.rms_cf_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(rms_cf_sptr self) -> float"""
        return _blocks_swig5.rms_cf_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(rms_cf_sptr self) -> float"""
        return _blocks_swig5.rms_cf_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(rms_cf_sptr self, int which) -> float
        pc_input_buffers_full(rms_cf_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.rms_cf_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(rms_cf_sptr self, int which) -> float
        pc_input_buffers_full_avg(rms_cf_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.rms_cf_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(rms_cf_sptr self, int which) -> float
        pc_input_buffers_full_var(rms_cf_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.rms_cf_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(rms_cf_sptr self, int which) -> float
        pc_output_buffers_full(rms_cf_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.rms_cf_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(rms_cf_sptr self, int which) -> float
        pc_output_buffers_full_avg(rms_cf_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.rms_cf_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(rms_cf_sptr self, int which) -> float
        pc_output_buffers_full_var(rms_cf_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.rms_cf_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(rms_cf_sptr self) -> float"""
        return _blocks_swig5.rms_cf_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(rms_cf_sptr self) -> float"""
        return _blocks_swig5.rms_cf_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(rms_cf_sptr self) -> float"""
        return _blocks_swig5.rms_cf_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(rms_cf_sptr self) -> float"""
        return _blocks_swig5.rms_cf_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(rms_cf_sptr self) -> float"""
        return _blocks_swig5.rms_cf_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(rms_cf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig5.rms_cf_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(rms_cf_sptr self)"""
        return _blocks_swig5.rms_cf_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(rms_cf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig5.rms_cf_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(rms_cf_sptr self) -> int"""
        return _blocks_swig5.rms_cf_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(rms_cf_sptr self) -> int"""
        return _blocks_swig5.rms_cf_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(rms_cf_sptr self, int priority) -> int"""
        return _blocks_swig5.rms_cf_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(rms_cf_sptr self) -> std::string"""
        return _blocks_swig5.rms_cf_sptr_name(self)

    def symbol_name(self):
        """symbol_name(rms_cf_sptr self) -> std::string"""
        return _blocks_swig5.rms_cf_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(rms_cf_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.rms_cf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(rms_cf_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.rms_cf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(rms_cf_sptr self) -> long"""
        return _blocks_swig5.rms_cf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(rms_cf_sptr self) -> basic_block_sptr"""
        return _blocks_swig5.rms_cf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(rms_cf_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig5.rms_cf_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(rms_cf_sptr self) -> std::string"""
        return _blocks_swig5.rms_cf_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(rms_cf_sptr self, std::string name)"""
        return _blocks_swig5.rms_cf_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(rms_cf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig5.rms_cf_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(rms_cf_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.rms_cf_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(rms_cf_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.rms_cf_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(rms_cf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig5.rms_cf_sptr_message_subscribers(self, *args, **kwargs)

rms_cf_sptr_swigregister = _blocks_swig5.rms_cf_sptr_swigregister
rms_cf_sptr_swigregister(rms_cf_sptr)

rms_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
rms_cf = rms_cf.make;

class rms_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::rms_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::rms_ff)> self) -> rms_ff_sptr
        __init__(boost::shared_ptr<(gr::blocks::rms_ff)> self, rms_ff p) -> rms_ff_sptr
        """
        this = _blocks_swig5.new_rms_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(rms_ff_sptr self) -> rms_ff"""
        return _blocks_swig5.rms_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig5.delete_rms_ff_sptr
    __del__ = lambda self : None;
    def make(self, alpha=0.0001):
        """
        make(rms_ff_sptr self, double alpha=0.0001) -> rms_ff_sptr

        RMS average power.

        Constructor Specific Documentation:

        Make an RMS calc. block.

        Args:
            alpha : gain for running average filter.
        """
        return _blocks_swig5.rms_ff_sptr_make(self, alpha)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(rms_ff_sptr self, double alpha)"""
        return _blocks_swig5.rms_ff_sptr_set_alpha(self, *args, **kwargs)

    def history(self):
        """history(rms_ff_sptr self) -> unsigned int"""
        return _blocks_swig5.rms_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(rms_ff_sptr self, int which, int delay)
        declare_sample_delay(rms_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig5.rms_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(rms_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig5.rms_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(rms_ff_sptr self) -> int"""
        return _blocks_swig5.rms_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(rms_ff_sptr self) -> double"""
        return _blocks_swig5.rms_ff_sptr_relative_rate(self)

    def start(self):
        """start(rms_ff_sptr self) -> bool"""
        return _blocks_swig5.rms_ff_sptr_start(self)

    def stop(self):
        """stop(rms_ff_sptr self) -> bool"""
        return _blocks_swig5.rms_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(rms_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig5.rms_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(rms_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig5.rms_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(rms_ff_sptr self) -> int"""
        return _blocks_swig5.rms_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(rms_ff_sptr self, int m)"""
        return _blocks_swig5.rms_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(rms_ff_sptr self)"""
        return _blocks_swig5.rms_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(rms_ff_sptr self) -> bool"""
        return _blocks_swig5.rms_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(rms_ff_sptr self, int m)"""
        return _blocks_swig5.rms_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(rms_ff_sptr self) -> int"""
        return _blocks_swig5.rms_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(rms_ff_sptr self, int i) -> long"""
        return _blocks_swig5.rms_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(rms_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(rms_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig5.rms_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(rms_ff_sptr self, int i) -> long"""
        return _blocks_swig5.rms_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(rms_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(rms_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig5.rms_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(rms_ff_sptr self) -> float"""
        return _blocks_swig5.rms_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(rms_ff_sptr self) -> float"""
        return _blocks_swig5.rms_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(rms_ff_sptr self) -> float"""
        return _blocks_swig5.rms_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(rms_ff_sptr self) -> float"""
        return _blocks_swig5.rms_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(rms_ff_sptr self) -> float"""
        return _blocks_swig5.rms_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(rms_ff_sptr self) -> float"""
        return _blocks_swig5.rms_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(rms_ff_sptr self, int which) -> float
        pc_input_buffers_full(rms_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.rms_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(rms_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(rms_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.rms_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(rms_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(rms_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.rms_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(rms_ff_sptr self, int which) -> float
        pc_output_buffers_full(rms_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.rms_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(rms_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(rms_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.rms_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(rms_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(rms_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.rms_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(rms_ff_sptr self) -> float"""
        return _blocks_swig5.rms_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(rms_ff_sptr self) -> float"""
        return _blocks_swig5.rms_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(rms_ff_sptr self) -> float"""
        return _blocks_swig5.rms_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(rms_ff_sptr self) -> float"""
        return _blocks_swig5.rms_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(rms_ff_sptr self) -> float"""
        return _blocks_swig5.rms_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(rms_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig5.rms_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(rms_ff_sptr self)"""
        return _blocks_swig5.rms_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(rms_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig5.rms_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(rms_ff_sptr self) -> int"""
        return _blocks_swig5.rms_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(rms_ff_sptr self) -> int"""
        return _blocks_swig5.rms_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(rms_ff_sptr self, int priority) -> int"""
        return _blocks_swig5.rms_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(rms_ff_sptr self) -> std::string"""
        return _blocks_swig5.rms_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(rms_ff_sptr self) -> std::string"""
        return _blocks_swig5.rms_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(rms_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.rms_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(rms_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.rms_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(rms_ff_sptr self) -> long"""
        return _blocks_swig5.rms_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(rms_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig5.rms_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(rms_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig5.rms_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(rms_ff_sptr self) -> std::string"""
        return _blocks_swig5.rms_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(rms_ff_sptr self, std::string name)"""
        return _blocks_swig5.rms_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(rms_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig5.rms_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(rms_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.rms_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(rms_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.rms_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(rms_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig5.rms_ff_sptr_message_subscribers(self, *args, **kwargs)

rms_ff_sptr_swigregister = _blocks_swig5.rms_ff_sptr_swigregister
rms_ff_sptr_swigregister(rms_ff_sptr)

rms_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
rms_ff = rms_ff.make;

class rotator_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::rotator_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::rotator_cc)> self) -> rotator_cc_sptr
        __init__(boost::shared_ptr<(gr::blocks::rotator_cc)> self, rotator_cc p) -> rotator_cc_sptr
        """
        this = _blocks_swig5.new_rotator_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(rotator_cc_sptr self) -> rotator_cc"""
        return _blocks_swig5.rotator_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig5.delete_rotator_cc_sptr
    __del__ = lambda self : None;
    def make(self, phase_inc=0.0):
        """
        make(rotator_cc_sptr self, double phase_inc=0.0) -> rotator_cc_sptr

        Complex rotator.

        Constructor Specific Documentation:

        Make an complex rotator block.

        Args:
            phase_inc : rotational velocity
        """
        return _blocks_swig5.rotator_cc_sptr_make(self, phase_inc)

    def set_phase_inc(self, *args, **kwargs):
        """set_phase_inc(rotator_cc_sptr self, double phase_inc)"""
        return _blocks_swig5.rotator_cc_sptr_set_phase_inc(self, *args, **kwargs)

    def history(self):
        """history(rotator_cc_sptr self) -> unsigned int"""
        return _blocks_swig5.rotator_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(rotator_cc_sptr self, int which, int delay)
        declare_sample_delay(rotator_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig5.rotator_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(rotator_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig5.rotator_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(rotator_cc_sptr self) -> int"""
        return _blocks_swig5.rotator_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(rotator_cc_sptr self) -> double"""
        return _blocks_swig5.rotator_cc_sptr_relative_rate(self)

    def start(self):
        """start(rotator_cc_sptr self) -> bool"""
        return _blocks_swig5.rotator_cc_sptr_start(self)

    def stop(self):
        """stop(rotator_cc_sptr self) -> bool"""
        return _blocks_swig5.rotator_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(rotator_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig5.rotator_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(rotator_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig5.rotator_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(rotator_cc_sptr self) -> int"""
        return _blocks_swig5.rotator_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(rotator_cc_sptr self, int m)"""
        return _blocks_swig5.rotator_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(rotator_cc_sptr self)"""
        return _blocks_swig5.rotator_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(rotator_cc_sptr self) -> bool"""
        return _blocks_swig5.rotator_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(rotator_cc_sptr self, int m)"""
        return _blocks_swig5.rotator_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(rotator_cc_sptr self) -> int"""
        return _blocks_swig5.rotator_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(rotator_cc_sptr self, int i) -> long"""
        return _blocks_swig5.rotator_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(rotator_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(rotator_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig5.rotator_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(rotator_cc_sptr self, int i) -> long"""
        return _blocks_swig5.rotator_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(rotator_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(rotator_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig5.rotator_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(rotator_cc_sptr self) -> float"""
        return _blocks_swig5.rotator_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(rotator_cc_sptr self) -> float"""
        return _blocks_swig5.rotator_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(rotator_cc_sptr self) -> float"""
        return _blocks_swig5.rotator_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(rotator_cc_sptr self) -> float"""
        return _blocks_swig5.rotator_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(rotator_cc_sptr self) -> float"""
        return _blocks_swig5.rotator_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(rotator_cc_sptr self) -> float"""
        return _blocks_swig5.rotator_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(rotator_cc_sptr self, int which) -> float
        pc_input_buffers_full(rotator_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.rotator_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(rotator_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(rotator_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.rotator_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(rotator_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(rotator_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.rotator_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(rotator_cc_sptr self, int which) -> float
        pc_output_buffers_full(rotator_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.rotator_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(rotator_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(rotator_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.rotator_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(rotator_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(rotator_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.rotator_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(rotator_cc_sptr self) -> float"""
        return _blocks_swig5.rotator_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(rotator_cc_sptr self) -> float"""
        return _blocks_swig5.rotator_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(rotator_cc_sptr self) -> float"""
        return _blocks_swig5.rotator_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(rotator_cc_sptr self) -> float"""
        return _blocks_swig5.rotator_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(rotator_cc_sptr self) -> float"""
        return _blocks_swig5.rotator_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(rotator_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig5.rotator_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(rotator_cc_sptr self)"""
        return _blocks_swig5.rotator_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(rotator_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig5.rotator_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(rotator_cc_sptr self) -> int"""
        return _blocks_swig5.rotator_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(rotator_cc_sptr self) -> int"""
        return _blocks_swig5.rotator_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(rotator_cc_sptr self, int priority) -> int"""
        return _blocks_swig5.rotator_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(rotator_cc_sptr self) -> std::string"""
        return _blocks_swig5.rotator_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(rotator_cc_sptr self) -> std::string"""
        return _blocks_swig5.rotator_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(rotator_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.rotator_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(rotator_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.rotator_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(rotator_cc_sptr self) -> long"""
        return _blocks_swig5.rotator_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(rotator_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig5.rotator_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(rotator_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig5.rotator_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(rotator_cc_sptr self) -> std::string"""
        return _blocks_swig5.rotator_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(rotator_cc_sptr self, std::string name)"""
        return _blocks_swig5.rotator_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(rotator_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig5.rotator_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(rotator_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.rotator_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(rotator_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.rotator_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(rotator_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig5.rotator_cc_sptr_message_subscribers(self, *args, **kwargs)

rotator_cc_sptr_swigregister = _blocks_swig5.rotator_cc_sptr_swigregister
rotator_cc_sptr_swigregister(rotator_cc_sptr)

rotator_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
rotator_cc = rotator_cc.make;

class sample_and_hold_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::sample_and_hold_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::sample_and_hold_bb)> self) -> sample_and_hold_bb_sptr
        __init__(boost::shared_ptr<(gr::blocks::sample_and_hold_bb)> self, sample_and_hold_bb p) -> sample_and_hold_bb_sptr
        """
        this = _blocks_swig5.new_sample_and_hold_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(sample_and_hold_bb_sptr self) -> sample_and_hold_bb"""
        return _blocks_swig5.sample_and_hold_bb_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig5.delete_sample_and_hold_bb_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(sample_and_hold_bb_sptr self) -> sample_and_hold_bb_sptr

        sample and hold circuit

        Samples the data stream (input stream 0) and holds the value if the control signal is 1 (intput stream 1).

        Constructor Specific Documentation:


        """
        return _blocks_swig5.sample_and_hold_bb_sptr_make(self)

    def history(self):
        """history(sample_and_hold_bb_sptr self) -> unsigned int"""
        return _blocks_swig5.sample_and_hold_bb_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sample_and_hold_bb_sptr self, int which, int delay)
        declare_sample_delay(sample_and_hold_bb_sptr self, unsigned int delay)
        """
        return _blocks_swig5.sample_and_hold_bb_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(sample_and_hold_bb_sptr self, int which) -> unsigned int"""
        return _blocks_swig5.sample_and_hold_bb_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(sample_and_hold_bb_sptr self) -> int"""
        return _blocks_swig5.sample_and_hold_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(sample_and_hold_bb_sptr self) -> double"""
        return _blocks_swig5.sample_and_hold_bb_sptr_relative_rate(self)

    def start(self):
        """start(sample_and_hold_bb_sptr self) -> bool"""
        return _blocks_swig5.sample_and_hold_bb_sptr_start(self)

    def stop(self):
        """stop(sample_and_hold_bb_sptr self) -> bool"""
        return _blocks_swig5.sample_and_hold_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(sample_and_hold_bb_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig5.sample_and_hold_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(sample_and_hold_bb_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig5.sample_and_hold_bb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(sample_and_hold_bb_sptr self) -> int"""
        return _blocks_swig5.sample_and_hold_bb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(sample_and_hold_bb_sptr self, int m)"""
        return _blocks_swig5.sample_and_hold_bb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sample_and_hold_bb_sptr self)"""
        return _blocks_swig5.sample_and_hold_bb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sample_and_hold_bb_sptr self) -> bool"""
        return _blocks_swig5.sample_and_hold_bb_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(sample_and_hold_bb_sptr self, int m)"""
        return _blocks_swig5.sample_and_hold_bb_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(sample_and_hold_bb_sptr self) -> int"""
        return _blocks_swig5.sample_and_hold_bb_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(sample_and_hold_bb_sptr self, int i) -> long"""
        return _blocks_swig5.sample_and_hold_bb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sample_and_hold_bb_sptr self, long max_output_buffer)
        set_max_output_buffer(sample_and_hold_bb_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig5.sample_and_hold_bb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(sample_and_hold_bb_sptr self, int i) -> long"""
        return _blocks_swig5.sample_and_hold_bb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sample_and_hold_bb_sptr self, long min_output_buffer)
        set_min_output_buffer(sample_and_hold_bb_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig5.sample_and_hold_bb_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(sample_and_hold_bb_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_bb_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sample_and_hold_bb_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_bb_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sample_and_hold_bb_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_bb_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(sample_and_hold_bb_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_bb_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sample_and_hold_bb_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_bb_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(sample_and_hold_bb_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_bb_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sample_and_hold_bb_sptr self, int which) -> float
        pc_input_buffers_full(sample_and_hold_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sample_and_hold_bb_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sample_and_hold_bb_sptr self, int which) -> float
        pc_input_buffers_full_avg(sample_and_hold_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sample_and_hold_bb_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sample_and_hold_bb_sptr self, int which) -> float
        pc_input_buffers_full_var(sample_and_hold_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sample_and_hold_bb_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sample_and_hold_bb_sptr self, int which) -> float
        pc_output_buffers_full(sample_and_hold_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sample_and_hold_bb_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sample_and_hold_bb_sptr self, int which) -> float
        pc_output_buffers_full_avg(sample_and_hold_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sample_and_hold_bb_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sample_and_hold_bb_sptr self, int which) -> float
        pc_output_buffers_full_var(sample_and_hold_bb_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sample_and_hold_bb_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(sample_and_hold_bb_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_bb_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(sample_and_hold_bb_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_bb_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(sample_and_hold_bb_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_bb_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(sample_and_hold_bb_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_bb_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(sample_and_hold_bb_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_bb_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(sample_and_hold_bb_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig5.sample_and_hold_bb_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(sample_and_hold_bb_sptr self)"""
        return _blocks_swig5.sample_and_hold_bb_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(sample_and_hold_bb_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig5.sample_and_hold_bb_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(sample_and_hold_bb_sptr self) -> int"""
        return _blocks_swig5.sample_and_hold_bb_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(sample_and_hold_bb_sptr self) -> int"""
        return _blocks_swig5.sample_and_hold_bb_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(sample_and_hold_bb_sptr self, int priority) -> int"""
        return _blocks_swig5.sample_and_hold_bb_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(sample_and_hold_bb_sptr self) -> std::string"""
        return _blocks_swig5.sample_and_hold_bb_sptr_name(self)

    def symbol_name(self):
        """symbol_name(sample_and_hold_bb_sptr self) -> std::string"""
        return _blocks_swig5.sample_and_hold_bb_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(sample_and_hold_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.sample_and_hold_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(sample_and_hold_bb_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.sample_and_hold_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(sample_and_hold_bb_sptr self) -> long"""
        return _blocks_swig5.sample_and_hold_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(sample_and_hold_bb_sptr self) -> basic_block_sptr"""
        return _blocks_swig5.sample_and_hold_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(sample_and_hold_bb_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig5.sample_and_hold_bb_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(sample_and_hold_bb_sptr self) -> std::string"""
        return _blocks_swig5.sample_and_hold_bb_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(sample_and_hold_bb_sptr self, std::string name)"""
        return _blocks_swig5.sample_and_hold_bb_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(sample_and_hold_bb_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig5.sample_and_hold_bb_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(sample_and_hold_bb_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.sample_and_hold_bb_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(sample_and_hold_bb_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.sample_and_hold_bb_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(sample_and_hold_bb_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig5.sample_and_hold_bb_sptr_message_subscribers(self, *args, **kwargs)

sample_and_hold_bb_sptr_swigregister = _blocks_swig5.sample_and_hold_bb_sptr_swigregister
sample_and_hold_bb_sptr_swigregister(sample_and_hold_bb_sptr)

sample_and_hold_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sample_and_hold_bb = sample_and_hold_bb.make;

class sample_and_hold_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::sample_and_hold_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::sample_and_hold_ss)> self) -> sample_and_hold_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::sample_and_hold_ss)> self, sample_and_hold_ss p) -> sample_and_hold_ss_sptr
        """
        this = _blocks_swig5.new_sample_and_hold_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(sample_and_hold_ss_sptr self) -> sample_and_hold_ss"""
        return _blocks_swig5.sample_and_hold_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig5.delete_sample_and_hold_ss_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(sample_and_hold_ss_sptr self) -> sample_and_hold_ss_sptr

        sample and hold circuit

        Samples the data stream (input stream 0) and holds the value if the control signal is 1 (intput stream 1).

        Constructor Specific Documentation:


        """
        return _blocks_swig5.sample_and_hold_ss_sptr_make(self)

    def history(self):
        """history(sample_and_hold_ss_sptr self) -> unsigned int"""
        return _blocks_swig5.sample_and_hold_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sample_and_hold_ss_sptr self, int which, int delay)
        declare_sample_delay(sample_and_hold_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig5.sample_and_hold_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(sample_and_hold_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig5.sample_and_hold_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(sample_and_hold_ss_sptr self) -> int"""
        return _blocks_swig5.sample_and_hold_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(sample_and_hold_ss_sptr self) -> double"""
        return _blocks_swig5.sample_and_hold_ss_sptr_relative_rate(self)

    def start(self):
        """start(sample_and_hold_ss_sptr self) -> bool"""
        return _blocks_swig5.sample_and_hold_ss_sptr_start(self)

    def stop(self):
        """stop(sample_and_hold_ss_sptr self) -> bool"""
        return _blocks_swig5.sample_and_hold_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(sample_and_hold_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig5.sample_and_hold_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(sample_and_hold_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig5.sample_and_hold_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(sample_and_hold_ss_sptr self) -> int"""
        return _blocks_swig5.sample_and_hold_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(sample_and_hold_ss_sptr self, int m)"""
        return _blocks_swig5.sample_and_hold_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sample_and_hold_ss_sptr self)"""
        return _blocks_swig5.sample_and_hold_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sample_and_hold_ss_sptr self) -> bool"""
        return _blocks_swig5.sample_and_hold_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(sample_and_hold_ss_sptr self, int m)"""
        return _blocks_swig5.sample_and_hold_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(sample_and_hold_ss_sptr self) -> int"""
        return _blocks_swig5.sample_and_hold_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(sample_and_hold_ss_sptr self, int i) -> long"""
        return _blocks_swig5.sample_and_hold_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sample_and_hold_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(sample_and_hold_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig5.sample_and_hold_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(sample_and_hold_ss_sptr self, int i) -> long"""
        return _blocks_swig5.sample_and_hold_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sample_and_hold_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(sample_and_hold_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig5.sample_and_hold_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(sample_and_hold_ss_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sample_and_hold_ss_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sample_and_hold_ss_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(sample_and_hold_ss_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sample_and_hold_ss_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(sample_and_hold_ss_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sample_and_hold_ss_sptr self, int which) -> float
        pc_input_buffers_full(sample_and_hold_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sample_and_hold_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sample_and_hold_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(sample_and_hold_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sample_and_hold_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sample_and_hold_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(sample_and_hold_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sample_and_hold_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sample_and_hold_ss_sptr self, int which) -> float
        pc_output_buffers_full(sample_and_hold_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sample_and_hold_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sample_and_hold_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(sample_and_hold_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sample_and_hold_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sample_and_hold_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(sample_and_hold_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sample_and_hold_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(sample_and_hold_ss_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(sample_and_hold_ss_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(sample_and_hold_ss_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(sample_and_hold_ss_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(sample_and_hold_ss_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(sample_and_hold_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig5.sample_and_hold_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(sample_and_hold_ss_sptr self)"""
        return _blocks_swig5.sample_and_hold_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(sample_and_hold_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig5.sample_and_hold_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(sample_and_hold_ss_sptr self) -> int"""
        return _blocks_swig5.sample_and_hold_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(sample_and_hold_ss_sptr self) -> int"""
        return _blocks_swig5.sample_and_hold_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(sample_and_hold_ss_sptr self, int priority) -> int"""
        return _blocks_swig5.sample_and_hold_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(sample_and_hold_ss_sptr self) -> std::string"""
        return _blocks_swig5.sample_and_hold_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(sample_and_hold_ss_sptr self) -> std::string"""
        return _blocks_swig5.sample_and_hold_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(sample_and_hold_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.sample_and_hold_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(sample_and_hold_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.sample_and_hold_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(sample_and_hold_ss_sptr self) -> long"""
        return _blocks_swig5.sample_and_hold_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(sample_and_hold_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig5.sample_and_hold_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(sample_and_hold_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig5.sample_and_hold_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(sample_and_hold_ss_sptr self) -> std::string"""
        return _blocks_swig5.sample_and_hold_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(sample_and_hold_ss_sptr self, std::string name)"""
        return _blocks_swig5.sample_and_hold_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(sample_and_hold_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig5.sample_and_hold_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(sample_and_hold_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.sample_and_hold_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(sample_and_hold_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.sample_and_hold_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(sample_and_hold_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig5.sample_and_hold_ss_sptr_message_subscribers(self, *args, **kwargs)

sample_and_hold_ss_sptr_swigregister = _blocks_swig5.sample_and_hold_ss_sptr_swigregister
sample_and_hold_ss_sptr_swigregister(sample_and_hold_ss_sptr)

sample_and_hold_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sample_and_hold_ss = sample_and_hold_ss.make;

class sample_and_hold_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::sample_and_hold_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::sample_and_hold_ii)> self) -> sample_and_hold_ii_sptr
        __init__(boost::shared_ptr<(gr::blocks::sample_and_hold_ii)> self, sample_and_hold_ii p) -> sample_and_hold_ii_sptr
        """
        this = _blocks_swig5.new_sample_and_hold_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(sample_and_hold_ii_sptr self) -> sample_and_hold_ii"""
        return _blocks_swig5.sample_and_hold_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig5.delete_sample_and_hold_ii_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(sample_and_hold_ii_sptr self) -> sample_and_hold_ii_sptr

        sample and hold circuit

        Samples the data stream (input stream 0) and holds the value if the control signal is 1 (intput stream 1).

        Constructor Specific Documentation:


        """
        return _blocks_swig5.sample_and_hold_ii_sptr_make(self)

    def history(self):
        """history(sample_and_hold_ii_sptr self) -> unsigned int"""
        return _blocks_swig5.sample_and_hold_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sample_and_hold_ii_sptr self, int which, int delay)
        declare_sample_delay(sample_and_hold_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig5.sample_and_hold_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(sample_and_hold_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig5.sample_and_hold_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(sample_and_hold_ii_sptr self) -> int"""
        return _blocks_swig5.sample_and_hold_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(sample_and_hold_ii_sptr self) -> double"""
        return _blocks_swig5.sample_and_hold_ii_sptr_relative_rate(self)

    def start(self):
        """start(sample_and_hold_ii_sptr self) -> bool"""
        return _blocks_swig5.sample_and_hold_ii_sptr_start(self)

    def stop(self):
        """stop(sample_and_hold_ii_sptr self) -> bool"""
        return _blocks_swig5.sample_and_hold_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(sample_and_hold_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig5.sample_and_hold_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(sample_and_hold_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig5.sample_and_hold_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(sample_and_hold_ii_sptr self) -> int"""
        return _blocks_swig5.sample_and_hold_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(sample_and_hold_ii_sptr self, int m)"""
        return _blocks_swig5.sample_and_hold_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sample_and_hold_ii_sptr self)"""
        return _blocks_swig5.sample_and_hold_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sample_and_hold_ii_sptr self) -> bool"""
        return _blocks_swig5.sample_and_hold_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(sample_and_hold_ii_sptr self, int m)"""
        return _blocks_swig5.sample_and_hold_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(sample_and_hold_ii_sptr self) -> int"""
        return _blocks_swig5.sample_and_hold_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(sample_and_hold_ii_sptr self, int i) -> long"""
        return _blocks_swig5.sample_and_hold_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sample_and_hold_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(sample_and_hold_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig5.sample_and_hold_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(sample_and_hold_ii_sptr self, int i) -> long"""
        return _blocks_swig5.sample_and_hold_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sample_and_hold_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(sample_and_hold_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig5.sample_and_hold_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(sample_and_hold_ii_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sample_and_hold_ii_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sample_and_hold_ii_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(sample_and_hold_ii_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sample_and_hold_ii_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(sample_and_hold_ii_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sample_and_hold_ii_sptr self, int which) -> float
        pc_input_buffers_full(sample_and_hold_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sample_and_hold_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sample_and_hold_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(sample_and_hold_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sample_and_hold_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sample_and_hold_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(sample_and_hold_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sample_and_hold_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sample_and_hold_ii_sptr self, int which) -> float
        pc_output_buffers_full(sample_and_hold_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sample_and_hold_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sample_and_hold_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(sample_and_hold_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sample_and_hold_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sample_and_hold_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(sample_and_hold_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sample_and_hold_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(sample_and_hold_ii_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(sample_and_hold_ii_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(sample_and_hold_ii_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(sample_and_hold_ii_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(sample_and_hold_ii_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(sample_and_hold_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig5.sample_and_hold_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(sample_and_hold_ii_sptr self)"""
        return _blocks_swig5.sample_and_hold_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(sample_and_hold_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig5.sample_and_hold_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(sample_and_hold_ii_sptr self) -> int"""
        return _blocks_swig5.sample_and_hold_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(sample_and_hold_ii_sptr self) -> int"""
        return _blocks_swig5.sample_and_hold_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(sample_and_hold_ii_sptr self, int priority) -> int"""
        return _blocks_swig5.sample_and_hold_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(sample_and_hold_ii_sptr self) -> std::string"""
        return _blocks_swig5.sample_and_hold_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(sample_and_hold_ii_sptr self) -> std::string"""
        return _blocks_swig5.sample_and_hold_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(sample_and_hold_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.sample_and_hold_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(sample_and_hold_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.sample_and_hold_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(sample_and_hold_ii_sptr self) -> long"""
        return _blocks_swig5.sample_and_hold_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(sample_and_hold_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig5.sample_and_hold_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(sample_and_hold_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig5.sample_and_hold_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(sample_and_hold_ii_sptr self) -> std::string"""
        return _blocks_swig5.sample_and_hold_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(sample_and_hold_ii_sptr self, std::string name)"""
        return _blocks_swig5.sample_and_hold_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(sample_and_hold_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig5.sample_and_hold_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(sample_and_hold_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.sample_and_hold_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(sample_and_hold_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.sample_and_hold_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(sample_and_hold_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig5.sample_and_hold_ii_sptr_message_subscribers(self, *args, **kwargs)

sample_and_hold_ii_sptr_swigregister = _blocks_swig5.sample_and_hold_ii_sptr_swigregister
sample_and_hold_ii_sptr_swigregister(sample_and_hold_ii_sptr)

sample_and_hold_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sample_and_hold_ii = sample_and_hold_ii.make;

class sample_and_hold_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::sample_and_hold_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::sample_and_hold_ff)> self) -> sample_and_hold_ff_sptr
        __init__(boost::shared_ptr<(gr::blocks::sample_and_hold_ff)> self, sample_and_hold_ff p) -> sample_and_hold_ff_sptr
        """
        this = _blocks_swig5.new_sample_and_hold_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(sample_and_hold_ff_sptr self) -> sample_and_hold_ff"""
        return _blocks_swig5.sample_and_hold_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig5.delete_sample_and_hold_ff_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(sample_and_hold_ff_sptr self) -> sample_and_hold_ff_sptr

        sample and hold circuit

        Samples the data stream (input stream 0) and holds the value if the control signal is 1 (intput stream 1).

        Constructor Specific Documentation:


        """
        return _blocks_swig5.sample_and_hold_ff_sptr_make(self)

    def history(self):
        """history(sample_and_hold_ff_sptr self) -> unsigned int"""
        return _blocks_swig5.sample_and_hold_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sample_and_hold_ff_sptr self, int which, int delay)
        declare_sample_delay(sample_and_hold_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig5.sample_and_hold_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(sample_and_hold_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig5.sample_and_hold_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(sample_and_hold_ff_sptr self) -> int"""
        return _blocks_swig5.sample_and_hold_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(sample_and_hold_ff_sptr self) -> double"""
        return _blocks_swig5.sample_and_hold_ff_sptr_relative_rate(self)

    def start(self):
        """start(sample_and_hold_ff_sptr self) -> bool"""
        return _blocks_swig5.sample_and_hold_ff_sptr_start(self)

    def stop(self):
        """stop(sample_and_hold_ff_sptr self) -> bool"""
        return _blocks_swig5.sample_and_hold_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(sample_and_hold_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig5.sample_and_hold_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(sample_and_hold_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig5.sample_and_hold_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(sample_and_hold_ff_sptr self) -> int"""
        return _blocks_swig5.sample_and_hold_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(sample_and_hold_ff_sptr self, int m)"""
        return _blocks_swig5.sample_and_hold_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sample_and_hold_ff_sptr self)"""
        return _blocks_swig5.sample_and_hold_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sample_and_hold_ff_sptr self) -> bool"""
        return _blocks_swig5.sample_and_hold_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(sample_and_hold_ff_sptr self, int m)"""
        return _blocks_swig5.sample_and_hold_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(sample_and_hold_ff_sptr self) -> int"""
        return _blocks_swig5.sample_and_hold_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(sample_and_hold_ff_sptr self, int i) -> long"""
        return _blocks_swig5.sample_and_hold_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sample_and_hold_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(sample_and_hold_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig5.sample_and_hold_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(sample_and_hold_ff_sptr self, int i) -> long"""
        return _blocks_swig5.sample_and_hold_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sample_and_hold_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(sample_and_hold_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig5.sample_and_hold_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(sample_and_hold_ff_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sample_and_hold_ff_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sample_and_hold_ff_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(sample_and_hold_ff_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sample_and_hold_ff_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(sample_and_hold_ff_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sample_and_hold_ff_sptr self, int which) -> float
        pc_input_buffers_full(sample_and_hold_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sample_and_hold_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sample_and_hold_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(sample_and_hold_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sample_and_hold_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sample_and_hold_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(sample_and_hold_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sample_and_hold_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sample_and_hold_ff_sptr self, int which) -> float
        pc_output_buffers_full(sample_and_hold_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sample_and_hold_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sample_and_hold_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(sample_and_hold_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sample_and_hold_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sample_and_hold_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(sample_and_hold_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sample_and_hold_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(sample_and_hold_ff_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(sample_and_hold_ff_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(sample_and_hold_ff_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(sample_and_hold_ff_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(sample_and_hold_ff_sptr self) -> float"""
        return _blocks_swig5.sample_and_hold_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(sample_and_hold_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig5.sample_and_hold_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(sample_and_hold_ff_sptr self)"""
        return _blocks_swig5.sample_and_hold_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(sample_and_hold_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig5.sample_and_hold_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(sample_and_hold_ff_sptr self) -> int"""
        return _blocks_swig5.sample_and_hold_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(sample_and_hold_ff_sptr self) -> int"""
        return _blocks_swig5.sample_and_hold_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(sample_and_hold_ff_sptr self, int priority) -> int"""
        return _blocks_swig5.sample_and_hold_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(sample_and_hold_ff_sptr self) -> std::string"""
        return _blocks_swig5.sample_and_hold_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(sample_and_hold_ff_sptr self) -> std::string"""
        return _blocks_swig5.sample_and_hold_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(sample_and_hold_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.sample_and_hold_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(sample_and_hold_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.sample_and_hold_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(sample_and_hold_ff_sptr self) -> long"""
        return _blocks_swig5.sample_and_hold_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(sample_and_hold_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig5.sample_and_hold_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(sample_and_hold_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig5.sample_and_hold_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(sample_and_hold_ff_sptr self) -> std::string"""
        return _blocks_swig5.sample_and_hold_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(sample_and_hold_ff_sptr self, std::string name)"""
        return _blocks_swig5.sample_and_hold_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(sample_and_hold_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig5.sample_and_hold_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(sample_and_hold_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.sample_and_hold_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(sample_and_hold_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.sample_and_hold_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(sample_and_hold_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig5.sample_and_hold_ff_sptr_message_subscribers(self, *args, **kwargs)

sample_and_hold_ff_sptr_swigregister = _blocks_swig5.sample_and_hold_ff_sptr_swigregister
sample_and_hold_ff_sptr_swigregister(sample_and_hold_ff_sptr)

sample_and_hold_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sample_and_hold_ff = sample_and_hold_ff.make;

class short_to_char_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::short_to_char)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::short_to_char)> self) -> short_to_char_sptr
        __init__(boost::shared_ptr<(gr::blocks::short_to_char)> self, short_to_char p) -> short_to_char_sptr
        """
        this = _blocks_swig5.new_short_to_char_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(short_to_char_sptr self) -> short_to_char"""
        return _blocks_swig5.short_to_char_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig5.delete_short_to_char_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(short_to_char_sptr self, size_t vlen=1) -> short_to_char_sptr

        Convert stream of shorts to a stream of chars.

        This block strips off the least significant byte from the short value.

        [0x00ff, 0x0ff0, 0xff00] => [0x00, 0x0f, 0xff]

        Converts  length vectors of input short samples to chars, dividing each element by 256.

        Constructor Specific Documentation:

        Build a short to char block.

        Args:
            vlen : vector length of data streams.
        """
        return _blocks_swig5.short_to_char_sptr_make(self, vlen)

    def history(self):
        """history(short_to_char_sptr self) -> unsigned int"""
        return _blocks_swig5.short_to_char_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(short_to_char_sptr self, int which, int delay)
        declare_sample_delay(short_to_char_sptr self, unsigned int delay)
        """
        return _blocks_swig5.short_to_char_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(short_to_char_sptr self, int which) -> unsigned int"""
        return _blocks_swig5.short_to_char_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(short_to_char_sptr self) -> int"""
        return _blocks_swig5.short_to_char_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(short_to_char_sptr self) -> double"""
        return _blocks_swig5.short_to_char_sptr_relative_rate(self)

    def start(self):
        """start(short_to_char_sptr self) -> bool"""
        return _blocks_swig5.short_to_char_sptr_start(self)

    def stop(self):
        """stop(short_to_char_sptr self) -> bool"""
        return _blocks_swig5.short_to_char_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(short_to_char_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig5.short_to_char_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(short_to_char_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig5.short_to_char_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(short_to_char_sptr self) -> int"""
        return _blocks_swig5.short_to_char_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(short_to_char_sptr self, int m)"""
        return _blocks_swig5.short_to_char_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(short_to_char_sptr self)"""
        return _blocks_swig5.short_to_char_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(short_to_char_sptr self) -> bool"""
        return _blocks_swig5.short_to_char_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(short_to_char_sptr self, int m)"""
        return _blocks_swig5.short_to_char_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(short_to_char_sptr self) -> int"""
        return _blocks_swig5.short_to_char_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(short_to_char_sptr self, int i) -> long"""
        return _blocks_swig5.short_to_char_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(short_to_char_sptr self, long max_output_buffer)
        set_max_output_buffer(short_to_char_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig5.short_to_char_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(short_to_char_sptr self, int i) -> long"""
        return _blocks_swig5.short_to_char_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(short_to_char_sptr self, long min_output_buffer)
        set_min_output_buffer(short_to_char_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig5.short_to_char_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(short_to_char_sptr self) -> float"""
        return _blocks_swig5.short_to_char_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(short_to_char_sptr self) -> float"""
        return _blocks_swig5.short_to_char_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(short_to_char_sptr self) -> float"""
        return _blocks_swig5.short_to_char_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(short_to_char_sptr self) -> float"""
        return _blocks_swig5.short_to_char_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(short_to_char_sptr self) -> float"""
        return _blocks_swig5.short_to_char_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(short_to_char_sptr self) -> float"""
        return _blocks_swig5.short_to_char_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(short_to_char_sptr self, int which) -> float
        pc_input_buffers_full(short_to_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.short_to_char_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(short_to_char_sptr self, int which) -> float
        pc_input_buffers_full_avg(short_to_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.short_to_char_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(short_to_char_sptr self, int which) -> float
        pc_input_buffers_full_var(short_to_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.short_to_char_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(short_to_char_sptr self, int which) -> float
        pc_output_buffers_full(short_to_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.short_to_char_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(short_to_char_sptr self, int which) -> float
        pc_output_buffers_full_avg(short_to_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.short_to_char_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(short_to_char_sptr self, int which) -> float
        pc_output_buffers_full_var(short_to_char_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.short_to_char_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(short_to_char_sptr self) -> float"""
        return _blocks_swig5.short_to_char_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(short_to_char_sptr self) -> float"""
        return _blocks_swig5.short_to_char_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(short_to_char_sptr self) -> float"""
        return _blocks_swig5.short_to_char_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(short_to_char_sptr self) -> float"""
        return _blocks_swig5.short_to_char_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(short_to_char_sptr self) -> float"""
        return _blocks_swig5.short_to_char_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(short_to_char_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig5.short_to_char_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(short_to_char_sptr self)"""
        return _blocks_swig5.short_to_char_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(short_to_char_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig5.short_to_char_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(short_to_char_sptr self) -> int"""
        return _blocks_swig5.short_to_char_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(short_to_char_sptr self) -> int"""
        return _blocks_swig5.short_to_char_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(short_to_char_sptr self, int priority) -> int"""
        return _blocks_swig5.short_to_char_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(short_to_char_sptr self) -> std::string"""
        return _blocks_swig5.short_to_char_sptr_name(self)

    def symbol_name(self):
        """symbol_name(short_to_char_sptr self) -> std::string"""
        return _blocks_swig5.short_to_char_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(short_to_char_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.short_to_char_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(short_to_char_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.short_to_char_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(short_to_char_sptr self) -> long"""
        return _blocks_swig5.short_to_char_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(short_to_char_sptr self) -> basic_block_sptr"""
        return _blocks_swig5.short_to_char_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(short_to_char_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig5.short_to_char_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(short_to_char_sptr self) -> std::string"""
        return _blocks_swig5.short_to_char_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(short_to_char_sptr self, std::string name)"""
        return _blocks_swig5.short_to_char_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(short_to_char_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig5.short_to_char_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(short_to_char_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.short_to_char_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(short_to_char_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.short_to_char_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(short_to_char_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig5.short_to_char_sptr_message_subscribers(self, *args, **kwargs)

short_to_char_sptr_swigregister = _blocks_swig5.short_to_char_sptr_swigregister
short_to_char_sptr_swigregister(short_to_char_sptr)

short_to_char_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
short_to_char = short_to_char.make;

class short_to_float_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::short_to_float)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::short_to_float)> self) -> short_to_float_sptr
        __init__(boost::shared_ptr<(gr::blocks::short_to_float)> self, short_to_float p) -> short_to_float_sptr
        """
        this = _blocks_swig5.new_short_to_float_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(short_to_float_sptr self) -> short_to_float"""
        return _blocks_swig5.short_to_float_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig5.delete_short_to_float_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1, scale=1.0):
        """
        make(short_to_float_sptr self, size_t vlen=1, float scale=1.0) -> short_to_float_sptr

        Convert stream of shorts to a stream of floats.

        Constructor Specific Documentation:

        Build a short to float block.

        Args:
            vlen : vector length of data streams.
            scale : a scalar divider to change the output signal scale.
        """
        return _blocks_swig5.short_to_float_sptr_make(self, vlen, scale)

    def scale(self):
        """
        scale(short_to_float_sptr self) -> float

        Get the scalar divider value.
        """
        return _blocks_swig5.short_to_float_sptr_scale(self)

    def set_scale(self, *args, **kwargs):
        """
        set_scale(short_to_float_sptr self, float scale)

        Set the scalar divider value.
        """
        return _blocks_swig5.short_to_float_sptr_set_scale(self, *args, **kwargs)

    def history(self):
        """history(short_to_float_sptr self) -> unsigned int"""
        return _blocks_swig5.short_to_float_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(short_to_float_sptr self, int which, int delay)
        declare_sample_delay(short_to_float_sptr self, unsigned int delay)
        """
        return _blocks_swig5.short_to_float_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(short_to_float_sptr self, int which) -> unsigned int"""
        return _blocks_swig5.short_to_float_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(short_to_float_sptr self) -> int"""
        return _blocks_swig5.short_to_float_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(short_to_float_sptr self) -> double"""
        return _blocks_swig5.short_to_float_sptr_relative_rate(self)

    def start(self):
        """start(short_to_float_sptr self) -> bool"""
        return _blocks_swig5.short_to_float_sptr_start(self)

    def stop(self):
        """stop(short_to_float_sptr self) -> bool"""
        return _blocks_swig5.short_to_float_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(short_to_float_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig5.short_to_float_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(short_to_float_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig5.short_to_float_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(short_to_float_sptr self) -> int"""
        return _blocks_swig5.short_to_float_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(short_to_float_sptr self, int m)"""
        return _blocks_swig5.short_to_float_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(short_to_float_sptr self)"""
        return _blocks_swig5.short_to_float_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(short_to_float_sptr self) -> bool"""
        return _blocks_swig5.short_to_float_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(short_to_float_sptr self, int m)"""
        return _blocks_swig5.short_to_float_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(short_to_float_sptr self) -> int"""
        return _blocks_swig5.short_to_float_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(short_to_float_sptr self, int i) -> long"""
        return _blocks_swig5.short_to_float_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(short_to_float_sptr self, long max_output_buffer)
        set_max_output_buffer(short_to_float_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig5.short_to_float_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(short_to_float_sptr self, int i) -> long"""
        return _blocks_swig5.short_to_float_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(short_to_float_sptr self, long min_output_buffer)
        set_min_output_buffer(short_to_float_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig5.short_to_float_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(short_to_float_sptr self) -> float"""
        return _blocks_swig5.short_to_float_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(short_to_float_sptr self) -> float"""
        return _blocks_swig5.short_to_float_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(short_to_float_sptr self) -> float"""
        return _blocks_swig5.short_to_float_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(short_to_float_sptr self) -> float"""
        return _blocks_swig5.short_to_float_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(short_to_float_sptr self) -> float"""
        return _blocks_swig5.short_to_float_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(short_to_float_sptr self) -> float"""
        return _blocks_swig5.short_to_float_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(short_to_float_sptr self, int which) -> float
        pc_input_buffers_full(short_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.short_to_float_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(short_to_float_sptr self, int which) -> float
        pc_input_buffers_full_avg(short_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.short_to_float_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(short_to_float_sptr self, int which) -> float
        pc_input_buffers_full_var(short_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.short_to_float_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(short_to_float_sptr self, int which) -> float
        pc_output_buffers_full(short_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.short_to_float_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(short_to_float_sptr self, int which) -> float
        pc_output_buffers_full_avg(short_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.short_to_float_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(short_to_float_sptr self, int which) -> float
        pc_output_buffers_full_var(short_to_float_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.short_to_float_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(short_to_float_sptr self) -> float"""
        return _blocks_swig5.short_to_float_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(short_to_float_sptr self) -> float"""
        return _blocks_swig5.short_to_float_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(short_to_float_sptr self) -> float"""
        return _blocks_swig5.short_to_float_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(short_to_float_sptr self) -> float"""
        return _blocks_swig5.short_to_float_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(short_to_float_sptr self) -> float"""
        return _blocks_swig5.short_to_float_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(short_to_float_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig5.short_to_float_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(short_to_float_sptr self)"""
        return _blocks_swig5.short_to_float_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(short_to_float_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig5.short_to_float_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(short_to_float_sptr self) -> int"""
        return _blocks_swig5.short_to_float_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(short_to_float_sptr self) -> int"""
        return _blocks_swig5.short_to_float_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(short_to_float_sptr self, int priority) -> int"""
        return _blocks_swig5.short_to_float_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(short_to_float_sptr self) -> std::string"""
        return _blocks_swig5.short_to_float_sptr_name(self)

    def symbol_name(self):
        """symbol_name(short_to_float_sptr self) -> std::string"""
        return _blocks_swig5.short_to_float_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(short_to_float_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.short_to_float_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(short_to_float_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.short_to_float_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(short_to_float_sptr self) -> long"""
        return _blocks_swig5.short_to_float_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(short_to_float_sptr self) -> basic_block_sptr"""
        return _blocks_swig5.short_to_float_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(short_to_float_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig5.short_to_float_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(short_to_float_sptr self) -> std::string"""
        return _blocks_swig5.short_to_float_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(short_to_float_sptr self, std::string name)"""
        return _blocks_swig5.short_to_float_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(short_to_float_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig5.short_to_float_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(short_to_float_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.short_to_float_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(short_to_float_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.short_to_float_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(short_to_float_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig5.short_to_float_sptr_message_subscribers(self, *args, **kwargs)

short_to_float_sptr_swigregister = _blocks_swig5.short_to_float_sptr_swigregister
short_to_float_sptr_swigregister(short_to_float_sptr)

short_to_float_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
short_to_float = short_to_float.make;

class socket_pdu_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::socket_pdu)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::socket_pdu)> self) -> socket_pdu_sptr
        __init__(boost::shared_ptr<(gr::blocks::socket_pdu)> self, socket_pdu p) -> socket_pdu_sptr
        """
        this = _blocks_swig5.new_socket_pdu_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(socket_pdu_sptr self) -> socket_pdu"""
        return _blocks_swig5.socket_pdu_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig5.delete_socket_pdu_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(socket_pdu_sptr self, std::string type, std::string addr, std::string port, int MTU=10000, bool tcp_no_delay=False) -> socket_pdu_sptr

        Creates socket interface and translates traffic to PDUs.

        Constructor Specific Documentation:

        Construct a SOCKET PDU interface.

        Args:
            type : "TCP_SERVER", "TCP_CLIENT", "UDP_SERVER", or "UDP_CLIENT"
            addr : network address to use
            port : network port to use
            MTU : maximum transmission unit
            tcp_no_delay : TCP No Delay option (set to True to disable Nagle algorithm)
        """
        return _blocks_swig5.socket_pdu_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(socket_pdu_sptr self) -> unsigned int"""
        return _blocks_swig5.socket_pdu_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(socket_pdu_sptr self, int which, int delay)
        declare_sample_delay(socket_pdu_sptr self, unsigned int delay)
        """
        return _blocks_swig5.socket_pdu_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(socket_pdu_sptr self, int which) -> unsigned int"""
        return _blocks_swig5.socket_pdu_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(socket_pdu_sptr self) -> int"""
        return _blocks_swig5.socket_pdu_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(socket_pdu_sptr self) -> double"""
        return _blocks_swig5.socket_pdu_sptr_relative_rate(self)

    def start(self):
        """start(socket_pdu_sptr self) -> bool"""
        return _blocks_swig5.socket_pdu_sptr_start(self)

    def stop(self):
        """stop(socket_pdu_sptr self) -> bool"""
        return _blocks_swig5.socket_pdu_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(socket_pdu_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig5.socket_pdu_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(socket_pdu_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig5.socket_pdu_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(socket_pdu_sptr self) -> int"""
        return _blocks_swig5.socket_pdu_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(socket_pdu_sptr self, int m)"""
        return _blocks_swig5.socket_pdu_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(socket_pdu_sptr self)"""
        return _blocks_swig5.socket_pdu_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(socket_pdu_sptr self) -> bool"""
        return _blocks_swig5.socket_pdu_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(socket_pdu_sptr self, int m)"""
        return _blocks_swig5.socket_pdu_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(socket_pdu_sptr self) -> int"""
        return _blocks_swig5.socket_pdu_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(socket_pdu_sptr self, int i) -> long"""
        return _blocks_swig5.socket_pdu_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(socket_pdu_sptr self, long max_output_buffer)
        set_max_output_buffer(socket_pdu_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig5.socket_pdu_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(socket_pdu_sptr self, int i) -> long"""
        return _blocks_swig5.socket_pdu_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(socket_pdu_sptr self, long min_output_buffer)
        set_min_output_buffer(socket_pdu_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig5.socket_pdu_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(socket_pdu_sptr self) -> float"""
        return _blocks_swig5.socket_pdu_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(socket_pdu_sptr self) -> float"""
        return _blocks_swig5.socket_pdu_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(socket_pdu_sptr self) -> float"""
        return _blocks_swig5.socket_pdu_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(socket_pdu_sptr self) -> float"""
        return _blocks_swig5.socket_pdu_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(socket_pdu_sptr self) -> float"""
        return _blocks_swig5.socket_pdu_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(socket_pdu_sptr self) -> float"""
        return _blocks_swig5.socket_pdu_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(socket_pdu_sptr self, int which) -> float
        pc_input_buffers_full(socket_pdu_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.socket_pdu_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(socket_pdu_sptr self, int which) -> float
        pc_input_buffers_full_avg(socket_pdu_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.socket_pdu_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(socket_pdu_sptr self, int which) -> float
        pc_input_buffers_full_var(socket_pdu_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.socket_pdu_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(socket_pdu_sptr self, int which) -> float
        pc_output_buffers_full(socket_pdu_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.socket_pdu_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(socket_pdu_sptr self, int which) -> float
        pc_output_buffers_full_avg(socket_pdu_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.socket_pdu_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(socket_pdu_sptr self, int which) -> float
        pc_output_buffers_full_var(socket_pdu_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.socket_pdu_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(socket_pdu_sptr self) -> float"""
        return _blocks_swig5.socket_pdu_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(socket_pdu_sptr self) -> float"""
        return _blocks_swig5.socket_pdu_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(socket_pdu_sptr self) -> float"""
        return _blocks_swig5.socket_pdu_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(socket_pdu_sptr self) -> float"""
        return _blocks_swig5.socket_pdu_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(socket_pdu_sptr self) -> float"""
        return _blocks_swig5.socket_pdu_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(socket_pdu_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig5.socket_pdu_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(socket_pdu_sptr self)"""
        return _blocks_swig5.socket_pdu_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(socket_pdu_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig5.socket_pdu_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(socket_pdu_sptr self) -> int"""
        return _blocks_swig5.socket_pdu_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(socket_pdu_sptr self) -> int"""
        return _blocks_swig5.socket_pdu_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(socket_pdu_sptr self, int priority) -> int"""
        return _blocks_swig5.socket_pdu_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(socket_pdu_sptr self) -> std::string"""
        return _blocks_swig5.socket_pdu_sptr_name(self)

    def symbol_name(self):
        """symbol_name(socket_pdu_sptr self) -> std::string"""
        return _blocks_swig5.socket_pdu_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(socket_pdu_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.socket_pdu_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(socket_pdu_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.socket_pdu_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(socket_pdu_sptr self) -> long"""
        return _blocks_swig5.socket_pdu_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(socket_pdu_sptr self) -> basic_block_sptr"""
        return _blocks_swig5.socket_pdu_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(socket_pdu_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig5.socket_pdu_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(socket_pdu_sptr self) -> std::string"""
        return _blocks_swig5.socket_pdu_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(socket_pdu_sptr self, std::string name)"""
        return _blocks_swig5.socket_pdu_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(socket_pdu_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig5.socket_pdu_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(socket_pdu_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.socket_pdu_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(socket_pdu_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.socket_pdu_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(socket_pdu_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig5.socket_pdu_sptr_message_subscribers(self, *args, **kwargs)

socket_pdu_sptr_swigregister = _blocks_swig5.socket_pdu_sptr_swigregister
socket_pdu_sptr_swigregister(socket_pdu_sptr)

socket_pdu_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
socket_pdu = socket_pdu.make;

class stretch_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::stretch_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::stretch_ff)> self) -> stretch_ff_sptr
        __init__(boost::shared_ptr<(gr::blocks::stretch_ff)> self, stretch_ff p) -> stretch_ff_sptr
        """
        this = _blocks_swig5.new_stretch_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(stretch_ff_sptr self) -> stretch_ff"""
        return _blocks_swig5.stretch_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig5.delete_stretch_ff_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(stretch_ff_sptr self, float lo, size_t vlen=1) -> stretch_ff_sptr

        adjust y-range of an input vector by mapping to range (max-of-input, stipulated-min). Primarily for spectral signature matching by normalizing spectrum dynamic ranges.

        Constructor Specific Documentation:

        Make a stretch block.

        Args:
            lo : Set low value for range.
            vlen : vector length of input stream.
        """
        return _blocks_swig5.stretch_ff_sptr_make(self, *args, **kwargs)

    def lo(self):
        """lo(stretch_ff_sptr self) -> float"""
        return _blocks_swig5.stretch_ff_sptr_lo(self)

    def set_lo(self, *args, **kwargs):
        """set_lo(stretch_ff_sptr self, float lo)"""
        return _blocks_swig5.stretch_ff_sptr_set_lo(self, *args, **kwargs)

    def vlen(self):
        """vlen(stretch_ff_sptr self) -> size_t"""
        return _blocks_swig5.stretch_ff_sptr_vlen(self)

    def history(self):
        """history(stretch_ff_sptr self) -> unsigned int"""
        return _blocks_swig5.stretch_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(stretch_ff_sptr self, int which, int delay)
        declare_sample_delay(stretch_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig5.stretch_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(stretch_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig5.stretch_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(stretch_ff_sptr self) -> int"""
        return _blocks_swig5.stretch_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(stretch_ff_sptr self) -> double"""
        return _blocks_swig5.stretch_ff_sptr_relative_rate(self)

    def start(self):
        """start(stretch_ff_sptr self) -> bool"""
        return _blocks_swig5.stretch_ff_sptr_start(self)

    def stop(self):
        """stop(stretch_ff_sptr self) -> bool"""
        return _blocks_swig5.stretch_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(stretch_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig5.stretch_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(stretch_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig5.stretch_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(stretch_ff_sptr self) -> int"""
        return _blocks_swig5.stretch_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(stretch_ff_sptr self, int m)"""
        return _blocks_swig5.stretch_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(stretch_ff_sptr self)"""
        return _blocks_swig5.stretch_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(stretch_ff_sptr self) -> bool"""
        return _blocks_swig5.stretch_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(stretch_ff_sptr self, int m)"""
        return _blocks_swig5.stretch_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(stretch_ff_sptr self) -> int"""
        return _blocks_swig5.stretch_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(stretch_ff_sptr self, int i) -> long"""
        return _blocks_swig5.stretch_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(stretch_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(stretch_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig5.stretch_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(stretch_ff_sptr self, int i) -> long"""
        return _blocks_swig5.stretch_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(stretch_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(stretch_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig5.stretch_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(stretch_ff_sptr self) -> float"""
        return _blocks_swig5.stretch_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(stretch_ff_sptr self) -> float"""
        return _blocks_swig5.stretch_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(stretch_ff_sptr self) -> float"""
        return _blocks_swig5.stretch_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(stretch_ff_sptr self) -> float"""
        return _blocks_swig5.stretch_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(stretch_ff_sptr self) -> float"""
        return _blocks_swig5.stretch_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(stretch_ff_sptr self) -> float"""
        return _blocks_swig5.stretch_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(stretch_ff_sptr self, int which) -> float
        pc_input_buffers_full(stretch_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.stretch_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(stretch_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(stretch_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.stretch_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(stretch_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(stretch_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.stretch_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(stretch_ff_sptr self, int which) -> float
        pc_output_buffers_full(stretch_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.stretch_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(stretch_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(stretch_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.stretch_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(stretch_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(stretch_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.stretch_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(stretch_ff_sptr self) -> float"""
        return _blocks_swig5.stretch_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(stretch_ff_sptr self) -> float"""
        return _blocks_swig5.stretch_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(stretch_ff_sptr self) -> float"""
        return _blocks_swig5.stretch_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(stretch_ff_sptr self) -> float"""
        return _blocks_swig5.stretch_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(stretch_ff_sptr self) -> float"""
        return _blocks_swig5.stretch_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(stretch_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig5.stretch_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(stretch_ff_sptr self)"""
        return _blocks_swig5.stretch_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(stretch_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig5.stretch_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(stretch_ff_sptr self) -> int"""
        return _blocks_swig5.stretch_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(stretch_ff_sptr self) -> int"""
        return _blocks_swig5.stretch_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(stretch_ff_sptr self, int priority) -> int"""
        return _blocks_swig5.stretch_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(stretch_ff_sptr self) -> std::string"""
        return _blocks_swig5.stretch_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(stretch_ff_sptr self) -> std::string"""
        return _blocks_swig5.stretch_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(stretch_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.stretch_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(stretch_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.stretch_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(stretch_ff_sptr self) -> long"""
        return _blocks_swig5.stretch_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(stretch_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig5.stretch_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(stretch_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig5.stretch_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(stretch_ff_sptr self) -> std::string"""
        return _blocks_swig5.stretch_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(stretch_ff_sptr self, std::string name)"""
        return _blocks_swig5.stretch_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(stretch_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig5.stretch_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(stretch_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.stretch_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(stretch_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.stretch_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(stretch_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig5.stretch_ff_sptr_message_subscribers(self, *args, **kwargs)

stretch_ff_sptr_swigregister = _blocks_swig5.stretch_ff_sptr_swigregister
stretch_ff_sptr_swigregister(stretch_ff_sptr)

stretch_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
stretch_ff = stretch_ff.make;

class sub_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::sub_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::sub_ff)> self) -> sub_ff_sptr
        __init__(boost::shared_ptr<(gr::blocks::sub_ff)> self, sub_ff p) -> sub_ff_sptr
        """
        this = _blocks_swig5.new_sub_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(sub_ff_sptr self) -> sub_ff"""
        return _blocks_swig5.sub_ff_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig5.delete_sub_ff_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(sub_ff_sptr self, size_t vlen=1) -> sub_ff_sptr

        output = input_0 - input_1 - ...)

        Subtract across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig5.sub_ff_sptr_make(self, vlen)

    def history(self):
        """history(sub_ff_sptr self) -> unsigned int"""
        return _blocks_swig5.sub_ff_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sub_ff_sptr self, int which, int delay)
        declare_sample_delay(sub_ff_sptr self, unsigned int delay)
        """
        return _blocks_swig5.sub_ff_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(sub_ff_sptr self, int which) -> unsigned int"""
        return _blocks_swig5.sub_ff_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(sub_ff_sptr self) -> int"""
        return _blocks_swig5.sub_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(sub_ff_sptr self) -> double"""
        return _blocks_swig5.sub_ff_sptr_relative_rate(self)

    def start(self):
        """start(sub_ff_sptr self) -> bool"""
        return _blocks_swig5.sub_ff_sptr_start(self)

    def stop(self):
        """stop(sub_ff_sptr self) -> bool"""
        return _blocks_swig5.sub_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(sub_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig5.sub_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(sub_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig5.sub_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(sub_ff_sptr self) -> int"""
        return _blocks_swig5.sub_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(sub_ff_sptr self, int m)"""
        return _blocks_swig5.sub_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sub_ff_sptr self)"""
        return _blocks_swig5.sub_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sub_ff_sptr self) -> bool"""
        return _blocks_swig5.sub_ff_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(sub_ff_sptr self, int m)"""
        return _blocks_swig5.sub_ff_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(sub_ff_sptr self) -> int"""
        return _blocks_swig5.sub_ff_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(sub_ff_sptr self, int i) -> long"""
        return _blocks_swig5.sub_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sub_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(sub_ff_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig5.sub_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(sub_ff_sptr self, int i) -> long"""
        return _blocks_swig5.sub_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sub_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(sub_ff_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig5.sub_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(sub_ff_sptr self) -> float"""
        return _blocks_swig5.sub_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sub_ff_sptr self) -> float"""
        return _blocks_swig5.sub_ff_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sub_ff_sptr self) -> float"""
        return _blocks_swig5.sub_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(sub_ff_sptr self) -> float"""
        return _blocks_swig5.sub_ff_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sub_ff_sptr self) -> float"""
        return _blocks_swig5.sub_ff_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(sub_ff_sptr self) -> float"""
        return _blocks_swig5.sub_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sub_ff_sptr self, int which) -> float
        pc_input_buffers_full(sub_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sub_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sub_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(sub_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sub_ff_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sub_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(sub_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sub_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sub_ff_sptr self, int which) -> float
        pc_output_buffers_full(sub_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sub_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sub_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(sub_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sub_ff_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sub_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(sub_ff_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sub_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(sub_ff_sptr self) -> float"""
        return _blocks_swig5.sub_ff_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(sub_ff_sptr self) -> float"""
        return _blocks_swig5.sub_ff_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(sub_ff_sptr self) -> float"""
        return _blocks_swig5.sub_ff_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(sub_ff_sptr self) -> float"""
        return _blocks_swig5.sub_ff_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(sub_ff_sptr self) -> float"""
        return _blocks_swig5.sub_ff_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(sub_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig5.sub_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(sub_ff_sptr self)"""
        return _blocks_swig5.sub_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(sub_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig5.sub_ff_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(sub_ff_sptr self) -> int"""
        return _blocks_swig5.sub_ff_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(sub_ff_sptr self) -> int"""
        return _blocks_swig5.sub_ff_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(sub_ff_sptr self, int priority) -> int"""
        return _blocks_swig5.sub_ff_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(sub_ff_sptr self) -> std::string"""
        return _blocks_swig5.sub_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(sub_ff_sptr self) -> std::string"""
        return _blocks_swig5.sub_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(sub_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.sub_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(sub_ff_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.sub_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(sub_ff_sptr self) -> long"""
        return _blocks_swig5.sub_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(sub_ff_sptr self) -> basic_block_sptr"""
        return _blocks_swig5.sub_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(sub_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig5.sub_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(sub_ff_sptr self) -> std::string"""
        return _blocks_swig5.sub_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(sub_ff_sptr self, std::string name)"""
        return _blocks_swig5.sub_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(sub_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig5.sub_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(sub_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.sub_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(sub_ff_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.sub_ff_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(sub_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig5.sub_ff_sptr_message_subscribers(self, *args, **kwargs)

sub_ff_sptr_swigregister = _blocks_swig5.sub_ff_sptr_swigregister
sub_ff_sptr_swigregister(sub_ff_sptr)

sub_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sub_ff = sub_ff.make;

class sub_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::sub_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::sub_ss)> self) -> sub_ss_sptr
        __init__(boost::shared_ptr<(gr::blocks::sub_ss)> self, sub_ss p) -> sub_ss_sptr
        """
        this = _blocks_swig5.new_sub_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(sub_ss_sptr self) -> sub_ss"""
        return _blocks_swig5.sub_ss_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig5.delete_sub_ss_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(sub_ss_sptr self, size_t vlen=1) -> sub_ss_sptr

        output = input_0 - input_1 - ...)

        Subtract across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig5.sub_ss_sptr_make(self, vlen)

    def history(self):
        """history(sub_ss_sptr self) -> unsigned int"""
        return _blocks_swig5.sub_ss_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sub_ss_sptr self, int which, int delay)
        declare_sample_delay(sub_ss_sptr self, unsigned int delay)
        """
        return _blocks_swig5.sub_ss_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(sub_ss_sptr self, int which) -> unsigned int"""
        return _blocks_swig5.sub_ss_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(sub_ss_sptr self) -> int"""
        return _blocks_swig5.sub_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(sub_ss_sptr self) -> double"""
        return _blocks_swig5.sub_ss_sptr_relative_rate(self)

    def start(self):
        """start(sub_ss_sptr self) -> bool"""
        return _blocks_swig5.sub_ss_sptr_start(self)

    def stop(self):
        """stop(sub_ss_sptr self) -> bool"""
        return _blocks_swig5.sub_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(sub_ss_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig5.sub_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(sub_ss_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig5.sub_ss_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(sub_ss_sptr self) -> int"""
        return _blocks_swig5.sub_ss_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(sub_ss_sptr self, int m)"""
        return _blocks_swig5.sub_ss_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sub_ss_sptr self)"""
        return _blocks_swig5.sub_ss_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sub_ss_sptr self) -> bool"""
        return _blocks_swig5.sub_ss_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(sub_ss_sptr self, int m)"""
        return _blocks_swig5.sub_ss_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(sub_ss_sptr self) -> int"""
        return _blocks_swig5.sub_ss_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(sub_ss_sptr self, int i) -> long"""
        return _blocks_swig5.sub_ss_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sub_ss_sptr self, long max_output_buffer)
        set_max_output_buffer(sub_ss_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig5.sub_ss_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(sub_ss_sptr self, int i) -> long"""
        return _blocks_swig5.sub_ss_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sub_ss_sptr self, long min_output_buffer)
        set_min_output_buffer(sub_ss_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig5.sub_ss_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(sub_ss_sptr self) -> float"""
        return _blocks_swig5.sub_ss_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sub_ss_sptr self) -> float"""
        return _blocks_swig5.sub_ss_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sub_ss_sptr self) -> float"""
        return _blocks_swig5.sub_ss_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(sub_ss_sptr self) -> float"""
        return _blocks_swig5.sub_ss_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sub_ss_sptr self) -> float"""
        return _blocks_swig5.sub_ss_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(sub_ss_sptr self) -> float"""
        return _blocks_swig5.sub_ss_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sub_ss_sptr self, int which) -> float
        pc_input_buffers_full(sub_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sub_ss_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sub_ss_sptr self, int which) -> float
        pc_input_buffers_full_avg(sub_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sub_ss_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sub_ss_sptr self, int which) -> float
        pc_input_buffers_full_var(sub_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sub_ss_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sub_ss_sptr self, int which) -> float
        pc_output_buffers_full(sub_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sub_ss_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sub_ss_sptr self, int which) -> float
        pc_output_buffers_full_avg(sub_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sub_ss_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sub_ss_sptr self, int which) -> float
        pc_output_buffers_full_var(sub_ss_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sub_ss_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(sub_ss_sptr self) -> float"""
        return _blocks_swig5.sub_ss_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(sub_ss_sptr self) -> float"""
        return _blocks_swig5.sub_ss_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(sub_ss_sptr self) -> float"""
        return _blocks_swig5.sub_ss_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(sub_ss_sptr self) -> float"""
        return _blocks_swig5.sub_ss_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(sub_ss_sptr self) -> float"""
        return _blocks_swig5.sub_ss_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(sub_ss_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig5.sub_ss_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(sub_ss_sptr self)"""
        return _blocks_swig5.sub_ss_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(sub_ss_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig5.sub_ss_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(sub_ss_sptr self) -> int"""
        return _blocks_swig5.sub_ss_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(sub_ss_sptr self) -> int"""
        return _blocks_swig5.sub_ss_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(sub_ss_sptr self, int priority) -> int"""
        return _blocks_swig5.sub_ss_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(sub_ss_sptr self) -> std::string"""
        return _blocks_swig5.sub_ss_sptr_name(self)

    def symbol_name(self):
        """symbol_name(sub_ss_sptr self) -> std::string"""
        return _blocks_swig5.sub_ss_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(sub_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.sub_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(sub_ss_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.sub_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(sub_ss_sptr self) -> long"""
        return _blocks_swig5.sub_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(sub_ss_sptr self) -> basic_block_sptr"""
        return _blocks_swig5.sub_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(sub_ss_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig5.sub_ss_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(sub_ss_sptr self) -> std::string"""
        return _blocks_swig5.sub_ss_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(sub_ss_sptr self, std::string name)"""
        return _blocks_swig5.sub_ss_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(sub_ss_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig5.sub_ss_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(sub_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.sub_ss_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(sub_ss_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.sub_ss_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(sub_ss_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig5.sub_ss_sptr_message_subscribers(self, *args, **kwargs)

sub_ss_sptr_swigregister = _blocks_swig5.sub_ss_sptr_swigregister
sub_ss_sptr_swigregister(sub_ss_sptr)

sub_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sub_ss = sub_ss.make;

class sub_ii_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::sub_ii)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::sub_ii)> self) -> sub_ii_sptr
        __init__(boost::shared_ptr<(gr::blocks::sub_ii)> self, sub_ii p) -> sub_ii_sptr
        """
        this = _blocks_swig5.new_sub_ii_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(sub_ii_sptr self) -> sub_ii"""
        return _blocks_swig5.sub_ii_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig5.delete_sub_ii_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(sub_ii_sptr self, size_t vlen=1) -> sub_ii_sptr

        output = input_0 - input_1 - ...)

        Subtract across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig5.sub_ii_sptr_make(self, vlen)

    def history(self):
        """history(sub_ii_sptr self) -> unsigned int"""
        return _blocks_swig5.sub_ii_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sub_ii_sptr self, int which, int delay)
        declare_sample_delay(sub_ii_sptr self, unsigned int delay)
        """
        return _blocks_swig5.sub_ii_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(sub_ii_sptr self, int which) -> unsigned int"""
        return _blocks_swig5.sub_ii_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(sub_ii_sptr self) -> int"""
        return _blocks_swig5.sub_ii_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(sub_ii_sptr self) -> double"""
        return _blocks_swig5.sub_ii_sptr_relative_rate(self)

    def start(self):
        """start(sub_ii_sptr self) -> bool"""
        return _blocks_swig5.sub_ii_sptr_start(self)

    def stop(self):
        """stop(sub_ii_sptr self) -> bool"""
        return _blocks_swig5.sub_ii_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(sub_ii_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig5.sub_ii_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(sub_ii_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig5.sub_ii_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(sub_ii_sptr self) -> int"""
        return _blocks_swig5.sub_ii_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(sub_ii_sptr self, int m)"""
        return _blocks_swig5.sub_ii_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sub_ii_sptr self)"""
        return _blocks_swig5.sub_ii_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sub_ii_sptr self) -> bool"""
        return _blocks_swig5.sub_ii_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(sub_ii_sptr self, int m)"""
        return _blocks_swig5.sub_ii_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(sub_ii_sptr self) -> int"""
        return _blocks_swig5.sub_ii_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(sub_ii_sptr self, int i) -> long"""
        return _blocks_swig5.sub_ii_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sub_ii_sptr self, long max_output_buffer)
        set_max_output_buffer(sub_ii_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig5.sub_ii_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(sub_ii_sptr self, int i) -> long"""
        return _blocks_swig5.sub_ii_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sub_ii_sptr self, long min_output_buffer)
        set_min_output_buffer(sub_ii_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig5.sub_ii_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(sub_ii_sptr self) -> float"""
        return _blocks_swig5.sub_ii_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sub_ii_sptr self) -> float"""
        return _blocks_swig5.sub_ii_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sub_ii_sptr self) -> float"""
        return _blocks_swig5.sub_ii_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(sub_ii_sptr self) -> float"""
        return _blocks_swig5.sub_ii_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sub_ii_sptr self) -> float"""
        return _blocks_swig5.sub_ii_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(sub_ii_sptr self) -> float"""
        return _blocks_swig5.sub_ii_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sub_ii_sptr self, int which) -> float
        pc_input_buffers_full(sub_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sub_ii_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sub_ii_sptr self, int which) -> float
        pc_input_buffers_full_avg(sub_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sub_ii_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sub_ii_sptr self, int which) -> float
        pc_input_buffers_full_var(sub_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sub_ii_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sub_ii_sptr self, int which) -> float
        pc_output_buffers_full(sub_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sub_ii_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sub_ii_sptr self, int which) -> float
        pc_output_buffers_full_avg(sub_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sub_ii_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sub_ii_sptr self, int which) -> float
        pc_output_buffers_full_var(sub_ii_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sub_ii_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(sub_ii_sptr self) -> float"""
        return _blocks_swig5.sub_ii_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(sub_ii_sptr self) -> float"""
        return _blocks_swig5.sub_ii_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(sub_ii_sptr self) -> float"""
        return _blocks_swig5.sub_ii_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(sub_ii_sptr self) -> float"""
        return _blocks_swig5.sub_ii_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(sub_ii_sptr self) -> float"""
        return _blocks_swig5.sub_ii_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(sub_ii_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig5.sub_ii_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(sub_ii_sptr self)"""
        return _blocks_swig5.sub_ii_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(sub_ii_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig5.sub_ii_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(sub_ii_sptr self) -> int"""
        return _blocks_swig5.sub_ii_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(sub_ii_sptr self) -> int"""
        return _blocks_swig5.sub_ii_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(sub_ii_sptr self, int priority) -> int"""
        return _blocks_swig5.sub_ii_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(sub_ii_sptr self) -> std::string"""
        return _blocks_swig5.sub_ii_sptr_name(self)

    def symbol_name(self):
        """symbol_name(sub_ii_sptr self) -> std::string"""
        return _blocks_swig5.sub_ii_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(sub_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.sub_ii_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(sub_ii_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.sub_ii_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(sub_ii_sptr self) -> long"""
        return _blocks_swig5.sub_ii_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(sub_ii_sptr self) -> basic_block_sptr"""
        return _blocks_swig5.sub_ii_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(sub_ii_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig5.sub_ii_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(sub_ii_sptr self) -> std::string"""
        return _blocks_swig5.sub_ii_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(sub_ii_sptr self, std::string name)"""
        return _blocks_swig5.sub_ii_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(sub_ii_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig5.sub_ii_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(sub_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.sub_ii_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(sub_ii_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.sub_ii_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(sub_ii_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig5.sub_ii_sptr_message_subscribers(self, *args, **kwargs)

sub_ii_sptr_swigregister = _blocks_swig5.sub_ii_sptr_swigregister
sub_ii_sptr_swigregister(sub_ii_sptr)

sub_ii_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sub_ii = sub_ii.make;

class sub_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::blocks::sub_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::blocks::sub_cc)> self) -> sub_cc_sptr
        __init__(boost::shared_ptr<(gr::blocks::sub_cc)> self, sub_cc p) -> sub_cc_sptr
        """
        this = _blocks_swig5.new_sub_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(sub_cc_sptr self) -> sub_cc"""
        return _blocks_swig5.sub_cc_sptr___deref__(self)

    __swig_destroy__ = _blocks_swig5.delete_sub_cc_sptr
    __del__ = lambda self : None;
    def make(self, vlen=1):
        """
        make(sub_cc_sptr self, size_t vlen=1) -> sub_cc_sptr

        output = input_0 - input_1 - ...)

        Subtract across all input streams.

        Constructor Specific Documentation:



        Args:
            vlen : 
        """
        return _blocks_swig5.sub_cc_sptr_make(self, vlen)

    def history(self):
        """history(sub_cc_sptr self) -> unsigned int"""
        return _blocks_swig5.sub_cc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(sub_cc_sptr self, int which, int delay)
        declare_sample_delay(sub_cc_sptr self, unsigned int delay)
        """
        return _blocks_swig5.sub_cc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(sub_cc_sptr self, int which) -> unsigned int"""
        return _blocks_swig5.sub_cc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(sub_cc_sptr self) -> int"""
        return _blocks_swig5.sub_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(sub_cc_sptr self) -> double"""
        return _blocks_swig5.sub_cc_sptr_relative_rate(self)

    def start(self):
        """start(sub_cc_sptr self) -> bool"""
        return _blocks_swig5.sub_cc_sptr_start(self)

    def stop(self):
        """stop(sub_cc_sptr self) -> bool"""
        return _blocks_swig5.sub_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(sub_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _blocks_swig5.sub_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(sub_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _blocks_swig5.sub_cc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(sub_cc_sptr self) -> int"""
        return _blocks_swig5.sub_cc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(sub_cc_sptr self, int m)"""
        return _blocks_swig5.sub_cc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(sub_cc_sptr self)"""
        return _blocks_swig5.sub_cc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(sub_cc_sptr self) -> bool"""
        return _blocks_swig5.sub_cc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(sub_cc_sptr self, int m)"""
        return _blocks_swig5.sub_cc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(sub_cc_sptr self) -> int"""
        return _blocks_swig5.sub_cc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(sub_cc_sptr self, int i) -> long"""
        return _blocks_swig5.sub_cc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(sub_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(sub_cc_sptr self, int port, long max_output_buffer)
        """
        return _blocks_swig5.sub_cc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(sub_cc_sptr self, int i) -> long"""
        return _blocks_swig5.sub_cc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(sub_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(sub_cc_sptr self, int port, long min_output_buffer)
        """
        return _blocks_swig5.sub_cc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(sub_cc_sptr self) -> float"""
        return _blocks_swig5.sub_cc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(sub_cc_sptr self) -> float"""
        return _blocks_swig5.sub_cc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(sub_cc_sptr self) -> float"""
        return _blocks_swig5.sub_cc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(sub_cc_sptr self) -> float"""
        return _blocks_swig5.sub_cc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(sub_cc_sptr self) -> float"""
        return _blocks_swig5.sub_cc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(sub_cc_sptr self) -> float"""
        return _blocks_swig5.sub_cc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(sub_cc_sptr self, int which) -> float
        pc_input_buffers_full(sub_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sub_cc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(sub_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(sub_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sub_cc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(sub_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(sub_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sub_cc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(sub_cc_sptr self, int which) -> float
        pc_output_buffers_full(sub_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sub_cc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(sub_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(sub_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sub_cc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(sub_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(sub_cc_sptr self) -> pmt_vector_float
        """
        return _blocks_swig5.sub_cc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(sub_cc_sptr self) -> float"""
        return _blocks_swig5.sub_cc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(sub_cc_sptr self) -> float"""
        return _blocks_swig5.sub_cc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(sub_cc_sptr self) -> float"""
        return _blocks_swig5.sub_cc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(sub_cc_sptr self) -> float"""
        return _blocks_swig5.sub_cc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(sub_cc_sptr self) -> float"""
        return _blocks_swig5.sub_cc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(sub_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _blocks_swig5.sub_cc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(sub_cc_sptr self)"""
        return _blocks_swig5.sub_cc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(sub_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _blocks_swig5.sub_cc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(sub_cc_sptr self) -> int"""
        return _blocks_swig5.sub_cc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(sub_cc_sptr self) -> int"""
        return _blocks_swig5.sub_cc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(sub_cc_sptr self, int priority) -> int"""
        return _blocks_swig5.sub_cc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(sub_cc_sptr self) -> std::string"""
        return _blocks_swig5.sub_cc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(sub_cc_sptr self) -> std::string"""
        return _blocks_swig5.sub_cc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(sub_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.sub_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(sub_cc_sptr self) -> io_signature_sptr"""
        return _blocks_swig5.sub_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(sub_cc_sptr self) -> long"""
        return _blocks_swig5.sub_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(sub_cc_sptr self) -> basic_block_sptr"""
        return _blocks_swig5.sub_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(sub_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _blocks_swig5.sub_cc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(sub_cc_sptr self) -> std::string"""
        return _blocks_swig5.sub_cc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(sub_cc_sptr self, std::string name)"""
        return _blocks_swig5.sub_cc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(sub_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _blocks_swig5.sub_cc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(sub_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.sub_cc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(sub_cc_sptr self) -> swig_int_ptr"""
        return _blocks_swig5.sub_cc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(sub_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _blocks_swig5.sub_cc_sptr_message_subscribers(self, *args, **kwargs)

sub_cc_sptr_swigregister = _blocks_swig5.sub_cc_sptr_swigregister
sub_cc_sptr_swigregister(sub_cc_sptr)

sub_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sub_cc = sub_cc.make;



